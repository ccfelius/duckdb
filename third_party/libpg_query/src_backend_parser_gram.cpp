/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 242 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar_out.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_LAMBDA_ARROW = 15,              /* LAMBDA_ARROW  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LESS_EQUALS = 17,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 18,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 19,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 20,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 21,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 22,                    /* ACCESS  */
  YYSYMBOL_ACTION = 23,                    /* ACTION  */
  YYSYMBOL_ADD_P = 24,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 25,                     /* ADMIN  */
  YYSYMBOL_AFTER = 26,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 27,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 28,                       /* ALL  */
  YYSYMBOL_ALSO = 29,                      /* ALSO  */
  YYSYMBOL_ALTER = 30,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 31,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 32,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 33,                   /* ANALYZE  */
  YYSYMBOL_AND = 34,                       /* AND  */
  YYSYMBOL_ANY = 35,                       /* ANY  */
  YYSYMBOL_ARRAY = 36,                     /* ARRAY  */
  YYSYMBOL_AS = 37,                        /* AS  */
  YYSYMBOL_ASC_P = 38,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 39,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 40,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 41,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 42,                        /* AT  */
  YYSYMBOL_ATTACH = 43,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 44,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 45,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 46,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 47,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 48,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 49,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 50,                    /* BIGINT  */
  YYSYMBOL_BINARY = 51,                    /* BINARY  */
  YYSYMBOL_BIT = 52,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 53,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 54,                      /* BOTH  */
  YYSYMBOL_BY = 55,                        /* BY  */
  YYSYMBOL_CACHE = 56,                     /* CACHE  */
  YYSYMBOL_CALL_P = 57,                    /* CALL_P  */
  YYSYMBOL_CALLED = 58,                    /* CALLED  */
  YYSYMBOL_CASCADE = 59,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 60,                  /* CASCADED  */
  YYSYMBOL_CASE = 61,                      /* CASE  */
  YYSYMBOL_CAST = 62,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 63,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 64,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 65,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 66,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 67,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 68,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 69,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 70,                     /* CLASS  */
  YYSYMBOL_CLOSE = 71,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 72,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 73,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 74,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 75,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 76,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 77,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 78,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 79,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 80,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 81,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 82,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 83,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 84,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 85,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 86,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 87,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 88,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 89,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 90,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 91,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 92,                      /* COPY  */
  YYSYMBOL_COST = 93,                      /* COST  */
  YYSYMBOL_CREATE_P = 94,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 95,                     /* CROSS  */
  YYSYMBOL_CSV = 96,                       /* CSV  */
  YYSYMBOL_CUBE = 97,                      /* CUBE  */
  YYSYMBOL_CURRENT_P = 98,                 /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 99,           /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 100,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 101,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 102,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 103,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 104,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 105,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 106,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 107,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 108,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 109,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 110,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 111,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 112,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 113,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 114,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 115,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 116,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 117,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 118,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 119,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 120,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 121,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 122,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 123,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 124,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 125,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 126,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 127,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 128,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 129,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 130,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 131,                 /* DISTINCT  */
  YYSYMBOL_DO = 132,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 133,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 134,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 135,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 136,                     /* DROP  */
  YYSYMBOL_EACH = 137,                     /* EACH  */
  YYSYMBOL_ELSE = 138,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 139,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 140,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 141,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 142,                    /* END_P  */
  YYSYMBOL_ENUM_P = 143,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 144,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 145,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 146,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 147,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 148,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 149,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 150,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 151,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 152,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 153,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 154,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 155,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 156,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 157,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 158,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 159,                   /* FAMILY  */
  YYSYMBOL_FETCH = 160,                    /* FETCH  */
  YYSYMBOL_FILTER = 161,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 162,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 163,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 164,                /* FOLLOWING  */
  YYSYMBOL_FOR = 165,                      /* FOR  */
  YYSYMBOL_FORCE = 166,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 167,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 168,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 169,                   /* FREEZE  */
  YYSYMBOL_FROM = 170,                     /* FROM  */
  YYSYMBOL_FULL = 171,                     /* FULL  */
  YYSYMBOL_FUNCTION = 172,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 173,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 174,                /* GENERATED  */
  YYSYMBOL_GLOB = 175,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 176,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 177,                    /* GRANT  */
  YYSYMBOL_GRANTED = 178,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 179,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 180,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 181,              /* GROUPING_ID  */
  YYSYMBOL_HANDLER = 182,                  /* HANDLER  */
  YYSYMBOL_HAVING = 183,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 184,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 185,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 186,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 187,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 188,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 189,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 190,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 191,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 192,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 193,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 194,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 195,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 196,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 197,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 198,                /* INCREMENT  */
  YYSYMBOL_INDEX = 199,                    /* INDEX  */
  YYSYMBOL_INDEXES = 200,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 201,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 202,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 203,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 204,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 205,                  /* INNER_P  */
  YYSYMBOL_INOUT = 206,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 207,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 208,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 209,                   /* INSERT  */
  YYSYMBOL_INSTALL = 210,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 211,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 212,                    /* INT_P  */
  YYSYMBOL_INTEGER = 213,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 214,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 215,                 /* INTERVAL  */
  YYSYMBOL_INTO = 216,                     /* INTO  */
  YYSYMBOL_INVOKER = 217,                  /* INVOKER  */
  YYSYMBOL_IS = 218,                       /* IS  */
  YYSYMBOL_ISNULL = 219,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 220,                /* ISOLATION  */
  YYSYMBOL_JOIN = 221,                     /* JOIN  */
  YYSYMBOL_JSON = 222,                     /* JSON  */
  YYSYMBOL_KEY = 223,                      /* KEY  */
  YYSYMBOL_LABEL = 224,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 225,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 226,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 227,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 228,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 229,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 230,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 231,                     /* LEFT  */
  YYSYMBOL_LEVEL = 232,                    /* LEVEL  */
  YYSYMBOL_LIKE = 233,                     /* LIKE  */
  YYSYMBOL_LIMIT = 234,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 235,                   /* LISTEN  */
  YYSYMBOL_LOAD = 236,                     /* LOAD  */
  YYSYMBOL_LOCAL = 237,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 238,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 239,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 240,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 241,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 242,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 243,                   /* LOGGED  */
  YYSYMBOL_MACRO = 244,                    /* MACRO  */
  YYSYMBOL_MAP = 245,                      /* MAP  */
  YYSYMBOL_MAPPING = 246,                  /* MAPPING  */
  YYSYMBOL_MATCH = 247,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 248,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 249,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 250,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 251,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 252,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 253,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 254,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 255,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 256,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 257,                 /* MINVALUE  */
  YYSYMBOL_MODE = 258,                     /* MODE  */
  YYSYMBOL_MONTH_P = 259,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 260,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 261,                     /* MOVE  */
  YYSYMBOL_NAME_P = 262,                   /* NAME_P  */
  YYSYMBOL_NAMES = 263,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 264,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 265,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 266,                    /* NCHAR  */
  YYSYMBOL_NEW = 267,                      /* NEW  */
  YYSYMBOL_NEXT = 268,                     /* NEXT  */
  YYSYMBOL_NO = 269,                       /* NO  */
  YYSYMBOL_NONE = 270,                     /* NONE  */
  YYSYMBOL_NOT = 271,                      /* NOT  */
  YYSYMBOL_NOTHING = 272,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 273,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 274,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 275,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 276,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 277,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 278,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 279,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 280,                 /* OBJECT_P  */
  YYSYMBOL_OF = 281,                       /* OF  */
  YYSYMBOL_OFF = 282,                      /* OFF  */
  YYSYMBOL_OFFSET = 283,                   /* OFFSET  */
  YYSYMBOL_OIDS = 284,                     /* OIDS  */
  YYSYMBOL_OLD = 285,                      /* OLD  */
  YYSYMBOL_ON = 286,                       /* ON  */
  YYSYMBOL_ONLY = 287,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 288,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 289,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 290,                  /* OPTIONS  */
  YYSYMBOL_OR = 291,                       /* OR  */
  YYSYMBOL_ORDER = 292,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 293,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 294,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 295,                  /* OUTER_P  */
  YYSYMBOL_OVER = 296,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 297,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 298,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 299,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 300,                    /* OWNED  */
  YYSYMBOL_OWNER = 301,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 302,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 303,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 304,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 305,                /* PARTITION  */
  YYSYMBOL_PASSING = 306,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 307,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 308,                  /* PERCENT  */
  YYSYMBOL_PLACING = 309,                  /* PLACING  */
  YYSYMBOL_PLANS = 310,                    /* PLANS  */
  YYSYMBOL_POLICY = 311,                   /* POLICY  */
  YYSYMBOL_POSITION = 312,                 /* POSITION  */
  YYSYMBOL_PRAGMA_P = 313,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 314,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 315,                /* PRECISION  */
  YYSYMBOL_PREPARE = 316,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 317,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 318,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 319,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 320,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 321,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 322,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 323,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 324,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 325,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 326,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 327,                    /* QUOTE  */
  YYSYMBOL_RANGE = 328,                    /* RANGE  */
  YYSYMBOL_READ_P = 329,                   /* READ_P  */
  YYSYMBOL_REAL = 330,                     /* REAL  */
  YYSYMBOL_REASSIGN = 331,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 332,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 333,                /* RECURSIVE  */
  YYSYMBOL_REF = 334,                      /* REF  */
  YYSYMBOL_REFERENCES = 335,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 336,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 337,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 338,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 339,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 340,                  /* RELEASE  */
  YYSYMBOL_RENAME = 341,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 342,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 343,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 344,                  /* REPLICA  */
  YYSYMBOL_RESET = 345,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 346,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 347,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 348,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 349,                /* RETURNING  */
  YYSYMBOL_RETURNS = 350,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 351,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 352,                    /* RIGHT  */
  YYSYMBOL_ROLE = 353,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 354,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 355,                   /* ROLLUP  */
  YYSYMBOL_ROW = 356,                      /* ROW  */
  YYSYMBOL_ROWS = 357,                     /* ROWS  */
  YYSYMBOL_RULE = 358,                     /* RULE  */
  YYSYMBOL_SAMPLE = 359,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 360,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 361,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 362,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 363,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 364,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 365,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 366,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 367,                 /* SECURITY  */
  YYSYMBOL_SELECT = 368,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 369,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 370,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 371,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 372,                   /* SERVER  */
  YYSYMBOL_SESSION = 373,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 374,             /* SESSION_USER  */
  YYSYMBOL_SET = 375,                      /* SET  */
  YYSYMBOL_SETOF = 376,                    /* SETOF  */
  YYSYMBOL_SETS = 377,                     /* SETS  */
  YYSYMBOL_SHARE = 378,                    /* SHARE  */
  YYSYMBOL_SHOW = 379,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 380,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 381,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 382,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 383,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 384,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 385,                     /* SOME  */
  YYSYMBOL_SQL_P = 386,                    /* SQL_P  */
  YYSYMBOL_STABLE = 387,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 388,             /* STANDALONE_P  */
  YYSYMBOL_START = 389,                    /* START  */
  YYSYMBOL_STATEMENT = 390,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 391,               /* STATISTICS  */
  YYSYMBOL_STDIN = 392,                    /* STDIN  */
  YYSYMBOL_STDOUT = 393,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 394,                  /* STORAGE  */
  YYSYMBOL_STORED = 395,                   /* STORED  */
  YYSYMBOL_STRICT_P = 396,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 397,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 398,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 399,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 400,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 401,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 402,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 403,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 404,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 405,                    /* TABLE  */
  YYSYMBOL_TABLES = 406,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 407,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 408,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 409,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 410,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 411,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 412,                   /* TEXT_P  */
  YYSYMBOL_THEN = 413,                     /* THEN  */
  YYSYMBOL_TIME = 414,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 415,                /* TIMESTAMP  */
  YYSYMBOL_TO = 416,                       /* TO  */
  YYSYMBOL_TRAILING = 417,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 418,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 419,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 420,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 421,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 422,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 423,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 424,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 425,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 426,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 427,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 428,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 429,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 430,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 431,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 432,                    /* UNION  */
  YYSYMBOL_UNIQUE = 433,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 434,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 435,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 436,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 437,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 438,                   /* UPDATE  */
  YYSYMBOL_USER = 439,                     /* USER  */
  YYSYMBOL_USING = 440,                    /* USING  */
  YYSYMBOL_VACUUM = 441,                   /* VACUUM  */
  YYSYMBOL_VALID = 442,                    /* VALID  */
  YYSYMBOL_VALIDATE = 443,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 444,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 445,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 446,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 447,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 448,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 449,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 450,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 451,                /* VERSION_P  */
  YYSYMBOL_VIEW = 452,                     /* VIEW  */
  YYSYMBOL_VIEWS = 453,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 454,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 455,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 456,                     /* WHEN  */
  YYSYMBOL_WHERE = 457,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 458,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 459,                   /* WINDOW  */
  YYSYMBOL_WITH = 460,                     /* WITH  */
  YYSYMBOL_WITHIN = 461,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 462,                  /* WITHOUT  */
  YYSYMBOL_WORK = 463,                     /* WORK  */
  YYSYMBOL_WRAPPER = 464,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 465,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 466,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 467,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 468,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 469,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 470,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 471,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 472,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 473,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 474,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 475,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 476,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 477,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 478,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 479,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 480,                    /* YES_P  */
  YYSYMBOL_ZONE = 481,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 482,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 483,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 484,                  /* WITH_LA  */
  YYSYMBOL_485_ = 485,                     /* '<'  */
  YYSYMBOL_486_ = 486,                     /* '>'  */
  YYSYMBOL_487_ = 487,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 488,                /* POSTFIXOP  */
  YYSYMBOL_489_ = 489,                     /* '+'  */
  YYSYMBOL_490_ = 490,                     /* '-'  */
  YYSYMBOL_491_ = 491,                     /* '*'  */
  YYSYMBOL_492_ = 492,                     /* '/'  */
  YYSYMBOL_493_ = 493,                     /* '%'  */
  YYSYMBOL_494_ = 494,                     /* '^'  */
  YYSYMBOL_UMINUS = 495,                   /* UMINUS  */
  YYSYMBOL_496_ = 496,                     /* '['  */
  YYSYMBOL_497_ = 497,                     /* ']'  */
  YYSYMBOL_498_ = 498,                     /* '('  */
  YYSYMBOL_499_ = 499,                     /* ')'  */
  YYSYMBOL_500_ = 500,                     /* '.'  */
  YYSYMBOL_501_ = 501,                     /* ';'  */
  YYSYMBOL_502_ = 502,                     /* ','  */
  YYSYMBOL_503_ = 503,                     /* '{'  */
  YYSYMBOL_504_ = 504,                     /* '}'  */
  YYSYMBOL_505_ = 505,                     /* '#'  */
  YYSYMBOL_506_ = 506,                     /* '?'  */
  YYSYMBOL_507_ = 507,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 508,                 /* $accept  */
  YYSYMBOL_stmtblock = 509,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 510,                /* stmtmulti  */
  YYSYMBOL_stmt = 511,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 512,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 513,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 514,               /* SeqOptList  */
  YYSYMBOL_opt_with = 515,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 516,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 517,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 518,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 519,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 520,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 521, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 522,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 523, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 524, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 525,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 526,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 527, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 528,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 529,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 530,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 531,              /* AnalyzeStmt  */
  YYSYMBOL_CallStmt = 532,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 533,           /* CheckPointStmt  */
  YYSYMBOL_CopyStmt = 534,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 535,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 536,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 537, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 538,                /* opt_using  */
  YYSYMBOL_opt_as = 539,                   /* opt_as  */
  YYSYMBOL_opt_program = 540,              /* opt_program  */
  YYSYMBOL_copy_options = 541,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 542,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 543,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 544,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 545,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 546,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 547,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 548, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 549,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 550,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 551,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 552,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 553,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 554, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 555,       /* generic_option_arg  */
  YYSYMBOL_key_action = 556,               /* key_action  */
  YYSYMBOL_ColConstraint = 557,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 558,        /* ColConstraintElem  */
  YYSYMBOL_generic_option_elem = 559,      /* generic_option_elem  */
  YYSYMBOL_key_update = 560,               /* key_update  */
  YYSYMBOL_key_actions = 561,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 562,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 563,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 564,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 565,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 566,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 567,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 568,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 569,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 570,                  /* OptWith  */
  YYSYMBOL_definition = 571,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 572,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 573,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 574,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 575,                /* columnDef  */
  YYSYMBOL_def_list = 576,                 /* def_list  */
  YYSYMBOL_index_name = 577,               /* index_name  */
  YYSYMBOL_TableElement = 578,             /* TableElement  */
  YYSYMBOL_def_elem = 579,                 /* def_elem  */
  YYSYMBOL_opt_definition = 580,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 581,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 582,               /* columnElem  */
  YYSYMBOL_opt_column_list = 583,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 584,              /* ColQualList  */
  YYSYMBOL_key_delete = 585,               /* key_delete  */
  YYSYMBOL_reloption_elem = 586,           /* reloption_elem  */
  YYSYMBOL_columnList = 587,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 588,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 589,                /* func_type  */
  YYSYMBOL_ConstraintElem = 590,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 591,         /* TableElementList  */
  YYSYMBOL_key_match = 592,                /* key_match  */
  YYSYMBOL_TableLikeClause = 593,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 594,                  /* OptTemp  */
  YYSYMBOL_generated_when = 595,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 596,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 597,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 598,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 599,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 600,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 601,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 602,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 603,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 604,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 605,         /* reserved_keyword  */
  YYSYMBOL_CreateEnumStmt = 606,           /* CreateEnumStmt  */
  YYSYMBOL_opt_enum_val_list = 607,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 608,            /* enum_val_list  */
  YYSYMBOL_CreateFunctionStmt = 609,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 610,              /* macro_alias  */
  YYSYMBOL_param_list = 611,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 612,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 613,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 614,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 615,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 616,            /* OptSeqOptList  */
  YYSYMBOL_DeallocateStmt = 617,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 618,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 619,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 620,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 621,             /* using_clause  */
  YYSYMBOL_DropStmt = 622,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 623,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 624,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 625,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 626,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 627, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 628,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 629,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 630,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 631,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 632,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 633,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 634,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 635,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 636, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 637,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 638,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 639,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 640,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 641,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 642,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 643,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 644,                /* IndexStmt  */
  YYSYMBOL_access_method = 645,            /* access_method  */
  YYSYMBOL_access_method_clause = 646,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 647,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 648,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 649,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 650,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 651,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 652,              /* insert_rest  */
  YYSYMBOL_insert_target = 653,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 654,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 655,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 656,       /* insert_column_item  */
  YYSYMBOL_set_clause = 657,               /* set_clause  */
  YYSYMBOL_opt_on_conflict = 658,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 659,               /* index_elem  */
  YYSYMBOL_returning_clause = 660,         /* returning_clause  */
  YYSYMBOL_override_kind = 661,            /* override_kind  */
  YYSYMBOL_set_target_list = 662,          /* set_target_list  */
  YYSYMBOL_opt_collate = 663,              /* opt_collate  */
  YYSYMBOL_opt_class = 664,                /* opt_class  */
  YYSYMBOL_insert_column_list = 665,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 666,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 667, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 668,             /* index_params  */
  YYSYMBOL_set_target = 669,               /* set_target  */
  YYSYMBOL_LoadStmt = 670,                 /* LoadStmt  */
  YYSYMBOL_file_name = 671,                /* file_name  */
  YYSYMBOL_PragmaStmt = 672,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 673,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 674,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 675,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 676,               /* RenameStmt  */
  YYSYMBOL_opt_column = 677,               /* opt_column  */
  YYSYMBOL_SelectStmt = 678,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 679,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 680,         /* select_no_parens  */
  YYSYMBOL_select_clause = 681,            /* select_clause  */
  YYSYMBOL_simple_select = 682,            /* simple_select  */
  YYSYMBOL_with_clause = 683,              /* with_clause  */
  YYSYMBOL_cte_list = 684,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 685,        /* common_table_expr  */
  YYSYMBOL_into_clause = 686,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 687,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 688,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 689,          /* all_or_distinct  */
  YYSYMBOL_distinct_clause = 690,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 691,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 692,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 693,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 694,              /* sort_clause  */
  YYSYMBOL_sortby_list = 695,              /* sortby_list  */
  YYSYMBOL_sortby = 696,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 697,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 698,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 699,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 700,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 701,             /* limit_clause  */
  YYSYMBOL_offset_clause = 702,            /* offset_clause  */
  YYSYMBOL_sample_count = 703,             /* sample_count  */
  YYSYMBOL_sample_clause = 704,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 705,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 706,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 707,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 708,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 709,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 710,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 711,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 712, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 713,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 714,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 715,            /* first_or_next  */
  YYSYMBOL_group_clause = 716,             /* group_clause  */
  YYSYMBOL_group_by_list = 717,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 718,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 719,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 720,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 721,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 722,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 723,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 724,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 725,            /* having_clause  */
  YYSYMBOL_qualify_clause = 726,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 727,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 728,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 729,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 730,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 731,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 732,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 733,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 734,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 735,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 736,              /* from_clause  */
  YYSYMBOL_from_list = 737,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 738,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 739,                /* table_ref  */
  YYSYMBOL_joined_table = 740,             /* joined_table  */
  YYSYMBOL_alias_clause = 741,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 742,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 743,        /* func_alias_clause  */
  YYSYMBOL_join_type = 744,                /* join_type  */
  YYSYMBOL_join_outer = 745,               /* join_outer  */
  YYSYMBOL_join_qual = 746,                /* join_qual  */
  YYSYMBOL_relation_expr = 747,            /* relation_expr  */
  YYSYMBOL_func_table = 748,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 749,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 750,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 751,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 752,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 753,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 754,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 755,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 756,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 757,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 758,              /* RowOrStruct  */
  YYSYMBOL_Typename = 759,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 760,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 761,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 762,            /* ConstTypename  */
  YYSYMBOL_GenericType = 763,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 764,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 765,                  /* Numeric  */
  YYSYMBOL_opt_float = 766,                /* opt_float  */
  YYSYMBOL_Bit = 767,                      /* Bit  */
  YYSYMBOL_ConstBit = 768,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 769,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 770,         /* BitWithoutLength  */
  YYSYMBOL_Character = 771,                /* Character  */
  YYSYMBOL_ConstCharacter = 772,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 773,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 774,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 775,                /* character  */
  YYSYMBOL_opt_varying = 776,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 777,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 778,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 779,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 780,             /* year_keyword  */
  YYSYMBOL_month_keyword = 781,            /* month_keyword  */
  YYSYMBOL_day_keyword = 782,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 783,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 784,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 785,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 786,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 787,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 788,             /* opt_interval  */
  YYSYMBOL_a_expr = 789,                   /* a_expr  */
  YYSYMBOL_b_expr = 790,                   /* b_expr  */
  YYSYMBOL_c_expr = 791,                   /* c_expr  */
  YYSYMBOL_func_application = 792,         /* func_application  */
  YYSYMBOL_func_expr = 793,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 794,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 795, /* func_expr_common_subexpr  */
  YYSYMBOL_within_group_clause = 796,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 797,            /* filter_clause  */
  YYSYMBOL_export_clause = 798,            /* export_clause  */
  YYSYMBOL_window_clause = 799,            /* window_clause  */
  YYSYMBOL_window_definition_list = 800,   /* window_definition_list  */
  YYSYMBOL_window_definition = 801,        /* window_definition  */
  YYSYMBOL_over_clause = 802,              /* over_clause  */
  YYSYMBOL_window_specification = 803,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 804, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 805,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 806,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 807,             /* frame_extent  */
  YYSYMBOL_frame_bound = 808,              /* frame_bound  */
  YYSYMBOL_qualified_row = 809,            /* qualified_row  */
  YYSYMBOL_row = 810,                      /* row  */
  YYSYMBOL_dict_arg = 811,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 812,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 813, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 814,                 /* sub_type  */
  YYSYMBOL_all_Op = 815,                   /* all_Op  */
  YYSYMBOL_MathOp = 816,                   /* MathOp  */
  YYSYMBOL_qual_Op = 817,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 818,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 819,              /* subquery_Op  */
  YYSYMBOL_any_operator = 820,             /* any_operator  */
  YYSYMBOL_expr_list = 821,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 822,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 823,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 824,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 825,            /* func_arg_expr  */
  YYSYMBOL_type_list = 826,                /* type_list  */
  YYSYMBOL_extract_list = 827,             /* extract_list  */
  YYSYMBOL_extract_arg = 828,              /* extract_arg  */
  YYSYMBOL_overlay_list = 829,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 830,          /* overlay_placing  */
  YYSYMBOL_position_list = 831,            /* position_list  */
  YYSYMBOL_substr_list = 832,              /* substr_list  */
  YYSYMBOL_substr_from = 833,              /* substr_from  */
  YYSYMBOL_substr_for = 834,               /* substr_for  */
  YYSYMBOL_trim_list = 835,                /* trim_list  */
  YYSYMBOL_in_expr = 836,                  /* in_expr  */
  YYSYMBOL_case_expr = 837,                /* case_expr  */
  YYSYMBOL_when_clause_list = 838,         /* when_clause_list  */
  YYSYMBOL_when_clause = 839,              /* when_clause  */
  YYSYMBOL_case_default = 840,             /* case_default  */
  YYSYMBOL_case_arg = 841,                 /* case_arg  */
  YYSYMBOL_columnref = 842,                /* columnref  */
  YYSYMBOL_indirection_el = 843,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 844,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 845,              /* indirection  */
  YYSYMBOL_opt_indirection = 846,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 847,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 848, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 849,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 850,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 851,                /* target_el  */
  YYSYMBOL_except_list = 852,              /* except_list  */
  YYSYMBOL_opt_except_list = 853,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 854,          /* replace_list_el  */
  YYSYMBOL_replace_list = 855,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 856,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 857,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 858,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 859,           /* qualified_name  */
  YYSYMBOL_name_list = 860,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 861,      /* name_list_opt_comma  */
  YYSYMBOL_name = 862,                     /* name  */
  YYSYMBOL_attr_name = 863,                /* attr_name  */
  YYSYMBOL_func_name = 864,                /* func_name  */
  YYSYMBOL_AexprConst = 865,               /* AexprConst  */
  YYSYMBOL_Iconst = 866,                   /* Iconst  */
  YYSYMBOL_Sconst = 867,                   /* Sconst  */
  YYSYMBOL_ColId = 868,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 869,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 870,       /* type_function_name  */
  YYSYMBOL_function_name_token = 871,      /* function_name_token  */
  YYSYMBOL_type_name_token = 872,          /* type_name_token  */
  YYSYMBOL_any_name = 873,                 /* any_name  */
  YYSYMBOL_attrs = 874,                    /* attrs  */
  YYSYMBOL_opt_name_list = 875,            /* opt_name_list  */
  YYSYMBOL_param_name = 876,               /* param_name  */
  YYSYMBOL_ColLabel = 877,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 878,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 879,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 880,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 881,               /* UpdateStmt  */
  YYSYMBOL_VacuumStmt = 882,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 883,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 884,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 885,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 886,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 887,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 888,            /* generic_reset  */
  YYSYMBOL_reset_rest = 889,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 890,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 891,                 /* set_rest  */
  YYSYMBOL_generic_set = 892,              /* generic_set  */
  YYSYMBOL_var_value = 893,                /* var_value  */
  YYSYMBOL_zone_value = 894,               /* zone_value  */
  YYSYMBOL_var_list = 895,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 896,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 897,         /* show_or_describe  */
  YYSYMBOL_var_name = 898,                 /* var_name  */
  YYSYMBOL_ViewStmt = 899,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 900          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  596
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   54962

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  508
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  393
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1838
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3027

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   741


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   505,     2,   493,     2,     2,
     498,   499,   491,   489,   502,   490,   500,   492,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   507,   501,
     485,   487,   486,   506,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   496,     2,   497,   494,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   503,     2,   504,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     488,   495
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   467,   467,   483,   495,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
     529,   530,   531,   532,   533,   534,   535,   536,   537,   539,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   319,   328,   336,   351,
     359,   369,   379,   386,   393,   401,   408,   419,   420,   425,
     429,   434,   439,   447,   448,   453,   457,   458,   459,     7,
      13,    19,    25,     7,    17,    18,    21,    23,     6,    15,
      25,    35,    45,    55,    65,    75,    85,    95,   106,   117,
     127,   140,   141,     8,    21,    27,    34,    40,    47,    57,
      61,    70,    79,    88,    95,    96,   101,   113,   118,   143,
     153,   163,   169,   180,   191,   206,   207,   213,   214,   219,
     220,   226,   227,   231,   232,   237,   239,   245,   246,   250,
     251,   254,   255,   260,     7,    14,    22,     9,    19,    32,
      33,     7,    14,    31,    51,    52,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     2,     9,    15,    21,
      28,    35,    45,    46,    47,     7,    21,    36,    56,    57,
      84,    85,    86,    87,    88,    89,    93,    94,    99,   104,
     105,   106,   107,   108,   113,   120,   121,   122,   139,   146,
     153,   163,   173,   185,   193,   202,   211,   234,   253,   260,
     265,   267,   269,   271,   274,   284,   285,   286,   287,   292,
     296,   297,   302,   309,   314,   315,   316,   317,   318,   319,
     320,   321,   327,   328,   332,   337,   344,   351,   358,   370,
     371,   372,   373,   377,   382,   383,   384,   389,   394,   395,
     396,   397,   398,   399,   404,   437,   438,   442,   446,   447,
     448,   452,   456,   464,   465,   470,   471,   472,   476,   484,
     485,   490,   491,   495,   500,   504,   508,   513,   521,   522,
     526,   527,   531,   532,   538,   549,   562,   576,   590,   604,
     618,   641,   645,   652,   656,   664,   669,   676,   686,   687,
     688,   689,   690,   697,   704,   705,   710,   711,     9,    19,
      29,    39,    49,    59,    69,    79,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   113,   114,   115,   116,   117,   118,   119,   124,
     125,   130,   131,   132,   137,   138,   139,   142,   143,     8,
      20,    36,    37,    41,    45,     7,     1,    30,    53,    54,
      59,    63,    68,    72,    80,    81,    85,    86,    91,    92,
      96,    97,   102,   103,   104,   105,   106,   111,   119,   123,
     128,   129,   134,   138,   143,   147,   151,   155,   159,   163,
     167,   171,   175,   179,   183,   187,   191,   195,   203,   209,
     210,   211,   216,   220,    47,    48,    52,    53,    68,    69,
      76,    84,    92,   100,   108,   116,   127,   128,   155,   171,
     188,   189,   208,   212,   216,   233,   240,   247,   257,   258,
     261,   273,   284,   292,   297,   302,   307,   312,   320,   328,
     333,   338,   345,   346,   350,   351,   352,   359,   360,   364,
     365,   369,   370,   371,   375,   376,   380,   381,   391,   404,
     405,   408,   417,   428,   429,   430,   433,   434,   435,   439,
     440,   441,   442,   446,   447,   451,   453,   469,   471,   476,
     479,   487,   491,   495,   499,   503,   507,   514,   519,   526,
     527,   531,   535,   539,   543,   550,   557,   558,   563,   564,
     568,   569,   574,   576,   578,   583,   603,   604,   606,   611,
     612,   616,   617,   620,   621,   646,   647,   652,   657,   661,
     662,   666,   667,   671,   672,   673,   674,   675,   679,   692,
     699,   706,   713,   714,   718,   719,   723,   724,   728,   729,
     733,   734,   738,   739,   743,   754,   755,   756,   757,   761,
     762,   767,   768,   769,   778,   784,   793,   794,   807,   808,
     812,   813,   817,   818,   824,   830,   838,   846,   855,   864,
     868,   894,   898,   911,   925,   940,   952,   968,   974,   979,
     985,   992,   993,  1001,  1005,  1009,  1015,  1022,  1027,  1028,
    1029,  1030,  1034,  1035,  1047,  1048,  1053,  1060,  1067,  1074,
    1106,  1117,  1130,  1135,  1136,  1139,  1140,  1143,  1144,  1149,
    1150,  1155,  1159,  1165,  1186,  1194,  1207,  1210,  1214,  1214,
    1220,  1225,  1232,  1237,  1243,  1248,  1254,  1260,  1269,  1271,
    1274,  1278,  1279,  1280,  1281,  1282,  1283,  1288,  1308,  1309,
    1310,  1311,  1322,  1336,  1337,  1343,  1348,  1353,  1358,  1363,
    1368,  1373,  1378,  1384,  1390,  1396,  1403,  1425,  1434,  1438,
    1446,  1450,  1458,  1470,  1491,  1495,  1501,  1505,  1518,  1526,
    1536,  1538,  1540,  1542,  1544,  1546,  1551,  1552,  1559,  1568,
    1576,  1585,  1596,  1604,  1605,  1606,  1610,  1610,  1613,  1613,
    1616,  1616,  1619,  1619,  1622,  1622,  1625,  1625,  1628,  1628,
    1631,  1631,  1634,  1636,  1638,  1640,  1642,  1644,  1646,  1648,
    1650,  1655,  1660,  1666,  1673,  1678,  1684,  1690,  1721,  1723,
    1725,  1733,  1748,  1750,  1752,  1754,  1756,  1758,  1760,  1762,
    1764,  1766,  1768,  1770,  1772,  1774,  1776,  1779,  1781,  1783,
    1786,  1788,  1790,  1792,  1795,  1800,  1805,  1812,  1817,  1824,
    1829,  1836,  1841,  1849,  1857,  1865,  1873,  1891,  1899,  1907,
    1915,  1923,  1931,  1935,  1939,  1943,  1951,  1967,  1975,  1983,
    1991,  1999,  2007,  2015,  2019,  2023,  2027,  2031,  2039,  2047,
    2055,  2063,  2083,  2105,  2116,  2123,  2137,  2153,  2155,  2157,
    2159,  2161,  2163,  2165,  2167,  2169,  2171,  2173,  2175,  2177,
    2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2197,  2201,
    2205,  2219,  2220,  2221,  2228,  2240,  2255,  2267,  2269,  2281,
    2292,  2316,  2327,  2336,  2340,  2347,  2355,  2363,  2374,  2382,
    2410,  2446,  2457,  2458,  2465,  2471,  2475,  2479,  2483,  2487,
    2491,  2495,  2499,  2503,  2507,  2511,  2515,  2519,  2523,  2527,
    2531,  2533,  2535,  2539,  2548,  2553,  2560,  2575,  2582,  2586,
    2590,  2594,  2598,  2612,  2613,  2617,  2618,  2622,  2623,  2630,
    2631,  2635,  2636,  2641,  2649,  2651,  2665,  2668,  2695,  2696,
    2699,  2700,  2711,  2717,  2724,  2733,  2750,  2795,  2803,  2811,
    2819,  2827,  2848,  2849,  2852,  2853,  2857,  2867,  2868,  2872,
    2873,  2877,  2878,  2879,  2882,  2883,  2886,  2887,  2888,  2889,
    2890,  2891,  2892,  2893,  2894,  2895,  2896,  2897,  2898,  2901,
    2903,  2908,  2910,  2915,  2917,  2919,  2921,  2923,  2925,  2927,
    2929,  2943,  2945,  2949,  2953,  2960,  2965,  2983,  2988,  2996,
    3000,  3006,  3010,  3019,  3030,  3031,  3035,  3039,  3046,  3047,
    3048,  3049,  3050,  3051,  3052,  3053,  3054,  3055,  3065,  3069,
    3076,  3083,  3084,  3100,  3104,  3109,  3113,  3128,  3133,  3137,
    3140,  3143,  3144,  3145,  3148,  3155,  3165,  3179,  3180,  3184,
    3195,  3196,  3199,  3200,  3203,  3207,  3214,  3218,  3226,  3237,
    3238,  3242,  3243,  3247,  3248,  3251,  3252,  3262,  3263,  3267,
    3268,  3272,  3273,  3276,  3292,  3300,  3308,  3323,  3341,  3342,
    3345,  3346,  3349,  3353,  3354,  3358,  3359,  3362,  3363,  3364,
    3374,  3375,  3386,  3390,  3417,  3419,  3425,  3426,  3429,  3431,
    3441,  3444,  3455,  3459,  3463,  3475,  3479,  3488,  3495,  3533,
    3537,  3541,  3545,  3549,  3553,  3557,  3563,  3564,  3580,  3581,
    3582,  3585,  3586,  3592,  3593,  3594,  3597,  3598,  3599,  3602,
    3603,  3604,  3607,  3608,  3611,  3613,  3618,  3619,  3622,  3630,
    3631,  3632,  3633,  3636,  3637,     7,    18,    19,    23,    24,
      25,    26,     7,    16,    34,    41,    46,    47,    48,    49,
       8,    33,    62,    66,    67,    72,    73,    78,    79,    83,
      84,    89,    90,     7,    16,    25,    34,    43,    52,     5,
      11,     7,    20,     9,    16,    26,    33,    44,    45,    50,
      51,    52,    57,    58,    59,    60,    61,    65,    66,    67,
      72,    73,    78,    82,    90,    91,    96,    97,    98,   104,
     109,   117,   118,    10,    16,    22,    28,    38,    39,    47,
      58,    70,    78,    86,    93,   103,   105,   111,   115,   119,
     134,   141,   142,   143,   147,   148,     7,    14,    20,    28,
      29,     8,    22,    36,    48,    56,    70,    71,    72,    73,
      74,    87,    88,    93,    94,    98,    99,     7,    21,    25,
      32,    43,    44,    50,    51,     9,    19,     2,     7,    14,
      24,    25,    32,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    64,     6,     8,    21,    34,    52,
      74,    75,    76,    77,    11,    24,    37,    54,    55,    56,
      61,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "LAMBDA_ARROW", "POWER_OF",
  "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P",
  "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL",
  "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY",
  "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE", "CURRENT_SCHEMA",
  "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "CYCLE",
  "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC",
  "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE", "DEFERRED",
  "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS", "DESC_P",
  "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD", "DISTINCT",
  "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH", "ELSE",
  "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
  "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "CallStmt", "CheckPointStmt", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions", "OnCommitOption",
  "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
  "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
  "definition", "TableLikeOptionList", "generic_option_name",
  "ConstraintAttributeElem", "columnDef", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "columnList_opt_comma", "func_type",
  "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
  "OptTemp", "generated_when", "CreateAsStmt", "opt_with_data",
  "create_as_target", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", "CreateEnumStmt",
  "opt_enum_val_list", "enum_val_list", "CreateFunctionStmt",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSeqStmt", "OptSeqOptList", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "joined_table", "alias_clause", "opt_alias_clause", "func_alias_clause",
  "join_type", "join_outer", "join_qual", "relation_expr", "func_table",
  "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
  "where_clause", "TableFuncElementList", "TableFuncElement",
  "opt_collate_clause", "colid_type_list", "RowOrStruct", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "qualified_row", "row", "dict_arg",
  "dict_arguments", "dict_arguments_opt_comma", "sub_type", "all_Op",
  "MathOp", "qual_Op", "qual_all_Op", "subquery_Op", "any_operator",
  "expr_list", "expr_list_opt_comma", "opt_expr_list_opt_comma",
  "func_arg_list", "func_arg_expr", "type_list", "extract_list",
  "extract_arg", "overlay_list", "overlay_placing", "position_list",
  "substr_list", "substr_from", "substr_for", "trim_list", "in_expr",
  "case_expr", "when_clause_list", "when_clause", "case_default",
  "case_arg", "columnref", "indirection_el", "opt_slice_bound",
  "indirection", "opt_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "qualified_name", "name_list",
  "name_list_opt_comma", "name", "attr_name", "func_name", "AexprConst",
  "Iconst", "Sconst", "ColId", "ColIdOrString", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabel", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "ViewStmt",
  "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2579)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1759)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    4494,  -105,  1048, -2579, -2579,  -105, 34887, -2579,  -105,    49,
    2092, 39677, -2579,  5019,  -105, 46383,  1022,   189,   193,   214,
   40156, 40156, 46383, 46383, 40635,  -105,   252, 46862, -2579,  -105,
   24260, 37282,    -9,  -149, 47341, 46383,  1228,   365,  -100, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,    25, -2579,
   -2579, -2579, -2579,    55, -2579, -2579, -2579, -2579, -2579,   130,
   -2579,   611,   173,   380,    90, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, 23781, -2579, -2579, -2579, -2579, 41114, 46383, 41593,
   37761, 42072, -2579,   113, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
     116, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579,   132, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579,   141, -2579, -2579, -2579,
     119,   499, -2579, -2579, -2579,  1228, 42551,   569,   821,   332,
   47820, -2579, -2579, 46383, -2579, -2579,    29,   554, -2579, -2579,
   -2579, 43030, -2579, -2579, -2579, -2579,   453, -2579, -2579,   356,
   -2579,    83, -2579, -2579,   406,   384, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579,   517, -2579, 53089, -2579, 48299, 48778,
   49257, -2579,   414,   982,   349, 23302, -2579, -2579, -2579,    25,
   -2579, -2579, -2579,   899, -2579, 40156,   899, -2579, -2579, -2579,
   -2579, -2579,  -159,   429, -2579,   459,   734, -2579, -2579, -2579,
     465, -2579, -2579,   683, 10376, 10376, 49736, 49736,   899, 49736,
     506, -2579, -2579,   -39, -2579,  -149, -2579,   380,   465, -2579,
   24740, -2579,   501,   499, -2579, -2579,   207,   829, 13904, 46383,
     530, -2579,   546,   530,   549,   576, -2579,  4494, -2579, 42551,
     934,   892, 37282,   264,   264,  1057,   264,   633,   750, -2579,
     893, -2579,   641, -2579,   668,   939, -2579,   465,  1036,   660,
     883,  1049,  5753,  1080,   861,  1103,  1065,  6848, 13904, 33450,
   -2579,   499, -2579, -2579,   762, -2579, -2579,   790, -2579, -2579,
   -2579, -2579,   803,  1039, -2579,   793,  1310, -2579, -2579,   913,
   43509, 43988, 42551, 42551,  1286, -2579, -2579, -2579, -2579,   950,
   -2579, -2579, -2579,   106, -2579, -2579, -2579, -2579,   945, -2579,
     945,   945, -2579, -2579, -2579, -2579,   900,   900,  1113,   949,
   -2579, -2579, -2579,  1292, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579,   953,  1026, -2579,   945, -2579,   900,
   -2579, -2579, -2579, -2579, -2579, 54481, -2579, -2579, -2579, -2579,
    -137,   504, -2579, -2579, -2579, -2579, -2579,    48,   957, -2579,
    1424, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,   969,
   -2579,  3817,   900,  1318,    69, -2579,  1324,   108, -2579,  1329,
    1205, 13904, -2579,  1151,  1091, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579,  -149, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579,   238, -2579, -2579, 31025,   349,  1005, -2579, -2579,
   31025, 14408, 53553,  1468, -2579,  1275, 46383,  1012, -2579, -2579,
   -2579, -2579, -2579, -2579,  1016,  1509,    97,  1512, 13904,  1021,
      97,    97,  1023,  1358, -2579, -2579, -2579,   144,  1030,  1041,
   -2579,   145,   145, -2579,  1043,  1067, -2579,   146,  1071,  1076,
    1558,  1574,   129,  1089,  1095,  1026,    97, 13904, -2579,  1111,
     145,  1116,  1122,  1133,  1577,  1138, -2579,  1643,  1156,    99,
     100,  1161,  1164, -2579,  1165, -2579,   147, 13904, 13904, 13904,
    1400, 13904,  7856, 42551,  1580, -2579,   499,  1171,   899, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579,   134,  5204, -2579,
    1210, -2579, -2579, -2579,  1379, 13904, -2579, -2579,  1176,  1463,
   -2579,   149, -2579, -2579, -2579,   541,  1463, -2579, -2579, -2579,
   -2579, -2579,   160,  1582, 30067, 30546, 42551, -2579, -2579,   499,
   -2579, -2579, -2579, -2579, -2579, -2579,   350, -2579,    25, 32268,
    1179,  1183,   499,   530, 46383, 46383,  1649, -2579, -2579, -2579,
     546, 37282, 42551,  1315, 50215, -2579, -2579,   380,   380,  9368,
     380,   194,    12, 10880, 14912,  1529,  1414,   140,   600,  1534,
   -2579,  1419,   633,   750, 13904, -2579,  1469, 42551, 35366,   691,
     852,  1204,  1289,  1209,    72,  1622, -2579,  1208, -2579,  1295,
   42551, 54481,   162, -2579,  1658,   162,   162,   300,  1659,  1300,
     216,  1456,    79,  -136,  1566, -2579,  1208, 37282,   118,   326,
    1208, 42551,  1304,   469,  1208,    96, 14408,  1084,  1106,   305,
    1167,  1203,    98, 14408,  1229,  1252,  1307,  1374,  1391,  1460,
    1471,  1473,  1485,  1488,   103,  1518,  1520,  1540,  1542,  1567,
    1571,   122,  1578,   161, 14408,  1584,  1224, -2579,   128, -2579,
   32268,   -50, -2579, -2579,  1588, 28631,  1222, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579,  1316, 46383,  1271,   430,  1583,
    1642, 33450,  1237,  1595, 42551,  1472,  1566,  1474,  1705,  1250,
     790,  1255, -2579, 50694, -2579, -2579, -2579, -2579, -2579, -2579,
    1260, -2579, -2579, 13904, -2579, -2579, -2579,  1738, -2579, 53553,
   53553,   945,   945, -2579, -2579,  1723,  1346,  1347,  1738, -2579,
    1738, -2579, -2579, -2579, 53553, -2579, 46383,  1269,  1274,  1738,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579,  1738,  1352, -2579,  1361,
    1362,  1366, -2579, -2579, -2579, -2579, -2579, 46383, 46383, -2579,
   46383, 46383, -2579, 46383, 46383,  1285,   803, 44467,   349, 38240,
   -2579, -2579, -2579, -2579,   328,   730, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, 33450, -2579,  1802, -2579, -2579,
   -2579,  1283,   422, -2579,   450,  1228, -2579, -2579, 13904,   499,
   13904, 32268,  1331, 13904, 13904,  1276,  1738,  1738, -2579,   177,
    1738,  1738,  5329, 13904, 27619, 13904, 18440, 11384, 13904, 13904,
    8360, 13904,  5329,  1781,  1781, 25698, -2579,  1450, -2579,  1297,
     795,  5828,  1296, -2579,  1298,  1299, -2579,  1294, -2579,   499,
     499, 13904, -2579, 13904,  2850,  2850, -2579,   133, 53553, 13904,
   13904, 13904, 13904, 13904, 13904, 32971,  1388,   152, 46383, 13904,
   13904,  1306,  1323, -2579, 13904,  1530, -2579,  1312, 13904,  1389,
     669, 13904, 13904, 13904, 13904, 13904, 13904, 13904, 13904, 13904,
   -2579, -2579, 19938,   195,  1629,  1650,   499,  -118,   932, 10376,
   38719,  1646,  6848, -2579,   499, 29109,    91,  1646, -2579, -2579,
   -2579, -2579,   150, -2579, -2579, -2579, -2579,  1283, -2579,  1283,
    1322, 42551,   207, 36803, 13904, -2579, -2579,   558,  1319, -2579,
    1387,     3,  1782, 26177, 46383, -2579,  1616, -2579,   228,   228,
    1334, -2579, 31501,  1616, -2579, -2579, 18930,  1453,  1610,  1545,
   -2579, -2579,  1532,  1533, -2579,  1344, 32496, 15416, 15416, -2579,
    1194, 32268,  1249, -2579, -2579, -2579, -2579, -2579, -2579,    13,
   -2579, 42551,   -14,  1529,   600,  1349, -2579,  1272,  1351, 51173,
   46383,  1624,  1585,  1628,  -106, -2579, -2579, -2579, 53553, -2579,
   46383, 46383, 51652, 52131, 33929, 46383, 33450, -2579, -2579, -2579,
   -2579, 46383,   701, 46383,  6234, -2579, -2579, -2579,   162, -2579,
   -2579, -2579, -2579, -2579, 46383, 46383, -2579, -2579,   162, 46383,
   46383,   162, -2579,  1320, 46383, 46383, 46383, 46383,  1434, 46383,
   46383,   -29,   -29,  1562, -2579, 11888,    60, -2579, 13904, 13904,
   -2579, 13904,  1531, -2579,   563, -2579,  1573,    39,  1407, 42551,
   42551, 46383,  1959, -2579, -2579, -2579, -2579, -2579, -2579, 33450,
    1363,  1369,  1713,  1566, -2579,  1717,   992, 35845,   710,  1410,
   12392,  1834,  1601, -2579,  1590, -2579, 13904,  1375,  1382,    48,
     648, -2579, -2579,  1386,  1274,  1397,  1402,  1385,  1390, -2579,
     662, 53553,  1738,   105,  1392,  1394,  1348,   775,   638,  1246,
      69, -2579,   108, -2579,  1600,   124, -2579,  1482,  1623,  1860,
     790, -2579, -2579, -2579, -2579, -2579, -2579, -2579,   667, 22823,
   -2579, -2579,  1862,   899,  1862,   543, -2579, -2579,  1862, -2579,
    1862, -2579, 31025, -2579, 14408, -2579, 53553, -2579,  1401, -2579,
    1404, 13904,    34, -2579, 31562,  1408, 13904,  1409,  1411, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,  1413,  1739,
   -2579,  1418,  1420,  4870, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,  1422,
    1423, 31652,  1426, 18440, 18440,  7856,   705, -2579, 18440,  1428,
   -2579,  1430, 31514,  1416,  1431, 31882, 12896, 13904, 12896, 12896,
   31936, -2579,  1432, 32075, 46383, -2579, 15920, -2579, -2579, -2579,
   13904, 42551, -2579, 13904,  1433,  6063, -2579, -2579, -2579,   932,
    1115,  5276,  5276,  5276,  5329, -2579, -2579, -2579,  1441, -2579,
   18440, 18440, -2579,  3884,  2317,  7856, -2579, -2579,  1763, -2579,
     928, -2579,  1436, -2579, -2579,  2462, -2579, 27619, 32303, 13904,
     166, -2579, 13904,  1306, 13904,  1521,  5276,  5276,  5276,   201,
     201,   142,   142,   142,  1115,   932, -2579, -2579, -2579,  1438,
    1440,  1442,  1785,  1138, 13904, -2579, -2579,   844,   867, 42551,
    2907,  3089,  3802, -2579, -2579, 21386,  1486,   -50,  1400,  1486,
    1738,  2850, -2579,   546, -2579, -2579, -2579, 32268, -2579,  1228,
   21386,  1493,  1506,   -84, 24260,  1667, -2579, 46383, 46383, -2579,
    1452,  1646,  1475, -2579, -2579, -2579, -2579,  1476,  1476, 13904,
     890,  1476,  1669,  1671,   764,   764,  1194,  1676, -2579, -2579,
    1526, -2579, -2579, -2579, 13904,  8864,  1278, -2579,  1284, -2579,
   -2579, -2579, -2579,  1464, -2579, -2579,  1727, -2579, -2579, -2579,
   -2579,  1549,  1208, 13904,  1702, -2579,   102,  1477,  1827,   198,
    1778, 46383, -2579, -2579, -2579,   550,  1829,   124,  1832,   124,
   33450, 33450, 33450,   709, -2579, -2579,   899, -2579, -2579,   723,
   -2579,   246, -2579, -2579, -2579,  1568,   502,  1566,  1208, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579,   203,   615,  1208,  1569,
   -2579,  1579, -2579,  1591,   657,  1208, -2579, -2579,    60,    60,
      60, 14408, -2579,  1709,  1716,  1513, 32268, 32268, 32268,  1517,
   -2579,   135, -2579, 46383, -2579, -2579, -2579,  1531, 42551,  1980,
    1528,   790, -2579,  1681,   -59, -2579,   899, 46383, 42551, 42551,
   46383,  1575, 42551, -2579, -2579, -2579,  1544,  1539, -2579, 53553,
     -53,  1749,  1750,  1209,  2008, -2579,   727, 13400,  1897, 42551,
    1554, -2579, -2579, -2579, -2579,  1738, -2579, -2579,   274,   274,
   -2579, 46383, -2579,  1557, -2579,  1560, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, 46383, -2579, 42551,
    1907,  1228, -2579, 33450, -2579, 36324, -2579, -2579, -2579, -2579,
     899, -2579,   899,  1787, 46383, 29588,   899,   899, -2579, -2579,
   -2579, -2579, 32160, 13904, -2579,  1917, 53553, -2579,  6228, -2579,
   -2579, -2579, 13904, -2579, -2579, 13904, -2579, 27619, 13904,  1891,
   -2579,  2053,  2053,  5828, 53553, 18440, 18440, 18440, 18440, 18440,
     588,  1116, 18440, 18440, 18440, 18440, 18440, 18440, 18440, 18440,
   18440, 19434,   298, -2579, -2579, 13904, 13904,  1903,  1891, 13904,
   -2579, 53553,  1570, -2579,  1576,  1581, 13904, -2579, 53553,  1586,
    1592,  7856, 32214, -2579,   499,  6289, -2579, 32268, -2579,  2850,
   13904,  1733,  2898, 13904,  1594, 13904,  1900, -2579, -2579,  1589,
   -2579, -2579, 53553, 13904,  1597,  3267, 18440, 18440,  3848, -2579,
    4517, 13904,  7856, -2579,  1562,  1619, -2579,  1788,  1674,  1674,
    1674,  1674, -2579, -2579, 42551, 42551, 42551, 21865,  1919, 20906,
   44946,  1596, -2579,  1214, -2579, 44946, 45425, -2579,  1606, -2579,
     499, 13904,  1915,    60,  1450,  1915,  1598, -2579, -2579,  1608,
   -2579, 13904,  1751, -2579, -2579, -2579,  1654, -2579,   738, -2579,
    2020,  1751, -2579,   742, -2579, 26177,  1493, 13904,   499,   143,
   -2579, -2579, -2579,  1612, -2579,  1476, -2579, -2579, -2579,  1821,
   -2579, -2579, -2579, 42551, -2579, 46383, 28106,  1961, -2579, 46383,
   46383, 46383, -2579, 46383,  1614,  1620,   552,  1609,   552,  1946,
     139,  1209,   216,  4394,   -21, -2579, -2579, -2579,  1694, 46383,
   -2579, 46383, -2579, -2579, -2579, -2579, -2579, 33929, -2579, -2579,
   -2579, 33450, 27139, 33450, 46383, 46383, 46383, 46383, 46383, 46383,
   46383, 46383, 46383, 46383,  1625,  1626,  1635,  1562, -2579, -2579,
   -2579, -2579, -2579, -2579,  -136, -2579, -2579,   135,  1639,  1228,
   35845,  1410,  1642,   803, 45904,  1641,  1621, -2579,   749,  1566,
    2085,  1640,   414,   279, -2579, -2579,   710, 35845, -2579, -2579,
   -2579,  2047, -2579, -2579,  1228, -2579,  1228, 32268, 46383,  1703,
   -2579,  1274,  1645, -2579, -2579,  1274, 53553, -2579, -2579,   124,
   42551, -2579,   761, -2579, -2579, -2579, -2579, 46383,  1644, -2579,
    1644, -2579, -2579, 13904, 32268, -2579,  1648, -2579, 32268, 28135,
   -2579, 32268,  1903, -2579,  2053,  1826,  1826,  1826,  3352,  1975,
     154,  1651,  1826,  1826,  1826,   236,   236,   186,   186,   186,
    2053,   298, 32268, 32268, -2579, -2579,  1655, -2579, -2579, -2579,
   -2579,  1656, 46383, -2579,  5445, -2579,  1657,  1661, 46383, -2579,
   -2579,   257, 13904, 13904,  3884, -2579, 28503, 13904, 53553,   788,
    3884,   218, 13904,  2986,  3277, 13904, 13904,  4523, 28170,  1663,
   13904, 26656, -2579, 42551, 42551, 42551, 42551, -2579, -2579, -2579,
   44946, 45425,  1652, 20426,  1214,  1664, 42551, -2579,  1741,  1666,
   21386,  1936,  1873, -2579, 21386,  1873,    73,  1873,  1948,  1741,
   25219, -2579,  1741,  1672,  1880, -2579,   679, 32268,  2120,  1993,
    1679, -2579,  1993,   899, -2579, 32268, 10376, -2579,  1228,  1330,
   46383,   499,   -60, -2579,  1693, 46383, -2579,  1751, 32268, -2579,
   -2579, 27619, -2579, -2579, -2579, -2579, -2579, 46383,  1683, -2579,
    1684,   552, -2579, 46383,  1724, -2579,   174,  1984,    63, -2579,
    1688, 46383, 46383, 18440, -2579,   505,   187,   579, -2579,  1968,
   42551,  1724,  2111, -2579, -2579, -2579,   505, -2579,  2005,  1921,
   -2579,   162, -2579, 13904,   505,  1922,    86, 46383, -2579, -2579,
    1783, -2579, 53553,   124,   124, -2579, -2579,  1695,  1699,  1700,
    1701,  1706,  1707,  1708,  1710,  1711,  1712,  1714,  1715,  1721,
    1729,  1732,  1735,  1737,   953,  1740, -2579,  1742,  1612,  1743,
    1744,  1745, 54017,  1752,  1753,  1754,  1755,  1757,   328,   730,
   -2579, -2579, -2579,  1759, -2579, -2579, -2579, -2579,   793,  1730,
   -2579, -2579,  1817, -2579,  1823, -2579, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579,    60,  1005,    54, 46383,  1575,  1704,  2201,
     512,  1970,  1766, -2579,   899,  1410, -2579,  1172, 35845,  1575,
   -2579,  2141,   188,  1750, -2579,   101,  1800, -2579,  1979, 46383,
    1768, -2579, -2579, -2579,  2230, -2579, 36324,  1644, 32268, -2579,
   -2579, -2579, 18440,  2101,  1774, 53553, -2579, -2579, 13904, -2579,
   -2579,  3884,  3884, 28503,   798, -2579,  3884, 13904, 13904,  3884,
    3884, 13904, -2579, -2579, 28199, 52610, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, 34408, 44946,  1775, -2579, 39198, -2579,
   -2579, 46383,  1214, 21386, -2579, -2579,   725, -2579, 21386,  2054,
   -2579, 21386, -2579, 46383,  1776, -2579, 46383, -2579,  9872, 13904,
    1819,   899,  1819, -2579,  1777, -2579,   -84, -2579, -2579,  2189,
   22344,  2148, 13904, -2579, -2579,  1786,   552, -2579,  1947,  1724,
    1789, -2579, -2579, -2579, -2579, -2579, -2579, 13904, -2579,  1190,
    3352, -2579,  2165,  2249, -2579, -2579, -2579, -2579,  1724,   790,
   -2579, 46383,  2251,  2138, -2579, -2579, 32268, -2579, -2579,  1738,
    1738, -2579, -2579,  2218, -2579, -2579, -2579, -2579,   793,  -158,
   27139, 46383, 46383,  1794, -2579, -2579,  -136,  2171,   809, -2579,
     710,  1228, 42551,  2144, 35845, -2579,  2261, 46383,  1575,  1801,
   -2579, -2579,   172,   172, -2579,  1942, -2579,  1951,   181, -2579,
   42551, -2579, -2579, 22344,  1228, -2579,  4481, 18440, 53553,   831,
   -2579, -2579,  3884,  3884,  3884, -2579,  1999, -2579, -2579,   846,
    2268, -2579, 46383,   -36,   -49,  1825,  1828, -2579, -2579,  1831,
   -2579, 13904,  1833, -2579, -2579, 21386,   725,   850, -2579, 53553,
   46383,   855, 53553, -2579,  1838,  -112,  1839, -2579,  7352,  1830,
   -2579, -2579, -2579, -2579, -2579, -2579, 32268, 32268, 46383,  1995,
   -2579,  1995, 10376,  1879, 46383, 13904, -2579,   859,  2253,   158,
      71, 32268, -2579, 42551, -2579, 33450, -2579,   552, 28238,  2064,
   -2579, -2579,    -1, -2579,  2094, -2579,  2154, -2579, 46383,  1904,
     477,  1916, -2579, -2579, -2579, -2579,  1005,   899,  1410,  1750,
    1800,  1847, 42551,  1228,   414, -2579,   710, -2579, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579, -2579,  2278,
    2058,  2280,  1703,   864,  4481,   868, -2579,  2294,  1562,  1606,
   34408,  1852, -2579,  1855, -2579, -2579, -2579, -2579, -2579, 46383,
     875, -2579, 32268, 46383, -2579, -2579, -2579, 46383,  2218,   872,
   -2579, 13904,  1853, 13904, -2579, 16424,  1856, -2579,  2318, 13904,
    1924,  1924,  1228, -2579, 28483,  1486, 22344, 46383, 46383, 46383,
   -2579,  1986,   790,   552,   887, -2579,  1882,  2102,  1874, 13904,
     496,  2087,  1874, -2579, 13904,   124,  1950, -2579, -2579, -2579,
    2337, -2579, -2579, 35845,  1877,  1800,  1575,  1750,  2095, -2579,
    2096,  1883,  1410, -2579, 13904,    -7, -2579, -2579, 46383, -2579,
     897,  1887,  1888, -2579, -2579, -2579,  1890, 16424,  1894, -2579,
   46383,  1892, 32268,  2035, -2579, -2579, -2579,  2253, -2579, -2579,
   -2579,   228, -2579,   228, 26177,  2094, -2579, 33450, 27139,  2195,
   -2579,  1566, -2579, 28567, -2579, -2579, -2579,    64,  2116, -2579,
    2118, -2579, 32268, -2579, -2579,  1228, 35845, -2579, -2579, -2579,
   -2579, -2579, 22344,  1486,  1416, 16928, 16928,  1906,   914, -2579,
    2397,  2065, -2579, -2579,  1911, -2579, -2579, -2579, 39198, 46383,
    1476,  1476,  1486,  2087, -2579, -2579, -2579,  1762,  1960,   197,
     197,  2292, -2579,  1977, -2579,  1800,   930, -2579, 17936,  2060,
     127, 31549, -2579, -2579, -2579, -2579, -2579,  1923,  1920, -2579,
   -2579, -2579,   228, -2579, -2579, -2579, -2579, -2579, -2579, -2579,
    2398, -2579,   138, -2579, -2579, -2579,  1410,  2390, -2579, -2579,
   -2579, -2579, -2579, -2579,  2416,  1476,   552, -2579, -2579, -2579,
    1486, 17432,  1928, -2579, -2579, -2579, -2579
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     135,   214,     0,  1175,  1174,   214,     0,  1150,   214,   423,
     345,     0,  1252,     0,   214,     0,   135,     0,     0,     0,
       0,     0,     0,     0,     0,   214,   490,     0,  1251,   214,
       0,     0,  1222,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    10,    11,    17,    12,    13,
      14,    15,    16,    18,    19,    20,    21,    22,  1158,    23,
      24,    25,    26,     0,    27,    28,    29,    30,    31,   457,
     444,   495,   456,   134,   596,   460,    32,    33,    34,    35,
      36,    37,  1250,    38,   213,   212,   206,     0,     0,     0,
       0,     0,   207,  1088,  1271,  1272,  1273,  1274,  1275,  1276,
    1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,  1286,
    1629,  1287,  1288,  1289,  1577,  1578,  1630,  1579,  1580,  1290,
    1291,  1292,  1293,  1294,  1295,  1296,  1581,  1582,  1297,  1298,
    1299,  1300,  1301,  1583,  1631,  1302,  1303,  1304,  1305,  1306,
    1307,  1632,  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,
    1316,  1633,  1317,  1318,  1319,  1634,  1320,  1321,  1322,  1323,
    1324,  1325,  1326,  1584,  1585,  1327,  1328,  1329,  1330,  1331,
    1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,  1341,
    1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,  1351,
    1352,  1353,  1354,  1586,  1355,  1356,  1357,  1358,  1359,  1587,
    1360,  1361,  1362,  1588,  1363,  1364,  1365,  1635,  1636,  1366,
    1367,  1368,  1637,  1369,  1370,  1589,  1590,  1371,  1372,  1373,
    1374,  1375,  1376,  1377,  1378,  1638,  1379,  1380,  1381,  1382,
    1383,  1384,  1385,  1386,  1387,  1388,  1389,  1639,  1591,  1390,
    1391,  1392,  1393,  1394,  1592,  1593,  1594,  1395,  1640,  1641,
    1396,  1642,  1397,  1398,  1399,  1400,  1401,  1402,  1403,  1643,
    1404,  1644,  1405,  1406,  1407,  1408,  1409,  1410,  1411,  1412,
    1595,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,  1421,
    1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1430,  1596,
    1646,  1597,  1431,  1432,  1433,  1598,  1434,  1435,  1647,  1436,
    1599,  1437,  1600,  1438,  1439,  1440,  1441,  1442,  1443,  1444,
    1445,  1446,  1601,  1648,  1447,  1649,  1602,  1448,  1449,  1450,
    1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1603,
    1460,  1461,  1604,  1462,  1463,  1464,  1465,  1466,  1467,  1468,
    1469,  1470,  1471,  1472,  1473,  1605,  1474,  1475,  1476,  1477,
    1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,  1487,
    1488,  1489,  1490,  1491,  1650,  1492,  1493,  1494,  1606,  1495,
    1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,  1505,
    1506,  1507,  1508,  1509,  1510,  1511,  1607,  1512,  1513,  1514,
    1651,  1515,  1516,  1608,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1524,  1525,  1526,  1527,  1528,  1529,  1609,  1530,  1610,
    1531,  1532,  1533,  1534,  1653,  1535,  1536,  1537,  1538,  1539,
    1611,  1612,  1540,  1541,  1613,  1542,  1614,  1543,  1544,  1615,
    1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1554,
    1555,  1556,  1557,  1558,  1559,  1616,  1617,  1560,  1654,  1561,
    1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,
    1627,  1628,  1573,  1574,  1575,  1576,  1089,  1090,  1098,  1255,
       0,     0,  1070,   209,   422,   135,     0,     0,     0,     0,
       0,   339,   338,     0,  1141,   344,     0,     0,  1088,   101,
    1595,  1462,  1609,  1089,    99,  1068,     0,   365,   366,     0,
     374,     0,   358,   363,   359,     0,   384,   376,   385,   377,
     357,   378,   367,   356,     0,   386,     0,   361,     0,     0,
       0,   210,   175,   345,   135,     0,  1166,  1165,  1153,  1158,
    1163,  1162,  1164,     0,  1149,     0,     0,  1087,  1207,  1209,
    1210,  1206,   164,  1117,  1239,  1611,  1540,  1253,  1240,  1237,
    1238,   211,   489,   487,     0,  1038,  1369,  1407,  1499,  1510,
    1611,  1183,  1187,     0,   208,  1616,  1244,     0,  1245,  1092,
       0,   461,   636,  1091,  1062,  1221,     0,  1226,     0,  1476,
     465,   468,  1107,   466,   457,     0,     1,   135,  1157,  1235,
       0,     0,     0,   486,   486,     0,   486,     0,   449,   457,
     452,   456,   597,  1249,  1611,  1540,  1243,  1246,  1377,     0,
       0,  1377,     0,  1377,     0,  1377,     0,     0,  1030,     0,
    1031,  1071,  1121,  1119,     0,  1118,  1120,   310,   343,   342,
     341,   340,   345,  1377,  1125,  1102,     0,   391,   392,     0,
       0,     0,     0,     0,  1136,   102,   100,   372,   373,     0,
     364,   360,   362,     0,  1099,  1655,   688,  1656,   717,   695,
     717,   717,  1657,  1658,  1659,  1660,   684,   684,  1342,   697,
    1661,  1662,  1663,  1377,  1664,  1665,   685,   686,   722,  1666,
    1667,  1668,  1669,  1670,     0,     0,  1671,   717,  1672,   684,
    1673,  1674,   689,  1675,   658,     0,  1676,   687,   659,  1677,
     725,   725,  1678,   712,  1679,  1100,  1101,   383,     0,   387,
     670,   671,   672,   673,   698,   699,   674,   704,   705,   709,
     675,   757,   684,  1377,   383,   379,  1377,   383,  1064,  1377,
       0,     0,   171,     0,     0,  1155,  1167,  1680,  1681,  1682,
    1683,  1685,  1684,  1686,  1687,  1688,  1689,  1690,  1691,  1692,
    1693,  1694,  1697,  1695,  1696,  1698,  1699,  1700,  1701,  1702,
    1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1168,
    1169,  1181,     0,  1182,  1172,  1161,   135,   421,  1208,  1152,
       0,     0,     0,     0,  1241,     0,     0,     0,  1073,  1075,
    1076,   959,  1086,  1033,     0,  1578,  1579,  1580,  1023,     0,
    1581,  1582,  1583,  1631,   888,   875,   884,   889,   876,   878,
     885,  1584,  1585,   825,  1586,  1587,  1084,  1588,  1589,  1590,
    1592,  1593,  1594,   880,   882,  1596,  1597,     0,  1085,  1599,
    1600,  1443,  1602,  1603,  1605,  1606,   886,  1608,  1610,  1611,
    1612,  1613,  1614,  1083,  1615,   887,  1617,     0,     0,     0,
    1051,   978,     0,     0,     0,  1033,   859,     0,     0,   678,
     679,   700,   701,   680,   706,   707,   681,     0,  1045,   758,
     904,  1033,   871,   934,   802,     0,   857,   851,  1041,   472,
    1039,     0,   852,  1072,  1033,  1024,   472,  1037,  1186,  1184,
    1190,  1185,     0,     0,     0,     0,     0,   638,   637,  1063,
    1220,  1218,  1219,  1217,  1216,  1223,     0,  1225,  1158,   973,
     975,     0,  1024,   467,     0,     0,     0,   447,   446,     3,
    1107,     0,     0,     0,  1228,   484,   485,     0,     0,     0,
       0,     0,     0,     0,     0,   581,   511,   512,   514,   578,
     582,   590,     0,   453,     0,  1247,     0,     0,     0,   122,
     122,     0,     0,     0,     0,     0,    93,    42,    86,     0,
       0,     0,     0,   189,   202,     0,     0,     0,     0,     0,
     199,     0,     0,   182,   176,   178,    44,     0,   122,     0,
      40,     0,     0,     0,    46,  1088,     0,  1629,  1630,  1631,
    1632,  1633,   889,     0,  1635,  1636,  1637,  1638,  1639,  1640,
    1641,  1642,  1643,  1644,  1595,  1646,  1647,  1648,  1649,  1650,
    1651,  1609,  1653,  1615,     0,  1654,     0,   863,  1089,  1095,
     981,   495,   979,  1108,     0,  1029,     0,  1109,  1759,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,
    1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,
    1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,  1790,
    1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,
    1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,  1820,
    1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,  1830,
    1831,  1832,  1833,  1719,  1834,  1835,  1836,  1837,  1838,  1111,
    1110,  1112,  1026,  1069,  1032,     0,     0,   419,     0,     0,
    1122,     0,  1103,     0,     0,  1377,   170,  1377,     0,   310,
     310,     0,  1135,  1138,   375,   371,   369,   368,   370,   716,
     703,   711,   710,     0,   693,   692,   691,     0,   690,     0,
       0,   717,   717,   715,   694,   670,     0,     0,     0,   721,
       0,   719,   381,   382,     0,   354,     0,   664,   660,     0,
     730,   731,   732,   733,   740,   741,   738,   739,   734,   735,
     728,   729,   736,   737,   726,   727,     0,   742,   743,   744,
     745,   746,   747,   748,   749,   676,   682,     0,     0,   349,
       0,     0,   351,     0,     0,     0,   345,     0,   135,     0,
     183,  1177,  1178,  1176,     0,     0,  1160,   186,  1180,  1170,
    1179,  1159,   203,  1171,  1154,     0,  1151,   410,  1196,  1195,
    1204,   165,     0,   984,     0,   135,  1242,  1254,     0,   855,
     978,  1022,     0,     0,     0,     0,     0,     0,   861,   987,
       0,     0,   782,     0,     0,     0,  1002,     0,  1008,     0,
       0,     0,   783,   762,   763,     0,  1050,  1059,   977,     0,
     859,   973,     0,   937,   939,     0,  1091,     0,   853,   854,
     860,     0,  1079,     0,   757,   757,  1044,   959,     0,     0,
     952,   956,   957,   958,     0,     0,     0,  1036,     0,   967,
     969,     0,     0,   798,   965,     0,   801,     0,     0,     0,
       0,   953,   954,   955,   946,   947,   948,   949,   950,   951,
     963,   945,   779,     0,     0,   906,   858,     0,   778,  1042,
       0,   599,     0,  1077,  1074,     0,  1025,   599,  1198,  1202,
    1203,  1201,     0,  1197,  1189,  1188,  1193,  1191,  1194,  1192,
       0,  1214,     0,  1211,   976,   594,   469,     0,     0,  1236,
    1234,     0,   129,     0,     0,  1229,   464,   463,   505,   505,
     496,   499,   505,   462,   553,   554,     0,     0,     0,     0,
     587,   585,  1073,  1086,   541,   515,   540,     0,     0,   519,
       0,   545,   758,   580,   451,   509,   510,   513,   450,     0,
     583,     0,   593,   581,   514,     0,  1248,     0,     0,     0,
       0,     0,  1377,     0,     0,    77,    58,   263,     0,   121,
       0,     0,     0,     0,     0,     0,     0,    85,    82,    83,
      84,     0,     0,     0,     0,   187,   188,   201,     0,   192,
     193,   190,   194,   195,     0,     0,   180,   181,     0,     0,
       0,     0,   179,     0,     0,     0,     0,     0,     0,     0,
       0,   495,   495,   495,   869,     0,   493,   494,     0,     0,
    1027,  1030,   409,   318,     0,   308,     0,     0,     0,     0,
       0,     0,   345,  1126,  1124,  1128,  1127,  1129,  1104,     0,
       0,     0,     0,   169,   167,     0,     0,   307,   282,  1140,
       0,     0,  1377,  1137,     0,   297,     0,     0,     0,   383,
       0,   714,   713,   665,   661,     0,     0,     0,     0,   388,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     383,   380,   383,  1065,     0,   383,   174,     0,  1377,     0,
     310,  1156,  1173,   184,   204,   185,   205,   442,     0,   416,
     424,   429,   407,     0,   407,     0,   426,   430,   407,   425,
     407,   420,     0,   166,     0,  1116,     0,  1115,     0,  1034,
       0,     0,  1021,  1017,     0,     0,     0,     0,     0,   988,
     989,   990,   991,   992,   993,   994,   995,   996,     0,     0,
     997,     0,     0,     0,   944,   952,   956,   957,   958,   953,
     954,   955,   946,   947,   948,   949,   950,   951,   971,     0,
       0,     0,     0,     0,     0,     0,     0,   827,     0,     0,
     933,     0,   973,  1007,     0,     0,     0,     0,     0,     0,
     973,  1013,     0,     0,     0,  1049,     0,  1046,   804,  1033,
       0,   940,   803,     0,     0,     0,  1081,  1082,   759,   805,
     770,   774,   775,   776,   780,  1114,  1113,  1043,     0,  1035,
       0,     0,   760,   784,   789,     0,  1014,   821,     0,   809,
       0,   797,     0,   807,   811,   785,   800,     0,   781,     0,
    1036,   968,   970,     0,   966,     0,   771,   772,   773,   764,
     765,   766,   767,   768,   769,   777,   943,   941,   942,     0,
       0,     0,   908,     0,     0,   806,  1040,  1369,  1407,     0,
     483,   483,   483,   471,   481,     0,   650,   495,  1051,   650,
       0,   757,   639,  1107,  1224,  1213,  1212,   974,  1106,   135,
       0,  1232,     0,     0,     0,   141,   124,     0,     0,   157,
     159,   599,     0,  1033,  1230,   503,   504,   508,   508,     0,
       0,   508,  1606,  1495,     0,     0,     0,     0,   546,   588,
       0,   579,   543,   544,     0,   542,  1073,   547,  1072,   548,
     551,   552,   520,   589,  1060,   591,     0,   584,   455,   454,
     595,     0,    43,     0,  1377,    60,     0,     0,     0,     0,
       0,     0,   218,   312,   218,    98,  1377,   383,  1377,   383,
    1275,  1343,  1511,     0,    56,    89,     0,   287,   115,     0,
     272,   315,    79,    94,   108,     0,     0,   177,    45,   191,
     196,   111,   200,   197,  1145,   198,   122,     0,    41,     0,
     109,     0,  1143,     0,     0,    47,   113,  1147,   493,   493,
     493,     0,   980,     0,     0,     0,   982,   983,  1029,     0,
     408,     0,   309,     0,   418,   398,   399,   409,     0,     0,
     310,   310,  1125,     0,     0,  1105,   105,     0,     0,     0,
       0,  1269,     0,   300,   298,   331,     0,   305,   299,   308,
       0,     0,   258,     0,     0,   393,     0,     0,     0,     0,
       0,   683,   696,   355,   670,     0,   724,   723,   725,   725,
     670,     0,   656,     0,   668,     0,   708,   677,   750,   751,
     752,   753,   754,   755,   756,   348,   350,     0,   352,     0,
       0,     0,   411,     0,   414,     0,   413,   417,   412,   406,
       0,   437,     0,     0,     0,     0,     0,     0,  1205,   985,
     488,   826,     0,     0,  1018,     0,     0,   902,     0,   877,
     879,   892,     0,   881,   883,     0,   960,     0,     0,     0,
     893,   829,   830,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   846,   845,   894,   932,     0,     0,  1005,  1006,     0,
     895,     0,     0,  1012,     0,     0,     0,   900,     0,  1066,
       0,     0,     0,  1058,   856,   974,   938,   936,   862,   757,
       0,     0,     0,     0,     0,     0,     0,   810,   799,     0,
     808,   812,     0,     0,     0,   793,     0,     0,   791,   822,
     787,     0,     0,   823,     0,     0,   907,   916,   483,   483,
     483,   483,   480,   482,     0,     0,     0,     0,  1495,     0,
     622,   602,   598,   600,   609,   622,   627,   872,   648,   873,
    1091,     0,   558,   493,  1059,   558,     0,  1199,  1215,     0,
    1233,     0,   146,   128,   148,   147,     0,   155,     0,  1033,
       0,   146,   130,     0,   149,   160,  1232,     0,   163,     0,
     497,   498,   500,     0,   961,   508,   502,   550,   549,     0,
     518,   586,   516,     0,   592,     0,     0,     0,   262,     0,
       0,     0,   218,     0,   320,     0,   327,   294,    78,     0,
       0,     0,    52,    97,    70,    62,    48,    76,     0,     0,
      81,     0,    74,    91,    92,    90,    95,     0,   248,   228,
     259,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   495,   491,   492,
     864,  1028,   440,   441,   182,   439,   319,     0,     0,     0,
     307,  1140,  1123,   345,     0,     0,   104,   106,     0,   170,
       0,   310,   175,     0,  1264,   286,   282,   306,   280,   279,
     281,     0,  1270,  1139,     0,   394,     0,   390,     0,  1134,
     702,   667,     0,   720,   718,   666,     0,   662,   669,   383,
       0,   443,     0,   402,   438,   427,   432,     0,   436,   434,
     433,   428,   431,     0,  1020,  1016,     0,   874,   986,     0,
     972,  1000,   999,   828,   837,   841,   842,   843,  1001,     0,
       0,     0,   838,   839,   840,   831,   832,   833,   834,   835,
     836,   844,  1010,  1009,  1003,  1004,     0,   897,   898,   899,
    1011,     0,  1067,  1048,   973,  1053,  1055,     0,     0,   935,
    1080,   761,     0,     0,   790,  1015,   813,     0,     0,     0,
     786,   960,     0,     0,     0,     0,     0,   795,     0,     0,
       0,     0,   870,     0,     0,     0,     0,   474,   473,   479,
     622,   627,     0,   457,     0,   609,     0,   621,   537,   620,
     603,     0,   633,   631,     0,   633,     0,   633,     0,   537,
       0,   623,   537,   620,     0,   640,  1063,   649,     0,   575,
       0,  1047,   575,     0,   470,  1231,     0,  1227,     0,     0,
       0,   136,   133,   123,     0,     0,   158,   146,   137,   506,
     507,     0,   501,   517,  1061,   116,   218,     0,     0,    59,
       0,   329,   274,   321,   304,   289,     0,     0,     0,   219,
       0,     0,     0,     0,   275,     0,     0,     0,   239,     0,
       0,   304,     0,   311,   235,   236,     0,    51,    71,     0,
      67,     0,    96,     0,     0,     0,     0,     0,    54,    66,
       0,    49,     0,   383,   383,    57,   273,  1099,  1655,  1656,
    1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
    1667,  1668,  1669,  1670,  1748,  1671,   225,  1672,  1443,  1673,
    1674,  1675,     0,  1676,   659,  1677,  1678,  1679,   946,   947,
     223,   314,   220,  1100,   221,   322,   222,   224,     0,   317,
     112,  1146,     0,   110,     0,  1144,   119,   117,   114,  1148,
     867,   868,   865,   493,   421,   401,     0,  1269,     0,     0,
       0,  1377,     0,   103,     0,  1140,   168,     0,   307,  1269,
    1267,     0,   337,   258,   332,     0,  1263,   389,     0,     0,
       0,   663,   657,   353,     0,   415,     0,   435,  1019,   890,
     901,   998,     0,     0,     0,     0,   896,   891,  1056,  1057,
    1052,   819,   817,   814,     0,   815,   794,     0,     0,   792,
     788,     0,   824,   903,     0,   919,   914,   915,   478,   477,
     476,   475,   608,   606,     0,   611,  1091,   618,   530,   536,
     607,     0,   601,     0,   632,   628,     0,   629,     0,     0,
     630,     0,   604,     0,  1091,   605,     0,   647,     0,     0,
     910,   864,   910,  1200,   145,   125,     0,   126,   156,     0,
       0,     0,     0,   150,   395,     0,   325,    61,     0,   304,
       0,   218,   291,   290,   293,   288,   292,     0,   237,     0,
     244,   346,     0,     0,   277,   278,   276,   238,   304,   310,
     240,     0,     0,     0,    63,    53,    50,    55,    64,     0,
       0,    65,    68,   655,    80,    73,  1748,  1755,     0,     0,
       0,     0,     0,     0,   397,   404,   182,     0,     0,  1266,
     282,     0,     0,     0,   307,   107,     0,     0,  1269,     0,
     172,  1268,     0,     0,   215,     0,   255,     0,     0,  1256,
       0,  1133,  1132,     0,     0,   403,   847,     0,     0,     0,
    1054,   816,   820,   818,   796,   905,   921,   918,   643,     0,
     646,   610,     0,     0,   525,   532,     0,   535,   529,     0,
     612,     0,     0,   614,   616,     0,     0,     0,   651,     0,
       0,     0,  1068,   556,  1318,  1589,  1494,   557,     0,   561,
     555,   559,   564,   566,   565,   567,   563,   574,     0,   577,
    1078,   577,     0,     0,     0,     0,   161,     0,   152,   152,
       0,   138,   962,     0,   218,     0,   303,   326,     0,     0,
     234,   347,     0,   241,   336,   243,     0,    72,     0,    88,
       0,     0,   316,   120,   118,   866,   421,     0,  1140,   258,
    1263,     0,     0,     0,   175,  1265,   282,   271,   264,   265,
     266,   267,   268,   269,   270,   285,   284,   256,   257,     0,
       0,     0,  1134,     0,   848,     0,   849,     0,   495,   648,
       0,     0,   642,     0,   523,   521,   524,   526,   522,     0,
       0,   619,   635,     0,   615,   613,   624,     0,   655,     0,
     626,     0,     0,     0,   568,   562,   909,   911,     0,     0,
     528,   528,     0,   132,     0,   650,     0,     0,   154,   154,
     140,     0,   310,   328,     0,   295,   302,   261,   227,     0,
       0,   254,   227,   654,     0,   383,     0,   323,   396,   400,
       0,   217,  1257,   307,     0,  1263,  1269,   258,     0,  1260,
       0,     0,  1140,   850,     0,   924,   641,   644,     0,   617,
       0,     0,     0,   652,   653,   625,     0,     0,     0,   560,
       0,     0,   576,     0,   459,   458,   127,   152,   131,   162,
     151,   505,   153,   505,     0,   336,   283,     0,     0,     0,
     242,     0,   245,     0,   333,   334,   335,     0,   250,   247,
     251,    69,    87,    75,   324,     0,   307,  1258,   173,   216,
    1261,  1262,     0,   650,   920,     0,     0,     0,     0,   533,
       0,   539,   634,   570,     0,   569,   912,   913,   530,   154,
     508,   508,   650,   254,   296,   301,   260,     0,     0,     0,
       0,     0,   252,     0,   253,  1263,     0,  1130,  1577,  1319,
    1547,     0,   922,   925,   923,   917,   645,     0,     0,   531,
     571,   527,   505,   143,   142,   139,   218,   226,   246,   231,
       0,   230,     0,   313,   249,  1259,  1140,     0,   929,   928,
     927,   931,   930,   534,     0,   508,   330,   229,   233,   232,
     650,     0,     0,   144,  1131,   926,   538
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2579, -2579, -2579,  1842, -2579, -2579,  -618,  -984,  -800,  -993,
   -2579,     4, -2579, -2579, -2579,   275, -2579,   974, -2579,   273,
    -551,   606, -2579,  1058, -2579, -2579, -2579, -2579, -2579, -2579,
   -2579,  -520,   555, -2305, -2579,   490, -2579, -2579, -2579, -2579,
     -82,   248, -2579, -1106, -1773, -2442,  -416, -2579,  -523, -2579,
    -171,  -531,  -481,  -513, -2356,  -938, -2579,  1479,  -222, -2579,
     635, -2579, -2122, -2579, -2579,   621, -2579,  -954, -2579, -1844,
     241,  -458, -2023, -2126, -1794,  -621, -2579,  -468,   291, -1737,
    -810, -2579,   649, -2579,  -451, -2579,  -516, -1502,    85, -2365,
    -625,    -6, -2579, -2579, -2579,  -498, -2579, -2124, -2579, -2579,
   -2579, -2579, -2579, -2579, -2579,   574, -2579, -1097,   258, -2579,
      21,  1523,   353, -2579, -2579, -2579, -2579,  1244,  -712, -2579,
    1293, -2579, -2131, -2579,  -424, -2579,  -473,  -467, -2579, -2579,
      20,  -793,  1236, -2579, -2579, -2579, -1093, -2579,  -326, -2579,
   -2579, -2132, -2579,    27, -2579, -2579, -2579, -2579,   107,   364,
   -2579,  -366, -1908,  -113, -2579, -2465, -2578, -2579, -2579,  -430,
   -2477, -1696, -2579,    70, -2579, -2579, -2579, -1166, -2579,  -930,
      10,  1822,    -2,   -24,   -13,     7,    45,  1541,  1593, -2579,
   -1288,   840, -2579, -2579, -1782,  -604,   -58, -2579,   707, -1335,
   -1726,  -428,  1053,  1527,  1524,  -325,  -345, -2579,  -461, -2579,
    -913, -2579, -2579,   704,  1093, -1289, -1261, -2579,   405, -2579,
    -395,  -330, -2579, -2579, -2579, -2579, -2579,   148,  -235,  -421,
    1074, -2579,  1543, -2579, -2579, -2579, -2579, -2579, -1254, -2579,
     756, -2000,   439, -1980, -1872,   190,   176,  -882,  -193,    35,
     447,  -280, -2579, -2579,  -278, -1693, -2375,  -294,  -293, -2579,
   -2579,  -506, -1127,  -690, -2579, -2579,   386,   -80, -2579, -2579,
   -2579,   726,  1090, -2579, -2579,  2340,  2515, -2579,  -573,  2614,
    -517,  -672,  1258, -1058,  1261, -1050, -1080, -1075,  1264,  1267,
   -1232,  3123,  -983,  -874,    -5, -2579, -2386, -1512, -2579, -2579,
   -2579,   -45, -2579,  -361, -2579,  -367, -2579, -2579, -2579,  -397,
   -2307, -2579,  1195,   880, -2579, -2579, -2579, -1243, -2579,  3908,
     773, -2579, -1630,  -868,  -585,  1287,  -746, -1015, -1162, -2579,
   -2579, -2579, -2579, -2579, -2579, -1659, -1731,  -576,   841, -2579,
   -2579,   954, -2579, -2579, -2579,  -600,  1054,  -548,  -838,   851,
   -2579,   196,  1998, -1327, -2579,   812, -1938, -2579, -2579,   470,
   -2579,  2276,  -459, -1618,   948, -1028,    36, -2579,  -777,   296,
    1537,  -853, -2110, -2579, -2579,  -485, -2233,  -896, -2579,  -627,
   -2579, -2579,  1042,    38, -2579,  1184, -2579, -2579, -2579, -2579,
   -2579, -2579, -2579,   587, -2579,   973, -2579,   721, -2579, -2579,
     838, -1091, -2114
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    37,    38,    39,    40,    41,  1523,  1478,  1258,  1005,
    1468,  1247,    42,  2154,  2155,  2156,  1833,   986,  2865,  1834,
     987,   988,  2158,    43,    44,    45,    46,  1887,  2656,  2242,
    2657,  1960,  1881,  1256,  1957,  1577,  1507,  1257,   486,  1591,
    2243,  2194,  1578,    47,  2146,  2471,  2922,  2168,  3003,  2413,
    2414,  1835,  2928,  2929,  2222,  1460,  2920,  1903,  2795,  1839,
    1822,  2415,  1912,  2756,  2512,  1836,  2399,  1904,  2854,  1533,
    1905,  2855,  2611,  1906,  1503,  1528,  2147,  2930,  1840,  1504,
    2145,  2472,  1447,  1907,  2861,  1908,   496,  2623,   536,  2214,
    1889,   503,   477,   478,   716,  1140,  1049,  1141,    49,  2205,
    2206,    50,   653,  1531,    51,  1150,  1514,    52,  1524,    53,
     537,   953,  2102,  1761,    55,   528,   529,   734,  1195,   530,
     717,    56,   742,    57,   599,  1248,   538,  1249,  1250,   802,
      58,  1259,   804,   805,    59,    60,    61,  2681,  2520,  1163,
    1534,  1914,   497,   540,  1765,  1391,  2601,    63,  2107,  1769,
    2111,  2746,  2367,  2106,  2113,  2848,  2911,  2108,  1770,  1771,
    2747,  1772,    64,   548,    65,    66,   813,   634,    67,  1451,
     541,   886,    70,    71,    72,   577,   590,   591,  1361,  1743,
    2074,   957,   564,   565,  1875,   607,  1497,  1400,  1401,  1777,
    2120,  1427,  1428,   966,   967,  2705,  2904,  2706,  2707,  2569,
    2570,  2989,  1415,  1419,  1420,  1797,  1787,  1406,  2359,  2729,
    2730,  2731,  2732,  2733,  2734,  2735,   887,  2590,  2840,  1423,
    1424,   969,   970,   971,  1432,  1807,    74,    75,  1746,  2081,
    2082,  2083,  2084,  2337,  2338,  2352,  2348,  2575,  2713,  2085,
    2086,  2698,  2699,  2812,  2355,  2092,  2717,  2718,  2769,  1550,
     718,  1263,  1198,   720,   888,   721,  1174,   889,  1178,   723,
     890,   891,   892,   726,   893,   894,   895,   729,  1170,   896,
     897,  1189,  1217,  1218,  1219,  1220,  1221,  1222,  1223,  1224,
    1225,   939,  1646,   899,   900,   901,  2088,   902,  1355,  1732,
    2067,  2739,  2836,  2837,  2322,  2556,  2696,  2808,  2947,  2982,
    2983,   903,   904,  1303,  1304,  1305,  1729,  1350,  1351,   905,
    2476,  1353,  1639,   940,  1661,  1299,  1051,  1052,  1264,  1618,
    1619,  1642,  1989,  1649,  1654,  2017,  2018,  1662,  1697,   906,
    1602,  1603,  1975,  1272,   907,   630,  1056,   631,  1269,  1691,
     916,   908,   909,   910,  1296,  1297,  2033,  2296,  2297,  1667,
    1803,   582,  2029,  2709,   738,  1142,   911,   912,   913,   914,
     942,   584,  1053,   482,   732,  2912,  1152,   946,  1054,  1837,
    1687,    76,    86,   542,    78,   935,   587,   936,   938,    79,
     558,   559,    80,   571,   572,  1260,  1374,  1261,    81,    82,
     573,    83,  2679
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     476,   479,  1143,   941,  1004,  1246,   972,    73,   646,   731,
      68,  1482,  1251,   608,  1302,  1185,  1147,   744,  1540,  1481,
     719,    54,  1229,    73,  1446,  1232,  1158,    62,  1252,  1493,
    1307,  1144,  1736,  1252,   595,   929,   539,   800,    77,  1191,
     576,  1638,   480,   735,  1513,  1457,  2030,  1309,  2474,   610,
    1453,  2148,  2121,  1515,  1389,  2126,  2095,  1516,  1544,  1517,
     611,   745,  2478,  1356,  1778,  1262,   581,  1781,   801,  2499,
     737,  1006,  2114,  1010,  2498,  1014,  1364,  2054,  1486,  2334,
     593,  2509,  1676,  1677,  2144,    48,  2184,  2185,  2186,  2196,
    1422,   551,   616,  2295,  2513,   822, -1071,  1171,  1172,  1597,
     484, -1096,  -717, -1634,  -725,  -725,  2351,  1192, -1645, -1093,
   -1093, -1737, -1737,  1749,   822,   806, -1748, -1748, -1096,  1762,
    1314, -1645,  1371,  1518,  1183,   624,  1148, -1652,  1192,  1799,
    -445,   923,  2659, -1097,  -722, -1755, -1755, -1652,  -722,   547,
     547, -1094, -1094,   822,  2670,  1252, -1097,  1252,  1252, -1634,
    -684,  -697,  -712,  1318,   547,   547,  1235,  2674,  1320,  1802,
    2208,  -944,   585,  1368,  1240,   547,  1240,  1192,  -944,   822,
    1438,   822,  1973,  -448, -1757, -1757,   600,  -405,  2700,   965,
    1609,  2615,   547,  1192,  1326,  2969,   968,  2858,   731,  2654,
    1165,   659,  1466,  1689,  1449,  1469,  1470,  1994,  1191,  1614,
    2787,   647,  1995,  2373,  1615,  1484,  2803,  1689,  2772,  1885,
     930,  2721,  1318,  2349,  2748,  1252,  1328,  1320,  1252,  1252,
    -182,  1611,  2675,  1726,  -445,  -182,  2599,  2248,  2250,  1613,
    1727,  2218,  2847,  2089,  1166,  1407,  1407,  2676,  1733,     3,
       4,  2799,   605,  1326,  2342,  2649,  -964,  1994,  2089,  2800,
    1873,  2788,  1995,  -964,  3018,  2417,  2999,  1171,  1172,  2816,
    2789,  1805,   544,   605,   601,  2832,  1775,  -448,  1318,  1441,
    1491,  2913,  2814,   648,   649,  1328,  1369,  1492,  2343,  1449,
     562,  1408,  1408,  1183,  2849,  2533,  2284,  1200,  1201,  2790,
    2176,  3009,   955,  2612,  2578,   731,  1298,  2748,   543,  2392,
     961,  1465,  1763,  2785,  2345,  2379,  2624,   800,  2817,  1994,
     650,  2360,   800,    84,  1995,  1458,   549,   549, -1734, -1734,
    2104,  2945,  1458,   546,  1476,  1186,  2152,  2418,   810,  1144,
    2262,  1328,  1573,  1254,  1820,  2771,  2672,   822,  1310,   811,
    2572,  1409,  1519,  2850,  2576,  2829,  2204,  1187,  1477,   588,
    2946,  2351,  2648,  1776,  2430,  2105,  1404,  2260,    85,  2285,
    2791,  1188,   649,  1202,  1203,   596,  2613,  1366,  1806,  2391,
    2380,    26,  2792,  2666,   963,   688,   931,   924,   932,  2625,
    1734,  2992,  2669,   563,  2518,  2673,  -572,  2510,  2630,  1435,
    1410,  1410,  1821,   652,  1366,   956,  1193,  1370,   650,  2382,
    1538,   597,  2144,   545,  2144,  1372,  1874,  1471,    31,  1167,
    2419,  1547,  1647,  1548,  3019,  2770,  -445,  1193,  2801,  2677,
    1653,  1443,  1554,  2871,  2700,  2347,   800,   800,  1204,  1205,
    1206,  1207,  1208,  1209,   651,  2534,  1210,  1211,  2600,  1555,
    1480,  3010,  2959,   533,  2818,  1456,   722,  1496,   925,    33,
    1411,  1411,  1495,  2075,  2076,  1886,  1193,  2815,  2562,  -448,
    2748,   816,  1405,    34,  1638,  2976,  3000,  1574,  1576,  2604,
    1275,  2868,  1193,  1594,   731,   598,  2965,  1940,  1942,  -445,
    1872,   652,  1941,  1943,  1944,  1815,  1387,    35,   660,   586,
    1601,  1895,    73,   602,  2655,   635,  1799,  2859,  1938,  1607,
    1608,  1764,  2970,  1621,  1622,  2616,   632,  1939,  1459,  2851,
    2527,  2938,   633,  2948,  1383,  1459,  1168,  2116,  -944,  2097,
     715,  2939,  -448,   636,  1143,  2129,  2474,  2192,  2193,   799,
    1482,  2531,  1788,   595,  1485,  1444,  2621,  2124,  2779,  1529,
    2478,    73,  1212,  1213,  1433,  3001,  1169,   485,  2511,  1472,
    1194,  1434,   973,   610,  1690,   803,  2748,  1473,   476,   476,
    2622,  1186,  1186,  2793,   611,  2089,  2794,  2089,  2056,  1458,
    1456,  1228,  3002,  2710,  2149,  2639,  2640,  1456,  2714,  1872,
    1728,  2716,   476,  1187,  1187,  2701,  2754,   628,  1537, -1071,
    -445,   629,   612,  2099, -1096,  -717, -1634,  1188,  1190,  2196,
    2690, -1645,  1934,  -964,    73,  2763,   934,    68,  1541,  1542,
    1231, -1096,  1569,  2606, -1645,   808,  1747,   627,    54,  2177,
   -1652,  1048,   476,  1139,    62,   722, -1097,  -722,  1579,  -445,
   -1652,  -445,  1313,  -448,   943,    77,  1349,   954,  1820, -1097,
    1798,  1798, -1634,  1173,  1177,  -712,  2870,  1362,  1750,  1244,
    1245,  1244,  1245,  2876,   628,  1214,  1215,   933,   629,  1291,
    1991,  1992,   731,   731,  2877,  2012,  2872,  2924,  1849,  1599,
    2395,  3007,  -448,   719,  -448,   642,  1476,   731,  1852,  2603,
    2010,  1855,    48,  1598,   978,  1298,  2150,  1487,  1549,  1605,
     979,  1252,  1346,  1347,  1348,  1349,  2141,  2626,  1686,   715,
    1477,  1252,  1651,   657,  1252,  -182,  -182,  2041,  2042,  1599,
    1144,  2653,  1458,   821,  3025,  2824,  1994,    26,  1710,  2269,
    1567,  1995,  1996,  1997,  1998,   978,  1674,  2007,  2008,  2009,
    2010,   979,   722,  2172,  1575,   476,  1186,  1238,  1143,   822,
    1239,   800,   735,  1561,  1638,  1458,  2173,  2498,    26,  1565,
    2943,  2605,  1310,   654,    31,  2396,  1599,   603,  1187,  2658,
     961,  2937,  1459,  1508,  1599,  1571,  1144,  1449,  2127,  1647,
    1647,  1562,   801,   822,  1647,  1933,  1935,   658,  1450,  1956,
    2323,  2324,  2325,  2326,  1916,    31,  1958,  2005,  2006,  2007,
    2008,  2009,  2010,   961,  2474,    33,   980,  2231,   962,   799,
    2925,   731,  1252,  2235,   799,  1048,   715,  2300,  2478,    34,
    2669,   661,  1678,    73,  1963,  1252,  1647,  1647,  1307,  1964,
    2341,  2397,   476,  2398,  1456,   604,    33,  1923,  2089,  1841,
    1490,  2034,  2089,    35,   963,  1509,   662,   980,  2757,   807,
     981,   549,   809,  1692,  1711,  1508,  1847,    36,  1945,  1381,
    1946,   476,  1382,  1948,  1482,  2627,  2187,  2098,  1458,  2270,
    1712,  3005,   560,  2175,   920,  1713,  1302,   963,   578,  2271,
    1965,   476,   476,   476,  3020,   476,   476,  2926,    36,  2703,
     595,   663,  1510,   964,  2704,   978,  1812,  1868,  1869,  1870,
    2309,   979,  1143,  1208,  1209,  2151,  2342,  2152,  1624,   476,
    1458,  1999,  1714,   605,   547,  1459,  1625,  1626,  1627,  1628,
    -494,   722,   741,  1848,  2632,  -494,   964,  2662,   799,   799,
     617,  1593,  2637,  2000,  1594,  2153,  2178,   812,  1449,  2124,
    2343,   731,  1858,  1396,  1397,  2118,  1403,  1865,  1459,  1452,
     814,  -457,  1823,  1318,   611,   611,  2344,   611,  1320,  1595,
     981,  1920,  1596,   476,   815,  -457,  2345,   476,   476,   504,
    -457,  1202,  1203,   532,  1510,   816,  1186,  1456,   476,   817,
    2866,   553,  2219,  2096,  1326,  2223,  2179,  1519,   638,   487,
     639,  2853,   592,   592,  -494,   715,   954,   922,  1187,  1850,
    2346,   981,   928,  2001,  1853,   628,  1894,   980,   937,   629,
    1456,   982,  1190,  1212,  1213,   983,  1328,  2128,  2128,  -457,
    1048,  2711,  2264,  2265,  2266,  2267,  2268,  1048,  2183,  2272,
    2273,  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,  -457,
    1208,  1209,   944,  -494,   731,   984,   620,   628,  1048,   603,
     488,  1365,  1483,   606,   945,  1932,   983,    92,   947,  1715,
     483,  1459,  2089,  -495,     3,     4,   531,  1758,  -495,  2046,
    1231,  2089,  1882,  1175,  1962,  1883,  2089,   561,  1966,  2089,
    1967,   574,  2023,  2313,  2314,   948,   984,  2347,  -457,   731,
    2022,   800,  2024,  2025,  2813,  1184,  2047,  -457,  2089,   978,
    1969,  1181,  1182,  1459,   800,   979,  1513, -1732, -1732,   722,
     722,  1253,  2813,   985,   951,  1515,  1253,   604,   952,  1516,
    2044,  1517,   959,  1456,   722,  2160,   533,  2162,  1226, -1733,
   -1733,  1647,  1647,  1647,  1647,  1647,  1318,  -495,  1647,  1647,
    1647,  1647,  1647,  1647,  1647,  1647,  1647,  1647,  1638,   974,
    1212,  1213,  1900,  2093,   985,  1139,  2544,  1924,  2232,   975,
    1596,   981,  2908,   918,   919,  1456,   921,  1326,   487,   976,
    2428,  1930,  2244,  1302,  1931,  2712,  1952,   476,  2421,  1953,
    1910,  2089,  1911,   715,   715,   628,  -495, -1071,  2123,   629,
   -1735, -1735,  1647,  1647,  1312,   605,  2389,   977,   715,  1328,
    2002,  2003,  2004,  1315,  2005,  2006,  2007,  2008,  2009,  2010,
     990,   980,  1008,  2089,  2048,  2892,   983,  1363,  2166,  2049,
    2494,  2167,   491,  2420,   492,  2429, -1736, -1736,  1373,   488,
    1253,  1253,  2170,  3016,   989,  2171,  2225,  -457,  1175,  1594,
     640,  1007,   641,   799,  2993,  2994,  1009,  2369,   722,   495,
    2370,  2374, -1738, -1738,  2375,    73,  1184,    87,  2505,  1139,
    2977,  1883,   724,  2068,  1011,  2069,  2233,  2234,  2400,   803,
    2525,  1145,   476,  2526,   476, -1739, -1739,   476,   476,  2995,
    2201,  2371,    73,   743,  2210,   635,  2070,   476,  2071,   476,
     476,   476,   476,   476,   476,   476,   632,  2545,  1146,  3023,
    1596,   628,   633,  1151,   947,   629,   978,  2691,  2089,  2163,
    1596,  2165,   979,   636,   985,   476,  2403,   476,  2778,  2341,
    1149,  1883,   715,   476,   476,   476,   476,   476,   476,  1139,
   -1740, -1740,  2667,   476,   476,   606,  1579,  3024,   476,  2388,
    2806,  2390,   476,  1596,  2089,   476,   476,   476,   476,   476,
     476,   476,   476,   476,   978,  2809,   476,  1153,  2810,  2826,
     979,  2050,  2827,   476,  2830,   981,  1048,  2827,  2845,  1139,
      26,  2846,  2051,  2882,  2405,  1154,  2846,  2883,   722,  1162,
    1596,  2895,  2470,  2689,  2827,  1629,  1630,  1631,   476,  1632,
    1633,  1634,  1635,  1636,  1637,  2342,  2916, -1741, -1741,  2917,
      26,   491,   731,   492,  1169,  1252,  2949,    31,  1173,  2950,
     476,  1766,   934,  1823, -1742, -1742,  1012,  2124,   980,    88,
     983,   476,   476,  2986,  1164,  1736,  2827,    89,   495,  2343,
    2620,  1344,  1345,  1346,  1347,  1348,  1349,    31,  1176,  3006,
    2089,   724,  2846,  2607,  1599,  2344,  2582,  2428,    33,  2585,
    1013,  2290,   715,  1179,   958,  2345,   960,  1177,  1139,   656,
    1139,  1180,    34,    90,  1698,  1196,   980,   800,   978,   731,
    1197,  2759,  2239,  2577,   979,  2580,  2408,  1199,    33,  1227,
    2256,   722,   534, -1743, -1743,  1230,    35,   731,   740,  2346,
    1233,  1699,    34,  2567, -1744, -1744, -1745, -1745,  2263,  1048,
      36,  1234,   476,   476,  1236,   476,  1237,  2567, -1746, -1746,
      91, -1747, -1747,  1255,   731,  1265,    35,  1266,   985,  2409,
    1268,   731,  1270,  1139,  -688,  2286,   722,  -695,  1599,  1273,
     535,  1274,  2291,  1275,  1048,  2410,  2805,  2523,  1276,  1647,
     476, -1749, -1749, -1750, -1750,   731,  1901,   592,   724,  1277,
      26,    36,  2356,   481,  1841,   715,  2479,  1295,   505,  2686,
    1800,  1801,   505, -1751, -1751, -1752, -1752,   550,   550,   552,
     505,   557,   981,  -685,   557,  1279,  2347,   557,   583,  -572,
     980,   505,   505,   799,  -573,  1620,  2960,    31,  2961,  -686,
   -1753, -1753,  -689,  2493, -1754, -1754,   799,  1280,  1048,  1308,
     715, -1756, -1756,  1281,  1700,   476,    26, -1758, -1758,  1701,
     476,  1498,  1499,   991,  1702,  -546,  -546,  1210,  1211,  1283,
     981,  1212,  1213,  1811,  1284,  2524,   725,   983,    33,   557,
    1285,  2635,   992,  2411,   583,   505,   583,   583,   583,  2596,
    2412,  1286,    34,    31,  -550,  -550,  1287,   476,   476,   476,
    -549,  -549,   476,   595,  1252,  1377,  1379,   984,  -687,  1252,
     476,   476,   476,   476,  1288,   731,    35,  3015,  1647,  1289,
     476,  1856,  1290,  1291,   476,   983,  2475,   476,  1751,  1311,
      36,  1354,  2776,   993,    33,  2124,  1357,  2400,  1359,  1360,
    1375,  1384,  1385,  2401,   476,   476,  1388,  2500,    34,   476,
    1393,  1574,  1576,   595,   962,  1857,  2402,   964,    26,  1429,
    1431,  1436,  1454,   476,  2804,  1455,   476,  1456,   476,  1461,
    1462,  1463,    35,  1467,  1474,   985,  1475,   724,  1479,   731,
    1489,  2644,  2645,  1494,   981,  2403,    36,  2404,   476,  1501,
    2522,  1506,  1502,  2244,  1511,    31,  1512,  1519,  1520,   476,
    2087,   821,  1526,  1522,  1994,  1525,  1703,   822,  1527,  1995,
    1996,  1997,  1998,  1530,   476,  2087,  1144,  1704,  1536,  1543,
    1545,  1546,   595,   985,   994,  1552,    73,  2302,  1556,   635,
    1553,  1599,  1185,   476,  1606,  1863,    33,  1557,  1558,   983,
     632,   480,  1559,  2405,  1566,  1592,   633,  1601,   476,   476,
      34,   731,  1318,  1666,  1668,   725,   480,   636,  1670,   991,
    1671,  1673,  1688,  1672,  1695,  1709,  1706,   476,  1730,  1864,
    1707,  1731,  2406,  1647,    35,   995,  1745,  1759,   992,  1767,
     991,  1752,    69,   996,  1139,  1139,  1139,  1760,    36,   722,
     604,  1789,  1791,  1790,   821,   997,  1779,  1994,    69,   992,
    1792,  1793,  1995, -1759, -1759, -1759,  1794,  1817,  1810,  1813,
    2470,  1819,    69,  1580,   605,  1880,  1818,  1884,   594,  1888,
    1302,  1896,  1574,  1576,  1898,  1048,   998,  1897,  1899,   993,
    1913,  1917,  1918,  1252,  1921,  1253,  1919,   985,  1926,  1961,
    2407,  1922,  1925,  1927,  1928,  2408,  1947,  1949,  1253,  1929,
     993,  1936,   592,  1937,  1950,   609,   722,  1951,  1581,  1959,
    1970,  1971,   725,   715,    69,   724,   724,  1977,  1979,  1982,
    1980,   476,  1981,  1000,   722,   731,  2618,  1983,  2019,  1984,
     724,  1986,  2040,  1987,  1582,  1990,  2643,  2013,  2409,  2014,
    2020,  2027,  2038,  2045,  2052,  1001,  2062,  2061,  2064,  2066,
    2065,   722,  1583,  2091,  2410,   731,  1584,  1139,   722,   799,
    2101,  2000,  2103,  2110,  2115,  1003,  -551,  2424,  -552,  2119,
     994,  1901,  2117,  2130,  2131,  2135,  2133,   476,  1585,  2134,
     715,  1586,   722,  2137,  1482,  2139,   476,  2143,  2140,   476,
    2159,   994,   476,  2161,  2174,  2180,  1587,  2188,   715,   476,
     476,   476,   476,   476,  2189,  2181,   476,   476,   476,   476,
     476,   476,   476,   476,   476,   476,  2319,  2182,  2764,   476,
     476,   995,  2190,   476,  2191,   715,  2944,  2199,   731,   996,
     476,  2001,   715,   583,  2203,   476,  2200,   644,   800,   595,
     645,   997,   995,  2220,   476,  2213,  2221,   476,   505,   476,
     996,  2217,  2411,  2216,   724,  2224,   715,   476,  2228,  2412,
     476,   476,   997,  2230,  2237,   476,   476,  2238,  2240,  2255,
     595,  2016,   998,  2247,  1994,   645,   505,   505,  2015,  2287,
    2307,   476,  2087,   476,  2087,  2288,  2320,   595,  1588,  2073,
    2289,   725,   550,   998,  2321,   476,  1589,  2308,  2292,  2332,
    2354,  2293,   722,  2305,  2358,   476,  2311,  2363,  2340,  2368,
    2366,   915,   915,   557,   557,  2372,   557,  2364,  2383,  1000,
    2381,   476,  2387,   480,  2001,   480,  2393,   583,  2470,  2394,
    2416,  2432,  2507,  2504,  2490,  2491,   505,  2515,  2856,  1590,
    1000,  1001,  2169,   731,  2492,   487,   583,  2496,  2508,   583,
    2503,  1252,  2521,  2519,  2475,  2532,  1883,  2529,  2568,  2535,
    2564,  1003,  1001,  2933,  2536,  2537,   722,  2573, -1142,  2538,
    2539,  1139,  2553,  2565,  2571,  1139,  2473,  1139,  2574,  2581,
    2586,   731,  1003,  2587,   724,  2588,  2589,  2195,  2591,  1563,
    2602,  1564,  2608,  2609,  2610,  2614,  2617,   583,   583,   583,
     583,  2628,  2207,  2631,  2633, -1093,   488,  2634,  2638, -1732,
   -1733, -1734,   731,  2660,  2885,   731, -1735, -1736, -1737,  2497,
   -1738, -1739, -1740,  2828, -1741, -1742,  2828,  2650,  2002,  2003,
    2004, -1743,  2005,  2006,  2007,  2008,  2009,  2010,   722, -1744,
     715,  2915, -1745,  2651,  2516, -1746,  2517, -1747,  2661,  2652,
   -1749,  2663, -1750, -1751, -1752, -1753,  2896,   476,  2898,  2671,
    1893,  1253, -1754, -1755, -1756, -1757,  2245, -1758,  2246, -1094,
    2678,  2997,  2251,  2252,  2664,  2680,  2683,  2684,   487,   725,
     725,  2687,  2688,  2702,  2720,  2715,  2744,   724,  2738,  2742,
    2750,  2761,  2753,  2863,   725,  2752,  2762,  2755,  2766,  2767,
    2856, -1142,  2768,  2775,  2777,  2782,   476,   476,  2783,  2797,
    2786,   476,   715,  2967,  2807,  2811,   476,    69,  2798,   476,
     476, -1759, -1759, -1759,   476,  2005,  2006,  2007,  2008,  2009,
    2010,  2839,   724,  2819,  2842,  1317,  2820,  2847,  1318,   488,
    2821,  2823,  2835,  1320,   476,  2087,  2831,  2833,   476,  2087,
    2627,  2860,  2862,  2867,  2864,  2873,  2878,  2879,  2880,  2884,
    2888,  2897,   722,  1267,  2889,  2901,    69,   594,  2900,  1326,
     476,  2914,  2910,   619,  2903,   622, -1759,   626,   491,  2918,
     492,  2919,  2921,  2927,  2935,  2936,   480,  2934,  2595,  2597,
     480,  2942,   722,   489,  2940,  2941,  2951,  2952,  1816,  2953,
    2555,  1328,   494,  2955,  2958,   495,  2966,   476,  1824,   609,
    1827,   731,  2971,  1838,  2973,  2985,  2987,  2988,   725,  1842,
    2990,  1844,  2475,  2969,  2998,  2970,  3008,   476,  3014,    69,
    1306,  3017,  3013,  1851,  3021,  3022,   715,  3026,  1854,  2431,
    2641,  2157,  1859,  1860,  1861,  1862,  1843,  1866,  1867,   949,
    2435,  1755,  2197,  2241,  2685,  2495,  2931,  3004,  2760,  2974,
    2996,  2796,  2164,   490,  2142,   722,  2473,  1445,  2514,  2964,
    2972,  2043,  2436,   583,  2963,  2138,  2202,  2506,  2477,  2377,
    1317,  1560,  1539,  1318,  1390,  1572,  2881,  2598,  1320,  2376,
    2909,   505,   505,  2743,  2962,  1386,  2122,  1809,   583,   583,
    1425,  1395, -1759,  2195,  1426,  2891,  2905,  2991,  2132,  1786,
    2362,   491,  2954,   492,  1326,  2899,  2841,  1808, -1759,  1367,
    2592, -1759,  1430, -1759,   583,  1448,  2100,  2668,  2335,   493,
     799,  2563,  2579,  2825,  2331,   494,   476,   583,   495,   715,
    2887,  2886,   476,  2893,  2957,  2894,  1328,  1610,   725,  2956,
    1612,   476,   476,  1616,   583,   476,  1617,  2741,   583,  2984,
   -1759,  2036,  1735,  2125,  2059,  1879,  1974,  1600,   476,  2087,
    2094,  2057,  2594,   917,  2361,  1968,  1754,   476,  2087,     0,
     722,     0,   476,  2087,     0,   476,  2087,     0,     0,     0,
       0,     0,   476,   476,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   476,  2087,   476,     0,     0,     0,
     480,     0,     0,     0,     0,  1337,  2053,     0,   722,   480,
       0,   476,     0,     0,   480,     0,     0,   480,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    69,     0,
       0,     0,     0,     0,     0,   724,   480, -1759,     0,   722,
       0,   725,   722,     0,  2473,     0,     0,     0,     0,     0,
       0,     0,     0, -1759,     0,     0,     0,     0, -1759,  2593,
       0,     0,     0,     0,     0,     0,  1278,     0,     0,     0,
       0,  2780,     0,     0,     0,     0,     0,   476,  2087,     0,
       0,   476,   715,  1505,     0,     0,   725,     0,     0,     0,
       0,   583,     0,     0,  2668, -1759,     0, -1759,     0,     0,
    1535,     0,   724,     0,  1300,   476,     0,     0,     0,   476,
    2087,     0,     0,   715,     0,     0,   715,     0,     0,   480,
     724,     0,   476,     0,     0,     0,   595,     0,     0,     0,
       0,     0,     0,  1551,     0,     0,   476,     0,     0,   476,
       0,     0,     0,     0,     0,     0,     0,   724,     0,  1139,
    1337,   480,     0,     0,   724,     0,     0,     0,     0,     0,
       0,     0,   637,     0,   645,   645,     0,   505,   505,     0,
     505,   645,     0,     0,   583,     0,     0,     0,   724,   609,
     609,     0,   609,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2875,     0,     0,     0,     0,     0, -1759,
    2665,     0,     0,     0,   476,  2087,  1344,  1345,  1346,  1347,
    1348,  1349,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1640,  1253,     0,     0,   476,     0,   476,     0,   476,
       0,     0,  1665,   476,     0,     0,     0,     0,   722,     0,
     476,  2087, -1759,     0,     0,     0,   480,     0,  2212,     0,
       0,     0,  2906,   476,     0,     0,   927,     0,   476,     0,
       0,     0,     0,     0,     0,   645,   727,     0,     0,     0,
       0,     0,     0,     0,     0,   950,     0,     0,   476,     0,
       0,     0,   480,     0,     0,     0,     0,  2740,     0,     0,
       0,   476,     0,     0,     0,     0,   915,   583,   724,     0,
       0,     0,     0,     0,     0,     0,   821, -1536,     0,  1994,
       0,  1139,  2473,     0,  1995,  1996,  1997,  1998,   583,     0,
     583,     0,     0,     0,     0,     0,  1156,  1159,  1160,  1161,
    1773,  1774,  2303,     0,     0,     0,   476,  2087,     0,   476,
     476,     0,     0,     0, -1759,  2975,  2477,     0,     0,     0,
       0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,     0,
    1200,  1201,   724,     0,     0,     0,     0,     0,   583,     0,
       0,     0,   476,     0,     0,     0,  1448,   505,   480,     0,
       0,     0,     0,     0,     0,     0,     0,   505,  1825,   505,
    1829,     0,   505,     0,   821,     0,     0,  1994,   505,   725,
     505, -1536,  1995,  1996,  1997,  1998,     0,     0,     0,     0,
       0,   645,   505,     0,     0,   476,   645,   505,     0,     0,
    2547,   505,   505,   505,   505,     0,   505,   505,     0,     0,
       0,     0,     0,     0,   724,     0,  1202,  1203,     0,     0,
       0,   728,     0,     0,     0,   727,   583,   583,  1892,     0,
       0,     0,     0, -1536,     0,     0,     0,     0,     0,     0,
      69,     0,     0,     0,  1909,     0,   725, -1536,     0,     0,
       0,     0, -1536,  2869,     0,     0,     0, -1536,     0,     0,
       0,     0,     0,  2385,   725,     0, -1536,    69,     0, -1538,
   -1536,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1204,  1205,  1206,  1207,  1208,  1209,  2433,     0,  1210,
    1211,   725,     0,     0,     0,     0,  2000,     0,   725,     0,
       0, -1536,  2480,  2481,  2482,  2483,  2484,  2485,  2486,  2487,
    2488,  2489,     0,     0,     0,     0,     0,     0,     0,     0,
     730, -1536,   725,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   727,  1696,     0,     0,     0,     0,   724,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1538,     0,     0,  2001,     0,   724,     0,
   -1536,     0,     0, -1536,     0,     0,     0,     0,     0, -1536,
       0,   505,  1380,     0,  2000,     0,     0,     0,  1306,     0,
       0,     0,     0,    69,  2477,  1212,  1213,     0,     0,     0,
     728,     0,     0,     0,     0,     0,     0,     0,  1392,     0,
       0,     0,     0, -1536,     0, -1538,     0,     0,     0,     0,
    1563,     0,     0,     0,  1640,     0,     0,     0,     0, -1538,
       0,     0,     0,  1437, -1538,     0, -1536,     0,     0, -1538,
       0,   724,   725,     0,     0,     0,  1464,     0, -1538,     0,
       0,     0, -1538,     0,  2001,  1317,   583,     0,  1318,     0,
       0,     0,  2090,  1320,     0,   821,     0,  1488,  1994,     0,
       0,     0,     0,  1995,  1996,  1997,  1998,  2090,     0,     0,
       0,  2109,     0, -1538,  2112,  1773,     0,     0,     0,  1326,
       0,  2548,  2073,     0,     0,     0, -1759,     0,     0,   730,
       0,     0,     0, -1538,     0,     0,   725,   728,  1214,  1215,
       0,   727,     0,     0,     0,     0,     0,     0,     0, -1536,
       0,  1328,     0,     0,     0,     0,     0, -1536,    69,     0,
    2619,     0,     0,     0,     0,     0,     0,     0,  1505,     0,
     821,     0,     0,  1994, -1536,     0, -1536, -1536,  1995,  1996,
    1997,  1998, -1538,     0,     0, -1538,   724,     0,     0,     0,
       0, -1538,     0,  2002,  2003,  2004,     0,  2005,  2006,  2007,
    2008,  2009,  2010,     0,     0,     0,     0,     0,   725,     0,
       0,     0,     0, -1536,     0,     0, -1536, -1536, -1536,     0,
       0,  2312,     0,     0,   724, -1538,     0,     0,     0,     0,
    1505,     0,     0,     0,     0,   583,   730,     0,     0,     0,
    1521,     0,     0,     0,  1505,   583,   583,   505, -1538,   583,
       0,     0, -1759,     0,     0,   724,     0,     0,   724,     0,
       0,     0,     0,     0,     0,     0,   583,     0, -1759,     0,
       0,     0,     0, -1759,     0,     0,     0,  1300,  2236,     0,
       0,  2002,  2003,  2004,     0,  2005,  2006,  2007,  2008,  2009,
    2010,     0,     0,     0,   645,     0,   583,     0,     0,     0,
       0,     0,     0,     0,  2073,  2000,     0,     0,     0,     0,
   -1759,  1505,  1505,     0,     0,     0,   728,     0,     0,     0,
       0,     0,     0,  1570,     0,     0,     0,  1300,     0,   727,
     727, -1538,   725,     0,  1640,     0,     0,     0,     0, -1538,
       0,     0,     0,     0,   727,  1696,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1538,     0, -1538, -1538,
       0,  2063,   725,     0,     0,  1337,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2001,     0,  2080,     0,     0,
    2000,     0,     0,     0,     0,     0,     0,     0,     0,  2765,
       0,    69,  2080,     0,     0, -1538,   594,     0, -1538, -1538,
   -1538,     0,     0,     0,     0,     0,     0,     0,     0,  2773,
    2774,     0,     0,     0,     0,   730,     0,     0,     0,     0,
       0,   583,   583,   583,   481,  2784,  2090,  2339,     0,     0,
       0,     0,  2339,  2353,     0,   725,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1744,     0,     0,     0,
    2001,     0,     0,     0,   724,     0,     0, -1759,     0,     0,
       0,     0,  1773,     0,     0,     0,     0,  1753,   727,  1756,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     583,     0,   505,     0,     0,     0,  1505,  1448,  1505,     0,
    1535,     0,     0,     0,     0,     0,     0,   898,   898,     0,
       0,     0,  2843,     0,   728,   728,   505,     0,  2434,     0,
       0,     0,     0,     0,     0,     0,     0,  1804,     0,   728,
       0,   505,   505,   505,   505,   505,   505,   505,   505,   505,
     505,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1909,     0,     0,
     725,   583,     0,     0,     0,     0,     0,     0,     0, -1759,
    1050,  1055,     0,     0,  1448,     0,  1344,  1345,  1346,  1347,
    1348,  1349,  2002,  2003,  2004,  1535,  2005,  2006,  2007,  2008,
    2009,  2010,     0,    69,     0,     0,     0,   583,   725,     0,
       0,     0,     0,     0,  1505,  1890,  1891,     0,   727,     0,
       0,     0,     0,   730,   730,     0,     0,     0,     0,     0,
       0,     0, -1552,     0,     0,     0,     0,     0,   730,   725,
       0,     0,   725,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   505,
       0,     0,     0,   728,     0,  2540,     0,  2002,  2003,  2004,
       0,  2005,  2006,  2007,  2008,  2009,  2010,     0,     0,     0,
       0,     0,     0,  1300,     0,     0,  1317,     0,  2557,  1318,
     583,   583,   583,   583,  1320,     0,     0,  2339,  2353,     0,
    2339,     0,     0,  2566,     0,     0,     0,  2090,     0,     0,
       0,  2090,     0,     0,  1300,     0,     0,  2584,     0,     0,
    1326,   727,  1317,     0,     0,  1318, -1552, -1759,     0,  2330,
    1320,  2333,     0,   915,     0,     0,     0,  2109,     0,     0,
       0,     0,  1773,     0,     0,     0,     0,     0,  1640,     0,
       0,     0,  1328,     0,  1448,     0,  1326,  1200,  1201,     0,
    1505,     0,   730, -1759,  1050,     0,   727,     0,   645,   505,
       0,     0,     0,     0,     0,     0,     0,   583, -1552,     0,
       0,  1271,     0,     0,     0,     0,     0,     0,  1328,     0,
       0,     0, -1552,   728,  2642,     0,     0, -1552,     0,     0,
       0,     0, -1552,     0,     0,     0,     0,     0,     0,     0,
    1282, -1552,     0,     0,     0, -1552,     0,     0,     0,     0,
       0,     0,  2315,     0,     0,     0,     0,     0,     0,     0,
    1292,  1293,  1294,  1202,  1203,  1301,     0,     0,   725,     0,
       0,     0,     0,     0,     0,  2072, -1552,     0,     0,     0,
       0,    69,     0, -1759,     0,     0,     0,     0,  1358,     0,
       0,     0,     0,  1505,     0,     0, -1552,     0,     0, -1759,
       0,     0,     0,     0, -1759,  1909,    69,     0,    69,     0,
       0,     0,     0,     0,     0,     0,  2682,     0,     0, -1759,
       0,     0,   730,     0,     0,     0,   728,     0,  1204,  1205,
    1206,  1207,  1208,  1209,     0, -1759,  1210,  1211,     0,     0,
   -1759, -1759,  1402,     0,     0, -1552,  1416,  1421, -1552,     0,
       0,     0,  2697,     0, -1552,     0,     0,     0,     0,     0,
       0,   481,  2339,     0,     0,  2708,     0,     0,   505,     0,
    2090,   728,     0,     0,     0,  2090,     0, -1759,  2090,     0,
    2719,     0,     0,  2722,     0,     0,     0,     0, -1552,     0,
       0,     0,     0,     0,     0,     0,  1337,  2749,     0,  1050,
       0,     0,     0,     0,     0,     0,  1050,     0,     0,     0,
       0, -1552,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2080,     0,  2198,   730,  2080,  1050,   505,     0,
       0,     0,  1337,     0,  2209,  2211,     0,     0,  2215,     0,
       0,     0,  1212,  1213,     0,     0,     0,     0,   505,   505,
      69,    69,     0,     0,     0,  2229,     0,     0,     0,   583,
       0,  1448,     0,     0,   505,     0,     0,  2073,     0,     0,
     730,     0,     0,     0,     0,     0,     0,   583,     0,     0,
    2749,     0,     0,     0,     0,  1570,     0,     0, -1759,     0,
       0,     0,     0,     0, -1552,     0,     0,     0,     0,   505,
       0,     0, -1552,     0,     0,     0,     0,     0,     0,   727,
       0,     0,  2090,     0,     0,     0,     0,  2722,     0, -1552,
       0, -1552, -1552,     0, -1759,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2838,     0,     0,     0,   915,
       0,   505,     0,     0,     0,     0,     0,     0,     0,     0,
     583,     0,     0,     0,     0,  1214,  1215,     0, -1552,     0,
       0, -1552, -1552, -1552,     0,   645,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1216,   727,     0,     0,   583,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    69,
   -1759,     0,     0,     0,   727,     0,     0,  1344,  1345,  1346,
    1347,  1348,  1349,     0,     0,     0,     0,   481,     0,     0,
    2327,  2328,  2329,     0,     0,     0,  2890,     0,     0,     0,
     505,   727,     0,     0,  2719,     0, -1759,     0,   727,     0,
       0,     0,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,
       0,     0,     0,  2749,   645,   645,   645,     0,     0,     0,
       0,     0,   727,     0,     0,  2080,  1604,     0,     0,     0,
    2080,     0,     0,  2080,     0,     0,  1623,     0,  1641,  2384,
    1448,  1652,  1655,  1660,  1663,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   728,  2719,     0,     0,     0,     0,
       0,   991,     0,     0,     0,     0,  1675,  2838,     0,     0,
       0,     0,  1679,  1680,  1681,  1682,  1683,  1684,     0,     0,
     992,  1773,  1693,  1694,     0,     0,     0,  1705,     0,     0,
       0,  1708,     0,     0,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1448,     0,  1725,     0,     0,     0,  2749,
    2502,     0,   898,    69,     0,  1050,     0,     0,     0,   821,
       0,   728,  1994,     0,   -39,  2708,   645,  1995,  1996,  1997,
    1998,   993,  2422,     0,     0,     0,    69,  1757,     0,   728,
    2423,     0,   727,     0,     1,     0,  1570,     0,     0,     0,
       0,     0,     0,   730,     2,  1317,     3,     4,  1318,     0,
       0,  1317,     0,  1320,  1318,     0,   728,  2080,     0,  1320,
    1293,  1294,     5,   728,     0,     0,     0,     0,     0,     0,
    1300,     6,     0,     0,     0,     0,     0,     0,     0,  1326,
       0,     0,     0,     7,     0,  1326, -1759,   728,  2424,     0,
       0,     0, -1759,     0,     8,     0,   727,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     9,     0,    10,     0,
     730,  1328,   994,     0,     0,     0,     0,  1328,     0,  2558,
    2559,  2560,  2561,     0,     0,    69,    11,     0,   730,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1050,     0,
      12,  1876,  1877,     0,  1878,     0,     0,     0,     0,     0,
      13,     0,     0,     0,     0,   730,    14,     0,     0,     0,
       0,     0,   730,   995,    15,     0,    16,    17,   727,     0,
       0,   996,     0,  1050,     0,     0,     0,     0,     0,     0,
      18,  2316,     0,   997,    69,  2425,   730,  2551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2629,   728,     0,    19,
       0,     0, -1759,     0,   998,     0,     0,     0, -1759, -1759,
       0,     0,     0,     0,    20,     0,     0,     0, -1759,     0,
       0,     0,     0, -1759, -1759,     0,     0,  1050,     0, -1759,
       0,     0,     0,     0,  1972,     0,     0,     0,     0,  1978,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1000,     0,     0,     0,     0,     0,     0,     0,     0,
   -1759,   728,     0,     0,     0,     0, -1759,    69,     0,     0,
       0,     0,     0,  1001,     0,     0,     0,     0,  1993,  2001,
       0,     0,   727,     0,     0,     0,     0,     0,     0,  1660,
       0,  1660,  1660,  1003,     0,  2426,   730,     0,  2427,  2032,
       0,     0,     0,  2035,     0,     0,  2037,     0,     0,     0,
       0,     0,   727,     0,     0,  1337,  1352,    22,     0,     0,
      23,  1337,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   728,     0,     0,     0,     0,     0,     0,
       0,     0,  2055,     0,     0,  2058,     0,  2060,     0,    24,
       0,     0,     0,     0,     0,     0,     0,  1352,    25,     0,
     730,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,    28,     0,   727,     0,     0,  1317,     0,
       0,  1318,     0,    29,     0,  1319,  1320,  1321,  1322,  1323,
       0,     0,  1456,     0,     0,    30,     0, -1759,     0,    31,
       0,     0,  1402, -1759,  1324,     0,     0,     0,     0,     0,
       0,     0,  1326,     0,     0,     0,     0,  1421,  1723,  1327,
       0,     0,   730,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    32,  2136,     0,  2781,     0,
      33,     0,     0,     0,  1328,     0,     0,   728,     0,     0,
       0,     0,     0,     0,    34,     0,  2802,     0,  1352,     0,
       0,     0,     0,  1352,     0,     0,  2002,  2003,  2004,     0,
    2005,  2006,  2007,  2008,  2009,  2010,     0,   728,    35,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     727,     0,    36,     0,  1050,   -39,     0,     0,     0, -1759,
       0,     0,     0,     0,     0, -1759,  1344,  1345,  1346,  1347,
    1348,  1349,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   727,  2852,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2227,   506,     0,     0,     0,  1329,   730,     0,     0,     0,
     728,     0,     0,     0,     0,     0,     0,     0,  2874,   727,
       0,  1330,   727,     0,     0,     0,  1331,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   730,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1332,  1333,
       0,     0,     0,     0,   507,     0,  2254,     0,     0,     0,
       0,     0,     0,  1334,     0,  2258,     0,     0,  2259,     0,
     508,  2261,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2282,  2283,
       0,  1335,  1757,     0,  1336,     0,     0,     0,     0,   730,
       0,     0,     0,     0,  2294,     0,     0,     0,  1337,     0,
       0,  1338,     0,  2301,   509,   728,  2304,     0,  2306,     0,
       0,     0,     0,     0,   510,     0,  2310,     0,     0,  1352,
       0,     0,     0,     0,  2317,  2318,   511,     0,     0,     0,
    1352,   512,     0,     0,  1648,     0,     0,     0,     0,     0,
    1352,  1352,  1352,   728,     0,     0,     0,  1316,     0,  1352,
       0,     0,  1317,     0,  2357,  1318,     0,     0,   513,  1319,
    1320,  1321,  1322,  1323,  2365,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   728,     0,     0,   728,  1324,     0,
    2378,  1325,     0,     0,     0,     0,  1326,     0,     0,     0,
    1339,     0,     0,  1327,     0,     0,     0,     0,   727,     0,
       0,     0,     0,   514,   730,     0,  1352,   515,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1328,     0,
       0,     0,     0,     0,  1317,     0,     0,  1318,     0,     0,
       0,     0,  1320, -1759, -1759, -1759,     0,     0,     0,     0,
       0,     0,   730,     0,     0,     0,     0,     0,     0,     0,
    1352,     0,     0,     0,     0,     0,     0,     0,  1326,     0,
       0,     0,     0,     0,  1352,  1327,     0,     0,     0,  1352,
     516,     0,     0,   730,     0,     0,   730,  1317,     0,     0,
    1318,     0,     0,     0,   517,  1320,  1321,  1322,  1323,     0,
    1328,     0,  1340,     0,     0,  1341,  1342,  1343,     0,  1344,
    1345,  1346,  1347,  1348,  1349,     0,     0,     0,     0,     0,
       0,  1326,  1985,     0,     0,     0,  2528,   518,  1327,  1329,
     519,     0,     0,     0,     0,     0,     0,     0,   520,     0,
       0,   521,     0,     0,     0,  1330,     0,     0,     0,     0,
    1331,     0,     0,  1328,     0,     0,     0,     0,     0,     0,
     522,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1332,  1333,   523,  2541,  2542,     0,     0,     0,
    2543,   524,     0,   728,     0,  2546,     0,  1334,  2549,  2550,
     525,     0,     0,  2554,     0,     0,   526,     0,     0,     0,
       0,  1329,     0,  1317,     0,     0,  1318,     0,     0,     0,
    1319,  1320,  1321,  1322,  1323,     0,     0,  1330,     0,     0,
       0,   527,  1331,     0,     0,  1335,     0,     0,  1336,  1324,
       0,     0,  2298,     0,     0,     0,     0,  1326,     0,   898,
       0,     0,  1337,     0,  1327,  1338,     0,     0,     0,     0,
       0,     0,     0,     0,  1329,     0,     0,     0,     0,  1334,
       0,     0,  1352,     0,     0,     0,     0,     0,     0,  1328,
    1330,     0,     0,     0,     0,  1331,     0,     0,     0,     0,
       0,  1352,   730,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2636,  1332,  1333,  1352,
       0,  1648,  1648,     0,  2011,     0,  1648,     0,     0,     0,
    1352,     0,  1334,  1352,  1337,     0,     0,     0,  1352,     0,
       0,  1352,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1352,  1339,     0,     0,  1352,  1352,  1352,
    1352,  1352,  1352,     0,     0,     0,     0,     0,  1648,  1648,
    1335,  1352,  1352,  1336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1352,     0,     0,  1352,  1337,     0,     0,
    1329,     0,     0,     0,  1352,  1352,  1352,  1352,  1352,  1352,
    1352,  1352,  1352,  1352,     0,     0,  1330,     0,     0,     0,
       0,  1331,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1339,     0,     0,     0,
       0,  2032,     0,  1332,  1333,  1352,     0,     0,     0,     0,
    2692,  2693,     0,     0,  2694,     0,     0,     0,  1334,     0,
       0,     0,     0,     0,     0,     0,  1340,     0,     0,  1341,
    1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1339,
       0,  2736,  2737,     0,     0,     0,  1335,     0,     0,  1336,
       0,     0,     0,     0,     0,  2751,     0,     0,     0,     0,
       0,     0,     0,  1337,     0,     0,  1338,     0,     0,     0,
    2758,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1340,     0,
       0, -1759, -1759, -1759,     0,  1344,  1345,  1346,  1347,  1348,
    1349,     0,     0,     0,     0,     0,     0,   978,     0,     0,
       0,     0,     0,   979,  1352,  1352,  1352,     0,     0,     0,
     991,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   992,
       0,  1340,     0,     0,  1341,  1342,  1343,     0,  1344,  1345,
    1346,  1347,  1348,  1349,     0,  1339,     0,     0,     0,     0,
       0,     0,     0,     0,  2822,     0,  1317,     0,     0,  1318,
       0,     0,     0,  1319,  1320,  1321,  1322,  1323,     0,     0,
       0,  1301,     0,     0,     0,     0,     0,     0,     0,     0,
     993,     0,  1324,     0,     0,   898,     0,     0,  2844,     0,
    1326,     0,     0,     0,     0,     0,     0,  1327,     0,     0,
    1352,     0,     0,     0,     0,     0,  1352,     0,     0,   980,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2011,
    2011,  1352,  1328,  1648,  1648,  1648,  1648,  1648,     0,     0,
    1648,  1648,  1648,  1648,  1648,  1648,  1648,  1648,  1648,  1648,
    2011,     0,     0,     0,     0,     0,     0,  1340,     0,     0,
    1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,
    1352,     0,     0,  1352,  1669,  1352,     0,     0,     0,  2011,
    2011,   994,     0,     0,     0,     0,     0,     0,  2736,     0,
       0,     0,  2902,  1352,  1648,  1648,  1352,     0,  1352,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2923,     0,     0,     0,     0,  2932,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   995,  1329,     0,     0,     0,     0,     0,     0,
     996,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
    2736,     0,   997,     0,  1331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   981,  1352,     0,  1332,  1333,     0,     0,
       0,     0,     0,   998,     0,     0,     0,     0,     0,     0,
       0,  1334,     0,     0,     0,     0,     0,     0,  2981,  2981,
       0,  1317,     0,     0,  1318,     0,     0,     0,  1319,  1320,
    1321,  1322,  1323,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   999,     0,     0,  1324,   983,  1335,
    1000,  2981,  1336,     0,     0,  1326,     0,     0,     0,     0,
       0,     0,  1327,     0,     0,     0,  1337,     0,     0,  1338,
       0,     0,  1001,     0,     0,     0,     0,     0,  1002,     0,
       0,     0,     0,     0,     0,  1352,     0,  1328,     0,     0,
       0,     0,  1003,     0,  2981,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1352,     0,     0,     0,  1352,  1352,     0,  1352,
       0,     0,  2011,  2011,  2011,  2011,  2011,     0,     0,     0,
    2011,  2011,  2011,  2011,  2011,  2011,  2011,  2011,  2011,  2011,
    1352,  1352,     0,     0,     0,     0,   985,     0,     0,     0,
       0,     0,  1352,     0,     0,     0,     0,     0,  1339,  1352,
       0,     0,  1352,     0,  1352,     0,     0,     0,  1352,     0,
       0,  2011,  2011,     0,     0,  1352,  1352,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1317,     0,  1329,  1318,
       0,     0,     0,  1319,  1320,  1321,  1322,  1323,     0,     0,
       0,     0,     0,     0,  1330,     0,     0,     0,   978,  1331,
       0,     0,  1324,     0,   979,  1352,     0,     0,     0,     0,
    1326,   991,     0,  1352,     0,     0,     0,  1327,     0,     0,
       0,  1332,  1333,     0,     0,     0,  1352,     0,     0,     0,
     992,     0,     0,     0,     0,     0,  1334,  1317,     0,     0,
    1318,     0,  1328,     0,  1319,  1320,  1321,  1322,  1323,     0,
    1340,  1648,     0,  1341,  1342,  1343,     0,  1344,  1345,  1346,
    1347,  1348,  1349,  1324,     0,     0,     0,  1669,     0,     0,
       0,  1326,     0,     0,  1335,     0,     0,  1336,  1327,     0,
       0,   993,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1337,     0,     0,  1338,     0,     0,     0,     0,     0,
       0,     0,     0,  1328,     0,     0,     0,     0,     0,     0,
     980,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1329,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
       0,     0,     0,     0,  1331,     0,     0,     0,     0,     0,
       0,     0,   994,     0,     0,     0,  1352,     0,     0,     0,
    1648,     0,     0,  1339,     0,     0,  1332,  1333,     0,  1352,
    1352,  1352,     0,     0,  1352,     0,     0,  1352,  1352,     0,
       0,  1334,  1352,     0,  1329,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1330,     0,     0,   995,     0,  1331,     0,     0,     0,     0,
       0,   996,     0,     0,     0,     0,     0,     0,     0,  1335,
       0,     0,  1336,   997,     0,     0,     0,  1332,  1333,     0,
       0,     0,     0,     0,     0,     0,  1337,     0,     0,  1338,
       0,     0,  1334,     0,   981,     0,     0,     0,  2011,     0,
       0,     0,     0,     0,   998,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1352,  1340,     0,     0,  1341,  1342,
    1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,
    1335,     0,  2039,  1336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1845,     0,  1337,     0,   983,
    1338,  1000,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2011,  1648,     0,     0,     0,     0,
    1352,  1352,  1352,  1001,     0,     0,     0,     0,  1339,  1846,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1003,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1352,  1352,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1352,
       0,     0,     0,     0,     0,     0,  1352,     0,     0,  1339,
       0,     0,     0,     0,     0,     0,     0,   985,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1340,     0,  2011,  1341,  1342,  1343,     0,  1344,  1345,  1346,
    1347,  1348,  1349,     0,     0,     0,     0,  2257,     0,     0,
    1352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1352,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1340,     0,     0,  1341,  1342,  1343,     0,  1344,  1345,
    1346,  1347,  1348,  1349,     0,     0,     0,     0,  2299,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1352,     0,     0,     0,     0,     0,     0,     0,     0,
    1352,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1015,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,  1016,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,  1352,
     107,   108,   109,  1017,   111,   112,   113,   114,   825,  1018,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,  1019,     0,   135,   136,   137,   138,   139,
     140,  1020,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,  1021,   152,   153,   154,   834,   835,   836,
    1022,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,  1023,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,  1024,     0,  1025,
     209,   210,   211,  1026,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,  1027,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,  1028,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,  1029,  1030,   250,  1031,
     252,   253,   254,   255,   256,   257,     0,     0,   258,  1032,
     260,  1033,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,  1034,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,  1035,   856,   292,   293,   294,   295,   857,
     296,   297,  1036,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,  1037,   314,  1038,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
    1039,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,  1040,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,  1041,   408,   868,   410,
       0,   411,   412,     0,   413,  1042,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,  1043,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,  1044,   447,  1045,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     877,     0,     0,     0,     0,     0,     0,   878,   879,  1046,
       0,     0,     0,     0,   881,     0,   882,  1047,     0,     0,
       0,   883,     0,   884,   885,    93,   818,   547,   819,   820,
     821,   822,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   824,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   825,   116,   826,   827,     0,   119,   120,   121,
     122,     0,   123,   828,   829,   124,   125,   830,   831,   128,
       0,   129,   130,   131,   132,   832,     0,   833,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   834,   835,   836,   837,   838,   839,   840,   156,   157,
     158,   159,   160,   161,   162,   841,   842,   165,   843,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   678,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   844,   194,   195,   196,   197,   198,   845,
     846,   200,     0,   201,   202,   847,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,   848,   849,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   850,   851,     0,   852,     0,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     853,   854,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   855,   290,   856,   292,
     293,   294,   295,   857,   296,   297,   298,   299,   858,   859,
     301,   860,   303,   304,   305,     0,   306,   307,     0,     0,
     861,   309,   310,     0,     0,   311,   312,   313,   314,   315,
     862,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   863,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   864,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,   367,   865,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      26,   380,   381,   382,   383,   384,   866,   385,   386,   387,
     388,   389,   390,   391,   392,   867,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   868,   410,     0,   411,   412,    31,   413,   414,
     415,   416,   417,   418,   419,     0,   869,   870,     0,     0,
     422,   423,   871,   425,   872,   873,   427,   428,   874,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,   875,     0,   440,   441,   442,   443,   444,   575,   876,
       0,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,     0,    34,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   877,     0,    35,     0,     0,     0,
       0,   878,   879,     0,     0,     0,     0,     0,   881,     0,
     882,  2834,     0,     0,     0,   883,     0,   884,   885,    93,
     818,   547,   819,   820,   821,   822,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   824,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   825,   116,   826,   827,
       0,   119,   120,   121,   122,     0,   123,   828,   829,   124,
     125,   830,   831,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   841,
     842,   165,   843,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   678,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   844,   194,   195,
     196,   197,   198,   845,   846,   200,     0,   201,   202,   847,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   848,   849,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   850,   851,
       0,   852,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     855,   290,   856,   292,   293,   294,   295,   857,   296,   297,
     298,   299,   858,   859,   301,   860,   303,   304,   305,     0,
     306,   307,     0,     0,   861,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   864,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   865,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    26,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   867,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,    31,   413,   414,   415,   416,   417,   418,   419,     0,
     869,   870,     0,     0,   422,   423,   871,   425,   872,   873,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   575,   876,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,    34,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   877,     0,
      35,     0,     0,     0,     0,   878,   879,     0,     0,     0,
       0,     0,   881,     0,   882,     0,     0,     0,     0,   883,
       0,   884,   885,    93,   818,   547,   819,   820,   821,   822,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,   824,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,  1656,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,   843,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
    1657,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,  1658,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,   857,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   861,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,   865,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,  1659,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   877,     0,     0,     0,     0,     0,     0,   878,
     879,     0,     0,     0,     0,     0,   881,     0,   882,     0,
       0,     0,     0,   883,     0,   884,   885,    93,   818,   547,
     819,   820,   821,   822,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,  -950,   102,   103,   104,     0,     0,     0,  -950,
     824,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   825,   116,   826,   827,     0,   119,
     120,   121,   122,     0,   123,   828,   829,   124,   125,   830,
     831,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   841,   842,   165,
     843,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   678,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   844,   194,   195,   196,   197,
     198,   845,   846,   200,     0,   201,   202,   847,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,   848,   849,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   850,   851,     0,   852,
       0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   855,   290,
     856,   292,   293,   294,   295,   857,   296,   297,   298,   299,
     858,   859,   301,   860,   303,   304,   305,     0,   306,   307,
       0,     0,   861,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   864,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,   367,
     865,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   867,   394,  -950,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   869,   870,
       0,     0,   422,   423,   871,   425,   872,   873,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   876,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   877,     0,     0,     0,
       0,     0,     0,   878,   879,     0,     0,     0,     0,     0,
     881,     0,   882,     0,     0,     0,     0,   883,     0,   884,
     885,    93,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,  1398,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   825,   116,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,   833,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   834,   835,   836,
     837,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,   290,   856,   292,   293,   294,   295,   857,
     296,   297,   298,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,   313,   314,   315,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,   390,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   868,   410,
       0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,   874,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,     0,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     877,     0,     0,     0,     0,     0,     0,   878,   879,  1399,
       0,     0,     0,     0,   881,     0,   882,     0,     0,     0,
       0,   883,     0,   884,   885,    93,   818,   547,   819,   820,
     821,   822,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
    2723,   102,   103,   104,     0,     0,     0,     0,   824,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   825,   116,   826,   827,     0,   119,   120,   121,
     122,     0,   123,   828,   829,   124,   125,   830,   831,   128,
       0,   129,   130,   131,   132,   832,     0,   833,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   151,   152,  2724,
     154,   834,   835,   836,   837,   838,   839,   840,   156,   157,
     158,   159,   160,   161,   162,   841,   842,   165,   843,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   678,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   844,   194,   195,   196,   197,   198,   845,
     846,   200,     0,   201,   202,   847,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,  2725,   849,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   850,   851,     0,   852,     0,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     853,   854,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   855,   290,   856,   292,
     293,   294,   295,   857,   296,   297,   298,   299,   858,   859,
     301,   860,   303,   304,   305,     0,   306,   307,     0,     0,
     861,   309,   310,     0,     0,   311,   312,   313,   314,   315,
     862,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   863,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   864,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,  2726,   865,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   866,   385,   386,   387,
     388,   389,   390,   391,   392,   867,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   868,   410,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,   419,     0,   869,   870,     0,     0,
     422,   423,   871,   425,   872,   873,   427,   428,   874,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,   875,     0,   440,   441,   442,   443,   444,   445,   876,
       0,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   877,     0,     0,     0,     0,     0,
       0,   878,   879,  2727,     0,     0,     0,     0,   881,     0,
    2728,     0,     0,     0,     0,   883,     0,   884,   885,    93,
     818,   547,   819,   820,   821,   822,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   824,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   825,   116,   826,   827,
       0,   119,   120,   121,   122,     0,   123,   828,   829,   124,
     125,   830,   831,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   841,
     842,   165,   843,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   678,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   844,   194,   195,
     196,   197,   198,   845,   846,   200,     0,   201,   202,   847,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   848,   849,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   850,   851,
       0,   852,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     855,   290,   856,   292,   293,   294,   295,   857,   296,   297,
     298,   299,   858,   859,   301,   860,   303,   304,   305,     0,
     306,   307,     0,     0,   861,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   864,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   865,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   867,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
     869,   870,     0,     0,   422,   423,   871,   425,   872,   873,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   445,   876,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   877,     0,
       0,     0,     0,     0,     0,   878,   879,   880,     0,     0,
       0,     0,   881,     0,   882,     0,     0,     0,     0,   883,
       0,   884,   885,    93,  1412,   547,   819,   820,   821,  1413,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,  1414,   102,
     103,   104,     0,     0,     0,     0,   824,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,     0,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,   843,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,   857,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   861,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,   865,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,     0,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   877,     0,     0,     0,     0,     0,     0,   878,
     879,     0,     0,     0,     0,     0,   881,     0,   882,     0,
       0,     0,     0,   883,     0,   884,   885,    93,   818,   547,
     819,   820,   821,   822,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     824,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   825,   116,   826,   827,     0,   119,
     120,   121,   122,     0,   123,   828,   829,   124,   125,   830,
     831,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   841,   842,   165,
     843,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   678,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   844,   194,   195,   196,   197,
     198,   845,   846,   200,     0,   201,   202,   847,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,   848,   849,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   850,   851,     0,   852,
       0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   855,   290,
     856,   292,   293,   294,   295,   857,   296,   297,   298,   299,
     858,   859,   301,   860,   303,   304,   305,     0,   306,   307,
       0,     0,   861,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   864,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,   367,
     865,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   867,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   869,   870,
       0,     0,   422,   423,   871,   425,   872,   873,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   876,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   877,     0,     0,     0,
       0,     0,     0,   878,   879,     0,     0,     0,     0,     0,
     881,     0,   882,  1650,     0,     0,     0,   883,     0,   884,
     885,  1015,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,     0,
     107,   108,   109,  1017,   111,   112,   113,   114,   825,  1018,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,  1019,     0,   135,   136,   137,   138,   139,
     140,  1020,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,  1021,   152,   153,   154,   834,   835,   836,
    1022,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,  1024,     0,  1025,
     209,   210,   211,  1026,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,  1027,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,  1028,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,  1029,  1030,   250,  1031,
     252,   253,   254,   255,   256,   257,     0,     0,   258,  1032,
     260,  1033,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,  1034,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,  1035,   856,   292,   293,   294,   295,   857,
     296,   297,  1036,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,  1037,   314,  1038,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
    1039,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,  1040,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,  1041,   408,   868,   410,
       0,   411,   412,     0,   413,  1042,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,  1043,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,  1871,   447,  1045,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     877,     0,     0,     0,     0,     0,     0,   878,   879,     0,
       0,     0,     0,     0,   881,     0,   882,     0,     0,     0,
       0,   883,     0,   884,   885,  1015,   818,   547,   819,   820,
     821,   822,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   824,     0,
       0,   105,   106,     0,   107,   108,   109,  1017,   111,   112,
     113,   114,   825,  1018,   826,   827,     0,   119,   120,   121,
     122,     0,   123,   828,   829,   124,   125,   830,   831,   128,
       0,   129,   130,   131,   132,   832,     0,  1019,     0,   135,
     136,   137,   138,   139,   140,  1020,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,  1021,   152,   153,
     154,   834,   835,   836,  1022,   838,   839,   840,   156,   157,
     158,   159,   160,   161,   162,   841,   842,   165,   843,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   678,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   844,   194,   195,   196,   197,   198,   845,
     846,   200,     0,   201,   202,   847,   204,     0,   205,     0,
     206,  1024,     0,  1025,   209,   210,   211,  1026,   213,     0,
     214,     0,   848,   849,   217,     0,   218,   219,   220,   221,
     222,   223,   224,  1027,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,  1028,   238,   239,
     240,   241,   242,   243,   850,   851,     0,   852,     0,   247,
    1029,  1030,   250,  1031,   252,   253,   254,   255,   256,   257,
       0,     0,   258,  1032,   260,  1033,     0,   262,   263,   264,
     853,   854,   265,   266,   267,   268,   269,  1034,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   855,  1035,   856,   292,
     293,   294,   295,   857,   296,   297,  1036,   299,   858,   859,
     301,   860,   303,   304,   305,     0,   306,   307,     0,     0,
     861,   309,   310,     0,     0,   311,   312,  1037,   314,  1038,
     862,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   863,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   864,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,  1039,   365,   366,   367,   865,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   866,   385,   386,   387,
     388,   389,  1040,   391,   392,   867,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
    1041,   408,   868,   410,     0,   411,   412,     0,   413,  1042,
     415,   416,   417,   418,   419,     0,   869,   870,     0,     0,
     422,   423,   871,   425,   872,   873,   427,   428,  1043,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,   875,     0,   440,   441,   442,   443,   444,   445,   876,
       0,   447,  1045,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   877,     0,     0,     0,     0,     0,
       0,   878,   879,     0,     0,     0,     0,     0,   881,     0,
     882,  1915,     0,     0,     0,   883,     0,   884,   885,    93,
     818,   547,   819,   820,   821,   822,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   824,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   825,   116,   826,   827,
       0,   119,   120,   121,   122,     0,   123,   828,   829,   124,
     125,   830,   831,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   841,
     842,   165,   843,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   678,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   844,   194,   195,
     196,   197,   198,   845,   846,   200,     0,   201,   202,   847,
     204,     0,   205,     0,   206,   207,  1657,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   848,   849,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   850,   851,
       0,   852,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     855,   290,   856,   292,   293,   294,   295,   857,   296,   297,
     298,   299,   858,   859,   301,   860,   303,   304,   305,     0,
     306,   307,     0,     0,   861,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   864,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   865,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   867,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
     869,   870,     0,     0,   422,   423,   871,   425,   872,   873,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   445,   876,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   877,     0,
       0,     0,     0,     0,     0,   878,   879,     0,     0,     0,
       0,     0,   881,     0,   882,     0,     0,     0,     0,   883,
       0,   884,   885,    93,   818,   547,   819,   820,   821,   822,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,   824,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,     0,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,   843,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,   857,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   861,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,   865,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,  2226,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,     0,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   877,     0,     0,     0,     0,     0,     0,   878,
     879,     0,     0,     0,     0,     0,   881,     0,   882,     0,
       0,     0,     0,   883,     0,   884,   885,    93,   818,   547,
     819,   820,   821,   822,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     824,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   825,   116,   826,   827,     0,   119,
     120,   121,   122,     0,   123,   828,   829,   124,   125,   830,
     831,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   841,   842,   165,
     843,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   678,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   844,   194,   195,   196,   197,
     198,   845,   846,   200,     0,   201,   202,   847,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,   848,   849,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   850,   851,     0,   852,
       0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   855,   290,
     856,   292,   293,   294,   295,   857,   296,   297,   298,   299,
     858,   859,   301,   860,   303,   304,   305,     0,   306,   307,
       0,     0,   861,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   864,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,   367,
     865,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   867,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   869,   870,
       0,     0,   422,   423,   871,   425,   872,   873,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   876,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   877,     0,     0,     0,
       0,     0,     0,   878,   879,     0,     0,     0,     0,     0,
     881,     0,   882,     0,     0,     0,     0,   883,     0,   884,
     885,  1015,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,     0,
     107,   108,   109,  1017,   111,   112,   113,   114,   825,  1018,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,  1019,     0,   135,   136,   137,   138,   139,
     140,  1020,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,  1021,   152,   153,   154,   834,   835,   836,
    1022,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,  1024,     0,  1025,
     209,   210,   211,  1026,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,  1027,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,  1028,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,  1029,  1030,   250,  1031,
     252,   253,   254,   255,   256,   257,     0,     0,   258,  1032,
     260,  1033,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,  1034,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,  1035,   856,   292,   293,   294,   295,   857,
     296,   297,  1036,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,  1037,   314,  1038,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
    1039,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,  1040,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,  1041,   408,   868,   410,
       0,   411,   412,     0,   413,  1042,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,  1043,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,     0,   447,  1045,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     877,     0,     0,     0,     0,     0,     0,   878,   879,     0,
       0,     0,     0,     0,   881,     0,   882,     0,     0,     0,
       0,   883,     0,   884,   885,    93,   818,   547,   819,   820,
     821,   822,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   824,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   825,   116,   826,   827,     0,   119,   120,   121,
     122,     0,   123,   828,   829,   124,   125,   830,   831,   128,
       0,   129,   130,   131,   132,   832,     0,   833,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   151,   152,   153,
     154,   834,   835,   836,   837,   838,   839,   840,   156,   157,
     158,   159,   160,   161,   162,   841,   842,   165,   843,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   678,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   844,   194,   195,   196,   197,   198,   845,
     846,   200,     0,   201,   202,   847,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,   848,   849,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   850,   851,     0,   852,     0,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     853,   854,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   855,   290,   856,   292,
     293,   294,   295,   857,   296,   297,   298,   299,   858,   859,
     301,   860,   303,   304,   305,     0,   306,   307,     0,     0,
     861,   309,   310,     0,     0,   311,   312,   313,   314,   315,
     862,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   863,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   864,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,   367,   865,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   866,   385,   386,   387,
     388,   389,   390,   391,   392,   867,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   868,   410,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,   419,     0,   869,   870,     0,     0,
     422,   423,   871,   425,   872,   873,   427,   428,   874,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,   875,     0,   440,   441,   442,   443,   444,   445,   876,
       0,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   877,     0,     0,     0,     0,     0,
       0,  1417,  1418,     0,     0,     0,     0,     0,   881,     0,
     882,     0,     0,     0,     0,   883,     0,   884,   885,    93,
    1796,   547,   819,   820,   821,   822,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   824,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   825,   116,   826,   827,
       0,   119,   120,   121,   122,     0,   123,   828,   829,   124,
     125,   830,   831,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   841,
     842,   165,   843,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   678,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   844,   194,   195,
     196,   197,   198,   845,   846,   200,     0,   201,   202,   847,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   848,   849,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   850,   851,
       0,   852,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,     0,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     855,   290,   856,   292,   293,   294,   295,   857,   296,   297,
     298,   299,   858,   859,   301,   860,   303,   304,   305,     0,
     306,   307,     0,     0,   861,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   864,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   865,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   867,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
     869,   870,     0,     0,   422,   423,   871,   425,   872,   873,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   445,   876,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   877,     0,
       0,     0,     0,     0,     0,   878,   879,     0,     0,     0,
       0,     0,   881,     0,   882,     0,     0,     0,     0,   883,
       0,   884,   885,    93,   818,   547,   819,   820,   821,   822,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,   824,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,     0,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,   843,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,   857,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   861,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,   865,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,     0,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   877,     0,     0,     0,     0,     0,     0,   878,
     879,     0,     0,     0,     0,     0,   881,     0,  2031,     0,
       0,     0,     0,   883,     0,   884,   885,    93,   818,   547,
     819,   820,   821,   822,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
     824,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   825,   116,   826,   827,     0,   119,
     120,   121,   122,     0,   123,   828,   829,   124,   125,   830,
     831,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,  2724,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   841,   842,   165,
     843,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   678,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   844,   194,   195,   196,   197,
     198,   845,   846,   200,     0,   201,   202,   847,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,  2725,   849,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   850,   851,     0,   852,
       0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   855,   290,
     856,   292,   293,   294,   295,   857,   296,   297,   298,   299,
     858,   859,   301,   860,   303,   304,   305,     0,   306,   307,
       0,     0,   861,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   864,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,  2726,
     865,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   867,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   869,   870,
       0,     0,   422,   423,   871,   425,   872,   873,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   876,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   877,     0,     0,     0,
       0,     0,     0,   878,   879,     0,     0,     0,     0,     0,
     881,     0,  2728,     0,     0,     0,     0,   883,     0,   884,
     885,    93,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,  2978,   825,   116,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,   833,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,  2979,   834,   835,   836,
     837,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,   290,   856,   292,   293,   294,   295,   857,
     296,   297,   298,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,   313,   314,   315,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,   390,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   868,   410,
       0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,   874,   430,   431,  2980,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,     0,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     877,     0,     0,     0,     0,     0,     0,   878,   879,     0,
       0,     0,     0,     0,   881,     0,   882,     0,     0,     0,
       0,   883,     0,   884,   885,    93,   818,   547,   819,   820,
     821,   822,   823,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,   824,     0,
       0,   105,   106,     0,   107,   108,   109,   110,   111,   112,
     113,   114,   825,   116,   826,   827,     0,   119,   120,   121,
     122,     0,   123,   828,   829,   124,   125,   830,   831,   128,
       0,   129,   130,   131,   132,   832,     0,   833,     0,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   151,   152,   153,
    2979,   834,   835,   836,   837,   838,   839,   840,   156,   157,
     158,   159,   160,   161,   162,   841,   842,   165,   843,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   678,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   844,   194,   195,   196,   197,   198,   845,
     846,   200,     0,   201,   202,   847,   204,     0,   205,     0,
     206,   207,     0,   208,   209,   210,   211,   212,   213,     0,
     214,     0,   848,   849,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,   237,   238,   239,
     240,   241,   242,   243,   850,   851,     0,   852,     0,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
       0,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     853,   854,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   855,   290,   856,   292,
     293,   294,   295,   857,   296,   297,   298,   299,   858,   859,
     301,   860,   303,   304,   305,     0,   306,   307,     0,     0,
     861,   309,   310,     0,     0,   311,   312,   313,   314,   315,
     862,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   863,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   864,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,   364,   365,   366,   367,   865,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,   866,   385,   386,   387,
     388,   389,   390,   391,   392,   867,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   868,   410,     0,   411,   412,     0,   413,   414,
     415,   416,   417,   418,   419,     0,   869,   870,     0,     0,
     422,   423,   871,   425,   872,   873,   427,   428,   874,   430,
     431,  2980,   433,   434,     0,     0,   435,   436,   437,   438,
     439,   875,     0,   440,   441,   442,   443,   444,   445,   876,
       0,   447,   448,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   877,     0,     0,     0,     0,     0,
       0,   878,   879,     0,     0,     0,     0,     0,   881,     0,
     882,     0,     0,     0,     0,   883,     0,   884,   885,    93,
     818,   547,   819,   820,   821,   822,   823,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,   824,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113, -1759,   825,   116,   826,   827,
       0,   119,   120,   121,   122,     0,   123,   828,   829,   124,
     125,   830,   831,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,  2979,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   841,
     842,   165,   843,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   678,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   844,   194,   195,
     196,   197,   198,   845,   846,   200,     0,   201,   202,   847,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211, -1759,   213,     0,   214,     0,   848,   849,   217,     0,
     218,   219,   220,   221,   222,   223,   224, -1759,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   850,   851,
       0,   852,     0,   247,     0,     0,   250,   251,   252,   253,
     254,   255,   256,   257,     0,     0,   258,   259,   260, -1759,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     855,   290,   856,   292,   293,   294,   295,     0,   296,   297,
       0,   299,   858,   859,   301,   860,   303,   304,   305,     0,
     306,   307,     0,     0,   861,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   864,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   865,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389, -1759,   391,   392,   867,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
     869,   870,     0,     0,   422,   423,   871,   425,   872,   873,
     427,   428,   874,   430,   431,  2980,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   445,   876,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475, -1759,     0,
       0,     0,     0,     0,     0,   878,   879,     0,     0,     0,
       0,     0,   881,     0,   882,     0,     0,     0,     0,   883,
       0,   884,   885,    93,   818,   547,   819,   820,   821,   822,
     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,     0,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   861,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,     0,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,     0,     0,     0,     0,     0,  1643,
    1644,     0,     0,    93,   818,   547,   819,   820,  1645,   822,
     823,     0,     0,     0,     0,   884,   885,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
     825,   116,   826,   827,     0,   119,   120,   121,   122,     0,
     123,   828,   829,   124,   125,   830,   831,   128,     0,   129,
     130,   131,   132,   832,     0,   833,     0,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,   151,   152,   153,   154,   834,
     835,   836,   837,   838,   839,   840,   156,   157,   158,   159,
     160,   161,   162,   841,   842,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   678,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   844,   194,   195,   196,   197,   198,   845,   846,   200,
       0,   201,   202,   847,   204,     0,   205,     0,   206,   207,
       0,   208,   209,   210,   211,   212,   213,     0,   214,     0,
     848,   849,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,
     242,   243,   850,   851,     0,   852,     0,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,     0,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   853,   854,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   855,   290,   856,   292,   293,   294,
     295,     0,   296,   297,   298,   299,   858,   859,   301,   860,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,   313,   314,   315,   862,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   863,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     864,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,   364,   365,   366,   367,  1782,  1783,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,   866,   385,   386,   387,   388,   389,
     390,   391,   392,   867,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     868,   410,     0,   411,   412,     0,   413,   414,   415,   416,
     417,   418,   419,     0,   869,   870,     0,     0,   422,   423,
     871,   425,   872,   873,   427,   428,   874,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,   875,
       0,   440,   441,   442,   443,   444,   445,   876,     0,   447,
     448,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,     0,     0,     0,     0,     0,     0,     0,  1784,
    1785,     0,     0,     0,     0,     0,     0,     0,  1645,     0,
       0,     0,     0,     0,     0,   884,   885,    93,   818,   547,
     819,   820,   821,   822,   823,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   825,   116,   826,   827,     0,   119,
     120,   121,   122,     0,   123,   828,   829,   124,   125,   830,
     831,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   841,   842,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   678,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   844,   194,   195,   196,   197,
     198,   845,   846,   200,     0,   201,   202,   847,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,   848,   849,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   850,   851,     0,   852,
       0,   247,     0,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   855,   290,
     856,   292,   293,   294,   295,     0,   296,   297,   298,   299,
     858,   859,   301,   860,   303,   304,   305,     0,   306,   307,
       0,     0,   861,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   864,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   867,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   869,   870,
       0,     0,   422,   423,   871,   425,   872,   873,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   876,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,     0,     0,     0,     0,
       0,     0,     0,  1643,  1644,     0,     0,     0,     0,     0,
       0,     0,  1645,     0,     0,     0,     0,     0,     0,   884,
     885,    93,   818,   547,   819,   820,   821,   822,   823,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,   824,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,     0,   825,   116,
     826,   827,     0,   119,   120,   121,   122,     0,   123,   828,
     829,   124,   125,   830,   831,   128,     0,   129,   130,   131,
     132,   832,     0,   833,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   834,   835,   836,
     837,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   841,   842,   165,   843,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   678,   181,   182,     0,   183,   184,   185,
       0,   186,     0,   188,     0,   189,   190,   191,   192,   844,
     194,   195,   196,   197,   198,   845,   846,   200,     0,   201,
     202,   847,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,     0,   213,     0,   214,     0,   848,   849,
     217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     850,   851,     0,   852,     0,   247,     0,     0,   250,   251,
     252,   253,   254,   255,   256,   257,     0,     0,   258,   259,
     260,     0,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   855,   290,   856,   292,   293,   294,   295,     0,
     296,   297,     0,   299,   858,   859,   301,   860,   303,   304,
     305,     0,   306,   307,     0,     0,   861,   309,   310,     0,
       0,   311,   312,   313,   314,   315,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   864,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,   367,   865,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,     0,   391,
     392,   867,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   868,   410,
       0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
     419,     0,   869,   870,     0,     0,   422,   423,   871,   425,
     872,   873,   427,   428,   874,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   876,     0,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
       0,     0,     0,     0,     0,     0,     0,   878,   879,   498,
       0,     0,     0,     0,   881,     0,   882,     0,     0,     0,
       0,   883,     0,   884,   885,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,  2336,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,  -622,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,  -622,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,  -622,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,  -622,   252,   253,
     254,   255,   256,   257,     0,     0,   258,  -622,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,  -622,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,  -622,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,  -622,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,     0,    93,
       0,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   947,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,   829,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   845,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,  2077,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,     0,   296,   297,
     298,   299,     0,   859,   301,   302,   303,   304,   305,     0,
     306,   307,     0,   580,   308,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   368,  2078,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,    26,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,    31,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   871,   425,   872,     0,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   575,   446,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,    34,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,     0,    93,
      35,   579,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2079,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,   829,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   832,
       0,   833,     0,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   151,   152,   153,   154,   834,   835,   836,   837,   838,
     839,   840,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   845,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,   207,     0,   208,   209,   210,
     211,   212,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,  2077,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   853,   854,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,     0,   296,   297,
     298,   299,     0,   859,   301,   302,   303,   304,   305,     0,
     306,   307,     0,   580,   308,   309,   310,     0,     0,   311,
     312,   313,   314,   315,   862,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   863,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,   364,   365,
     366,   367,   368,  2078,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
     866,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   868,   410,     0,   411,
     412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   871,   425,   872,     0,
     427,   428,   874,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,   875,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,   448,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,    93,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2079,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,   122,     0,   123,     0,   829,   124,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   832,     0,
     833,     0,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
     151,   152,   153,   154,   834,   835,   836,   837,   838,   839,
     840,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   845,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,   207,     0,   208,   209,   210,   211,
     212,   213,     0,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,     0,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,     0,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   853,   854,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,     0,   296,   297,   298,
     299,     0,   859,   301,   302,   303,   304,   305,     0,   306,
     307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
     313,   314,   315,   862,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   863,   330,   331,
     332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,   364,   365,   366,
     367,   368,  2078,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,   866,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   868,   410,     0,   411,   412,
       0,   413,   414,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,   422,   423,   871,   425,   872,     0,   427,
     428,   874,   430,   431,   432,   433,   434,     0,     0,   435,
     436,   437,   438,   439,   875,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,   448,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,    93,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    36,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,   122,     0,   123,     0,   829,   124,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   832,     0,   833,
       0,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   151,
     152,   153,   154,   834,   835,   836,   837,   838,   839,   840,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   845,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,   207,     0,   208,   209,   210,   211,   212,
     213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
       0,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   853,   854,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,     0,   296,   297,   298,   299,
       0,   859,   301,   302,   303,   304,   305,     0,   306,   307,
       0,     0,   308,   309,   310,     0,     0,   311,   312,   313,
     314,   315,   862,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   863,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,   866,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   868,   410,     0,   411,   412,     0,
     413,   414,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,   422,   423,   871,   425,   872,     0,   427,   428,
     874,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,   875,     0,   440,   441,   442,   443,   444,
     445,   446,     0,   447,   448,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   746,  1240,   547,     0,
       0,     0,   822,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2745,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   747,   748,     0,   749,   750,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   751,   752,
     128,     0,   129,   130,   131,   132,   753,     0,     0,     0,
     135,   136,   137,   138,   139,   140,     0,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   152,
     153,   154,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   754,   755,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,   756,   194,   195,   196,   197,   198,
     757,  1241,   200,     0,   201,   202,   758,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,   759,   760,   217,     0,   218,   219,   220,
     221,   222,   223,   224,     0,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,     0,   761,
     239,   240,   241,   242,   243,   762,   763,     0,   764,     0,
     247,     0,     0,   250,     0,   252,   253,   254,   255,   256,
     257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   765,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   766,     0,   767,
     292,   293,   294,   768,     0,   296,   297,     0,   299,     0,
     769,   301,   770,   303,   304,   305,     0,   306,   307,  1242,
       0,   308,   309,   310,     0,     0,   311,   771,     0,   314,
       0,   772,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   773,   330,   331,   774,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   775,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,     0,   365,   366,   367,   776,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   777,
     387,   388,   389,     0,   391,   392,   778,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   779,   408,   780,   410,     0,   411,   412,     0,   413,
       0,   415,   416,   417,   418,   419,     0,   781,   782,     0,
       0,   422,   423,   783,   425,   784,  1243,   427,   428,   785,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,  1133,
     787,     0,   447,     0,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     788,   789,   790,   791,   792,   793,   794,   795,   796,   797,
     798,   472,   473,   474,   475,   746,     0,     0,     0,     0,
       0,     0,  1244,  1245,  1954,     0,     0,     0,     0,     0,
       0,  1955,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     3,     4,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   747,   748,     0,   749,   750,     0,   119,   120,   121,
     122,     0,   123,     0,     0,   124,   125,   751,   752,   128,
       0,   129,   130,   131,   132,   753,     0,     0,     0,   135,
     136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
     154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   754,   755,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   756,   194,   195,   196,   197,   198,   757,
       0,   200,     0,   201,   202,   758,   204,     0,   205,     0,
     206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
     214,     0,   759,   760,   217,     0,   218,   219,   220,   221,
     222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,     0,   761,   239,
     240,   241,   242,   243,   762,   763,     0,   764,     0,   247,
       0,     0,   250,     0,   252,   253,   254,   255,   256,   257,
       0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
       0,     0,   265,   266,   267,   268,   269,   765,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   766,     0,   767,   292,
     293,   294,   768,     0,   296,   297,     0,   299,     0,   769,
     301,   770,   303,   304,   305,     0,   306,   307,     0,     0,
     308,   309,   310,     0,     0,   311,   771,     0,   314,     0,
     772,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   773,   330,   331,   774,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   775,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,     0,   365,   366,   367,   776,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      26,   380,   381,   382,   383,   384,     0,   385,   777,   387,
     388,   389,     0,   391,   392,   778,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     779,   408,   780,   410,     0,   411,   412,    31,   413,     0,
     415,   416,   417,   418,   419,     0,   781,   782,     0,     0,
     422,   423,   783,   425,   784,     0,   427,   428,   785,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,   444,   786,   787,
       0,   447,     0,   449,   450,   451,   452,   453,     0,     0,
     454,     0,    34,   455,   456,   457,   458,   459,   460,   788,
     789,   790,   791,   792,   793,   794,   795,   796,   797,   798,
     472,   473,   474,   475,   498,     0,    35,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      36,    94,    95,    96,    97,    98,    99,   100,   101,   613,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,     0,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,     0,
       0,   258,     0,   260,     0,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,   500,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   291,   292,   293,
     294,   295,     0,   296,   297,     0,   299,     0,   300,   301,
     302,   303,   304,   305,     0,   306,   307,     0,     0,   308,
     309,   310,     0,     0,   311,   312,     0,   314,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    26,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   502,
     408,   409,   410,     0,   411,   412,    31,   413,     0,   415,
     416,   417,   418,   419,     0,   614,   421,     0,     0,   615,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,   575,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,     0,   454,
       0,    34,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   498,     0,    35,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    36,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   500,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    26,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   502,   408,
     409,   410,     0,   411,   412,    31,   413,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,   575,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
      34,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,     0,   498,    35,   579,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    36,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   500,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   502,   408,
     409,   410,     0,   411,   412,     0,   413,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   498,     0,   579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   926,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   152,   153,   154,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
       0,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,     0,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,     0,     0,   258,
       0,   260,     0,     0,   262,   263,   264,     0,     0,   265,
     266,   267,   268,   269,   500,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
       0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   502,   408,   409,
     410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
     434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   498,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2583,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
     140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
     209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
     252,   253,   254,   255,   256,   257,     0,     0,   258,     0,
     260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
     267,   268,   269,   500,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   502,   408,   409,   410,
       0,   411,   412,     0,   413,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1664,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
     253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
       0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   500,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
     297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   502,   408,   409,   410,     0,
     411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,     0,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   498,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1768,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,     0,     0,
       0,     0,  2437,  1240,   547,     0,     0,  1624,   822,     0,
       0,     0,     0,     0,  2555,  1625,  1626,  1627,  1628,    94,
      95,    96,    97,    98,    99,   100,   101,  1058,   102,   103,
     104,  1059,  1060,  1061,  1062,  1063,  1064,  1065,   105,   106,
    1066,   107,   108,   109,  2438,   111,   112,   113,     0,   666,
    2439,   668,   669,  1067,   119,   120,   121,   122,  1068,   123,
    1069,  1070,   124,   125,   670,   671,   128,  1071,   129,   130,
     131,   132,     0,  1072,  2440,  1073,   135,   136,   137,   138,
     139,   140,  2441,   142,   143,   144,  1074,   145,   146,   147,
     148,   149,   150,  1075,  2442,   152,   153,   154,  1076,  1077,
    1078,  2443,  1079,  1080,  1081,   156,   157,   158,   159,   160,
     161,   162,   676,   677,   165,  1082,   166,  1083,   167,   168,
     169,   170,   171,   172,  1084,   173,   174,   175,   176,   177,
    1085,  1086,   178,   179,   678,   181,   182,  1087,   183,   184,
     185,  1088,   186,   187,   188,  1089,   189,   190,   191,   192,
       0,   194,   195,   196,   197,   198,     0,  1090,   200,  1091,
     201,   202,   679,   204,  1092,   205,  1093,   206,  2444,  1094,
    2445,   209,   210,   211,  2446,   213,  1095,   214,  1096,     0,
       0,   217,  1097,   218,   219,   220,   221,   222,   223,   224,
    2447,   226,   227,   228,   229,  1098,   230,   231,   232,   233,
     234,   235,  1099,   236,  2448,     0,   239,   240,   241,   242,
     243,   686,   687,  1100,   688,  1101,   247,  2449,  2450,   250,
    2451,   252,   253,   254,   255,   256,   257,  1102,  1103,   258,
    2452,   260,  2453,  1104,   262,   263,   264,  1105,  1106,   265,
     266,   267,   268,   269,  2454,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   695,  2455,   697,   292,   293,   294,  2456,
    1107,   296,   297,  2457,   299,  1108,     0,   301,   699,   303,
     304,   305,  1109,   306,   307,  1110,  1111,  2458,   309,   310,
    1112,  1113,   311,     0,  2459,   314,  2460,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1114,   327,
     328,     0,   330,   331,     0,   333,   334,   335,  1115,   336,
     337,   338,   339,   340,   341,  1116,   342,   343,   344,   702,
     346,   347,   348,   349,  1117,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,  1118,  1119,   362,
     363,  2461,   365,   366,   367,   704,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,  1120,   380,   381,
     382,   383,   384,  1121,   385,  2462,   387,   388,   389,  2463,
     391,   392,   707,   394,  1122,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,  2464,   408,     0,
     410,  1123,   411,   412,  1124,   413,  2465,   415,   416,   417,
     418,   419,  1125,   710,   711,  1126,  1127,   422,   423,     0,
     425,     0,  1128,   427,   428,  2466,   430,   431,   432,   433,
     434,  1129,  1130,   435,   436,   437,   438,   439,  1131,  1132,
     440,   441,   442,   443,   444,     0,   713,  1134,   447,  2467,
     449,   450,   451,   452,   453,  1135,  1136,   454,  1137,  1138,
     455,   456,   457,   458,   459,   460,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   472,   473,   474,
     475,     0,   498,     0,  1629,  1630,  1631,  1624,  2468,  2469,
    1634,  1635,  1636,  1637,     0,  1625,  1626,  1627,  1628,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   152,   153,   154,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
       0,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,     0,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,     0,     0,   258,
       0,   260,     0,     0,   262,   263,   264,     0,     0,   265,
     266,   267,   268,   269,   500,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
       0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   502,   408,   409,
     410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
     434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,     0,     0,     0,  1629,  1630,  1631,     0,  1632,  1633,
    1634,  1635,  1636,  1637,  1317,     0,     0,  1318,     0,     0,
       0,  1319,  1320,  1321,  1322,  1323,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1324,     0,     0,  1317,     0,     0,  1318,     0,  1326,     0,
    1319,  1320,  1321,  1322,  1323,  1327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1324,
       0,     0,     0,     0,     0,     0,     0,  1326,  1317,     0,
    1328,  1318,     0,     0,  1327,  1319,  1320,  1321,  1322,  1323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1324,     0,     0,  1317,     0,  1328,
    1318,     0,  1326,     0,  1319,  1320,  1321,  1322,  1323,  1327,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1324,     0,     0,     0,     0,     0,     0,
       0,  1326,     0,     0,  1328,     0,  1317,     0,  1327,  1318,
       0,     0,     0,  1319,  1320,  1321,  1322,  1323,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1324,  1328,     0,     0,     0,     0,     0,     0,
    1326,  1329,     0,     0,     0,     0,     0,  1327,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1330,     0,     0,
       0,     0,  1331,     0,     0,     0,     0,     0,     0,     0,
    1329,     0,  1328,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1332,  1333,  1330,     0,     0,     0,
       0,  1331,     0,     0,     0,     0,     0,     0,     0,  1334,
       0,     0,     0,     0,     0,  1329,     0,     0,     0,     0,
       0,     0,     0,  1332,  1333,     0,     0,     0,     0,     0,
       0,  1330,     0,     0,     0,     0,  1331,     0,  1334,     0,
       0,     0,     0,     0,  1329,     0,     0,  1335,     0,     0,
    1336,     0,     0,     0,     0,     0,     0,     0,  1332,  1333,
    1330,     0,     0,     0,  1337,  1331,     0,  1338,     0,     0,
       0,     0,     0,  1334,     0,     0,  1335,     0,     0,  1336,
       0,     0,     0,  1329,     0,     0,     0,  1332,  1333,     0,
       0,     0,     0,  1337,     0,     0,  1338,     0,     0,  1330,
       0,     0,  1334,     0,  1331,     0,     0,     0,     0,     0,
       0,  1335,     0,     0,  1336,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1332,  1333,  1337,     0,
       0,  1338,     0,     0,     0,     0,     0,     0,     0,     0,
    1335,  1334,     0,  1336,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1339,  1337,     0,     0,
    1338,  1317,     0,     0,  1318,     0,     0,     0,  1319,  1320,
    1321,  1322,  1323,     0,     0,     0,     0,     0,     0,  1335,
       0,  1317,  1336,     0,  1318,  1339,     0,  1324,     0,  1320,
    1321,  1322,  1323,     0,     0,  1326,  1337,     0,     0,  1338,
       0,     0,  1327,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1326,     0,     0,     0,     0,
    1339,     0,  1327,     0,     0,     0,     0,  1328,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1317,     0,  1328,  1318,  1339,
       0,     0,  1319,  1320,  1321,  1322,  1323,     0,  1340,     0,
       0,  1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,
    1349,  1324,     0,     0,     0,  2386,     0,     0,     0,  1326,
       0,     0,     0,     0,     0,     0,  1327,  1340,  1339,     0,
    1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,
       0,     0,     0,     0,  2530,     0,     0,     0,     0,  1317,
       0,  1328,  1318,     0,     0,     0,  1319,  1320,  1321,  1322,
    1323,     0,  1340,     0,     0,  1341,  1342,  1343,  1329,  1344,
    1345,  1346,  1347,  1348,  1349,  1324,     0,     0,     0,  2552,
       0,     0,     0,  1326,  1330,     0,     0,     0,  1329,  1331,
    1327,  1340,     0,     0,  1341,  1342,  1343,     0,  1344,  1345,
    1346,  1347,  1348,  1349,  1330,     0,     0,     0,  2695,  1331,
       0,  1332,  1333,     0,     0,  1328,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1334,     0,     0,     0,
    1340, -1759, -1759,  1341,  1342,  1343,     0,  1344,  1345,  1346,
    1347,  1348,  1349,     0,     0,     0,  1334,  2857,     0,     0,
       0,     0,  1329,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1335,     0,     0,  1336,  1330,     0,
       0,     0,     0,  1331,     0,     0,     0,     0,     0,     0,
       0,  1337,     0,     0,  1338,     0,     0, -1759,     0,     0,
       0,     0,     0,     0,     0,  1332,  1333,     0,     0,     0,
       0,  1337,     0,     0,     0,     0,     0,     0,     0,     0,
    1334,     0,     0,     0,     0,     0,  1329,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1330,     0,     0,     0,     0,  1331,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1335,     0,
       0,  1336,     0,     0,     0,     0,     0,     0,     0,  1332,
    1333,     0,     0,     0,     0,  1337,     0,     0,  1338,     0,
       0,     0,     0,  1339,  1334,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1339,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1335,     0,     0,  1336,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1337,
       0,     0,  1338,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1339,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1340,     0,     0,  1341,  1342,
    1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,
       0,     0,  2907,     0,     0,  1340,     0,     0,  1341,  1342,
    1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1339,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1340,
       0,     0,  1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,
    1348,  1349,     0,     0,     0,     0,  2968,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1057,  1340,     0,     0,  1341,  1342,  1343,     0,
    1344,  1345,  1346,  1347,  1348,  1349,     0,     0,  1500,    94,
      95,    96,    97,    98,    99,   100,   101,  1058,   102,   103,
     104,  1059,  1060,  1061,  1062,  1063,  1064,  1065,   105,   106,
    1066,   107,   108,   109,     0,   111,   112,   113,   747,   748,
       0,   749,   750,  1067,   119,   120,   121,   122,  1068,   123,
    1069,  1070,   124,   125,   751,   752,   128,  1071,   129,   130,
     131,   132,   753,  1072,     0,  1073,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,  1074,   145,   146,   147,
     148,   149,   150,  1075,     0,   152,   153,   154,  1076,  1077,
    1078,     0,  1079,  1080,  1081,   156,   157,   158,   159,   160,
     161,   162,   754,   755,   165,  1082,   166,  1083,   167,   168,
     169,   170,   171,   172,  1084,   173,   174,   175,   176,   177,
    1085,  1086,   178,   179,   180,   181,   182,  1087,   183,   184,
     185,  1088,   186,   187,   188,  1089,   189,   190,   191,   192,
     756,   194,   195,   196,   197,   198,   757,  1090,   200,  1091,
     201,   202,   758,   204,  1092,   205,  1093,   206,     0,  1094,
       0,   209,   210,   211,     0,   213,  1095,   214,  1096,   759,
     760,   217,  1097,   218,   219,   220,   221,   222,   223,   224,
       0,   226,   227,   228,   229,  1098,   230,   231,   232,   233,
     234,   235,  1099,   236,     0,   761,   239,   240,   241,   242,
     243,   762,   763,  1100,   764,  1101,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,  1102,  1103,   258,
       0,   260,     0,  1104,   262,   263,   264,  1105,  1106,   265,
     266,   267,   268,   269,   765,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   766,     0,   767,   292,   293,   294,   768,
    1107,   296,   297,     0,   299,  1108,   769,   301,   770,   303,
     304,   305,  1109,   306,   307,  1110,  1111,   308,   309,   310,
    1112,  1113,   311,   771,     0,   314,     0,   772,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1114,   327,
     328,   773,   330,   331,   774,   333,   334,   335,  1115,   336,
     337,   338,   339,   340,   341,  1116,   342,   343,   344,   775,
     346,   347,   348,   349,  1117,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,  1118,  1119,   362,
     363,     0,   365,   366,   367,   776,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,  1120,   380,   381,
     382,   383,   384,  1121,   385,   777,   387,   388,   389,     0,
     391,   392,   778,   394,  1122,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   779,   408,   780,
     410,  1123,   411,   412,  1124,   413,     0,   415,   416,   417,
     418,   419,  1125,   781,   782,  1126,  1127,   422,   423,   783,
     425,   784,  1128,   427,   428,   785,   430,   431,   432,   433,
     434,  1129,  1130,   435,   436,   437,   438,   439,  1131,  1132,
     440,   441,   442,   443,   444,  1133,   787,  1134,   447,     0,
     449,   450,   451,   452,   453,  1135,  1136,   454,  1137,  1138,
     455,   456,   457,   458,   459,   460,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,   472,   473,   474,
     475,   498,     0,     0,     0,     0,     0,     0,     0,     0,
    1748,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
     140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
     209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
     252,   253,   254,   255,   256,   257,     0,     0,   258,     0,
     260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
     267,   268,   269,   500,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   502,   408,   409,   410,
       0,   411,   412,     0,   413,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     746,  1240,   547,     0,     0,     0,   822,     0,     0,  2249,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   747,   748,     0,   749,
     750,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   751,   752,   128,     0,   129,   130,   131,   132,
     753,     0,     0,     0,   135,   136,   137,   138,   139,   140,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     754,   755,   165,  1376,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   756,   194,
     195,   196,   197,   198,   757,  1241,   200,     0,   201,   202,
     758,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,   759,   760,   217,
       0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,     0,   761,   239,   240,   241,   242,   243,   762,
     763,     0,   764,     0,   247,     0,     0,   250,     0,   252,
     253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
       0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   765,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   766,     0,   767,   292,   293,   294,   768,     0,   296,
     297,     0,   299,     0,   769,   301,   770,   303,   304,   305,
       0,   306,   307,  1242,     0,   308,   309,   310,     0,     0,
     311,   771,     0,   314,     0,   772,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   773,
     330,   331,   774,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   775,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,     0,
     365,   366,   367,   776,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   777,   387,   388,   389,     0,   391,   392,
     778,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   779,   408,   780,   410,     0,
     411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
       0,   781,   782,     0,     0,   422,   423,   783,   425,   784,
    1243,   427,   428,   785,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,  1133,   787,     0,   447,     0,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   788,   789,   790,   791,   792,   793,
     794,   795,   796,   797,   798,   472,   473,   474,   475,   746,
    1240,   547,     0,     0,     0,   822,  1244,  1245,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   747,   748,     0,   749,   750,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   751,   752,   128,     0,   129,   130,   131,   132,   753,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   754,
     755,   165,  1378,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   756,   194,   195,
     196,   197,   198,   757,  1241,   200,     0,   201,   202,   758,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   759,   760,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   761,   239,   240,   241,   242,   243,   762,   763,
       0,   764,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   765,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     766,     0,   767,   292,   293,   294,   768,     0,   296,   297,
       0,   299,     0,   769,   301,   770,   303,   304,   305,     0,
     306,   307,  1242,     0,   308,   309,   310,     0,     0,   311,
     771,     0,   314,     0,   772,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   773,   330,
     331,   774,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   775,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   776,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   777,   387,   388,   389,     0,   391,   392,   778,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   779,   408,   780,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     781,   782,     0,     0,   422,   423,   783,   425,   784,  1243,
     427,   428,   785,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,  1133,   787,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   472,   473,   474,   475,   746,  1240,
     547,     0,     0,     0,   822,  1244,  1245,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   747,   748,     0,   749,   750,     0,
     119,   120,   121,   122,     0,   123,     0,     0,   124,   125,
     751,   752,   128,     0,   129,   130,   131,   132,   753,     0,
       0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   754,   755,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   756,   194,   195,   196,
     197,   198,   757,  1241,   200,     0,   201,   202,   758,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,   759,   760,   217,     0,   218,
     219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
       0,   761,   239,   240,   241,   242,   243,   762,   763,     0,
     764,     0,   247,     0,     0,   250,     0,   252,   253,   254,
     255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
     262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
     765,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   766,
       0,   767,   292,   293,   294,   768,     0,   296,   297,     0,
     299,     0,   769,   301,   770,   303,   304,   305,     0,   306,
     307,  1242,     0,   308,   309,   310,     0,     0,   311,   771,
       0,   314,     0,   772,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   773,   330,   331,
     774,   333,   334,   335,     0,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   775,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,     0,   365,   366,
     367,   776,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   777,   387,   388,   389,     0,   391,   392,   778,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   779,   408,   780,   410,     0,   411,   412,
       0,   413,     0,   415,   416,   417,   418,   419,     0,   781,
     782,     0,     0,   422,   423,   783,   425,   784,  1243,   427,
     428,   785,   430,   431,   432,   433,   434,     0,     0,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
     444,  1133,   787,     0,   447,     0,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   788,   789,   790,   791,   792,   793,   794,   795,
     796,   797,   798,   472,   473,   474,   475,     0,     0,  1317,
       0,     0,  1318,     0,  1244,  1245,  1319,  1320,  1321,  1322,
    1323,     0,  1317,     0,     0,  1318,     0,     0,     0,  1319,
    1320,  1321,  1322,  1323,     0,  1324,     0,     0,     0,  1775,
       0,     0,     0,  1326,     0,     0,     0,     0,  1324,     0,
    1327,     0,     0,     0,     0,     0,  1326,  1317,     0,     0,
    1318,     0,     0,  1327,  1319,  1320,  1321,  1322,  1323,     0,
    1317,     0,     0,  1318,     0,  1328,     0,  1319,  1320,  1321,
    1322,  1323,     0,  1324,     0,     0,     0,     0,  1328,     0,
       0,  1326,     0,     0,     0,     0,  1324,     0,  1327,  1976,
       0,     0,     0,     0,  1326,     0,     0,     0,     0,     0,
       0,  1327,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1328,     0,     0,  1776,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1328,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1317,     0,     0,  1318,     0,     0,     0,  1319,  1320,  1321,
    1322,  1323,     0,     0,     0,     0,  1329,     0,     0,  2015,
       0,     0,     0,     0,  2016,     0,  1324,     0,     0,  1329,
       0,     0,  1330,     0,  1326,     0,     0,  1331,     0,     0,
       0,  1327,     0,     0,     0,  1330,     0,     0,     0,     0,
    1331,     0,     0,  3011,     0,     0,     0,     0,     0,  1332,
    1333,     0,     0,     0,  1329,     0,  1328,     0,     0,     0,
       0,     0,  1332,  1333,  1334,     0,     0,  1329,     0,     0,
    1330,     0,     0,     0,     0,  1331,     0,  1334,     0,     0,
       0,     0,     0,  1330,     0,     0,     0,     0,  1331,     0,
       0,     0,     0,     0,     0,     0,     0,  1332,  1333,     0,
       0,     0,  1335,     0,     0,  1336,     0,     0,     0,     0,
    1332,  1333,  1334,     0,     0,  1335,     0,     0,  1336,  1337,
       0,     0,  1338,     0,     0,  1334,     0,     0,     0,     0,
       0,     0,  1337,     0,     0,  1338,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1335,     0,     0,  1336,     0,     0,     0,  1329,     0,     0,
       0,     0,     0,  1335,     0,     0,  1336,  1337,     0,     0,
    1338,     0,     0,  1330,     0,     0,     0,     0,  1331,     0,
    1337,     0,     0,  1338,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3012,     0,     0,     0,     0,     0,     0,
    1332,  1333,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1339,     0,     0,     0,  1334,     0,     0,     0,     0,
    1317,     0,     0,  1318,  1339,     0,     0,  1319,  1320,  1321,
    1322,  1323,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1324,     0,     0,  2021,
       0,     0,     0,  1335,  1326,     0,  1336,     0,     0,  1339,
       0,  1327,     0,     0,     0,     0,     0,     0,     0,     0,
    1337,  1780,  1339,  1338,  1317,     0,     0,  1318,     0,     0,
       0,  1319,  1320,  1321,  1322,  1323,  1328,     0,     0,     0,
       0,  1988,     0,     0,     0,     0,     0,     0,     0,     0,
    1324,     0,     0,     0,     0,     0,     0,     0,  1326,     0,
       0,     0,     0,  1340,     0,  1327,  1341,  1342,  1343,     0,
    1344,  1345,  1346,  1347,  1348,  1349,  1340,     0,     0,  1341,
    1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,
    1328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1340,  1339,     0,  1341,  1342,  1343,     0,  1344,  1345,
    1346,  1347,  1348,  1349,  1340,     0,     0,  1341,  1342,  1343,
       0,  1344,  1345,  1346,  1347,  1348,  1349,  1329,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1330,     0,     0,     0,     0,  1331,     0,
       0,     0,     0,  1317,     0,     0,  1318,     0,     0,     0,
    1319,  1320,  1321,  1322,  1323,     0,     0,     0,     0,     0,
    1332,  1333,     0,     0,     0,     0,  2026,     0,     0,  1324,
       0,  1329,  2028,     0,     0,  1334,     0,  1326,     0,     0,
       0,     0,     0,     0,  1327,     0,     0,  1330,     0,     0,
       0,     0,  1331,     0,  1340,     0,     0,  1341,  1342,  1343,
       0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,  1328,
       0,     0,     0,  1335,  1332,  1333,  1336,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1317,  1334,
    1337,  1318,     0,  1338,     0,  1319,  1320,  1321,  1322,  1323,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
       0,     0,  1326,     0,     0,     0,     0,  1335,     0,  1327,
    1336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1317,     0,  1337,  1318,     0,  1338,     0,  1319,
    1320,  1321,  1322,  1323,  1328,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1324,     0,
    1329,  2298,     0,     0,     0,     0,  1326,     0,     0,     0,
       0,     0,  1339,  1327,     0,     0,  1330,     0,     0,     0,
       0,  1331,     0,     0,     0,     0,  1317,     0,     0,  1318,
       0,     0,     0,  1319,  1320,  1321,  1322,  1323,  1328,     0,
       0,     0,     0,  1332,  1333,     0,     0,     0,     0,     0,
       0,     0,  1324,     0,     0,     0,     0,     0,  1334,     0,
    1326,  1317,     0,     0,  1318,     0,  1339,  1327,     0,  1320,
    1321,  1322,  1323,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1329,     0,  1324,     0,     0,
       0,     0,  1328,     0,     0,  1326,  1335,     0,     0,  1336,
       0,  1330,  1327,     0,     0,     0,  1331,     0,     0,     0,
       0,     0,     0,  1337,  1340,     0,  1338,  1341,  1342,  1343,
       0,  1344,  1345,  1346,  1347,  1348,  1349,  1328,  1332,  1333,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1329,
       0,     0,     0,  1334,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1330,     0,     0,     0,     0,
    1331,     0,     0,     0,     0,     0,     0,     0,  1340,     0,
       0,  1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,
    1349,  1335,  1332,  1333,  1336,     0,     0,     0,     0,     0,
       0,     0,     0,  1329,     0,     0,     0,  1334,  1337,     0,
       0,  1338,     0,     0,     0,  1339,     0,     0,     0,  1330,
       0,     0,     0,     0,  1331,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1329,     0,
       0,     0,     0,     0,     0,  1335,  1332,  1333,  1336,     0,
       0,     0,     0,     0,  1330,     0,     0,     0,     0,  1331,
       0,  1334,  1337,     0,  1317,  1338,     0,  1318,     0,     0,
       0,  1319,  1320,  1321,  1322,  1323,     0,     0,     0,     0,
       0,  1332,  1333,     0,     0,     0,     0,     0,     0,     0,
    1324,     0,     0,     0,     0,     0,  1334,     0,  1326,  1335,
    1339,     0,  1336,     0,     0,  1327,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1337,  1340,     0,  1338,
    1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,
    1328,     0,     0,  2253,  1335,     0,     0,  1336,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1337,     0,     0,  1339,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1340,     0,     0,  1341,  1342,  1343,  1339,  1344,
    1345,  1346,  1347,  1348,  1349,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1329,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1339,     0,     0,     0,  1330,     0,     0,
       0,     0,  1331,     0,     0,     0,  1340,     0,     0,  1341,
    1342,  1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,
       0,     0,     0,     0,  1332,  1333,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1334,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1340,     0,     0,  1341,  1342,  1343,     0,  1344,  1345,  1346,
    1347,  1348,  1349,     0,     0,     0,     0,  1335,     0,     0,
    1336,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1337,  1340,     0,  1338,  1341,  1342,
    1343,     0,  1344,  1345,  1346,  1347,  1348,  1349,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1339,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1057,     0,  1685,     0,  1340,     0,
       0,  1341,  1342,  1343,     0,  1344,  1345,  1346,  1347,  1795,
    1349,    94,    95,    96,    97,    98,    99,   100,   101,  1058,
     102,   103,   104,  1059,  1060,  1061,  1062,  1063,  1064,  1065,
     105,   106,  1066,   107,   108,   109,     0,   111,   112,   113,
     747,   748,     0,   749,   750,  1067,   119,   120,   121,   122,
    1068,   123,  1069,  1070,   124,   125,   751,   752,   128,  1071,
     129,   130,   131,   132,   753,  1072,     0,  1073,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,  1074,   145,
     146,   147,   148,   149,   150,  1075,     0,   152,   153,   154,
    1076,  1077,  1078,     0,  1079,  1080,  1081,   156,   157,   158,
     159,   160,   161,   162,   754,   755,   165,  1082,   166,  1083,
     167,   168,   169,   170,   171,   172,  1084,   173,   174,   175,
     176,   177,  1085,  1086,   178,   179,   180,   181,   182,  1087,
     183,   184,   185,  1088,   186,   187,   188,  1089,   189,   190,
     191,   192,   756,   194,   195,   196,   197,   198,   757,  1090,
     200,  1091,   201,   202,   758,   204,  1092,   205,  1093,   206,
       0,  1094,     0,   209,   210,   211,     0,   213,  1095,   214,
    1096,   759,   760,   217,  1097,   218,   219,   220,   221,   222,
     223,   224,     0,   226,   227,   228,   229,  1098,   230,   231,
     232,   233,   234,   235,  1099,   236,     0,   761,   239,   240,
     241,   242,   243,   762,   763,  1100,   764,  1101,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,  1102,
    1103,   258,     0,   260,     0,  1104,   262,   263,   264,  1105,
    1106,   265,   266,   267,   268,   269,   765,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   766,     0,   767,   292,   293,
     294,   768,  1107,   296,   297,     0,   299,  1108,   769,   301,
     770,   303,   304,   305,  1109,   306,   307,  1110,  1111,   308,
     309,   310,  1112,  1113,   311,   771,     0,   314,     0,   772,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
    1114,   327,   328,   773,   330,   331,   774,   333,   334,   335,
    1115,   336,   337,   338,   339,   340,   341,  1116,   342,   343,
     344,   775,   346,   347,   348,   349,  1117,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,  1118,
    1119,   362,   363,     0,   365,   366,   367,   776,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,  1120,
     380,   381,   382,   383,   384,  1121,   385,   777,   387,   388,
     389,     0,   391,   392,   778,   394,  1122,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   779,
     408,   780,   410,  1123,   411,   412,  1124,   413,     0,   415,
     416,   417,   418,   419,  1125,   781,   782,  1126,  1127,   422,
     423,   783,   425,   784,  1128,   427,   428,   785,   430,   431,
     432,   433,   434,  1129,  1130,   435,   436,   437,   438,   439,
    1131,  1132,   440,   441,   442,   443,   444,  1133,   787,  1134,
     447,     0,   449,   450,   451,   452,   453,  1135,  1136,   454,
    1137,  1138,   455,   456,   457,   458,   459,   460,   788,   789,
     790,   791,   792,   793,   794,   795,   796,   797,   798,   472,
     473,   474,   475,  1057,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,  1058,   102,
     103,   104,  1059,  1060,  1061,  1062,  1063,  1064,  1065,   105,
     106,  1066,   107,   108,   109,     0,   111,   112,   113,   747,
     748,     0,   749,   750,  1067,   119,   120,   121,   122,  1068,
     123,  1069,  1070,   124,   125,   751,   752,   128,  1071,   129,
     130,   131,   132,   753,  1072,     0,  1073,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,  1074,   145,   146,
     147,   148,   149,   150,  1075,     0,   152,   153,   154,  1076,
    1077,  1078,     0,  1079,  1080,  1081,   156,   157,   158,   159,
     160,   161,   162,   754,   755,   165,  1082,   166,  1083,   167,
     168,   169,   170,   171,   172,  1084,   173,   174,   175,   176,
     177,  1085,  1086,   178,   179,   180,   181,   182,  1087,   183,
     184,   185,  1088,   186,   187,   188,  1089,   189,   190,   191,
     192,   756,   194,   195,   196,   197,   198,   757,  1090,   200,
    1091,   201,   202,   758,   204,  1092,   205,  1093,   206,     0,
    1094,     0,   209,   210,   211,     0,   213,  1095,   214,  1096,
     759,   760,   217,  1097,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,  1098,   230,   231,   232,
     233,   234,   235,  1099,   236,     0,   761,   239,   240,   241,
     242,   243,   762,   763,  1100,   764,  1101,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,  1102,  1103,
     258,     0,   260,     0,  1104,   262,   263,   264,  1105,  1106,
     265,   266,   267,   268,   269,   765,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   766,     0,   767,   292,   293,   294,
     768,  1107,   296,   297,     0,   299,  1108,   769,   301,   770,
     303,   304,   305,  1109,   306,   307,  1110,  1111,   308,   309,
     310,  1112,  1113,   311,   771,     0,   314,     0,   772,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,  1114,
     327,   328,   773,   330,   331,   774,   333,   334,   335,  1115,
     336,   337,   338,   339,   340,   341,  1116,   342,   343,   344,
     775,   346,   347,   348,   349,  1117,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,  1118,  1119,
     362,   363,     0,   365,   366,   367,   776,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,  1120,   380,
     381,   382,   383,   384,  1121,   385,   777,   387,   388,   389,
       0,   391,   392,   778,   394,  1122,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   779,   408,
     780,   410,  1123,   411,   412,  1124,   413,     0,   415,   416,
     417,   418,   419,  1125,   781,   782,  1126,  1127,   422,   423,
     783,   425,   784,  1128,   427,   428,   785,   430,   431,   432,
     433,   434,  1129,  1130,   435,   436,   437,   438,   439,  1131,
    1132,   440,   441,   442,   443,   444,  1133,   787,  1134,   447,
       0,   449,   450,   451,   452,   453,  1135,  1136,   454,  1137,
    1138,   455,   456,   457,   458,   459,   460,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,   472,   473,
     474,   475,  1057,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,  1830,    99,   100,   101,  1058,   102,   103,
     104,  1059,  1060,  1061,  1062,  1063,  1064,  1065,   105,   106,
    1066,   107,   108,   109,     0,   111,   112,   113,   747,   748,
       0,   749,   750,  1067,   119,   120,   121,   122,  1068,   123,
    1069,  1070,   124,   125,   751,   752,   128,  1071,   129,   130,
     131,   132,   753,  1072,     0,  1073,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,  1074,   145,   146,   147,
     148,   149,   150,  1075,     0,   152,   153,   154,  1076,  1077,
    1078,     0,  1079,  1080,  1081,   156,   157,   158,   159,   160,
     161,   162,   754,   755,   165,  1082,   166,  1083,   167,   168,
     169,   170,   171,   172,  1084,   173,   174,   175,   176,   177,
    1085,  1086,   178,   179,   180,  1831,   182,  1087,   183,   184,
     185,  1088,   186,   187,   188,  1089,   189,   190,   191,   192,
     756,   194,   195,   196,   197,   198,   757,  1090,   200,  1091,
     201,   202,   758,   204,  1092,   205,  1093,   206,     0,  1094,
       0,   209,   210,   211,     0,   213,  1095,   214,  1096,   759,
     760,   217,  1097,   218,   219,   220,   221,   222,   223,   224,
       0,   226,   227,   228,   229,  1098,   230,   231,   232,   233,
     234,   235,  1099,   236,     0,   761,   239,   240,   241,   242,
     243,   762,   763,  1100,   764,  1101,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,  1102,  1103,   258,
       0,   260,     0,  1104,   262,   263,   264,  1105,  1106,   265,
     266,   267,   268,   269,   765,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   766,     0,   767,   292,   293,   294,   768,
    1107,   296,   297,     0,   299,  1108,   769,   301,   770,   303,
     304,   305,  1109,   306,   307,  1110,  1111,   308,   309,   310,
    1112,  1113,   311,   771,     0,   314,     0,   772,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,  1114,   327,
     328,   773,   330,   331,   774,   333,   334,   335,  1115,   336,
     337,   338,   339,   340,   341,  1116,   342,   343,   344,   775,
     346,   347,   348,   349,  1117,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,  1118,  1119,   362,
     363,     0,   365,   366,   367,   776,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,  1120,   380,   381,
     382,   383,   384,  1121,  1832,   777,   387,   388,   389,     0,
     391,   392,   778,   394,  1122,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   779,   408,   780,
     410,  1123,   411,   412,  1124,   413,     0,   415,   416,   417,
     418,   419,  1125,   781,   782,  1126,  1127,   422,   423,   783,
     425,   784,  1128,   427,   428,   785,   430,   431,   432,   433,
     434,  1129,  1130,   435,   436,   437,   438,   439,  1131,  1132,
     440,   441,   442,   443,   444,  1133,   787,  1134,   447,     0,
     449,   450,   451,   452,   453,  1135,  1136,   454,  1137,  1138,
     455,   456,   457,   458,   459,   460,   788,   789,   790,   791,
     792,   793,   794,   795,   796,   797,   798,   472,   473,   474,
     475,    93,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
     829,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   832,     0,   833,     0,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,   151,   152,   153,   154,   834,   835,   836,
     837,   838,   839,   840,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   845,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,   207,     0,   208,
     209,   210,   211,   212,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,     0,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   853,   854,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,     0,
     296,   297,   298,   299,     0,   859,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,   313,   314,   315,   862,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     863,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,   866,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   868,   410,
       0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   871,   425,
     872,     0,   427,   428,   874,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,   875,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
      93,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,   134,     0,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,   151,   152,   153,   154,     0,     0,     0,   155,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,   207,     0,   208,   209,
     210,   211,   212,   213,     0,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,     0,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,     0,     0,   258,   259,   260,
     261,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,     0,   296,
     297,   298,   299,     0,   300,   301,   302,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,
     411,   412,     0,   413,   414,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   498,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,  1438,   129,   130,   131,   132,   133,
       0,     0,  1439,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,  1440,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,  1441,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,  1442,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,  1443,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,  1444,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,     0,   123,     0,     0,   124,   125,
     126,   127,   128,  1438,   129,   130,   131,   132,   133,     0,
       0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
     143,   144,  1440,   145,   146,   147,   148,   149,   150,     0,
       0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,  1441,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,     0,   247,     0,     0,   250,     0,   252,   253,   254,
     255,   256,   257,     0,     0,   258,     0,   260,  1902,     0,
     262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
     500,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   291,   292,   293,   294,   295,     0,   296,   297,     0,
     299,     0,   300,   301,   302,   303,   304,   305,     0,   306,
     307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
       0,   314,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,  1443,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   502,   408,   409,   410,     0,   411,   412,
       0,   413,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,   433,   434,     0,  1444,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,     0,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   746,     0,   547,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   747,   748,     0,   749,   750,     0,   119,
     120,   121,   122,     0,   123,     0,     0,   124,   125,   751,
     752,   128,     0,   129,   130,   131,   132,   753,     0,     0,
       0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,   162,   754,   755,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   756,   194,   195,   196,   197,
     198,   757,  1241,   200,     0,   201,   202,   758,   204,     0,
     205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
     213,     0,   214,     0,   759,   760,   217,     0,   218,   219,
     220,   221,   222,   223,   224,     0,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
     761,   239,   240,   241,   242,   243,   762,   763,     0,   764,
       0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
     256,   257,     0,     0,   258,     0,   260,     0,     0,   262,
     263,   264,     0,     0,   265,   266,   267,   268,   269,   765,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   766,     0,
     767,   292,   293,   294,   768,     0,   296,   297,     0,   299,
       0,   769,   301,   770,   303,   304,   305,     0,   306,   307,
    1242,     0,   308,   309,   310,     0,     0,   311,   771,     0,
     314,     0,   772,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   773,   330,   331,   774,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   775,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,     0,   365,   366,   367,
     776,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     777,   387,   388,   389,     0,   391,   392,   778,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   779,   408,   780,   410,     0,   411,   412,     0,
     413,     0,   415,   416,   417,   418,   419,     0,   781,   782,
       0,     0,   422,   423,   783,   425,   784,  1243,   427,   428,
     785,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
    1133,   787,     0,   447,     0,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   788,   789,   790,   791,   792,   793,   794,   795,   796,
     797,   798,   472,   473,   474,   475,   498,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     3,     4,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   126,   127,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
     135,   136,   137,   138,   139,   140,     0,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   152,
     153,   154,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   223,   224,     0,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,     0,
     247,     0,     0,   250,     0,   252,   253,   254,   255,   256,
     257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   500,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   291,
     292,   293,   294,   295,     0,   296,   297,     0,   299,     0,
     300,   301,   302,   303,   304,   305,     0,   306,   307,     0,
       0,   308,   309,   310,     0,     0,   311,   312,     0,   314,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   502,   408,   409,   410,     0,   411,   412,     0,   413,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,     0,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   498,     0,   579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,     0,   123,     0,     0,   124,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
     136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
     154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
       0,     0,   250,     0,   252,   253,   254,   255,   256,   257,
       0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
       0,     0,   265,   266,   267,   268,   269,   500,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
     293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
     301,   302,   303,   304,   305,     0,   306,   307,     0,   580,
     308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     502,   408,   409,   410,     0,   411,   412,     0,   413,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,   444,   445,   446,
       0,   447,     0,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   498,     0,   579,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     623,   224,     0,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,     0,
       0,   258,     0,   260,     0,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,   500,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   291,   292,   293,
     294,   295,     0,   296,   297,     0,   299,     0,   300,   301,
     302,   303,   304,   305,     0,   306,   307,     0,   580,   308,
     309,   310,     0,     0,   311,   312,     0,   314,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   502,
     408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,     0,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   746,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     3,     4,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   747,
     748,     0,   749,   750,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   751,   752,   128,     0,   129,
     130,   131,   132,   753,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   754,   755,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   756,   194,   195,   196,   197,   198,   757,     0,   200,
       0,   201,   202,   758,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     759,   760,   217,     0,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   761,   239,   240,   241,
     242,   243,   762,   763,     0,   764,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   765,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   766,     0,   767,   292,   293,   294,
     768,     0,   296,   297,     0,   299,     0,   769,   301,   770,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   771,     0,   314,     0,   772,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   773,   330,   331,   774,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     775,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   776,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   777,   387,   388,   389,
       0,   391,   392,   778,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   779,   408,
     780,   410,     0,   411,   412,     0,   413,     0,   415,   416,
     417,   418,   419,     0,   781,   782,     0,     0,   422,   423,
     783,   425,   784,     0,   427,   428,   785,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,  1133,   787,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   788,   789,   790,
     791,   792,   793,   794,   795,   796,   797,   798,   472,   473,
     474,   475,   498,     0,   579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   152,   153,   154,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,  1737,     0,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
       0,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,     0,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,     0,     0,   258,
       0,   260,     0,     0,   262,   263,  1738,     0,     0,   265,
     266,   267,   268,   269,   500,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
       0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   502,   408,   409,
     410,     0,   411,   412,  1739,   413,     0,   415,  1740,   417,
    1741,   419,     0,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
     434,     0,     0,   435,   436,  1742,   438,   439,     0,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   498,  2703,     0,     0,     0,     0,  2704,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
     140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
     209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
     252,   253,   254,   255,   256,   257,     0,     0,   258,     0,
     260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
     267,   268,   269,   500,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   502,   408,   409,   410,
       0,   411,   412,     0,   413,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,   499,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,     0,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
     253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
       0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   500,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
     297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,   332,   501,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   502,   408,   409,   410,     0,
     411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,     0,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   498,
       0,   547,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,   554,   102,   103,   104,     0,     0,     0,
       0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,     0,   123,     0,     0,   124,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,     0,   247,     0,     0,   250,     0,   252,   253,   254,
     255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
     262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
     500,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   291,   292,   293,   294,   295,     0,   296,   297,     0,
     299,     0,   300,   301,   302,   303,   304,   305,     0,   306,
     307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
       0,   314,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   502,   408,   409,   410,     0,   411,   412,
       0,   413,     0,   415,   416,   417,   418,   419,     0,   555,
     421,     0,     0,   556,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,   433,   434,     0,     0,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,     0,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   498,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,   124,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
     213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   618,   224,     0,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
       0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
     256,   257,     0,     0,   258,     0,   260,     0,     0,   262,
     263,   264,     0,     0,   265,   266,   267,   268,   269,   500,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,     0,
     291,   292,   293,   294,   295,     0,   296,   297,     0,   299,
       0,   300,   301,   302,   303,   304,   305,     0,   306,   307,
       0,     0,   308,   309,   310,     0,     0,   311,   312,     0,
     314,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   502,   408,   409,   410,     0,   411,   412,     0,
     413,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
     445,   446,     0,   447,     0,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   498,     0,   579,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   126,   127,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
     135,   136,   137,   138,   139,   140,     0,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   152,
     153,   154,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   621,   224,     0,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,     0,
     247,     0,     0,   250,     0,   252,   253,   254,   255,   256,
     257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   500,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   291,
     292,   293,   294,   295,     0,   296,   297,     0,   299,     0,
     300,   301,   302,   303,   304,   305,     0,   306,   307,     0,
       0,   308,   309,   310,     0,     0,   311,   312,     0,   314,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   502,   408,   409,   410,     0,   411,   412,     0,   413,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,     0,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   498,     0,   579,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,     0,   123,     0,     0,   124,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
     136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
     154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   625,   224,     0,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
       0,     0,   250,     0,   252,   253,   254,   255,   256,   257,
       0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
       0,     0,   265,   266,   267,   268,   269,   500,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
     293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
     301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
     308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     502,   408,   409,   410,     0,   411,   412,     0,   413,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,   444,   445,   446,
       0,   447,     0,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   498,     0,   579,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,     0,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,     0,
       0,   258,     0,   260,     0,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,   500,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   291,   292,   293,
     294,   295,     0,   296,   297,     0,   299,     0,   300,   301,
     302,   303,   304,   305,     0,   306,   307,     0,     0,   308,
     309,   310,     0,     0,   311,   312,     0,   314,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   502,
     408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,     0,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,   655,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   500,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   502,   408,
     409,   410,     0,   411,   412,     0,   413,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   498,     0,   579,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   152,   153,   154,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,  1155,   224,
       0,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,     0,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,     0,     0,   258,
       0,   260,     0,     0,   262,   263,   264,     0,     0,   265,
     266,   267,   268,   269,   500,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
       0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   502,   408,   409,
     410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
     434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   498,     0,   579,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
     140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
     209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,  1157,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
     252,   253,   254,   255,   256,   257,     0,     0,   258,     0,
     260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
     267,   268,   269,   500,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   502,   408,   409,   410,
       0,   411,   412,     0,   413,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     498,     0,   579,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,  1568,   224,     0,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
     253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
       0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   500,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
     297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   502,   408,   409,   410,     0,
     411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,     0,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   498,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,  2336,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,  2350,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,     0,   123,     0,     0,   124,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,     0,   247,     0,     0,   250,     0,   252,   253,   254,
     255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
     262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
     500,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   291,   292,   293,   294,   295,     0,   296,   297,     0,
     299,     0,   300,   301,   302,   303,   304,   305,     0,   306,
     307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
       0,   314,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
     385,   386,   387,   388,   389,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   502,   408,   409,   410,     0,   411,   412,
       0,   413,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,   433,   434,     0,     0,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,     0,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   498,     0,   579,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,   124,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
     213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,  2501,   224,     0,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
       0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
     256,   257,     0,     0,   258,     0,   260,     0,     0,   262,
     263,   264,     0,     0,   265,   266,   267,   268,   269,   500,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,     0,
     291,   292,   293,   294,   295,     0,   296,   297,     0,   299,
       0,   300,   301,   302,   303,   304,   305,     0,   306,   307,
       0,     0,   308,   309,   310,     0,     0,   311,   312,     0,
     314,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   502,   408,   409,   410,     0,   411,   412,     0,
     413,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
     445,   446,     0,   447,     0,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   126,   127,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
     135,   136,   137,   138,   139,   140,     0,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   152,
     153,   154,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   223,   224,     0,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,     0,
     247,     0,     0,   250,     0,   252,   253,   254,   255,   256,
     257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   500,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   291,
     292,   293,   294,   295,     0,   296,   297,     0,   299,     0,
     300,   301,   302,   303,   304,   305,     0,   306,   307,     0,
       0,   308,   309,   310,     0,     0,   311,   312,     0,   314,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   502,   408,   409,   410,     0,   411,   412,     0,   413,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,     0,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,     0,   123,     0,     0,   124,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
     136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
     154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,     0,     0,     0,   209,   210,   211,     0,   566,     0,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,     0,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
       0,     0,   250,     0,   252,   253,   254,   255,   256,   257,
       0,     0,   258,     0,   260,     0,     0,   262,   263,   567,
       0,     0,   265,   266,   267,   268,   269,   500,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
     293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
     301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
     308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   568,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   569,     0,   385,   386,   387,
     388,   389,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     502,   408,   409,   410,     0,   411,   412,     0,   413,     0,
     415,   416,   417,   418,   419,     0,   570,   421,     0,     0,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,   444,   445,   446,
       0,   447,     0,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,     0,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,     0,
       0,   258,     0,   260,     0,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,   500,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   291,   292,   293,
     294,   295,     0,   296,   297,     0,   299,     0,   300,   301,
     302,   303,   304,   305,     0,   306,   307,     0,     0,   308,
     309,   310,     0,     0,   311,   312,     0,   314,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   589,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   502,
     408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,     0,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   643,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   500,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   502,   408,
     409,   410,     0,   411,   412,     0,   413,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   498,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
       0,   117,   118,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,     0,     0,     0,   135,   136,   137,   138,
     139,   140,     0,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   152,   153,   154,     0,     0,
       0,     0,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   180,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,     0,   200,     0,
     201,   202,   203,   204,     0,   205,     0,   206,     0,     0,
       0,   209,   210,   211,     0,   213,     0,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   733,   224,
       0,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,   246,     0,   247,     0,     0,   250,
       0,   252,   253,   254,   255,   256,   257,     0,     0,   258,
       0,   260,     0,     0,   262,   263,   264,     0,     0,   265,
     266,   267,   268,   269,   500,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
       0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,     0,
     391,   392,   393,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   502,   408,   409,
     410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
     418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
     425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
     434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   498,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
      96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
       0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
     107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
     117,   118,     0,   119,   120,   121,   122,     0,   123,     0,
       0,   124,   125,   126,   127,   128,     0,   129,   130,   131,
     132,   133,     0,     0,     0,   135,   136,   137,   138,   139,
     140,     0,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   152,   153,   154,     0,     0,     0,
       0,     0,     0,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,     0,   167,   168,   169,
     170,   171,   172,     0,   173,   174,   175,   176,   177,     0,
       0,   178,   179,   180,   181,   182,     0,   183,   184,   185,
       0,   186,   187,   188,     0,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,     0,   200,     0,   201,
     202,   203,   204,     0,   205,     0,   206,     0,     0,     0,
     209,   210,   211,     0,   213,     0,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   736,   224,     0,
     226,   227,   228,   229,     0,   230,   231,   232,   233,   234,
     235,     0,   236,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,     0,   247,     0,     0,   250,     0,
     252,   253,   254,   255,   256,   257,     0,     0,   258,     0,
     260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
     267,   268,   269,   500,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
     296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
     305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
       0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
     329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,     0,     0,   362,   363,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,     0,   391,
     392,   393,   394,     0,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   502,   408,   409,   410,
       0,   411,   412,     0,   413,     0,   415,   416,   417,   418,
     419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
     426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
       0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
     441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
     450,   451,   452,   453,     0,     0,   454,     0,     0,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     498,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
     118,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,     0,     0,     0,   135,   136,   137,   138,   139,   140,
       0,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   152,   153,   154,     0,     0,     0,     0,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   180,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,     0,   200,     0,   201,   202,
     203,   204,     0,   205,     0,   206,     0,     0,     0,   209,
     210,   211,     0,   213,     0,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   739,   224,     0,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,   246,     0,   247,     0,     0,   250,     0,   252,
     253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
       0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,   500,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
     297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
     330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,     0,   391,   392,
     393,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   502,   408,   409,   410,     0,
     411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
       0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
       0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,   445,   446,     0,   447,     0,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   498,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
      98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
       0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
     109,     0,   111,   112,   113,   114,   115,     0,   117,   118,
       0,   119,   120,   121,   122,     0,   123,     0,     0,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
       0,     0,     0,   135,   136,   137,   138,   139,   140,     0,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   152,   153,   154,     0,     0,     0,     0,     0,
       0,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,     0,   167,   168,   169,   170,   171,
     172,     0,   173,   174,   175,   176,   177,     0,     0,   178,
     179,   180,   181,   182,     0,   183,   184,   185,     0,   186,
     187,   188,     0,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,   199,     0,   200,     0,   201,   202,   203,
     204,     0,   205,     0,   206,     0,     0,     0,   209,   210,
     211,     0,   213,     0,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,     0,   226,   227,
     228,   229,     0,   230,   231,   232,   233,   234,   235,     0,
     236,     0,   238,   239,   240,   241,   242,   243,   244,   245,
       0,   246,     0,   247,     0,     0,   250,     0,   252,   253,
     254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
       0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
     269,   500,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
       0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
     306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
     312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
     331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,     0,     0,   362,   363,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   568,   374,   375,
     376,   377,   378,   379,     0,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,     0,   391,   392,   393,
     394,     0,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   502,   408,   409,   410,     0,   411,
     412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
     570,   421,     0,     0,   422,   423,   424,   425,   426,     0,
     427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
     435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
     443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
     452,   453,     0,     0,   454,     0,     0,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   498,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    94,    95,    96,    97,    98,
      99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
       0,     0,  1394,     0,   105,   106,     0,   107,   108,   109,
       0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
     119,   120,   121,   122,     0,   123,     0,     0,   124,   125,
     126,   127,   128,     0,   129,   130,   131,   132,   133,     0,
       0,     0,   135,   136,   137,   138,   139,   140,     0,   142,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   152,   153,   154,     0,     0,     0,     0,     0,     0,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,     0,   167,   168,   169,   170,   171,   172,
       0,   173,   174,   175,   176,   177,     0,     0,   178,   179,
     180,   181,   182,     0,   183,   184,   185,     0,   186,   187,
     188,     0,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,     0,   200,     0,   201,   202,   203,   204,
       0,   205,     0,   206,     0,     0,     0,   209,   210,   211,
       0,   213,     0,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,     0,   226,   227,   228,
     229,     0,   230,   231,   232,   233,   234,   235,     0,   236,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,     0,   247,     0,     0,   250,     0,   252,   253,   254,
     255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
     262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
     500,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
       0,   291,   292,   293,   294,   295,     0,   296,   297,     0,
     299,     0,   300,   301,   302,   303,   304,   305,     0,   306,
     307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
       0,   314,     0,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,     0,   327,   328,   329,   330,   331,
     332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
       0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,     0,     0,   362,   363,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,   380,   381,   382,   383,   384,     0,
       0,   386,   387,   388,   389,     0,   391,   392,   393,   394,
       0,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   502,   408,   409,   410,     0,   411,   412,
       0,   413,     0,   415,   416,   417,   418,   419,     0,   420,
     421,     0,     0,   422,   423,   424,   425,   426,     0,   427,
     428,   429,   430,   431,   432,   433,   434,     0,     0,   435,
     436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
     444,   445,   446,     0,   447,     0,   449,   450,   451,   452,
     453,     0,     0,   454,     0,     0,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   498,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    94,    95,    96,    97,    98,    99,
     100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
       0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
     111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
     120,   121,   122,     0,   123,     0,     0,   124,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,     0,     0,
       0,   135,   136,   137,   138,   139,   140,     0,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,     0,   167,   168,   169,   170,   171,   172,     0,
     173,   174,   175,   176,   177,     0,     0,   178,   179,   180,
     181,   182,     0,   183,   184,   185,     0,   186,   187,   188,
       0,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,     0,   200,     0,   201,   202,   203,   204,     0,
     205,     0,   206,     0,     0,     0,   209,   210,   211,     0,
     213,     0,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,  1532,   224,     0,   226,   227,   228,   229,
       0,   230,   231,   232,   233,   234,   235,     0,   236,     0,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
       0,   247,     0,     0,   250,     0,   252,   253,   254,   255,
     256,   257,     0,     0,   258,     0,   260,     0,     0,   262,
     263,   264,     0,     0,   265,   266,   267,   268,   269,   500,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,     0,
     291,   292,   293,   294,   295,     0,   296,   297,     0,   299,
       0,   300,   301,   302,   303,   304,   305,     0,   306,   307,
       0,     0,   308,   309,   310,     0,     0,   311,   312,     0,
     314,     0,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
     333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,     0,     0,   362,   363,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,     0,   391,   392,   393,   394,     0,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   502,   408,   409,   410,     0,   411,   412,     0,
     413,     0,   415,   416,   417,   418,   419,     0,   420,   421,
       0,     0,   422,   423,   424,   425,   426,     0,   427,   428,
     429,   430,   431,   432,   433,   434,     0,     0,   435,   436,
     437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
     445,   446,     0,   447,     0,   449,   450,   451,   452,   453,
       0,     0,   454,     0,     0,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   498,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
     112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   126,   127,
     128,     0,   129,   130,   131,   132,   133,     0,     0,     0,
     135,   136,   137,   138,   139,   140,     0,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   152,
     153,   154,     0,     0,     0,     0,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   180,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,     0,   200,     0,   201,   202,   203,   204,     0,   205,
       0,   206,     0,     0,     0,   209,   210,   211,     0,   213,
       0,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,  1814,   224,     0,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,   246,     0,
     247,     0,     0,   250,     0,   252,   253,   254,   255,   256,
     257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   500,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,     0,   291,
     292,   293,   294,   295,     0,   296,   297,     0,   299,     0,
     300,   301,   302,   303,   304,   305,     0,   306,   307,     0,
       0,   308,   309,   310,     0,     0,   311,   312,     0,   314,
       0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   386,
     387,   388,   389,     0,   391,   392,   393,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   502,   408,   409,   410,     0,   411,   412,     0,   413,
       0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
       0,   422,   423,   424,   425,   426,     0,   427,   428,   429,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,   445,
     446,     0,   447,     0,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   498,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    94,    95,    96,    97,    98,    99,   100,   101,
       0,   102,   103,   104,     0,     0,     0,     0,     0,     0,
       0,   105,   106,     0,   107,   108,   109,     0,   111,   112,
     113,   114,   115,     0,   117,   118,     0,   119,   120,   121,
     122,     0,   123,     0,     0,   124,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,     0,     0,     0,   135,
     136,   137,   138,   139,   140,     0,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   152,   153,
     154,     0,     0,     0,     0,     0,     0,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
       0,   167,   168,   169,   170,   171,   172,     0,   173,   174,
     175,   176,   177,     0,     0,   178,   179,   180,   181,   182,
       0,   183,   184,   185,     0,   186,   187,   188,     0,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
       0,   200,     0,   201,   202,   203,   204,     0,   205,     0,
     206,     0,     0,     0,   209,   210,   211,     0,   213,     0,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,  1826,   224,     0,   226,   227,   228,   229,     0,   230,
     231,   232,   233,   234,   235,     0,   236,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,     0,   247,
       0,     0,   250,     0,   252,   253,   254,   255,   256,   257,
       0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
       0,     0,   265,   266,   267,   268,   269,   500,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
     293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
     301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
     308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
     335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
       0,     0,   362,   363,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,     0,   391,   392,   393,   394,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     502,   408,   409,   410,     0,   411,   412,     0,   413,     0,
     415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
     422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
     431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
     439,     0,     0,   440,   441,   442,   443,   444,   445,   446,
       0,   447,     0,   449,   450,   451,   452,   453,     0,     0,
     454,     0,     0,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   498,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
     114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   126,   127,   128,     0,
     129,   130,   131,   132,   133,     0,     0,     0,   135,   136,
     137,   138,   139,   140,     0,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   152,   153,   154,
       0,     0,     0,     0,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   180,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,     0,
     200,     0,   201,   202,   203,   204,     0,   205,     0,   206,
       0,     0,     0,   209,   210,   211,     0,   213,     0,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
    1828,   224,     0,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,   246,     0,   247,     0,
       0,   250,     0,   252,   253,   254,   255,   256,   257,     0,
       0,   258,     0,   260,     0,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,   500,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,     0,   291,   292,   293,
     294,   295,     0,   296,   297,     0,   299,     0,   300,   301,
     302,   303,   304,   305,     0,   306,   307,     0,     0,   308,
     309,   310,     0,     0,   311,   312,     0,   314,     0,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,   329,   330,   331,   332,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,     0,   391,   392,   393,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   502,
     408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
     416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
     423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
     447,     0,   449,   450,   451,   452,   453,     0,     0,   454,
       0,     0,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   498,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
     103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
     106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
     115,     0,   117,   118,     0,   119,   120,   121,   122,     0,
     123,     0,     0,   124,   125,   126,   127,   128,     0,   129,
     130,   131,   132,   133,     0,     0,     0,   135,   136,   137,
     138,   139,   140,     0,   142,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   152,   153,   154,     0,
       0,     0,     0,     0,     0,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,     0,   167,
     168,   169,   170,   171,   172,     0,   173,   174,   175,   176,
     177,     0,     0,   178,   179,   180,   181,   182,     0,   183,
     184,   185,     0,   186,   187,   188,     0,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,   199,     0,   200,
       0,   201,   202,   203,   204,     0,   205,     0,   206,     0,
       0,     0,   209,   210,   211,     0,   213,     0,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,     0,   226,   227,   228,   229,     0,   230,   231,   232,
     233,   234,   235,     0,   236,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,     0,   247,     0,     0,
     250,     0,   252,   253,   254,   255,   256,   257,     0,     0,
     258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
     265,   266,   267,   268,   269,   500,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
     295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
     303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
     310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
     318,   319,   320,   321,   322,     0,   324,   325,   326,     0,
     327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
     336,   337,   338,   339,   340,   341,     0,   342,     0,   344,
     345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,     0,     0,
     362,   363,     0,   365,   366,   367,   368,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
       0,   391,   392,   393,   394,     0,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   502,   408,
     409,   410,     0,   411,   412,     0,   413,     0,   415,   416,
     417,   418,   419,     0,   420,   421,     0,     0,   422,   423,
     424,   425,   426,     0,   427,   428,   429,   430,   431,   432,
     433,   434,     0,     0,   435,   436,   437,   438,   439,     0,
       0,   440,   441,   442,   443,   444,   445,   446,     0,   447,
       0,   449,   450,   451,   452,   453,     0,     0,   454,     0,
       0,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   664,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    94,
      95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
     104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
       0,   107,   108,   109,   665,   111,   112,   113,     0,   666,
     667,   668,   669,     0,   119,   120,   121,   122,     0,   123,
       0,     0,   124,   125,   670,   671,   128,     0,   129,   130,
     131,   132,     0,     0,   672,     0,   135,   136,   137,   138,
     139,   140,   673,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,   674,   152,   153,   154,     0,     0,
       0,   675,     0,     0,     0,   156,   157,   158,   159,   160,
     161,   162,   676,   677,   165,     0,   166,     0,   167,   168,
     169,   170,   171,   172,     0,   173,   174,   175,   176,   177,
       0,     0,   178,   179,   678,   181,   182,     0,   183,   184,
     185,     0,   186,   187,   188,     0,   189,   190,   191,   192,
       0,   194,   195,   196,   197,   198,     0,     0,   200,     0,
     201,   202,   679,   204,     0,   205,     0,   206,   680,     0,
     681,   209,   210,   211,   682,   213,     0,   214,     0,     0,
       0,   217,     0,   218,   219,   220,   221,   222,   683,   224,
     684,   226,   227,   228,   229,     0,   230,   231,   232,   233,
     234,   235,     0,   236,   685,     0,   239,   240,   241,   242,
     243,   686,   687,     0,   688,     0,   247,   689,   690,   250,
     691,   252,   253,   254,   255,   256,   257,     0,     0,   258,
     692,   260,   693,     0,   262,   263,   264,     0,     0,   265,
     266,   267,   268,   269,   694,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   695,   696,   697,   292,   293,   294,     0,
       0,   296,   297,   698,   299,     0,     0,   301,   699,   303,
     304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
       0,     0,   311,     0,   700,   314,   701,     0,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
     328,     0,   330,   331,     0,   333,   334,   335,     0,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   702,
     346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,     0,     0,   362,
     363,   703,   365,   366,   367,   704,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,   380,   381,
     382,   383,   384,     0,   385,   705,   387,   388,   389,   706,
     391,   392,   707,   394,     0,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   708,   408,     0,
     410,     0,   411,   412,     0,   413,   709,   415,   416,   417,
     418,   419,     0,   710,   711,     0,     0,   422,   423,     0,
     425,     0,     0,   427,   428,   712,   430,   431,   432,   433,
     434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
     440,   441,   442,   443,   444,     0,   713,     0,   447,   714,
     449,   450,   451,   452,   453,     0,     0,   454,     0,     0,
     455,   456,   457,   458,   459,   460,   664,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   472,   473,   474,
     475,     0,     0,    94,    95,    96,    97,    98,    99,   100,
     101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
       0,     0,   105,   106,     0,   107,   108,   109,   665,   111,
     112,   113,     0,   666,   667,   668,   669,     0,   119,   120,
     121,   122,     0,   123,     0,     0,   124,   125,   670,   671,
     128,     0,   129,   130,   131,   132,     0,     0,   672,     0,
     135,   136,   137,   138,   139,   140,   673,   142,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,   674,   152,
     153,   154,     0,     0,     0,   675,     0,     0,     0,   156,
     157,   158,   159,   160,   161,   162,   676,   677,   165,     0,
     166,     0,   167,   168,   169,   170,   171,   172,     0,   173,
     174,   175,   176,   177,     0,     0,   178,   179,   678,   181,
     182,     0,   183,   184,   185,     0,   186,   187,   188,     0,
     189,   190,   191,   192,     0,   194,   195,   196,   197,   198,
       0,     0,   200,     0,   201,   202,   679,   204,     0,   205,
       0,   206,   680,     0,   681,   209,   210,   211,   682,   213,
       0,   214,     0,     0,     0,   217,     0,   218,   219,   220,
     221,   222,   223,   224,   684,   226,   227,   228,   229,     0,
     230,   231,   232,   233,   234,   235,     0,   236,   685,     0,
     239,   240,   241,   242,   243,   686,   687,     0,   688,     0,
     247,   689,   690,   250,   691,   252,   253,   254,   255,   256,
     257,     0,     0,   258,   692,   260,   693,     0,   262,   263,
     264,     0,     0,   265,   266,   267,   268,   269,   694,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   695,   696,   697,
     292,   293,   294,     0,     0,   296,   297,   698,   299,     0,
       0,   301,   699,   303,   304,   305,     0,   306,   307,     0,
       0,   308,   309,   310,     0,     0,   311,     0,   700,   314,
     701,     0,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,     0,   327,   328,     0,   330,   331,     0,   333,
     334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   702,   346,   347,   348,   349,     0,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,     0,     0,   362,   363,   703,   365,   366,   367,   704,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,   380,   381,   382,   383,   384,     0,   385,   705,
     387,   388,   389,   706,   391,   392,   707,   394,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   708,   408,     0,   410,     0,   411,   412,     0,   413,
     709,   415,   416,   417,   418,   419,     0,   710,   711,     0,
       0,   422,   423,     0,   425,     0,     0,   427,   428,   712,
     430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
     438,   439,     0,     0,   440,   441,   442,   443,   444,     0,
     713,     0,   447,   714,   449,   450,   451,   452,   453,     0,
       0,   454,     0,     0,   455,   456,   457,   458,   459,   460,
    2437,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   472,   473,   474,   475,     0,     0,    94,    95,    96,
      97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
       0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
     108,   109,  2438,   111,   112,   113,     0,   666,  2439,   668,
     669,     0,   119,   120,   121,   122,     0,   123,     0,     0,
     124,   125,   670,   671,   128,     0,   129,   130,   131,   132,
       0,     0,  2440,     0,   135,   136,   137,   138,   139,   140,
    2441,   142,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,  2442,   152,   153,   154,     0,     0,     0,  2443,
       0,     0,     0,   156,   157,   158,   159,   160,   161,   162,
     676,   677,   165,     0,   166,     0,   167,   168,   169,   170,
     171,   172,     0,   173,   174,   175,   176,   177,     0,     0,
     178,   179,   678,   181,   182,     0,   183,   184,   185,     0,
     186,   187,   188,     0,   189,   190,   191,   192,     0,   194,
     195,   196,   197,   198,     0,     0,   200,     0,   201,   202,
     679,   204,     0,   205,     0,   206,  2444,     0,  2445,   209,
     210,   211,  2446,   213,     0,   214,     0,     0,     0,   217,
       0,   218,   219,   220,   221,   222,   223,   224,  2447,   226,
     227,   228,   229,     0,   230,   231,   232,   233,   234,   235,
       0,   236,  2448,     0,   239,   240,   241,   242,   243,   686,
     687,     0,   688,     0,   247,  2449,  2450,   250,  2451,   252,
     253,   254,   255,   256,   257,     0,     0,   258,  2452,   260,
    2453,     0,   262,   263,   264,     0,     0,   265,   266,   267,
     268,   269,  2646,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   695,  2455,   697,   292,   293,   294,     0,     0,   296,
     297,  2457,   299,     0,     0,   301,   699,   303,   304,   305,
       0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
     311,     0,  2459,   314,  2460,     0,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
     330,   331,     0,   333,   334,   335,     0,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   702,   346,   347,
     348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,     0,     0,   362,   363,  2461,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,   380,   381,   382,   383,
     384,     0,   385,     0,   387,   388,   389,  2463,   391,   392,
     707,   394,     0,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,  2647,   408,     0,   410,     0,
     411,   412,     0,   413,  2465,   415,   416,   417,   418,   419,
       0,   710,   711,     0,     0,   422,   423,     0,   425,     0,
       0,   427,   428,  2466,   430,   431,   432,   433,   434,     0,
       0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
     442,   443,   444,     0,   713,     0,   447,  2467,   449,   450,
     451,   452,   453,     0,     0,   454,     0,     0,   455,   456,
     457,   458,   459,   460,   664,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   472,   473,   474,   475,     0,
       0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
     102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
     105,   106,     0,   107,   108,   109,   665,   111,   112,   113,
       0,   666,   667,   668,   669,     0,   119,   120,   121,   122,
       0,   123,     0,     0,   124,   125,   670,   671,   128,     0,
     129,   130,   131,   132,     0,     0,   672,     0,   135,   136,
     137,   138,   139,   140,   673,   142,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,   674,   152,   153,   154,
       0,     0,     0,   675,     0,     0,     0,   156,   157,   158,
     159,   160,   161,   162,   676,   677,   165,     0,   166,     0,
     167,   168,   169,   170,   171,   172,     0,   173,   174,   175,
     176,   177,     0,     0,   178,   179,   678,   181,   182,     0,
     183,   184,   185,     0,   186,   187,   188,     0,   189,   190,
     191,   192,     0,   194,   195,   196,   197,   198,     0,     0,
     200,     0,   201,   202,   679,   204,     0,   205,     0,   206,
     680,     0,   681,   209,   210,   211,   682,   213,     0,   214,
       0,     0,     0,   217,     0,   218,   219,   220,   221,   222,
     223,   224,   684,   226,   227,   228,   229,     0,   230,   231,
     232,   233,   234,   235,     0,   236,   685,     0,   239,   240,
     241,   242,   243,   686,   687,     0,   688,     0,   247,   689,
     690,   250,   691,   252,   253,   254,   255,   256,   257,     0,
       0,   258,   692,   260,   693,     0,   262,   263,   264,     0,
       0,   265,   266,   267,   268,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   695,   696,   697,   292,   293,
     294,     0,     0,   296,   297,   698,   299,     0,     0,   301,
     699,   303,   304,   305,     0,   306,   307,     0,     0,   308,
     309,   310,     0,     0,   311,     0,   700,   314,   701,     0,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
       0,   327,   328,     0,   330,   331,     0,   333,   334,   335,
       0,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   702,   346,   347,   348,   349,     0,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,     0,
       0,   362,   363,   703,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
     380,   381,   382,   383,   384,     0,   385,     0,   387,   388,
     389,   706,   391,   392,   707,   394,     0,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,     0,
     408,     0,   410,     0,   411,   412,     0,   413,   709,   415,
     416,   417,   418,   419,     0,   710,   711,     0,     0,   422,
     423,     0,   425,     0,     0,   427,   428,   712,   430,   431,
     432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
       0,     0,   440,   441,   442,   443,   444,     0,   713,     0,
     447,   714,   449,   450,   451,   452,   453,     0,     0,   454,
       0,     0,   455,   456,   457,   458,   459,   460,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   472,
     473,   474,   475
};

static const yytype_int16 yycheck[] =
{
       6,     6,   629,   588,   622,   805,   610,     0,   493,   526,
       0,  1004,   805,    71,   882,   705,   637,   533,  1180,  1003,
     526,     0,   734,    16,   978,   737,   651,     0,   805,  1044,
     883,   631,  1359,   810,    36,   583,    16,   535,     0,   711,
      30,  1284,     6,   528,  1150,   983,  1664,   885,  2172,    73,
     980,  1824,  1778,  1150,   950,  1781,  1749,  1150,  1185,  1150,
      73,   534,  2172,   901,  1399,   811,    31,  1402,   535,  2201,
     529,   622,  1768,   624,  2200,   626,   914,  1707,  1008,  2079,
      35,  2212,  1314,  1315,  1821,     0,  1868,  1869,  1870,  1883,
     964,    21,    82,  2031,  2216,     9,     5,   670,   671,  1265,
      51,     5,     5,     5,     5,     5,  2086,    59,     5,    13,
      14,    13,    14,  1367,     9,   539,    13,    14,     5,   116,
     897,     5,   922,  1151,   697,    90,   642,     5,    59,  1418,
       0,   170,  2497,     5,     5,    13,    14,     5,     9,     5,
       5,    13,    14,     9,  2509,   922,     5,   924,   925,     5,
       5,     5,     5,    11,     5,     5,   741,  2513,    16,  1420,
    1897,    28,   171,     3,     4,     5,     4,    59,    35,     9,
      68,     9,   138,     0,    13,    14,   121,   123,  2564,   607,
       3,   118,     5,    59,    42,   121,   607,   188,   705,  2494,
      84,   108,   992,    41,    76,   995,   996,    11,   870,  1279,
      28,   172,    16,  2111,  1279,    87,  2683,    41,  2650,   170,
       3,  2586,    11,  2085,  2600,   992,    74,    16,   995,   996,
       4,  1279,   121,    28,    94,     9,   286,  1964,  1965,  1279,
      35,   284,    74,  1745,   128,   223,   223,   136,   356,    32,
      33,    60,   292,    42,   171,  2478,    28,    11,  1760,    68,
     190,    79,    16,    35,   116,   116,    59,   830,   831,   308,
      88,   275,    69,   292,   209,   377,    38,    94,    11,   167,
    1016,  2849,   308,   244,   333,    74,   116,  1023,   205,    76,
      28,   269,   269,   856,  2749,   131,  2017,   110,   111,   117,
      87,   164,    28,   119,   221,   812,   881,  2683,   109,  2143,
     160,   991,   299,  2668,   231,   162,   119,   805,   357,    11,
     369,  2093,   810,   418,    16,   243,    20,    21,    13,    14,
     404,   328,   243,   109,   460,   462,   347,   188,   487,   929,
    1989,    74,     4,   806,   440,   493,   148,     9,   886,   498,
    2340,   329,   500,   272,  2344,  2720,   405,   484,   484,   498,
     357,  2331,  2462,   125,   375,   439,   162,  1987,   463,  2018,
     188,   498,   333,   186,   187,     0,   192,   915,   382,  2142,
     227,   368,   200,  2505,   234,   215,   169,   416,   171,   192,
     498,  2959,  2508,   131,  2228,   197,   498,   108,  2411,   974,
     378,   378,   498,   452,   942,   131,   348,   237,   369,  2125,
    1177,   501,  2139,   210,  2141,   922,   346,   107,   405,   303,
     271,  1188,  1286,  1190,   276,  2648,   286,   348,   237,   318,
    1288,   319,  1199,  2779,  2810,   352,   924,   925,   251,   252,
     253,   254,   255,   256,   405,   281,   259,   260,   498,  1216,
     361,   314,  2907,    94,   493,   498,   526,  1051,   487,   446,
     438,   438,   502,  1741,  1742,   416,   348,   493,  2330,   286,
    2846,   500,   268,   460,  1707,  2942,   269,  1244,  1245,  2377,
     165,  2776,   348,   502,   991,   450,  2918,  1557,  1558,   349,
    1495,   452,  1557,  1558,  1559,  1439,   945,   484,   405,   498,
     456,  1519,   485,   438,   440,   485,  1785,   498,  1556,  1276,
    1277,   498,   438,  1280,  1281,   442,   485,  1557,   436,   438,
    2247,  2876,   485,  2888,   938,   436,   410,  1771,   385,  1751,
     526,  2877,   349,   485,  1151,  1786,  2650,   392,   393,   535,
    1523,  2262,  1406,   535,   416,   433,    31,  1780,  2660,  1160,
    2650,   534,   365,   366,   972,   348,   449,   498,   269,   249,
     502,   972,   610,   577,   402,   535,  2942,   257,   564,   565,
      55,   462,   462,   391,   577,  2077,   394,  2079,   402,   243,
     498,   502,   375,  2573,    24,   489,   490,   498,  2578,  1594,
     385,  2581,   588,   484,   484,  2565,  2609,   496,  1173,   498,
     460,   500,   502,  1759,   498,   498,   498,   498,   498,  2393,
    2538,   498,   497,   385,   597,  2628,   586,   597,  1181,  1182,
     502,   498,  1237,  2386,   498,   545,  1362,   498,   597,   416,
     498,   627,   628,   629,   597,   705,   498,   498,  1255,   499,
     498,   501,   498,   460,   589,   597,   494,   602,   440,   498,
    1417,  1418,   498,   498,   498,   498,  2778,   498,   498,   489,
     490,   489,   490,  2784,   496,   478,   479,   450,   500,   498,
    1643,  1644,  1179,  1180,  2786,  1648,  2780,   171,  1468,  1269,
     118,  2978,   499,  1179,   501,   343,   460,  1194,  1478,  2375,
     494,  1481,   597,  1268,    24,  1270,   136,   361,  1194,  1274,
      30,  1468,   491,   492,   493,   494,   498,   118,  1325,   705,
     484,  1478,  1287,   250,  1481,   489,   490,  1690,  1691,  1309,
    1310,  2493,   243,     8,  3021,  2715,    11,   368,    49,   131,
    1236,    16,    17,    18,    19,    24,  1311,   491,   492,   493,
     494,    30,   812,   487,     4,   741,   462,   499,  1365,     9,
     502,  1239,  1227,  1228,  1987,   243,   500,  2873,   368,  1234,
    2882,  2381,  1300,   199,   405,   203,  1356,   146,   484,  2496,
     160,  2875,   436,   333,  1364,  1238,  1366,    76,     4,  1643,
    1644,  1230,  1239,     9,  1648,  1552,  1553,   421,    87,  1579,
    2068,  2069,  2070,  2071,  1530,   405,  1579,   489,   490,   491,
     492,   493,   494,   160,  2918,   446,   136,  1924,   165,   805,
     304,  1318,  1579,  1930,   810,   811,   812,  2039,  2918,   460,
    2936,   405,  1318,   806,   271,  1592,  1690,  1691,  1671,   276,
      95,   269,   828,   271,   498,   214,   446,  1539,  2340,  1456,
     361,  1669,  2344,   484,   234,   405,   452,   136,  2611,   543,
     290,   545,   546,  1328,   175,   333,  1464,   498,  1560,   499,
    1562,   857,   502,  1565,  1847,   276,  1871,  1753,   243,   271,
     191,  2975,    24,   361,   568,   196,  1734,   234,    30,   281,
     327,   877,   878,   879,  3006,   881,   882,   381,   498,     4,
     882,   364,   452,   283,     9,    24,  1437,  1491,  1492,  1493,
    2052,    30,  1519,   255,   256,   345,   171,   347,     8,   905,
     243,   196,   233,   292,     5,   436,    16,    17,    18,    19,
     160,   991,   498,  1464,  2416,   165,   283,   405,   924,   925,
      82,   499,  2424,   218,   502,   375,  1856,   498,    76,  2172,
     205,  1448,  1483,   957,   958,  1773,   960,  1488,   436,    87,
     481,   146,  1448,    11,   957,   958,   221,   960,    16,   499,
     290,  1536,   502,   959,   220,   160,   231,   963,   964,    11,
     165,   186,   187,    15,   452,   500,   462,   498,   974,   286,
     493,    23,  1910,  1750,    42,  1913,   361,   500,   409,   176,
     411,  2754,    34,    35,   234,   991,   951,   481,   484,  1474,
     265,   290,   491,   288,  1479,   496,  1512,   136,   169,   500,
     498,   341,   498,   365,   366,   345,    74,  1784,  1785,   214,
    1016,   286,  1995,  1996,  1997,  1998,  1999,  1023,   361,  2002,
    2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,   234,
     255,   256,   502,   283,  1551,   375,    88,   496,  1044,   146,
     237,   500,  1007,   432,   498,  1551,   345,     5,   499,   380,
       8,   436,  2564,   160,    32,    33,    14,   499,   165,   131,
     502,  2573,   499,   677,  1584,   502,  2578,    25,  1588,  2581,
    1590,    29,  1657,  2056,  2057,   499,   375,   352,   283,  1596,
    1656,  1579,  1658,  1659,  2702,   699,   158,   292,  2600,    24,
    1596,    65,    66,   436,  1592,    30,  2202,    13,    14,  1179,
    1180,   805,  2720,   443,   170,  2202,   810,   214,   216,  2202,
    1695,  2202,    55,   498,  1194,  1827,    94,  1829,   732,    13,
      14,  1995,  1996,  1997,  1998,  1999,    11,   234,  2002,  2003,
    2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2381,   498,
     365,   366,   150,  1747,   443,  1151,  2308,   499,  1925,   481,
     502,   290,  2845,   566,   567,   498,   569,    42,   176,   220,
    2153,   499,  1955,  2031,   502,   440,   499,  1173,  2152,   502,
     460,  2683,   462,  1179,  1180,   496,   283,   498,   288,   500,
      13,    14,  2056,  2057,   888,   292,  2140,   151,  1194,    74,
     485,   486,   487,   897,   489,   490,   491,   492,   493,   494,
     151,   136,   341,  2715,   276,  2823,   345,   911,   499,   281,
    2194,   502,   409,  2151,   411,  2153,    13,    14,   922,   237,
     924,   925,   499,  2996,   341,   502,   499,   432,   842,   502,
     409,   151,   411,  1239,  2960,  2961,   375,   499,  1318,   436,
     502,   499,    13,    14,   502,  1238,   860,   199,   499,  1255,
    2943,   502,   526,   409,   151,   411,  1928,  1929,    68,  1239,
     499,   499,  1268,   502,  1270,    13,    14,  1273,  1274,  2962,
    1891,  2109,  1265,   291,  1899,  1265,   409,  1283,   411,  1285,
    1286,  1287,  1288,  1289,  1290,  1291,  1265,   499,   498,  3015,
     502,   496,  1265,   500,   499,   500,    24,   499,  2810,  1830,
     502,  1832,    30,  1265,   443,  1311,   116,  1313,   499,    95,
     271,   502,  1318,  1319,  1320,  1321,  1322,  1323,  1324,  1325,
      13,    14,   150,  1329,  1330,   432,  1953,  3020,  1334,  2139,
     499,  2141,  1338,   502,  2846,  1341,  1342,  1343,  1344,  1345,
    1346,  1347,  1348,  1349,    24,   499,  1352,    37,   502,   499,
      30,   423,   502,  1359,   499,   290,  1362,   502,   499,  1365,
     368,   502,   434,   499,   174,   452,   502,   499,  1448,    83,
     502,   499,  2172,  2535,   502,   485,   486,   487,  1384,   489,
     490,   491,   492,   493,   494,   171,   499,    13,    14,   502,
     368,   409,  1909,   411,   449,  2172,   499,   405,   498,   502,
    1406,  1391,  1382,  1909,    13,    14,   341,  2650,   136,   361,
     345,  1417,  1418,   499,   464,  2742,   502,   369,   436,   205,
    2403,   489,   490,   491,   492,   493,   494,   405,   315,   499,
    2942,   705,   502,  2387,  2034,   221,  2349,  2430,   446,  2352,
     375,  2026,  1448,   151,   604,   231,   606,   498,  1454,   501,
    1456,   498,   460,   405,   131,   498,   136,  1955,    24,  1976,
      36,   271,  1947,  2345,    30,  2347,   276,   498,   446,   151,
    1976,  1551,   450,    13,    14,   151,   484,  1994,   530,   265,
     151,   158,   460,  2336,    13,    14,    13,    14,  1994,  1495,
     498,   286,  1498,  1499,   343,  1501,   405,  2350,    13,    14,
     452,    13,    14,   498,  2021,    37,   484,   232,   443,   319,
     498,  2028,   496,  1519,     5,  2021,  1596,     5,  2118,   498,
     498,   498,  2028,   165,  1530,   335,  2688,  2239,   498,  2403,
    1536,    13,    14,    13,    14,  2052,  1526,   589,   812,   498,
     368,   498,  2090,     6,  2171,  1551,  2173,   147,    11,  2532,
     356,   357,    15,    13,    14,    13,    14,    20,    21,    22,
      23,    24,   290,     5,    27,   498,   352,    30,    31,   498,
     136,    34,    35,  1579,   498,  1279,  2911,   405,  2913,     5,
      13,    14,     5,  2187,    13,    14,  1592,   498,  1594,     9,
    1596,    13,    14,   498,   271,  1601,   368,    13,    14,   276,
    1606,    13,    14,    37,   281,   356,   357,   259,   260,   498,
     290,   365,   366,   341,   498,  2240,   526,   345,   446,    82,
     498,  2421,    56,   433,    87,    88,    89,    90,    91,   299,
     440,   498,   460,   405,   356,   357,   498,  1643,  1644,  1645,
     356,   357,  1648,  1645,  2421,   924,   925,   375,     5,  2426,
    1656,  1657,  1658,  1659,   498,  2172,   484,  2992,  2532,   498,
    1666,   341,   498,   498,  1670,   345,  2172,  1673,  1372,   498,
     498,   461,  2656,   107,   446,  2918,   297,    68,   502,   216,
      98,   502,   499,    74,  1690,  1691,    37,  2203,   460,  1695,
     375,  2468,  2469,  1695,   165,   375,    87,   283,   368,   165,
     281,   232,   498,  1709,  2687,   416,  1712,   498,  1714,    87,
     502,   416,   484,    55,    55,   443,   416,   991,   262,  2236,
     416,  2433,  2434,   499,   290,   116,   498,   118,  1734,   507,
    2236,   460,   416,  2526,   151,   405,    94,   500,   143,  1745,
    1745,     8,    37,   271,    11,   271,   423,     9,   498,    16,
      17,    18,    19,   498,  1760,  1760,  2356,   434,   498,    36,
     414,   414,  1764,   443,   198,   496,  1759,    34,   416,  1759,
     496,  2371,  2462,  1779,   498,   341,   446,   416,   416,   345,
    1759,  1745,   416,   174,   499,   502,  1759,   456,  1794,  1795,
     460,  2308,    11,   343,   497,   705,  1760,  1759,   502,    37,
     502,   507,   414,   504,   498,   416,   276,  1813,   179,   375,
     498,   161,   203,  2687,   484,   249,   170,   498,    56,    37,
      37,   499,     0,   257,  1830,  1831,  1832,   440,   498,  1909,
     214,   378,   287,   223,     8,   269,   502,    11,    16,    56,
     308,   308,    16,    17,    18,    19,   502,   223,   499,   498,
    2650,   223,    30,    51,   292,   324,   271,   284,    36,   452,
    2728,   498,  2639,  2640,   151,  1871,   300,   498,   151,   107,
     460,    37,   271,  2650,   499,  1579,   286,   443,   481,  1583,
     271,   499,   496,   481,   499,   276,   286,   405,  1592,   499,
     107,   499,   944,   499,   271,    73,  1976,    37,    96,    37,
     499,   497,   812,  1909,    82,  1179,  1180,   499,   499,   170,
     499,  1917,   499,   347,  1994,  2432,  2401,   499,   502,   499,
    1194,   499,   481,   500,   122,   499,  2432,   499,   319,   499,
     499,   499,   499,   170,   498,   369,   498,   416,   498,   154,
     498,  2021,   140,   457,   335,  2462,   144,  1953,  2028,  1955,
     457,   218,   446,   286,   502,   389,   287,   174,   287,   483,
     198,  1951,   487,   287,   438,   416,   502,  1973,   166,   242,
    1976,   169,  2052,   271,  2967,   498,  1982,   199,   151,  1985,
     151,   198,  1988,   151,   416,   416,   184,   278,  1994,  1995,
    1996,  1997,  1998,  1999,   278,   416,  2002,  2003,  2004,  2005,
    2006,  2007,  2008,  2009,  2010,  2011,  2064,   416,  2629,  2015,
    2016,   249,   499,  2019,   497,  2021,  2884,    37,  2535,   257,
    2026,   288,  2028,   486,   343,  2031,   498,   490,  2526,  2031,
     493,   269,   249,   284,  2040,   460,   286,  2043,   501,  2045,
     257,   502,   433,   499,  1318,    37,  2052,  2053,   151,   440,
    2056,  2057,   269,   499,   497,  2061,  2062,   497,   151,   142,
    2062,   170,   300,   276,    11,   528,   529,   530,   165,   499,
     170,  2077,  2077,  2079,  2079,   499,   457,  2079,   276,   405,
     499,   991,   545,   300,   296,  2091,   284,   498,   502,   170,
     484,   499,  2172,   499,   179,  2101,   499,   499,   502,   445,
     349,   564,   565,   566,   567,    85,   569,   499,   287,   347,
     498,  2117,   151,  2077,   288,  2079,   502,   580,  2918,   499,
     174,   427,    37,   502,   499,   499,   589,    80,  2755,   327,
     347,   369,  1836,  2650,   499,   176,   599,   498,   498,   602,
     499,  2918,   497,   440,  2650,   170,   502,   499,   407,   498,
     498,   389,   369,  2865,   499,   499,  2236,   221,   199,   502,
     499,  2167,   499,   499,   498,  2171,  2172,  2173,   295,   221,
     498,  2688,   389,   293,  1448,    55,   183,  1881,   499,  1231,
     487,  1233,   499,   499,   460,   201,   498,   650,   651,   652,
     653,   223,  1896,    82,   189,   500,   237,   276,   276,   500,
     500,   500,  2719,   499,  2808,  2722,   500,   500,   500,  2199,
     500,   500,   500,  2719,   500,   500,  2722,   487,   485,   486,
     487,   500,   489,   490,   491,   492,   493,   494,  2308,   500,
    2236,  2852,   500,   416,  2224,   500,  2226,   500,    37,   416,
     500,   271,   500,   500,   500,   500,  2831,  2253,  2833,   108,
     291,  1955,   500,   500,   500,   500,  1960,   500,  1962,   500,
     460,   499,  1966,  1967,   498,   286,   498,    37,   176,  1179,
    1180,   170,   498,   498,   498,   221,    87,  1551,   459,   502,
     132,   116,   335,  2768,  1194,   499,    37,   498,    37,   151,
    2917,   199,    74,   499,   123,   151,  2302,  2303,    37,   357,
     499,  2307,  2308,  2921,   305,    37,  2312,   485,   357,  2315,
    2316,   485,   486,   487,  2320,   489,   490,   491,   492,   493,
     494,   326,  1596,   498,   445,     8,   498,    74,    11,   237,
     499,   498,   502,    16,  2340,  2340,   498,   498,  2344,  2344,
     276,   247,   188,   427,   440,   498,    68,   289,    68,    55,
     498,   498,  2432,   816,   499,    37,   534,   535,   502,    42,
    2366,   375,  2847,    87,   440,    89,    49,    91,   409,   487,
     411,   269,   498,   286,    37,   498,  2340,   427,  2368,  2369,
    2344,   498,  2462,   291,   289,   289,   499,   499,  1440,   499,
     498,    74,   433,   499,   359,   436,   201,  2403,  1450,   577,
    1452,  2918,   286,  1455,   286,   499,     9,   342,  1318,  1461,
     499,  1463,  2918,   121,   454,   438,   356,  2423,   498,   597,
     883,    23,   499,  1475,    34,     9,  2432,   499,  1480,  2154,
    2426,  1825,  1484,  1485,  1486,  1487,  1462,  1489,  1490,   597,
    2167,  1383,  1887,  1953,  2526,  2197,  2862,  2970,  2619,  2930,
    2963,  2673,  1831,   361,  1819,  2535,  2462,   978,  2217,  2917,
    2928,   144,  2171,   926,  2915,  1816,  1892,  2209,  2172,  2116,
       8,  1227,  1179,    11,   951,  1239,  2802,  2370,    16,  2115,
    2846,   944,   945,  2596,  2914,   944,  1779,  1434,   951,   952,
     966,   954,   175,  2197,   967,  2820,  2841,  2958,  1794,  1406,
    2095,   409,  2897,   411,    42,  2835,  2741,  1433,   191,   916,
    2362,    49,   969,   196,   977,   978,  1760,  2507,  2079,   427,
    2526,  2331,  2346,  2716,  2077,   433,  2532,   990,   436,  2535,
    2810,  2809,  2538,  2827,  2901,  2828,    74,  1279,  1448,  2900,
    1279,  2547,  2548,  1279,  1007,  2551,  1279,  2592,  1011,  2946,
     233,  1671,  1357,  1780,  1713,  1501,  1602,  1270,  2564,  2564,
    1748,  1710,  2366,   565,  2094,  1592,  1382,  2573,  2573,    -1,
    2650,    -1,  2578,  2578,    -1,  2581,  2581,    -1,    -1,    -1,
      -1,    -1,  2588,  2589,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2600,  2600,  2602,    -1,    -1,    -1,
    2564,    -1,    -1,    -1,    -1,   288,   144,    -1,  2688,  2573,
      -1,  2617,    -1,    -1,  2578,    -1,    -1,  2581,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   806,    -1,
      -1,    -1,    -1,    -1,    -1,  1909,  2600,   175,    -1,  2719,
      -1,  1551,  2722,    -1,  2650,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,  2363,
      -1,    -1,    -1,    -1,    -1,    -1,   844,    -1,    -1,    -1,
      -1,  2661,    -1,    -1,    -1,    -1,    -1,  2683,  2683,    -1,
      -1,  2687,  2688,  1146,    -1,    -1,  1596,    -1,    -1,    -1,
      -1,  1154,    -1,    -1,  2684,   233,    -1,   380,    -1,    -1,
    1163,    -1,  1976,    -1,   882,  2711,    -1,    -1,    -1,  2715,
    2715,    -1,    -1,  2719,    -1,    -1,  2722,    -1,    -1,  2683,
    1994,    -1,  2728,    -1,    -1,    -1,  2728,    -1,    -1,    -1,
      -1,    -1,    -1,  1196,    -1,    -1,  2742,    -1,    -1,  2745,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2021,    -1,  2755,
     288,  2715,    -1,    -1,  2028,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   486,    -1,  1227,  1228,    -1,  1230,  1231,    -1,
    1233,  1234,    -1,    -1,  1237,    -1,    -1,    -1,  2052,   957,
     958,    -1,   960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2783,    -1,    -1,    -1,    -1,    -1,   482,
    2504,    -1,    -1,    -1,  2810,  2810,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1284,  2526,    -1,    -1,  2831,    -1,  2833,    -1,  2835,
      -1,    -1,  1295,  2839,    -1,    -1,    -1,    -1,  2918,    -1,
    2846,  2846,   380,    -1,    -1,    -1,  2810,    -1,  1900,    -1,
      -1,    -1,  2842,  2859,    -1,    -1,   580,    -1,  2864,    -1,
      -1,    -1,    -1,    -1,    -1,  1328,   526,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   599,    -1,    -1,  2884,    -1,
      -1,    -1,  2846,    -1,    -1,    -1,    -1,  2591,    -1,    -1,
      -1,  2897,    -1,    -1,    -1,    -1,  1359,  1360,  2172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,     0,    -1,    11,
      -1,  2917,  2918,    -1,    16,    17,    18,    19,  1381,    -1,
    1383,    -1,    -1,    -1,    -1,    -1,   650,   651,   652,   653,
    1393,  1394,    34,    -1,    -1,    -1,  2942,  2942,    -1,  2945,
    2946,    -1,    -1,    -1,   482,  2935,  2650,    -1,    -1,    -1,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
     110,   111,  2236,    -1,    -1,    -1,    -1,    -1,  1431,    -1,
      -1,    -1,  2978,    -1,    -1,    -1,  1439,  1440,  2942,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1450,  1451,  1452,
    1453,    -1,  1455,    -1,     8,    -1,    -1,    11,  1461,  1909,
    1463,    94,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,  1474,  1475,    -1,    -1,  3021,  1479,  1480,    -1,    -1,
      34,  1484,  1485,  1486,  1487,    -1,  1489,  1490,    -1,    -1,
      -1,    -1,    -1,    -1,  2308,    -1,   186,   187,    -1,    -1,
      -1,   526,    -1,    -1,    -1,   705,  1509,  1510,  1511,    -1,
      -1,    -1,    -1,   146,    -1,    -1,    -1,    -1,    -1,    -1,
    1238,    -1,    -1,    -1,  1527,    -1,  1976,   160,    -1,    -1,
      -1,    -1,   165,  2777,    -1,    -1,    -1,   170,    -1,    -1,
      -1,    -1,    -1,  2135,  1994,    -1,   179,  1265,    -1,     0,
     183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   251,   252,   253,   254,   255,   256,  2159,    -1,   259,
     260,  2021,    -1,    -1,    -1,    -1,   218,    -1,  2028,    -1,
      -1,   214,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,
    2182,  2183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     526,   234,  2052,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   812,  1331,    -1,    -1,    -1,    -1,  2432,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    94,    -1,    -1,   288,    -1,  2462,    -1,
     283,    -1,    -1,   286,    -1,    -1,    -1,    -1,    -1,   292,
      -1,  1664,   926,    -1,   218,    -1,    -1,    -1,  1671,    -1,
      -1,    -1,    -1,  1391,  2918,   365,   366,    -1,    -1,    -1,
     705,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   952,    -1,
      -1,    -1,    -1,   326,    -1,   146,    -1,    -1,    -1,    -1,
    2292,    -1,    -1,    -1,  1707,    -1,    -1,    -1,    -1,   160,
      -1,    -1,    -1,   977,   165,    -1,   349,    -1,    -1,   170,
      -1,  2535,  2172,    -1,    -1,    -1,   990,    -1,   179,    -1,
      -1,    -1,   183,    -1,   288,     8,  1739,    -1,    11,    -1,
      -1,    -1,  1745,    16,    -1,     8,    -1,  1011,    11,    -1,
      -1,    -1,    -1,    16,    17,    18,    19,  1760,    -1,    -1,
      -1,  1764,    -1,   214,  1767,  1768,    -1,    -1,    -1,    42,
      -1,    34,   405,    -1,    -1,    -1,    49,    -1,    -1,   705,
      -1,    -1,    -1,   234,    -1,    -1,  2236,   812,   478,   479,
      -1,   991,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   432,
      -1,    74,    -1,    -1,    -1,    -1,    -1,   440,  1526,    -1,
    2402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1821,    -1,
       8,    -1,    -1,    11,   457,    -1,   459,   460,    16,    17,
      18,    19,   283,    -1,    -1,   286,  2650,    -1,    -1,    -1,
      -1,   292,    -1,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,    -1,  2308,    -1,
      -1,    -1,    -1,   496,    -1,    -1,   499,   500,   501,    -1,
      -1,   144,    -1,    -1,  2688,   326,    -1,    -1,    -1,    -1,
    1883,    -1,    -1,    -1,    -1,  1888,   812,    -1,    -1,    -1,
    1154,    -1,    -1,    -1,  1897,  1898,  1899,  1900,   349,  1902,
      -1,    -1,   175,    -1,    -1,  2719,    -1,    -1,  2722,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1919,    -1,   191,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,  1645,  1931,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,  1947,    -1,  1949,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   405,   218,    -1,    -1,    -1,    -1,
     233,  1964,  1965,    -1,    -1,    -1,   991,    -1,    -1,    -1,
      -1,    -1,    -1,  1237,    -1,    -1,    -1,  1695,    -1,  1179,
    1180,   432,  2432,    -1,  1987,    -1,    -1,    -1,    -1,   440,
      -1,    -1,    -1,    -1,  1194,  1713,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   457,    -1,   459,   460,
      -1,  1729,  2462,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   288,    -1,  1745,    -1,    -1,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2631,
      -1,  1759,  1760,    -1,    -1,   496,  1764,    -1,   499,   500,
     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2651,
    2652,    -1,    -1,    -1,    -1,   991,    -1,    -1,    -1,    -1,
      -1,  2074,  2075,  2076,  2077,  2667,  2079,  2080,    -1,    -1,
      -1,    -1,  2085,  2086,    -1,  2535,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1360,    -1,    -1,    -1,
     288,    -1,    -1,    -1,  2918,    -1,    -1,   380,    -1,    -1,
      -1,    -1,  2115,    -1,    -1,    -1,    -1,  1381,  1318,  1383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2133,    -1,  2135,    -1,    -1,    -1,  2139,  2140,  2141,    -1,
    2143,    -1,    -1,    -1,    -1,    -1,    -1,   564,   565,    -1,
      -1,    -1,  2744,    -1,  1179,  1180,  2159,    -1,  2161,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1431,    -1,  1194,
      -1,  2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,  2182,
    2183,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2200,    -1,    -1,
    2650,  2204,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,
     627,   628,    -1,    -1,  2217,    -1,   489,   490,   491,   492,
     493,   494,   485,   486,   487,  2228,   489,   490,   491,   492,
     493,   494,    -1,  1951,    -1,    -1,    -1,  2240,  2688,    -1,
      -1,    -1,    -1,    -1,  2247,  1509,  1510,    -1,  1448,    -1,
      -1,    -1,    -1,  1179,  1180,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    -1,    -1,    -1,    -1,  1194,  2719,
      -1,    -1,  2722,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2292,
      -1,    -1,    -1,  1318,    -1,  2298,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    -1,
      -1,    -1,    -1,  2031,    -1,    -1,     8,    -1,  2321,    11,
    2323,  2324,  2325,  2326,    16,    -1,    -1,  2330,  2331,    -1,
    2333,    -1,    -1,  2336,    -1,    -1,    -1,  2340,    -1,    -1,
      -1,  2344,    -1,    -1,  2062,    -1,    -1,  2350,    -1,    -1,
      42,  1551,     8,    -1,    -1,    11,    94,    49,    -1,  2077,
      16,  2079,    -1,  2366,    -1,    -1,    -1,  2370,    -1,    -1,
      -1,    -1,  2375,    -1,    -1,    -1,    -1,    -1,  2381,    -1,
      -1,    -1,    74,    -1,  2387,    -1,    42,   110,   111,    -1,
    2393,    -1,  1318,    49,   811,    -1,  1596,    -1,  2401,  2402,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2410,   146,    -1,
      -1,   828,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,   160,  1448,  2427,    -1,    -1,   165,    -1,    -1,
      -1,    -1,   170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     857,   179,    -1,    -1,    -1,   183,    -1,    -1,    -1,    -1,
      -1,    -1,   144,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     877,   878,   879,   186,   187,   882,    -1,    -1,  2918,    -1,
      -1,    -1,    -1,    -1,    -1,  1739,   214,    -1,    -1,    -1,
      -1,  2199,    -1,   175,    -1,    -1,    -1,    -1,   905,    -1,
      -1,    -1,    -1,  2496,    -1,    -1,   234,    -1,    -1,   191,
      -1,    -1,    -1,    -1,   196,  2508,  2224,    -1,  2226,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2519,    -1,    -1,   175,
      -1,    -1,  1448,    -1,    -1,    -1,  1551,    -1,   251,   252,
     253,   254,   255,   256,    -1,   191,   259,   260,    -1,    -1,
     196,   233,   959,    -1,    -1,   283,   963,   964,   286,    -1,
      -1,    -1,  2555,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,  2564,  2565,    -1,    -1,  2568,    -1,    -1,  2571,    -1,
    2573,  1596,    -1,    -1,    -1,  2578,    -1,   233,  2581,    -1,
    2583,    -1,    -1,  2586,    -1,    -1,    -1,    -1,   326,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,  2600,    -1,  1016,
      -1,    -1,    -1,    -1,    -1,    -1,  1023,    -1,    -1,    -1,
      -1,   349,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2340,    -1,  1888,  1551,  2344,  1044,  2631,    -1,
      -1,    -1,   288,    -1,  1898,  1899,    -1,    -1,  1902,    -1,
      -1,    -1,   365,   366,    -1,    -1,    -1,    -1,  2651,  2652,
    2368,  2369,    -1,    -1,    -1,  1919,    -1,    -1,    -1,  2662,
      -1,  2664,    -1,    -1,  2667,    -1,    -1,   405,    -1,    -1,
    1596,    -1,    -1,    -1,    -1,    -1,    -1,  2680,    -1,    -1,
    2683,    -1,    -1,    -1,    -1,  1949,    -1,    -1,   380,    -1,
      -1,    -1,    -1,    -1,   432,    -1,    -1,    -1,    -1,  2702,
      -1,    -1,   440,    -1,    -1,    -1,    -1,    -1,    -1,  1909,
      -1,    -1,  2715,    -1,    -1,    -1,    -1,  2720,    -1,   457,
      -1,   459,   460,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2738,    -1,    -1,    -1,  2742,
      -1,  2744,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2753,    -1,    -1,    -1,    -1,   478,   479,    -1,   496,    -1,
      -1,   499,   500,   501,    -1,  2768,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,  1976,    -1,    -1,  2782,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2507,
     482,    -1,    -1,    -1,  1994,    -1,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,  2810,    -1,    -1,
    2074,  2075,  2076,    -1,    -1,    -1,  2819,    -1,    -1,    -1,
    2823,  2021,    -1,    -1,  2827,    -1,   482,    -1,  2028,    -1,
      -1,    -1,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,  2846,  2847,  2848,  2849,    -1,    -1,    -1,
      -1,    -1,  2052,    -1,    -1,  2573,  1273,    -1,    -1,    -1,
    2578,    -1,    -1,  2581,    -1,    -1,  1283,    -1,  1285,  2133,
    2873,  1288,  1289,  1290,  1291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1909,  2888,    -1,    -1,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,  1313,  2900,    -1,    -1,
      -1,    -1,  1319,  1320,  1321,  1322,  1323,  1324,    -1,    -1,
      56,  2914,  1329,  1330,    -1,    -1,    -1,  1334,    -1,    -1,
      -1,  1338,    -1,    -1,  1341,  1342,  1343,  1344,  1345,  1346,
    1347,  1348,  1349,  2936,    -1,  1352,    -1,    -1,    -1,  2942,
    2204,    -1,  1359,  2661,    -1,  1362,    -1,    -1,    -1,     8,
      -1,  1976,    11,    -1,     0,  2958,  2959,    16,    17,    18,
      19,   107,   108,    -1,    -1,    -1,  2684,  1384,    -1,  1994,
     116,    -1,  2172,    -1,    20,    -1,  2240,    -1,    -1,    -1,
      -1,    -1,    -1,  1909,    30,     8,    32,    33,    11,    -1,
      -1,     8,    -1,    16,    11,    -1,  2021,  2715,    -1,    16,
    1417,  1418,    48,  2028,    -1,    -1,    -1,    -1,    -1,    -1,
    2728,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    69,    -1,    42,    49,  2052,   174,    -1,
      -1,    -1,    49,    -1,    80,    -1,  2236,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,    94,    -1,
    1976,    74,   198,    -1,    -1,    -1,    -1,    74,    -1,  2323,
    2324,  2325,  2326,    -1,    -1,  2783,   112,    -1,  1994,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1495,    -1,
     126,  1498,  1499,    -1,  1501,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,  2021,   142,    -1,    -1,    -1,
      -1,    -1,  2028,   249,   150,    -1,   152,   153,  2308,    -1,
      -1,   257,    -1,  1530,    -1,    -1,    -1,    -1,    -1,    -1,
     166,   144,    -1,   269,  2842,   271,  2052,   144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2410,  2172,    -1,   195,
      -1,    -1,   175,    -1,   300,    -1,    -1,    -1,   175,   218,
      -1,    -1,    -1,    -1,   210,    -1,    -1,    -1,   191,    -1,
      -1,    -1,    -1,   196,   191,    -1,    -1,  1594,    -1,   196,
      -1,    -1,    -1,    -1,  1601,    -1,    -1,    -1,    -1,  1606,
     236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,  2236,    -1,    -1,    -1,    -1,   233,  2935,    -1,    -1,
      -1,    -1,    -1,   369,    -1,    -1,    -1,    -1,  1645,   288,
      -1,    -1,  2432,    -1,    -1,    -1,    -1,    -1,    -1,  1656,
      -1,  1658,  1659,   389,    -1,   391,  2172,    -1,   394,  1666,
      -1,    -1,    -1,  1670,    -1,    -1,  1673,    -1,    -1,    -1,
      -1,    -1,  2462,    -1,    -1,   288,   898,   313,    -1,    -1,
     316,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2308,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1709,    -1,    -1,  1712,    -1,  1714,    -1,   345,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   939,   354,    -1,
    2236,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   368,    -1,    -1,    -1,    -1,    -1,    -1,   375,
      -1,    -1,    -1,   379,    -1,  2535,    -1,    -1,     8,    -1,
      -1,    11,    -1,   389,    -1,    15,    16,    17,    18,    19,
      -1,    -1,   498,    -1,    -1,   401,    -1,   380,    -1,   405,
      -1,    -1,  1779,   380,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,  1794,  1795,    49,
      -1,    -1,  2308,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   441,  1813,    -1,  2662,    -1,
     446,    -1,    -1,    -1,    74,    -1,    -1,  2432,    -1,    -1,
      -1,    -1,    -1,    -1,   460,    -1,  2680,    -1,  1050,    -1,
      -1,    -1,    -1,  1055,    -1,    -1,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,  2462,   484,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2650,    -1,   498,    -1,  1871,   501,    -1,    -1,    -1,   482,
      -1,    -1,    -1,    -1,    -1,   482,   489,   490,   491,   492,
     493,   494,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2688,  2753,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1917,    22,    -1,    -1,    -1,   175,  2432,    -1,    -1,    -1,
    2535,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2782,  2719,
      -1,   191,  2722,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2462,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,
      -1,    -1,    -1,    -1,    75,    -1,  1973,    -1,    -1,    -1,
      -1,    -1,    -1,   233,    -1,  1982,    -1,    -1,  1985,    -1,
      91,  1988,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2015,  2016,
      -1,   271,  2019,    -1,   274,    -1,    -1,    -1,    -1,  2535,
      -1,    -1,    -1,    -1,  2031,    -1,    -1,    -1,   288,    -1,
      -1,   291,    -1,  2040,   145,  2650,  2043,    -1,  2045,    -1,
      -1,    -1,    -1,    -1,   155,    -1,  2053,    -1,    -1,  1271,
      -1,    -1,    -1,    -1,  2061,  2062,   167,    -1,    -1,    -1,
    1282,   172,    -1,    -1,  1286,    -1,    -1,    -1,    -1,    -1,
    1292,  1293,  1294,  2688,    -1,    -1,    -1,     3,    -1,  1301,
      -1,    -1,     8,    -1,  2091,    11,    -1,    -1,   199,    15,
      16,    17,    18,    19,  2101,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2719,    -1,    -1,  2722,    34,    -1,
    2117,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
     380,    -1,    -1,    49,    -1,    -1,    -1,    -1,  2918,    -1,
      -1,    -1,    -1,   244,  2650,    -1,  1358,   248,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    -1,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,    -1,  2688,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    -1,    -1,    -1,  1416,    49,    -1,    -1,    -1,  1421,
     311,    -1,    -1,  2719,    -1,    -1,  2722,     8,    -1,    -1,
      11,    -1,    -1,    -1,   325,    16,    17,    18,    19,    -1,
      74,    -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
      -1,    42,   502,    -1,    -1,    -1,  2253,   358,    49,   175,
     361,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   369,    -1,
      -1,   372,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
     391,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   218,   219,   405,  2302,  2303,    -1,    -1,    -1,
    2307,   412,    -1,  2918,    -1,  2312,    -1,   233,  2315,  2316,
     421,    -1,    -1,  2320,    -1,    -1,   427,    -1,    -1,    -1,
      -1,   175,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    -1,    -1,   191,    -1,    -1,
      -1,   452,   196,    -1,    -1,   271,    -1,    -1,   274,    34,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    -1,  2366,
      -1,    -1,   288,    -1,    49,   291,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,   233,
      -1,    -1,  1604,    -1,    -1,    -1,    -1,    -1,    -1,    74,
     191,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,
      -1,  1623,  2918,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2423,   218,   219,  1641,
      -1,  1643,  1644,    -1,  1646,    -1,  1648,    -1,    -1,    -1,
    1652,    -1,   233,  1655,   288,    -1,    -1,    -1,  1660,    -1,
      -1,  1663,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1675,   380,    -1,    -1,  1679,  1680,  1681,
    1682,  1683,  1684,    -1,    -1,    -1,    -1,    -1,  1690,  1691,
     271,  1693,  1694,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1705,    -1,    -1,  1708,   288,    -1,    -1,
     175,    -1,    -1,    -1,  1716,  1717,  1718,  1719,  1720,  1721,
    1722,  1723,  1724,  1725,    -1,    -1,   191,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,  2538,    -1,   218,   219,  1757,    -1,    -1,    -1,    -1,
    2547,  2548,    -1,    -1,  2551,    -1,    -1,    -1,   233,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,
      -1,  2588,  2589,    -1,    -1,    -1,   271,    -1,    -1,   274,
      -1,    -1,    -1,    -1,    -1,  2602,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   288,    -1,    -1,   291,    -1,    -1,    -1,
    2617,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,
      -1,    -1,    -1,    30,  1876,  1877,  1878,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    56,
      -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,   380,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2711,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,
      -1,  2728,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,    -1,    34,    -1,    -1,  2742,    -1,    -1,  2745,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
    1972,    -1,    -1,    -1,    -1,    -1,  1978,    -1,    -1,   136,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1991,
    1992,  1993,    74,  1995,  1996,  1997,  1998,  1999,    -1,    -1,
    2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
    2032,    -1,    -1,  2035,   499,  2037,    -1,    -1,    -1,  2041,
    2042,   198,    -1,    -1,    -1,    -1,    -1,    -1,  2835,    -1,
      -1,    -1,  2839,  2055,  2056,  2057,  2058,    -1,  2060,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2859,    -1,    -1,    -1,    -1,  2864,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   249,   175,    -1,    -1,    -1,    -1,    -1,    -1,
     257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
    2897,    -1,   269,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   290,  2136,    -1,   218,   219,    -1,    -1,
      -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,  2945,  2946,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   341,    -1,    -1,    34,   345,   271,
     347,  2978,   274,    -1,    -1,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,   288,    -1,    -1,   291,
      -1,    -1,   369,    -1,    -1,    -1,    -1,    -1,   375,    -1,
      -1,    -1,    -1,    -1,    -1,  2227,    -1,    74,    -1,    -1,
      -1,    -1,   389,    -1,  3021,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2254,    -1,    -1,    -1,  2258,  2259,    -1,  2261,
      -1,    -1,  2264,  2265,  2266,  2267,  2268,    -1,    -1,    -1,
    2272,  2273,  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,
    2282,  2283,    -1,    -1,    -1,    -1,   443,    -1,    -1,    -1,
      -1,    -1,  2294,    -1,    -1,    -1,    -1,    -1,   380,  2301,
      -1,    -1,  2304,    -1,  2306,    -1,    -1,    -1,  2310,    -1,
      -1,  2313,  2314,    -1,    -1,  2317,  2318,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   175,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    24,   196,
      -1,    -1,    34,    -1,    30,  2357,    -1,    -1,    -1,    -1,
      42,    37,    -1,  2365,    -1,    -1,    -1,    49,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,  2378,    -1,    -1,    -1,
      56,    -1,    -1,    -1,    -1,    -1,   233,     8,    -1,    -1,
      11,    -1,    74,    -1,    15,    16,    17,    18,    19,    -1,
     482,  2403,    -1,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    34,    -1,    -1,    -1,   499,    -1,    -1,
      -1,    42,    -1,    -1,   271,    -1,    -1,   274,    49,    -1,
      -1,   107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
     136,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,  2528,    -1,    -1,    -1,
    2532,    -1,    -1,   380,    -1,    -1,   218,   219,    -1,  2541,
    2542,  2543,    -1,    -1,  2546,    -1,    -1,  2549,  2550,    -1,
      -1,   233,  2554,    -1,   175,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     191,    -1,    -1,   249,    -1,   196,    -1,    -1,    -1,    -1,
      -1,   257,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,
      -1,    -1,   274,   269,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,
      -1,    -1,   233,    -1,   290,    -1,    -1,    -1,  2620,    -1,
      -1,    -1,    -1,    -1,   300,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2636,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
     271,    -1,   499,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   341,    -1,   288,    -1,   345,
     291,   347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2686,  2687,    -1,    -1,    -1,    -1,
    2692,  2693,  2694,   369,    -1,    -1,    -1,    -1,   380,   375,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   389,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2736,  2737,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2751,
      -1,    -1,    -1,    -1,    -1,    -1,  2758,    -1,    -1,   380,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   443,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     482,    -1,  2804,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,    -1,
    2822,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2844,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,    -1,    -1,    -1,    -1,   499,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2902,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2923,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2932,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,  2981,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,   131,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,   498,   499,    -1,    -1,
      -1,   503,    -1,   505,   506,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,   484,    -1,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,
     498,   499,    -1,    -1,    -1,   503,    -1,   505,   506,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
     484,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,
      -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,   506,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
     170,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,   229,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    -1,    -1,    35,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
     496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
     506,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,   491,
      -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
      -1,   489,   490,   491,    -1,    -1,    -1,    -1,   496,    -1,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,   489,   490,   491,    -1,    -1,
      -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,   506,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
     496,    -1,   498,   499,    -1,    -1,    -1,   503,    -1,   505,
     506,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,
      -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,
     498,   499,    -1,    -1,    -1,   503,    -1,   505,   506,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,   170,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,
      -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,   506,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
     496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
     506,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,
      -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,
      -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,   506,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,    -1,    -1,    -1,   496,    -1,   498,    -1,
      -1,    -1,    -1,   503,    -1,   505,   506,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
     496,    -1,   498,    -1,    -1,    -1,    -1,   503,    -1,   505,
     506,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,    -1,
      -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,   169,    -1,   171,   172,   173,   174,   175,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,   231,   232,   233,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,    -1,    -1,    -1,    -1,    -1,
      -1,   489,   490,    -1,    -1,    -1,    -1,    -1,   496,    -1,
     498,    -1,    -1,    -1,    -1,   503,    -1,   505,   506,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,   276,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,    -1,
      -1,    -1,    -1,    -1,    -1,   489,   490,    -1,    -1,    -1,
      -1,    -1,   496,    -1,   498,    -1,    -1,    -1,    -1,   503,
      -1,   505,   506,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,     3,     4,     5,     6,     7,   498,     9,
      10,    -1,    -1,    -1,    -1,   505,   506,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,   169,
      -1,   171,   172,   173,   174,   175,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,   231,   232,   233,    -1,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,    -1,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,
      -1,    -1,    -1,    -1,    -1,   505,   506,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,    -1,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    -1,    -1,    -1,    -1,    -1,    -1,   505,
     506,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    -1,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,    -1,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,   276,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,   490,     3,
      -1,    -1,    -1,    -1,   496,    -1,   498,    -1,    -1,    -1,
      -1,   503,    -1,   505,   506,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,   171,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,   221,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   499,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,     3,
     484,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,   169,    -1,   171,   172,   173,
     174,   175,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,   287,   288,   289,   290,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   498,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,   169,    -1,   171,   172,   173,   174,
     175,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,   231,   232,   233,    -1,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,   272,   273,   274,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   498,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    -1,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,   169,    -1,   171,   172,   173,   174,   175,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,   231,   232,   233,    -1,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,    -1,   272,   273,   274,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,     4,     5,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   498,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,   286,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,   489,   490,   491,    -1,    -1,    -1,    -1,    -1,
      -1,   498,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,   405,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,   484,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     498,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,   484,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,   405,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,    -1,     3,   484,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   498,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   498,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,    -1,    -1,
      -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,   498,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
      -1,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,    -1,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,    -1,   295,   296,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,    -1,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,    -1,
     421,    -1,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,   480,
     481,    -1,     3,    -1,   485,   486,   487,     8,   489,   490,
     491,   492,   493,   494,    -1,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,    -1,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,     8,    -1,    -1,    11,    -1,    42,    -1,
      15,    16,    17,    18,    19,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,     8,    -1,
      74,    11,    -1,    -1,    49,    15,    16,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,     8,    -1,    74,
      11,    -1,    42,    -1,    15,    16,    17,    18,    19,    49,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    -1,    -1,    74,    -1,     8,    -1,    49,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      42,   175,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     175,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   218,   219,   191,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
      -1,   191,    -1,    -1,    -1,    -1,   196,    -1,   233,    -1,
      -1,    -1,    -1,    -1,   175,    -1,    -1,   271,    -1,    -1,
     274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,
     191,    -1,    -1,    -1,   288,   196,    -1,   291,    -1,    -1,
      -1,    -1,    -1,   233,    -1,    -1,   271,    -1,    -1,   274,
      -1,    -1,    -1,   175,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,    -1,   288,    -1,    -1,   291,    -1,    -1,   191,
      -1,    -1,   233,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,   271,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   218,   219,   288,    -1,
      -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     271,   233,    -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,   288,    -1,    -1,
     291,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,   271,
      -1,     8,   274,    -1,    11,   380,    -1,    34,    -1,    16,
      17,    18,    19,    -1,    -1,    42,   288,    -1,    -1,   291,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
     380,    -1,    49,    -1,    -1,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    74,    11,   380,
      -1,    -1,    15,    16,    17,    18,    19,    -1,   482,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    34,    -1,    -1,    -1,   499,    -1,    -1,    -1,    42,
      -1,    -1,    -1,    -1,    -1,    -1,    49,   482,   380,    -1,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,    -1,     8,
      -1,    74,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    -1,   482,    -1,    -1,   485,   486,   487,   175,   489,
     490,   491,   492,   493,   494,    34,    -1,    -1,    -1,   499,
      -1,    -1,    -1,    42,   191,    -1,    -1,    -1,   175,   196,
      49,   482,    -1,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,   191,    -1,    -1,    -1,   499,   196,
      -1,   218,   219,    -1,    -1,    74,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
     482,   218,   219,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,   233,   499,    -1,    -1,
      -1,    -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   271,    -1,    -1,   274,   191,    -1,
      -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,   291,    -1,    -1,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     233,    -1,    -1,    -1,    -1,    -1,   175,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   271,    -1,
      -1,   274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,    -1,   288,    -1,    -1,   291,    -1,
      -1,    -1,    -1,   380,   233,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   288,
      -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,   499,    -1,    -1,   482,    -1,    -1,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,
      -1,    -1,   485,   486,   487,    -1,   489,   490,   491,   492,
     493,   494,    -1,    -1,    -1,    -1,   499,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,   482,    -1,    -1,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,    -1,    -1,   497,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,    -1,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,   491,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,   286,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
       4,     5,    -1,    -1,    -1,     9,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,   286,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,     4,
       5,    -1,    -1,    -1,     9,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,   286,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,    -1,    -1,     8,
      -1,    -1,    11,    -1,   489,   490,    15,    16,    17,    18,
      19,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    -1,    34,    -1,    -1,    -1,    38,
      -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    34,    -1,
      49,    -1,    -1,    -1,    -1,    -1,    42,     8,    -1,    -1,
      11,    -1,    -1,    49,    15,    16,    17,    18,    19,    -1,
       8,    -1,    -1,    11,    -1,    74,    -1,    15,    16,    17,
      18,    19,    -1,    34,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    42,    -1,    -1,    -1,    -1,    34,    -1,    49,    37,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,   125,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,   175,    -1,    -1,   165,
      -1,    -1,    -1,    -1,   170,    -1,    34,    -1,    -1,   175,
      -1,    -1,   191,    -1,    42,    -1,    -1,   196,    -1,    -1,
      -1,    49,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,   218,
     219,    -1,    -1,    -1,   175,    -1,    74,    -1,    -1,    -1,
      -1,    -1,   218,   219,   233,    -1,    -1,   175,    -1,    -1,
     191,    -1,    -1,    -1,    -1,   196,    -1,   233,    -1,    -1,
      -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   218,   219,    -1,
      -1,    -1,   271,    -1,    -1,   274,    -1,    -1,    -1,    -1,
     218,   219,   233,    -1,    -1,   271,    -1,    -1,   274,   288,
      -1,    -1,   291,    -1,    -1,   233,    -1,    -1,    -1,    -1,
      -1,    -1,   288,    -1,    -1,   291,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     271,    -1,    -1,   274,    -1,    -1,    -1,   175,    -1,    -1,
      -1,    -1,    -1,   271,    -1,    -1,   274,   288,    -1,    -1,
     291,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,
     288,    -1,    -1,   291,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,   380,    -1,    -1,    15,    16,    17,
      18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    37,
      -1,    -1,    -1,   271,    42,    -1,   274,    -1,    -1,   380,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     288,   440,   380,   291,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    74,    -1,    -1,    -1,
      -1,   309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
      -1,    -1,    -1,   482,    -1,    49,   485,   486,   487,    -1,
     489,   490,   491,   492,   493,   494,   482,    -1,    -1,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   482,   380,    -1,   485,   486,   487,    -1,   489,   490,
     491,   492,   493,   494,   482,    -1,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,   175,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,
     218,   219,    -1,    -1,    -1,    -1,   170,    -1,    -1,    34,
      -1,   175,    37,    -1,    -1,   233,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,    -1,   191,    -1,    -1,
      -1,    -1,   196,    -1,   482,    -1,    -1,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    -1,    -1,    74,
      -1,    -1,    -1,   271,   218,   219,   274,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   233,
     288,    11,    -1,   291,    -1,    15,    16,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,   271,    -1,    49,
     274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,   288,    11,    -1,   291,    -1,    15,
      16,    17,    18,    19,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
     175,    37,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
      -1,    -1,   380,    49,    -1,    -1,   191,    -1,    -1,    -1,
      -1,   196,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    74,    -1,
      -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    34,    -1,    -1,    -1,    -1,    -1,   233,    -1,
      42,     8,    -1,    -1,    11,    -1,   380,    49,    -1,    16,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   175,    -1,    34,    -1,    -1,
      -1,    -1,    74,    -1,    -1,    42,   271,    -1,    -1,   274,
      -1,   191,    49,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,   288,   482,    -1,   291,   485,   486,   487,
      -1,   489,   490,   491,   492,   493,   494,    74,   218,   219,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,
      -1,    -1,    -1,   233,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,
     196,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   482,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,   271,   218,   219,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   175,    -1,    -1,    -1,   233,   288,    -1,
      -1,   291,    -1,    -1,    -1,   380,    -1,    -1,    -1,   191,
      -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   175,    -1,
      -1,    -1,    -1,    -1,    -1,   271,   218,   219,   274,    -1,
      -1,    -1,    -1,    -1,   191,    -1,    -1,    -1,    -1,   196,
      -1,   233,   288,    -1,     8,   291,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,   218,   219,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    -1,   233,    -1,    42,   271,
     380,    -1,   274,    -1,    -1,    49,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   288,   482,    -1,   291,
     485,   486,   487,    -1,   489,   490,   491,   492,   493,   494,
      74,    -1,    -1,   413,   271,    -1,    -1,   274,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   288,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   482,    -1,    -1,   485,   486,   487,   380,   489,
     490,   491,   492,   493,   494,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   175,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   380,    -1,    -1,    -1,   191,    -1,    -1,
      -1,    -1,   196,    -1,    -1,    -1,   482,    -1,    -1,   485,
     486,   487,    -1,   489,   490,   491,   492,   493,   494,    -1,
      -1,    -1,    -1,    -1,   218,   219,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   233,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     482,    -1,    -1,   485,   486,   487,    -1,   489,   490,   491,
     492,   493,   494,    -1,    -1,    -1,    -1,   271,    -1,    -1,
     274,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   288,   482,    -1,   291,   485,   486,
     487,    -1,   489,   490,   491,   492,   493,   494,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,     5,    -1,   482,    -1,
      -1,   485,   486,   487,    -1,   489,   490,   491,   492,   493,
     494,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,    -1,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,    -1,   172,   173,   174,    -1,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,   228,
     229,   230,    -1,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,   271,   272,   273,    -1,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    -1,    76,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,    -1,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,    -1,
     170,    -1,   172,   173,   174,    -1,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,   228,   229,
     230,    -1,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    -1,    76,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,    -1,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,    -1,   170,
      -1,   172,   173,   174,    -1,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,   228,   229,   230,
      -1,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,   169,    -1,   171,
     172,   173,   174,   175,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,   231,
     232,   233,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
     272,   273,   274,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    -1,    76,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,   167,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,   433,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,   167,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,   233,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,   433,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
     286,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,   287,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,   287,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      -1,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    73,    -1,    -1,    -1,    77,    78,    79,    80,
      81,    82,    -1,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,
      -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,   180,
     181,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
      -1,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,
      -1,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
      -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,    -1,   266,   267,   268,   269,   270,
      -1,   272,   273,    -1,   275,    -1,   277,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,    -1,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    -1,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      82,    -1,    84,    85,    86,    -1,    88,    89,    90,    91,
      92,    93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,    -1,   117,    -1,   119,   120,   121,
     122,   123,   124,    -1,   126,   127,   128,   129,   130,    -1,
      -1,   133,   134,   135,   136,   137,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,    -1,   159,    -1,   161,
     162,   163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,
     172,   173,   174,    -1,   176,    -1,   178,    -1,   180,   181,
     182,    -1,   184,   185,   186,   187,   188,   189,   190,    -1,
     192,   193,   194,   195,    -1,   197,   198,   199,   200,   201,
     202,    -1,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,   213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,
     222,   223,   224,   225,   226,   227,    -1,    -1,   230,    -1,
     232,    -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,    -1,   266,   267,   268,   269,   270,    -1,
     272,   273,    -1,   275,    -1,   277,   278,   279,   280,   281,
     282,    -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,
      -1,   293,   294,    -1,   296,    -1,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,
     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,    -1,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,
     372,   373,    -1,   375,   376,   377,   378,   379,    -1,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,
     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,
     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
      -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,   441,
     442,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    82,
      -1,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,
     173,   174,    -1,   176,    -1,   178,    -1,   180,   181,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,    -1,   232,
      -1,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,    -1,   266,   267,   268,   269,   270,    -1,   272,
     273,    -1,   275,    -1,   277,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,   294,    -1,   296,    -1,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,
     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,    -1,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    82,    -1,
      84,    85,    86,    -1,    88,    89,    90,    91,    92,    93,
      -1,    -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,    -1,   117,    -1,   119,   120,   121,   122,   123,
     124,    -1,   126,   127,   128,   129,   130,    -1,    -1,   133,
     134,   135,   136,   137,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,    -1,   159,    -1,   161,   162,   163,
     164,    -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,
     174,    -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,
     184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
     194,   195,    -1,   197,   198,   199,   200,   201,   202,    -1,
     204,    -1,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,   215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,
     224,   225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,
      -1,   235,   236,   237,    -1,    -1,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,   266,   267,   268,   269,   270,    -1,   272,   273,
      -1,   275,    -1,   277,   278,   279,   280,   281,   282,    -1,
     284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,
     294,    -1,   296,    -1,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,
     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,    -1,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,    -1,   369,   370,   371,   372,   373,
      -1,   375,   376,   377,   378,   379,    -1,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,
     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,
     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,
     434,   435,   436,   437,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    -1,    52,    53,    -1,
      55,    56,    57,    58,    -1,    60,    -1,    -1,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      -1,    -1,    77,    78,    79,    80,    81,    82,    -1,    84,
      85,    86,    -1,    88,    89,    90,    91,    92,    93,    -1,
      -1,    96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,    -1,   117,    -1,   119,   120,   121,   122,   123,   124,
      -1,   126,   127,   128,   129,   130,    -1,    -1,   133,   134,
     135,   136,   137,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,    -1,   159,    -1,   161,   162,   163,   164,
      -1,   166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,
      -1,   176,    -1,   178,    -1,   180,   181,   182,    -1,   184,
     185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
     195,    -1,   197,   198,   199,   200,   201,   202,    -1,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,   213,    -1,
     215,    -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,
     225,   226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,
     235,   236,   237,    -1,    -1,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
      -1,   266,   267,   268,   269,   270,    -1,   272,   273,    -1,
     275,    -1,   277,   278,   279,   280,   281,   282,    -1,   284,
     285,    -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,
      -1,   296,    -1,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,
      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,    -1,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,    -1,   369,   370,   371,   372,   373,    -1,
      -1,   376,   377,   378,   379,    -1,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,
      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,
     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,
     435,   436,   437,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,    -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    -1,    52,    53,    -1,    55,
      56,    57,    58,    -1,    60,    -1,    -1,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    -1,
      -1,    77,    78,    79,    80,    81,    82,    -1,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    -1,    -1,
      96,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
      -1,   117,    -1,   119,   120,   121,   122,   123,   124,    -1,
     126,   127,   128,   129,   130,    -1,    -1,   133,   134,   135,
     136,   137,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,    -1,   159,    -1,   161,   162,   163,   164,    -1,
     166,    -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,
     176,    -1,   178,    -1,   180,   181,   182,    -1,   184,   185,
     186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
      -1,   197,   198,   199,   200,   201,   202,    -1,   204,    -1,
     206,   207,   208,   209,   210,   211,   212,   213,    -1,   215,
      -1,   217,    -1,    -1,   220,    -1,   222,   223,   224,   225,
     226,   227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,
     236,   237,    -1,    -1,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,    -1,
     266,   267,   268,   269,   270,    -1,   272,   273,    -1,   275,
      -1,   277,   278,   279,   280,   281,   282,    -1,   284,   285,
      -1,    -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,
     296,    -1,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
      -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,    -1,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,    -1,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,
     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,
     436,   437,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,    -1,   451,   452,   453,   454,   455,
      -1,    -1,   458,    -1,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    -1,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,
      77,    78,    79,    80,    81,    82,    -1,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    -1,    96,
      97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,
      -1,   178,    -1,   180,   181,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,    -1,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,    -1,    -1,   220,    -1,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,    -1,   266,
     267,   268,   269,   270,    -1,   272,   273,    -1,   275,    -1,
     277,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,   294,    -1,   296,
      -1,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,   314,   315,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,
      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,    -1,   449,    -1,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    -1,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    82,    -1,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    -1,    -1,    96,    97,
      98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
      -1,   119,   120,   121,   122,   123,   124,    -1,   126,   127,
     128,   129,   130,    -1,    -1,   133,   134,   135,   136,   137,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
      -1,   159,    -1,   161,   162,   163,   164,    -1,   166,    -1,
     168,    -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,
     178,    -1,   180,   181,   182,    -1,   184,   185,   186,   187,
     188,   189,   190,    -1,   192,   193,   194,   195,    -1,   197,
     198,   199,   200,   201,   202,    -1,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,   213,    -1,   215,    -1,   217,
      -1,    -1,   220,    -1,   222,   223,   224,   225,   226,   227,
      -1,    -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,
      -1,    -1,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,    -1,   266,   267,
     268,   269,   270,    -1,   272,   273,    -1,   275,    -1,   277,
     278,   279,   280,   281,   282,    -1,   284,   285,    -1,    -1,
     288,   289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,
     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
      -1,   369,   370,   371,   372,   373,    -1,   375,   376,   377,
     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,
     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,
     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,    -1,    -1,   434,   435,   436,   437,
     438,    -1,    -1,   441,   442,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,    -1,    -1,
     458,    -1,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    82,    -1,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    -1,    96,    97,    98,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
      -1,    -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,
      -1,   180,   181,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,    -1,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,    -1,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,    -1,
      -1,   220,    -1,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,   266,   267,   268,
     269,   270,    -1,   272,   273,    -1,   275,    -1,   277,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,   314,   315,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    -1,    52,    53,    -1,    55,    56,    57,    58,    -1,
      60,    -1,    -1,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    -1,    -1,    77,    78,    79,
      80,    81,    82,    -1,    84,    85,    86,    -1,    88,    89,
      90,    91,    92,    93,    -1,    -1,    96,    97,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,    -1,   117,    -1,   119,
     120,   121,   122,   123,   124,    -1,   126,   127,   128,   129,
     130,    -1,    -1,   133,   134,   135,   136,   137,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,    -1,   159,
      -1,   161,   162,   163,   164,    -1,   166,    -1,   168,    -1,
      -1,    -1,   172,   173,   174,    -1,   176,    -1,   178,    -1,
     180,   181,   182,    -1,   184,   185,   186,   187,   188,   189,
     190,    -1,   192,   193,   194,   195,    -1,   197,   198,   199,
     200,   201,   202,    -1,   204,    -1,   206,   207,   208,   209,
     210,   211,   212,   213,    -1,   215,    -1,   217,    -1,    -1,
     220,    -1,   222,   223,   224,   225,   226,   227,    -1,    -1,
     230,    -1,   232,    -1,    -1,   235,   236,   237,    -1,    -1,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,    -1,   266,   267,   268,   269,
     270,    -1,   272,   273,    -1,   275,    -1,   277,   278,   279,
     280,   281,   282,    -1,   284,   285,    -1,    -1,   288,   289,
     290,    -1,    -1,   293,   294,    -1,   296,    -1,   298,   299,
     300,   301,   302,   303,   304,    -1,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,    -1,   327,    -1,   329,
     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,    -1,
     350,   351,    -1,   353,   354,   355,   356,    -1,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,    -1,   369,
     370,   371,   372,   373,    -1,   375,   376,   377,   378,   379,
      -1,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,    -1,   403,   404,    -1,   406,    -1,   408,   409,
     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,
     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,    -1,    -1,   434,   435,   436,   437,   438,    -1,
      -1,   441,   442,   443,   444,   445,   446,   447,    -1,   449,
      -1,   451,   452,   453,   454,   455,    -1,    -1,   458,    -1,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,
      21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
      31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,
      -1,    42,    43,    44,    45,    46,    47,    48,    -1,    50,
      51,    52,    53,    -1,    55,    56,    57,    58,    -1,    60,
      -1,    -1,    63,    64,    65,    66,    67,    -1,    69,    70,
      71,    72,    -1,    -1,    75,    -1,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      91,    92,    93,    -1,    95,    96,    97,    98,    -1,    -1,
      -1,   102,    -1,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,    -1,   117,    -1,   119,   120,
     121,   122,   123,   124,    -1,   126,   127,   128,   129,   130,
      -1,    -1,   133,   134,   135,   136,   137,    -1,   139,   140,
     141,    -1,   143,   144,   145,    -1,   147,   148,   149,   150,
      -1,   152,   153,   154,   155,   156,    -1,    -1,   159,    -1,
     161,   162,   163,   164,    -1,   166,    -1,   168,   169,    -1,
     171,   172,   173,   174,   175,   176,    -1,   178,    -1,    -1,
      -1,   182,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,    -1,   197,   198,   199,   200,
     201,   202,    -1,   204,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,    -1,   215,    -1,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,    -1,   230,
     231,   232,   233,    -1,   235,   236,   237,    -1,    -1,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,    -1,
      -1,   272,   273,   274,   275,    -1,    -1,   278,   279,   280,
     281,   282,    -1,   284,   285,    -1,    -1,   288,   289,   290,
      -1,    -1,   293,    -1,   295,   296,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,    -1,   313,   314,    -1,   316,   317,   318,    -1,   320,
     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,    -1,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,    -1,
     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,    -1,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,    -1,    -1,   434,   435,   436,   437,   438,    -1,    -1,
     441,   442,   443,   444,   445,    -1,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,    -1,   458,    -1,    -1,
     461,   462,   463,   464,   465,   466,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,   480,
     481,    -1,    -1,    20,    21,    22,    23,    24,    25,    26,
      27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    39,    40,    -1,    42,    43,    44,    45,    46,
      47,    48,    -1,    50,    51,    52,    53,    -1,    55,    56,
      57,    58,    -1,    60,    -1,    -1,    63,    64,    65,    66,
      67,    -1,    69,    70,    71,    72,    -1,    -1,    75,    -1,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    91,    92,    93,    -1,    95,    96,
      97,    98,    -1,    -1,    -1,   102,    -1,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
     117,    -1,   119,   120,   121,   122,   123,   124,    -1,   126,
     127,   128,   129,   130,    -1,    -1,   133,   134,   135,   136,
     137,    -1,   139,   140,   141,    -1,   143,   144,   145,    -1,
     147,   148,   149,   150,    -1,   152,   153,   154,   155,   156,
      -1,    -1,   159,    -1,   161,   162,   163,   164,    -1,   166,
      -1,   168,   169,    -1,   171,   172,   173,   174,   175,   176,
      -1,   178,    -1,    -1,    -1,   182,    -1,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,    -1,
     197,   198,   199,   200,   201,   202,    -1,   204,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,    -1,   215,    -1,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,    -1,   230,   231,   232,   233,    -1,   235,   236,
     237,    -1,    -1,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,    -1,    -1,   272,   273,   274,   275,    -1,
      -1,   278,   279,   280,   281,   282,    -1,   284,   285,    -1,
      -1,   288,   289,   290,    -1,    -1,   293,    -1,   295,   296,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,    -1,   313,   314,    -1,   316,
     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,
     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,    -1,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,    -1,   369,   370,   371,   372,   373,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,    -1,   401,    -1,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,
      -1,   418,   419,    -1,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,
     437,   438,    -1,    -1,   441,   442,   443,   444,   445,    -1,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
      -1,   458,    -1,    -1,   461,   462,   463,   464,   465,   466,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   478,   479,   480,   481,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    -1,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    -1,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      -1,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    -1,    95,    96,    97,    98,    -1,    -1,    -1,   102,
      -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,    -1,   117,    -1,   119,   120,   121,   122,
     123,   124,    -1,   126,   127,   128,   129,   130,    -1,    -1,
     133,   134,   135,   136,   137,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,    -1,   152,
     153,   154,   155,   156,    -1,    -1,   159,    -1,   161,   162,
     163,   164,    -1,   166,    -1,   168,   169,    -1,   171,   172,
     173,   174,   175,   176,    -1,   178,    -1,    -1,    -1,   182,
      -1,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,    -1,   197,   198,   199,   200,   201,   202,
      -1,   204,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,    -1,   215,    -1,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,    -1,   235,   236,   237,    -1,    -1,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,    -1,    -1,   272,
     273,   274,   275,    -1,    -1,   278,   279,   280,   281,   282,
      -1,   284,   285,    -1,    -1,   288,   289,   290,    -1,    -1,
     293,    -1,   295,   296,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,    -1,
     313,   314,    -1,   316,   317,   318,    -1,   320,   321,   322,
     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,
     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,    -1,   350,   351,   352,
     353,   354,   355,    -1,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,
     373,    -1,   375,    -1,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,    -1,   401,    -1,
     403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,
      -1,   414,   415,    -1,    -1,   418,   419,    -1,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,
      -1,   434,   435,   436,   437,   438,    -1,    -1,   441,   442,
     443,   444,   445,    -1,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,    -1,   458,    -1,    -1,   461,   462,
     463,   464,   465,   466,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   478,   479,   480,   481,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      -1,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      -1,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      -1,    -1,    -1,   102,    -1,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,    -1,   117,    -1,
     119,   120,   121,   122,   123,   124,    -1,   126,   127,   128,
     129,   130,    -1,    -1,   133,   134,   135,   136,   137,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,    -1,   152,   153,   154,   155,   156,    -1,    -1,
     159,    -1,   161,   162,   163,   164,    -1,   166,    -1,   168,
     169,    -1,   171,   172,   173,   174,   175,   176,    -1,   178,
      -1,    -1,    -1,   182,    -1,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,    -1,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,    -1,   215,    -1,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,    -1,
      -1,   230,   231,   232,   233,    -1,   235,   236,   237,    -1,
      -1,   240,   241,   242,   243,   244,    -1,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,    -1,    -1,   272,   273,   274,   275,    -1,    -1,   278,
     279,   280,   281,   282,    -1,   284,   285,    -1,    -1,   288,
     289,   290,    -1,    -1,   293,    -1,   295,   296,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,    -1,   313,   314,    -1,   316,   317,   318,
      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,
     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
      -1,   350,   351,   352,   353,   354,   355,    -1,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,
     369,   370,   371,   372,   373,    -1,   375,    -1,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
     399,    -1,   401,    -1,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,
     419,    -1,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,
      -1,    -1,   441,   442,   443,   444,   445,    -1,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,    -1,   458,
      -1,    -1,   461,   462,   463,   464,   465,   466,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
     479,   480,   481
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    20,    30,    32,    33,    48,    57,    69,    80,    92,
      94,   112,   126,   136,   142,   150,   152,   153,   166,   195,
     210,   236,   313,   316,   345,   354,   368,   375,   379,   389,
     401,   405,   441,   446,   460,   484,   498,   509,   510,   511,
     512,   513,   520,   531,   532,   533,   534,   551,   596,   606,
     609,   612,   615,   617,   618,   622,   629,   631,   638,   642,
     643,   644,   651,   655,   670,   672,   673,   676,   678,   679,
     680,   681,   682,   683,   734,   735,   879,   881,   882,   887,
     890,   896,   897,   899,   418,   463,   880,   199,   361,   369,
     405,   452,   880,     3,    20,    21,    22,    23,    24,    25,
      26,    27,    29,    30,    31,    39,    40,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    55,
      56,    57,    58,    60,    63,    64,    65,    66,    67,    69,
      70,    71,    72,    73,    75,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    88,    89,    90,    91,    92,
      93,    95,    96,    97,    98,   102,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   117,   119,   120,   121,
     122,   123,   124,   126,   127,   128,   129,   130,   133,   134,
     135,   136,   137,   139,   140,   141,   143,   144,   145,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     159,   161,   162,   163,   164,   166,   168,   169,   171,   172,
     173,   174,   175,   176,   178,   180,   181,   182,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     197,   198,   199,   200,   201,   202,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   215,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   230,   231,
     232,   233,   235,   236,   237,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   272,   273,   274,   275,
     277,   278,   279,   280,   281,   282,   284,   285,   288,   289,
     290,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   320,   321,   322,   323,
     324,   325,   327,   328,   329,   330,   331,   332,   333,   334,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     369,   370,   371,   372,   373,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   403,   404,   406,   407,   408,   409,   410,   411,   412,
     414,   415,   418,   419,   420,   421,   422,   424,   425,   426,
     427,   428,   429,   430,   431,   434,   435,   436,   437,   438,
     441,   442,   443,   444,   445,   446,   447,   449,   450,   451,
     452,   453,   454,   455,   458,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   599,   600,   601,   792,
     864,   868,   871,   880,    51,   498,   546,   176,   237,   291,
     361,   409,   411,   427,   433,   436,   594,   650,     3,    28,
     245,   316,   398,   599,   862,   868,    22,    75,    91,   145,
     155,   167,   172,   199,   244,   248,   311,   325,   358,   361,
     369,   372,   391,   405,   412,   421,   427,   452,   623,   624,
     627,   880,   862,    94,   450,   498,   596,   618,   634,   638,
     651,   678,   881,   109,    69,   210,   109,     5,   671,   867,
     868,   671,   868,   862,    28,   414,   418,   868,   888,   889,
     898,   880,    28,   131,   690,   691,   176,   237,   361,   373,
     414,   891,   892,   898,   880,   446,   678,   683,   898,     5,
     287,   747,   859,   868,   869,   171,   498,   884,   498,   333,
     684,   685,   862,   684,   679,   680,     0,   501,   450,   632,
     121,   209,   438,   146,   214,   292,   432,   693,   694,   679,
     681,   682,   502,    28,   414,   418,   678,   898,   189,   859,
     862,   189,   859,   189,   747,   189,   859,   498,   496,   500,
     843,   845,   618,   651,   675,   678,   881,   859,   409,   411,
     409,   411,   343,   189,   868,   868,   873,   172,   244,   333,
     369,   405,   452,   610,   199,    28,   862,   250,   421,   108,
     405,   405,   452,   364,     3,    45,    50,    51,    52,    53,
      65,    66,    75,    83,    95,   102,   113,   114,   135,   163,
     169,   171,   175,   189,   191,   205,   212,   213,   215,   218,
     219,   221,   231,   233,   245,   264,   265,   266,   274,   279,
     295,   297,   330,   352,   356,   376,   380,   383,   398,   407,
     414,   415,   426,   447,   450,   599,   602,   628,   758,   759,
     761,   763,   765,   767,   769,   770,   771,   773,   774,   775,
     777,   778,   872,   189,   625,   873,   189,   860,   862,   189,
     862,   498,   630,   291,   594,   634,     3,    49,    50,    52,
      53,    65,    66,    73,   113,   114,   151,   157,   163,   180,
     181,   206,   212,   213,   215,   245,   264,   266,   270,   277,
     279,   294,   298,   312,   315,   330,   356,   376,   383,   398,
     400,   414,   415,   420,   422,   426,   446,   447,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   599,
     603,   635,   637,   638,   640,   641,   632,   867,   671,   867,
     487,   498,   498,   674,   481,   220,   500,   286,     4,     6,
       7,     8,     9,    10,    36,    50,    52,    53,    61,    62,
      65,    66,    73,    75,    99,   100,   101,   102,   103,   104,
     105,   113,   114,   116,   151,   157,   158,   163,   180,   181,
     212,   213,   215,   238,   239,   264,   266,   271,   276,   277,
     279,   288,   298,   312,   330,   356,   374,   383,   400,   414,
     415,   420,   422,   423,   426,   439,   447,   482,   489,   490,
     491,   496,   498,   503,   505,   506,   679,   724,   762,   765,
     768,   769,   770,   772,   773,   774,   777,   778,   789,   791,
     792,   793,   795,   809,   810,   817,   837,   842,   849,   850,
     851,   864,   865,   866,   867,   868,   848,   850,   891,   891,
     867,   891,   481,   170,   416,   487,   498,   859,   491,   845,
       3,   169,   171,   450,   638,   883,   885,   169,   886,   789,
     821,   822,   868,   684,   502,   498,   875,   499,   499,   511,
     859,   170,   216,   619,   747,    28,   131,   689,   689,    55,
     689,   160,   165,   234,   283,   699,   701,   702,   727,   729,
     730,   731,   693,   694,   498,   481,   220,   151,    24,    30,
     136,   290,   341,   345,   375,   443,   525,   528,   529,   341,
     151,    37,    56,   107,   198,   249,   257,   269,   300,   341,
     347,   369,   375,   389,   514,   517,   528,   151,   341,   375,
     528,   151,   341,   375,   528,     3,    28,    45,    51,    75,
      83,    95,   102,   131,   169,   171,   175,   191,   205,   218,
     219,   221,   231,   233,   245,   265,   274,   295,   297,   352,
     380,   398,   407,   426,   448,   450,   491,   499,   599,   604,
     789,   824,   825,   870,   876,   789,   844,     3,    28,    32,
      33,    34,    35,    36,    37,    38,    41,    54,    59,    61,
      62,    68,    74,    76,    87,    94,    99,   100,   101,   103,
     104,   105,   116,   118,   125,   131,   132,   138,   142,   146,
     158,   160,   165,   167,   170,   177,   179,   183,   196,   203,
     214,   216,   228,   229,   234,   238,   239,   271,   276,   283,
     286,   287,   291,   292,   309,   319,   326,   335,   348,   349,
     368,   374,   385,   402,   405,   413,   416,   417,   423,   432,
     433,   439,   440,   446,   448,   456,   457,   459,   460,   599,
     603,   605,   863,   877,   843,   499,   498,   583,   594,   271,
     613,   500,   874,    37,   452,   189,   859,   189,   598,   859,
     859,   859,    83,   647,   464,    84,   128,   303,   410,   449,
     776,   776,   776,   498,   764,   764,   315,   498,   766,   151,
     498,    65,    66,   776,   764,   761,   462,   484,   498,   779,
     498,   779,    59,   348,   502,   626,   498,    36,   760,   498,
     110,   111,   186,   187,   251,   252,   253,   254,   255,   256,
     259,   260,   365,   366,   478,   479,   498,   780,   781,   782,
     783,   784,   785,   786,   787,   788,   764,   151,   502,   626,
     151,   502,   626,   151,   286,   822,   343,   405,   499,   502,
       4,   158,   286,   423,   489,   490,   516,   519,   633,   635,
     636,   639,   866,   867,   634,   498,   541,   545,   516,   639,
     893,   895,   824,   759,   826,    37,   232,   868,   498,   846,
     496,   789,   841,   498,   498,   165,   498,   498,   679,   498,
     498,   498,   789,   498,   498,   498,   498,   498,   498,   498,
     498,   498,   789,   789,   789,   147,   852,   853,   822,   823,
     679,   789,   821,   811,   812,   813,   868,   869,     9,   846,
     845,   498,   867,   498,   866,   867,     3,     8,    11,    15,
      16,    17,    18,    19,    34,    37,    42,    49,    74,   175,
     191,   196,   218,   219,   233,   271,   274,   288,   291,   380,
     482,   485,   486,   487,   489,   490,   491,   492,   493,   494,
     815,   816,   817,   819,   461,   796,   846,   297,   789,   502,
     216,   686,   498,   867,   846,   500,   845,   686,     3,   116,
     237,   516,   778,   867,   894,    98,   116,   895,   116,   895,
     859,   499,   502,   632,   502,   499,   685,   860,    37,   875,
     619,   653,   859,   375,    37,   868,   681,   681,    28,   491,
     695,   696,   789,   681,   162,   268,   715,   223,   269,   329,
     378,   438,     4,     9,    28,   710,   789,   489,   490,   711,
     712,   789,   791,   727,   728,   702,   701,   699,   700,   165,
     730,   281,   732,   699,   727,   822,   232,   859,    68,    76,
      87,   167,   189,   319,   433,   565,   575,   590,   868,    76,
      87,   677,    87,   677,   498,   416,   498,   563,   243,   436,
     563,    87,   502,   416,   859,   761,   516,    55,   518,   516,
     516,   107,   249,   257,    55,   416,   460,   484,   515,   262,
     361,   515,   517,   747,    87,   416,   677,   361,   859,   416,
     361,   824,   824,   825,   499,   502,   693,   694,    13,    14,
     497,   507,   416,   582,   587,   868,   460,   544,   333,   405,
     452,   151,    94,   551,   614,   615,   644,   899,   863,   500,
     143,   859,   271,   514,   616,   271,    37,   498,   583,   583,
     498,   611,   189,   577,   648,   868,   498,   822,   866,   628,
     826,   776,   776,    36,   760,   414,   414,   866,   866,   759,
     757,   868,   496,   496,   866,   866,   416,   416,   416,   416,
     625,   873,   860,   862,   862,   873,   499,   594,   189,   598,
     859,   634,   640,     4,   866,     4,   866,   543,   550,   877,
      51,    96,   122,   140,   144,   166,   169,   184,   276,   284,
     327,   547,   502,   499,   502,   499,   502,   675,   822,   843,
     823,   456,   838,   839,   789,   822,   498,   866,   866,     3,
     780,   781,   782,   783,   784,   785,   786,   787,   827,   828,
     867,   866,   866,   789,     8,    16,    17,    18,    19,   485,
     486,   487,   489,   490,   491,   492,   493,   494,   815,   820,
     868,   789,   829,   489,   490,   498,   790,   791,   817,   831,
     499,   822,   789,   821,   832,   789,    54,   170,   229,   417,
     789,   822,   835,   789,   498,   868,   343,   857,   497,   499,
     502,   502,   504,   507,   822,   789,   788,   788,   759,   789,
     789,   789,   789,   789,   789,     5,   877,   878,   414,    41,
     402,   847,   873,   789,   789,   498,   679,   836,   131,   158,
     271,   276,   281,   423,   434,   789,   276,   498,   789,   416,
      49,   175,   191,   196,   233,   380,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,    28,    35,   385,   814,
     179,   161,   797,   356,   498,   810,   851,   176,   237,   405,
     409,   411,   436,   687,   859,   170,   736,   824,   491,   736,
     498,   867,   499,   859,   883,   531,   859,   789,   499,   498,
     440,   621,   116,   299,   498,   652,   678,    37,   498,   657,
     666,   667,   669,   868,   868,    38,   125,   697,   697,   502,
     440,   697,   356,   357,   489,   490,   712,   714,   791,   378,
     223,   287,   308,   308,   502,   493,     4,   713,   866,   713,
     356,   357,   714,   858,   859,   275,   382,   733,   728,   700,
     499,   341,   528,   498,   189,   575,   862,   223,   271,   223,
     440,   498,   568,   759,   862,   868,   189,   862,   189,   868,
      24,   136,   375,   524,   527,   559,   573,   877,   862,   567,
     586,   877,   862,   525,   862,   341,   375,   514,   528,   516,
     873,   862,   516,   873,   862,   516,   341,   375,   528,   862,
     862,   862,   862,   341,   375,   528,   862,   862,   693,   693,
     693,   448,   825,   190,   346,   692,   789,   789,   789,   844,
     324,   540,   499,   502,   284,   170,   416,   535,   452,   598,
     859,   859,   868,   291,   594,   863,   498,   498,   151,   151,
     150,   678,   233,   565,   575,   578,   581,   591,   593,   868,
     460,   462,   570,   460,   649,   499,   824,    37,   271,   286,
     822,   499,   499,   626,   499,   496,   481,   481,   499,   499,
     499,   502,   759,   866,   497,   866,   499,   499,   781,   783,
     784,   785,   784,   785,   785,   626,   626,   286,   626,   405,
     271,    37,   499,   502,   491,   498,   516,   542,   639,    37,
     539,   867,   539,   271,   276,   327,   539,   539,   893,   759,
     499,   497,   789,   138,   839,   840,    37,   499,   789,   499,
     499,   499,   170,   499,   499,   502,   499,   500,   309,   830,
     499,   790,   790,   789,    11,    16,    17,    18,    19,   196,
     218,   288,   485,   486,   487,   489,   490,   491,   492,   493,
     494,   817,   790,   499,   499,   165,   170,   833,   834,   502,
     499,    37,   835,   822,   835,   835,   170,   499,    37,   860,
     861,   498,   789,   854,   846,   789,   811,   789,   499,   499,
     481,   790,   790,   144,   822,   170,   131,   158,   276,   281,
     423,   434,   498,   144,   820,   789,   402,   847,   789,   836,
     789,   416,   498,   679,   498,   498,   154,   798,   409,   411,
     409,   411,   859,   405,   688,   688,   688,   228,   357,   498,
     679,   737,   738,   739,   740,   747,   748,   792,   794,   795,
     868,   457,   753,   693,   853,   753,   866,   788,   875,   675,
     738,   457,   620,   446,   404,   439,   661,   656,   665,   868,
     286,   658,   868,   662,   669,   502,   736,   487,   846,   483,
     698,   698,   696,   288,   815,   818,   698,     4,   866,   714,
     287,   438,   711,   502,   242,   416,   789,   271,   590,   498,
     151,   498,   568,   199,   587,   588,   552,   584,   552,    24,
     136,   345,   347,   375,   521,   522,   523,   529,   530,   151,
     626,   151,   626,   559,   573,   559,   499,   502,   555,   867,
     499,   502,   487,   500,   416,   361,    87,   416,   677,   361,
     416,   416,   416,   361,   692,   692,   692,   825,   278,   278,
     499,   497,   392,   393,   549,   867,   582,   540,   859,    37,
     498,   583,   613,   343,   405,   607,   608,   867,   587,   859,
     598,   859,   862,   460,   597,   859,   499,   502,   284,   563,
     284,   286,   562,   563,    37,   499,   405,   789,   151,   859,
     499,   760,   866,   779,   779,   760,   868,   497,   497,   873,
     151,   543,   537,   548,   639,   867,   867,   276,   587,   491,
     587,   867,   867,   413,   789,   142,   759,   499,   789,   789,
     820,   789,   833,   759,   790,   790,   790,   790,   790,   131,
     271,   281,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   789,   789,   834,   833,   759,   499,   499,   499,
     822,   759,   502,   499,   789,   854,   855,   856,    37,   499,
     788,   789,    34,    34,   789,   499,   789,   170,   498,   826,
     789,   499,   144,   790,   790,   144,   144,   789,   789,   694,
     457,   296,   802,   688,   688,   688,   688,   859,   859,   859,
     679,   748,   170,   679,   739,   740,    37,   741,   742,   868,
     502,    95,   171,   205,   221,   231,   265,   352,   744,   742,
      37,   741,   743,   868,   484,   752,   845,   789,   179,   716,
     692,   857,   716,   499,   499,   789,   349,   660,   445,   499,
     502,   846,    85,   660,   499,   502,   657,   620,   789,   162,
     227,   498,   698,   287,   859,   862,   499,   151,   588,   575,
     588,   552,   577,   502,   499,   118,   203,   269,   271,   574,
      68,    74,    87,   116,   118,   174,   203,   271,   276,   319,
     335,   433,   440,   557,   558,   569,   174,   116,   188,   271,
     563,   515,   108,   116,   174,   271,   391,   394,   517,   563,
     375,   523,   427,   862,   868,   527,   586,     3,    45,    51,
      75,    83,    95,   102,   169,   171,   175,   191,   205,   218,
     219,   221,   231,   233,   245,   265,   270,   274,   288,   295,
     297,   352,   376,   380,   398,   407,   426,   450,   489,   490,
     516,   553,   589,   599,   605,   759,   818,   867,   870,   877,
     862,   862,   862,   862,   862,   862,   862,   862,   862,   862,
     499,   499,   499,   693,   515,   549,   498,   678,   581,   649,
     594,   189,   859,   499,   502,   499,   616,    37,   498,   630,
     108,   269,   572,   570,   578,    80,   678,   678,   577,   440,
     646,   497,   759,   626,   598,   499,   502,   587,   789,   499,
     499,   834,   170,   131,   281,   498,   499,   499,   502,   499,
     868,   789,   789,   789,   826,   499,   789,    34,    34,   789,
     789,   144,   499,   499,   789,   498,   803,   868,   859,   859,
     859,   859,   742,   743,   498,   499,   868,   869,   407,   707,
     708,   498,   739,   221,   295,   745,   739,   745,   221,   744,
     745,   221,   708,   498,   868,   708,   498,   293,    55,   183,
     725,   499,   725,   867,   849,   678,   299,   678,   656,   286,
     498,   654,   487,   669,   660,   820,   552,   575,   499,   499,
     460,   580,   119,   192,   201,   118,   442,   498,   873,   862,
     790,    31,    55,   595,   119,   192,   118,   276,   223,   859,
     580,    82,   595,   189,   276,   516,   789,   595,   276,   489,
     490,   519,   868,   759,   626,   626,   245,   398,   870,   874,
     487,   416,   416,   692,   541,   440,   536,   538,   587,   597,
     499,    37,   405,   271,   498,   867,   649,   150,   678,   581,
     597,   108,   148,   197,   562,   121,   136,   318,   460,   900,
     286,   645,   868,   498,    37,   548,   790,   170,   498,   826,
     854,   499,   789,   789,   789,   499,   804,   868,   749,   750,
     794,   741,   498,     4,     9,   703,   705,   706,   868,   861,
     739,   286,   440,   746,   739,   221,   739,   754,   755,   868,
     498,   754,   868,    28,    97,   180,   355,   491,   498,   717,
     718,   719,   720,   721,   722,   723,   789,   789,   459,   799,
     867,   799,   502,   661,    87,   498,   659,   668,   794,   868,
     132,   789,   499,   335,   580,   498,   571,   552,   789,   271,
     558,   116,    37,   580,   583,   862,    37,   151,    74,   756,
     874,   493,   553,   862,   862,   499,   515,   123,   499,   570,
     678,   859,   151,    37,   862,   597,   499,    28,    79,    88,
     117,   188,   200,   391,   394,   566,   566,   357,   357,    60,
      68,   237,   859,   668,   790,   826,   499,   305,   805,   499,
     502,    37,   751,   861,   308,   493,   308,   357,   493,   498,
     498,   499,   789,   498,   739,   746,   499,   502,   759,   754,
     499,   498,   377,   498,   499,   502,   800,   801,   868,   326,
     726,   726,   445,   862,   789,   499,   502,    74,   663,   663,
     272,   438,   859,   552,   576,   579,   877,   499,   188,   498,
     247,   592,   188,   873,   440,   526,   493,   427,   541,   867,
     649,   562,   900,   498,   859,   678,   630,   570,    68,   289,
      68,   646,   499,   499,    55,   693,   752,   749,   498,   499,
     868,   703,   861,   755,   756,   499,   822,   498,   822,   719,
     502,    37,   789,   440,   704,   704,   678,   499,   753,   659,
     873,   664,   873,   664,   375,   583,   499,   502,   487,   269,
     564,   498,   554,   789,   171,   304,   381,   286,   560,   561,
     585,   554,   789,   626,   427,    37,   498,   900,   597,   562,
     289,   289,   498,   649,   821,   328,   357,   806,   754,   499,
     502,   499,   499,   499,   718,   499,   801,   803,   359,   663,
     697,   697,   667,   592,   579,   553,   201,   514,   499,   121,
     438,   286,   585,   286,   560,   678,   668,   753,    49,    98,
     429,   789,   807,   808,   807,   499,   499,     9,   342,   709,
     499,   706,   664,   698,   698,   753,   561,   499,   454,    59,
     269,   348,   375,   556,   556,   900,   499,   808,   356,   164,
     314,   164,   314,   499,   498,   697,   552,    23,   116,   276,
     649,    34,     9,   698,   753,   808,   499
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   508,   509,   510,   510,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     511,   511,   511,   511,   511,   511,   511,   511,   511,   511,
     520,   520,   520,   520,   520,   520,   520,   520,   521,   521,
     522,   522,   523,   523,   523,   523,   524,   524,   525,   525,
     525,   525,   525,   525,   525,   525,   525,   525,   525,   525,
     525,   525,   525,   525,   525,   525,   525,   525,   525,   525,
     525,   525,   525,   525,   525,   525,   525,   526,   526,   527,
     527,   527,   527,   528,   528,   529,   530,   530,   530,   617,
     617,   617,   617,   606,   607,   607,   608,   608,   676,   676,
     676,   676,   676,   676,   676,   676,   676,   676,   676,   676,
     676,   677,   677,   651,   652,   652,   652,   652,   652,   653,
     653,   654,   654,   654,   655,   655,   656,   657,   657,   658,
     658,   658,   659,   659,   659,   660,   660,   661,   661,   662,
     662,   663,   663,   664,   664,   665,   665,   666,   666,   667,
     667,   668,   668,   669,   672,   672,   672,   615,   615,   616,
     616,   629,   629,   629,   630,   630,   513,   513,   514,   514,
     515,   515,   515,   516,   516,   516,   516,   517,   517,   517,
     517,   517,   517,   517,   517,   517,   517,   517,   517,   517,
     517,   518,   518,   519,   519,   519,   879,   879,   879,   879,
     879,   879,   880,   880,   880,   551,   551,   551,   552,   552,
     553,   553,   553,   553,   553,   553,   554,   554,   555,   556,
     556,   556,   556,   556,   557,   557,   557,   557,   558,   558,
     558,   558,   558,   558,   558,   558,   558,   558,   559,   560,
     561,   561,   561,   561,   561,   562,   562,   562,   562,   563,
     564,   564,   565,   565,   566,   566,   566,   566,   566,   566,
     566,   566,   567,   567,   568,   569,   569,   569,   569,   570,
     570,   570,   570,   571,   572,   572,   572,   573,   574,   574,
     574,   574,   574,   574,   575,   576,   576,   577,   578,   578,
     578,   579,   579,   580,   580,   581,   581,   581,   582,   583,
     583,   584,   584,   585,   586,   586,   586,   586,   587,   587,
     588,   588,   589,   589,   589,   590,   590,   590,   590,   590,
     590,   591,   591,   592,   592,   592,   592,   593,   594,   594,
     594,   594,   594,   594,   594,   594,   595,   595,   622,   622,
     622,   622,   622,   622,   622,   622,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   624,   624,   624,   624,   624,   624,   624,   625,
     625,   626,   626,   626,   627,   627,   627,   628,   628,   609,
     609,   610,   610,   611,   611,   881,   534,   534,   535,   535,
     536,   536,   537,   537,   538,   538,   539,   539,   540,   540,
     541,   541,   542,   542,   542,   542,   542,   543,   544,   544,
     545,   545,   546,   546,   547,   547,   547,   547,   547,   547,
     547,   547,   547,   547,   547,   547,   547,   547,   548,   549,
     549,   549,   550,   550,   678,   678,   679,   679,   680,   680,
     680,   680,   680,   680,   680,   680,   681,   681,   682,   682,
     682,   682,   682,   682,   682,   683,   683,   683,   684,   684,
     685,   686,   686,   687,   687,   687,   687,   687,   687,   687,
     687,   687,   688,   688,   689,   689,   689,   690,   690,   691,
     691,   692,   692,   692,   693,   693,   694,   694,   694,   695,
     695,   696,   696,   697,   697,   697,   698,   698,   698,   699,
     699,   699,   699,   700,   700,   701,   701,   701,   701,   702,
     702,   703,   703,   703,   703,   703,   703,   704,   704,   705,
     705,   706,   706,   706,   706,   707,   708,   708,   709,   709,
     710,   710,   710,   710,   710,   711,   712,   712,   712,   713,
     713,   714,   714,   715,   715,   716,   716,   716,   716,   717,
     717,   718,   718,   719,   719,   719,   719,   719,   720,   721,
     722,   723,   724,   724,   725,   725,   726,   726,   727,   727,
     728,   728,   729,   729,   730,   731,   731,   731,   731,   732,
     732,   733,   733,   733,   734,   734,   735,   735,   736,   736,
     737,   737,   738,   738,   739,   739,   739,   739,   739,   739,
     739,   740,   740,   740,   740,   740,   740,   741,   741,   741,
     741,   742,   742,   743,   743,   743,   743,   743,   744,   744,
     744,   744,   745,   745,   746,   746,   747,   747,   747,   747,
     748,   748,   749,   750,   750,   751,   751,   752,   752,   753,
     753,   754,   754,   755,   756,   756,   757,   757,   758,   758,
     759,   759,   759,   759,   759,   759,   759,   759,   760,   760,
     760,   761,   761,   761,   761,   761,   761,   761,   762,   762,
     762,   762,   763,   764,   764,   765,   765,   765,   765,   765,
     765,   765,   765,   765,   765,   765,   766,   766,   767,   767,
     768,   768,   769,   770,   771,   771,   772,   772,   773,   774,
     775,   775,   775,   775,   775,   775,   776,   776,   777,   777,
     777,   777,   778,   779,   779,   779,   780,   780,   781,   781,
     782,   782,   783,   783,   784,   784,   785,   785,   786,   786,
     787,   787,   788,   788,   788,   788,   788,   788,   788,   788,
     788,   788,   788,   788,   788,   788,   788,   788,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   789,   789,   789,
     789,   789,   789,   789,   789,   789,   789,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   791,   791,   791,   791,   791,   791,   791,   791,   791,
     791,   791,   791,   792,   792,   792,   792,   792,   792,   792,
     793,   793,   794,   794,   795,   795,   795,   795,   795,   795,
     795,   795,   795,   795,   795,   795,   795,   795,   795,   795,
     795,   795,   795,   795,   795,   795,   795,   795,   795,   795,
     795,   795,   795,   796,   796,   797,   797,   798,   798,   799,
     799,   800,   800,   801,   802,   802,   802,   803,   804,   804,
     805,   805,   806,   806,   806,   807,   807,   808,   808,   808,
     808,   808,   809,   809,   810,   810,   811,   812,   812,   813,
     813,   814,   814,   814,   815,   815,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   817,
     817,   818,   818,   819,   819,   819,   819,   819,   819,   819,
     819,   820,   820,   821,   821,   822,   822,   823,   823,   824,
     824,   825,   825,   825,   826,   826,   827,   827,   828,   828,
     828,   828,   828,   828,   828,   828,   828,   828,   829,   829,
     830,   831,   831,   832,   832,   832,   832,   832,   832,   833,
     834,   835,   835,   835,   836,   836,   837,   838,   838,   839,
     840,   840,   841,   841,   842,   842,   843,   843,   843,   844,
     844,   845,   845,   846,   846,   847,   847,   848,   848,   849,
     849,   850,   850,   851,   851,   851,   851,   851,   852,   852,
     853,   853,   854,   855,   855,   856,   856,   857,   857,   857,
     858,   858,   859,   859,   860,   860,   861,   861,   862,   863,
     864,   864,   865,   865,   865,   865,   865,   865,   865,   865,
     865,   865,   865,   865,   865,   865,   866,   867,   868,   868,
     868,   869,   869,   870,   870,   870,   871,   871,   871,   872,
     872,   872,   873,   873,   874,   874,   875,   875,   876,   877,
     877,   877,   877,   878,   878,   673,   674,   674,   675,   675,
     675,   675,   612,   612,   613,   613,   614,   614,   614,   614,
     644,   644,   645,   646,   646,   647,   647,   648,   648,   649,
     649,   650,   650,   512,   512,   512,   512,   512,   512,   533,
     533,   642,   643,   631,   631,   631,   631,   632,   632,   633,
     633,   633,   634,   634,   634,   634,   634,   635,   635,   635,
     636,   636,   637,   637,   638,   638,   639,   639,   639,   639,
     640,   641,   641,   890,   890,   890,   890,   891,   891,   891,
     891,   892,   892,   892,   892,   893,   893,   894,   894,   894,
     894,   894,   894,   894,   895,   895,   670,   670,   670,   671,
     671,   882,   882,   882,   882,   882,   883,   883,   883,   883,
     883,   884,   884,   885,   885,   886,   886,   618,   619,   619,
     619,   620,   620,   621,   621,   531,   531,   887,   888,   888,
     889,   889,   889,   896,   896,   896,   896,   896,   896,   896,
     896,   897,   897,   898,   898,   532,   899,   899,   899,   899,
     900,   900,   900,   900,   596,   596,   596,   597,   597,   597,
     598,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   599,   599,   599,
     599,   599,   599,   599,   599,   599,   599,   600,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   600,   600,   600,   600,   600,   601,
     601,   601,   601,   601,   601,   601,   601,   601,   601,   601,
     601,   601,   601,   601,   601,   601,   601,   601,   601,   601,
     601,   601,   601,   601,   601,   602,   602,   602,   602,   602,
     602,   602,   602,   602,   602,   602,   602,   602,   602,   602,
     602,   602,   602,   602,   602,   602,   602,   602,   602,   602,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   603,   603,   603,   603,   603,   603,   603,   603,
     603,   603,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   604,
     604,   604,   604,   604,   604,   604,   604,   604,   604,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605,   605,
     605,   605,   605,   605,   605,   605,   605,   605,   605
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     9,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       3,     2,     3,     8,     1,     0,     1,     3,     6,     6,
       8,     6,     8,     6,     8,     6,     8,     8,    10,     8,
      10,     1,     0,     7,     1,     4,     4,     7,     2,     1,
       3,     4,     3,     0,     1,     0,     2,     3,     5,     8,
       5,     0,     5,     5,     7,     2,     0,     1,     1,     1,
       3,     2,     0,     1,     0,     1,     3,     1,     3,     1,
       2,     1,     3,     2,     2,     4,     5,     5,     8,     1,
       0,     3,     9,    12,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     2,     2,     2,     2,
       2,     2,     1,     1,     0,     9,    12,    11,     0,     2,
       1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
       1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
       2,     3,     5,     3,     2,     5,     7,     5,     2,     3,
       1,     1,     2,     2,     0,     3,     4,     4,     0,     3,
       2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     3,     1,     2,     2,     2,     2,
       2,     2,     0,     3,     3,     3,     0,     1,     2,     1,
       2,     2,     2,     2,     3,     1,     3,     1,     1,     1,
       1,     3,     1,     2,     0,     1,     2,     0,     1,     3,
       0,     2,     0,     3,     3,     1,     5,     3,     1,     3,
       1,     2,     1,     4,     5,     5,     6,     3,     7,     4,
      11,     1,     3,     2,     2,     2,     0,     3,     1,     1,
       2,     2,     2,     2,     1,     0,     1,     2,     6,     4,
       6,     4,     6,     8,     4,     6,     1,     1,     1,     1,
       2,     1,     2,     1,     2,     1,     1,     1,     3,     3,
       3,     3,     2,     2,     1,     3,     1,     1,     1,     1,
       3,     1,     1,     0,     1,     1,     1,     1,     3,     8,
       7,     1,     1,     2,     3,     8,    11,     9,     1,     1,
       3,     0,     1,     3,     1,     0,     1,     0,     1,     0,
       1,     3,     1,     1,     1,     3,     0,     2,     2,     0,
       2,     0,     1,     0,     1,     1,     1,     3,     3,     1,
       1,     3,     3,     3,     3,     4,     3,     2,     1,     1,
       1,     1,     1,     3,     1,     1,     3,     3,     1,     2,
       4,     4,     2,     3,     5,     5,     1,     1,    11,    11,
       1,     2,     4,     4,     4,     2,     2,     3,     1,     3,
       6,     2,     0,     3,     3,     4,     4,     4,     4,     3,
       2,     1,     1,     0,     1,     1,     0,     1,     5,     1,
       0,     2,     2,     0,     1,     0,     3,     5,     5,     1,
       3,     4,     3,     1,     1,     0,     2,     2,     0,     2,
       2,     1,     1,     1,     0,     2,     4,     5,     4,     2,
       3,     2,     2,     2,     2,     1,     2,     3,     0,     1,
       0,     5,     1,     4,     6,     2,     1,     0,     4,     0,
       1,     1,     2,     2,     2,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     0,     1,
       3,     1,     2,     1,     1,     1,     1,     1,     2,     4,
       4,     5,     1,     1,     2,     0,     2,     0,     1,     3,
       1,     0,     1,     2,     3,     2,     4,     2,     3,     2,
       0,     1,     2,     0,     4,     5,     1,     2,     2,     0,
       1,     3,     1,     2,     3,     3,     3,     3,     3,     1,
       4,     3,     4,     5,     4,     5,     4,     5,     2,     4,
       1,     1,     0,     1,     4,     5,     4,     0,     2,     2,
       2,     1,     1,     0,     4,     2,     1,     2,     2,     4,
       2,     6,     2,     1,     3,     4,     0,     2,     0,     2,
       0,     1,     3,     3,     2,     0,     2,     4,     1,     1,
       2,     3,     5,     6,     2,     3,     5,     5,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
       3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
       3,     2,     1,     3,     3,     3,     3,     3,     4,     3,
       4,     3,     4,     5,     6,     6,     7,     6,     7,     6,
       7,     3,     4,     4,     6,     1,     4,     1,     3,     2,
       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
       7,     1,     1,     2,     2,     2,     4,     1,     2,     1,
       2,     2,     4,     3,     6,     7,     9,     7,     7,     4,
       5,     1,     1,     1,     5,     1,     1,     4,     1,     4,
       1,     4,     1,     4,     1,     1,     1,     1,     1,     1,
       6,     6,     4,     4,     4,     4,     6,     5,     5,     5,
       4,     6,     4,     5,     0,     5,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     2,     2,     0,     1,     4,     2,     2,     2,
       2,     2,     4,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       4,     1,     4,     1,     4,     1,     2,     1,     2,     1,
       2,     1,     3,     1,     3,     1,     2,     1,     0,     1,
       3,     1,     3,     3,     1,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     4,     3,
       2,     3,     0,     3,     3,     2,     2,     1,     0,     2,
       2,     3,     2,     1,     1,     3,     5,     1,     2,     4,
       2,     0,     1,     0,     1,     2,     2,     3,     5,     1,
       0,     1,     2,     0,     2,     1,     0,     1,     0,     1,
       3,     1,     2,     3,     2,     1,     3,     5,     4,     2,
       1,     0,     3,     1,     3,     1,     2,     4,     2,     0,
       1,     3,     1,     2,     1,     3,     1,     2,     1,     1,
       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,
       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,
       1,     1,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     4,     7,     2,     0,     1,     1,     1,     1,
      13,    16,     1,     2,     0,     1,     0,     1,     0,     2,
       0,     1,     0,     6,     8,     6,     8,     6,     8,     2,
       1,     4,     3,     2,     4,     3,     5,     1,     0,     1,
       1,     0,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,
       2,     1,     1,     2,     3,     3,     3,     1,     3,     3,
       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,
       5,     1,     1,     1,     1,     3,     2,     2,     3,     1,
       1,     4,     5,     5,     4,     6,     1,     1,     1,     1,
       1,     1,     0,     1,     3,     1,     0,     7,     1,     2,
       3,     2,     0,     2,     0,     2,     4,     2,     1,     1,
       1,     2,     3,     2,     2,     2,     2,     3,     4,     2,
       1,     1,     1,     1,     3,     2,     9,    11,    12,    14,
       3,     4,     4,     0,     7,    10,     9,     2,     3,     0,
       4,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 468 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 15003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 484 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 15019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 496 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 15030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 39: /* stmt: %empty  */
#line 539 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 15036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 40: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 41: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 15146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 15152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 15164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 15172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 15180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 15195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 15203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 15211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 15219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 15313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 15349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 15369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using opt_drop_behavior  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) def;
					n->behavior = (yyvsp[0].dbehavior);
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-3].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-2].node);
					def->raw_default = (yyvsp[-1].node);
					def->location = (yylsp[-6]);
					(yyval.node) = (PGNode *)n;
				}
#line 15450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 320 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ADD_P TableConstraint  */
#line 329 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 15473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 337 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 15491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 352 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 15502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 360 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 370 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: SET LOGGED  */
#line 380 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 15538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: SET UNLOGGED  */
#line 387 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 15548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: SET reloptions  */
#line 394 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: RESET reloptions  */
#line 402 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: alter_generic_options  */
#line 409 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 15581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_using: USING a_expr  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 15587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_using: %empty  */
#line 420 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 15593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_generic_option_elem: generic_option_elem  */
#line 426 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 15601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_generic_option_elem: SET generic_option_elem  */
#line 430 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 15610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 435 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 15619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_generic_option_elem: DROP generic_option_name  */
#line 440 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 15627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmds: alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 448 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 453 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 15645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* opt_set_data: SET DATA_P  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 15651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* opt_set_data: SET  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 15657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* opt_set_data: %empty  */
#line 459 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 15663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 15673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 15683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 15693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 15703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* CreateEnumStmt: CREATE_P TYPE_P any_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
                                {
					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
					n->typeName = (yyvsp[-5].list);
					n->vals = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 15714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* opt_enum_val_list: enum_val_list  */
#line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 15720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* opt_enum_val_list: %empty  */
#line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
                                                                                { (yyval.list) = NIL; }
#line 15726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* enum_val_list: Sconst  */
#line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 15732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* enum_val_list: enum_val_list ',' Sconst  */
#line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
                                { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 15738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 15907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 15921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 15927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 15933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* InsertStmt: opt_with_clause INSERT INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 15945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* insert_rest: SelectStmt  */
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 15955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 15966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 15976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 15987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_rest: DEFAULT VALUES  */
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 15997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* insert_target: qualified_name  */
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 16005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* insert_target: qualified_name AS ColId  */
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 16014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 16026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* opt_conf_expr: ON CONSTRAINT name  */
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 16038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_conf_expr: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 16046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* opt_with_clause: with_clause  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 16052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* opt_with_clause: %empty  */
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 16058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* insert_column_item: ColId opt_indirection  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 16070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* set_clause: set_target '=' a_expr  */
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 16079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 16104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 16117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 16130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* opt_on_conflict: %empty  */
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 16138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 16183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* returning_clause: RETURNING target_list  */
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* returning_clause: %empty  */
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 16195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* override_kind: USER  */
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 16201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* override_kind: SYSTEM_P  */
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 16207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* set_target_list: set_target  */
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 16213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* set_target_list: set_target_list ',' set_target  */
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 16219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_collate: COLLATE any_name  */
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_collate: %empty  */
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 16231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_class: any_name  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_class: %empty  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 16243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_column_list: insert_column_item  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 16249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 16255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause_list: set_clause  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 16261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause_list: set_clause_list ',' set_clause  */
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 16267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* set_clause_list_opt_comma: set_clause_list  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* index_params: index_elem  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 16285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* index_params: index_params ',' index_elem  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 16291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_target: ColId opt_indirection  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 16303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 16352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 16366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 16372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 16378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 16409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 16429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 16435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 16441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 16471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 16477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 16483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 16489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 16495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 16501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 16507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 16516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 16522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 16530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 16538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 16546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 16554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 16562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 16570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 16578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 16586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 16594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 16602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 16611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 16619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 16627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 16635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 16641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 16647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 16653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 16659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 16665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 16676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 16686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 16696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 16707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 16718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 16729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 16735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 16741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 16747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 16764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 16781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 16798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 16804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 16832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 16838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 16844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 16850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 16856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 16862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 16868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 16880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 16886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 16892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 16898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 16904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 16910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 16916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 16927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 16939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 16967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 16978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 16992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 17006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 17034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* ColConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 17060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* ColConstraintElem: GENERATED generated_when AS '(' a_expr ')' VIRTUAL  */
#line 212 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_GENERATED;
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 17087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 235 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 254 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 17114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* key_update: ON UPDATE key_action  */
#line 260 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 17120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* key_actions: key_update  */
#line 266 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 17126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* key_actions: key_delete  */
#line 268 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 17132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* key_actions: key_update key_delete  */
#line 270 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 17138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* key_actions: key_delete key_update  */
#line 272 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 17144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* key_actions: %empty  */
#line 274 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 17150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* OnCommitOption: ON COMMIT DROP  */
#line 284 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 17156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 285 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 17162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 286 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 17168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* OnCommitOption: %empty  */
#line 287 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 17174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* reloptions: '(' reloption_list ')'  */
#line 292 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* opt_no_inherit: NO INHERIT  */
#line 296 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 17186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* opt_no_inherit: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 17192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 17203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TableConstraint: ConstraintElem  */
#line 309 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* TableLikeOption: COMMENTS  */
#line 314 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 17215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* TableLikeOption: CONSTRAINTS  */
#line 315 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 17221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* TableLikeOption: DEFAULTS  */
#line 316 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 17227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* TableLikeOption: IDENTITY_P  */
#line 317 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 17233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* TableLikeOption: INDEXES  */
#line 318 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 17239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* TableLikeOption: STATISTICS  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 17245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* TableLikeOption: STORAGE  */
#line 320 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 17251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* TableLikeOption: ALL  */
#line 321 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 17257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* reloption_list: reloption_elem  */
#line 327 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 17263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* reloption_list: reloption_list ',' reloption_elem  */
#line 328 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 17269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* ExistingIndex: USING INDEX index_name  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 17275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* ConstraintAttr: DEFERRABLE  */
#line 338 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* ConstraintAttr: NOT DEFERRABLE  */
#line 345 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 352 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 359 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptWith: WITH reloptions  */
#line 370 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* OptWith: WITH OIDS  */
#line 371 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 17331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* OptWith: WITHOUT OIDS  */
#line 372 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 17337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* OptWith: %empty  */
#line 373 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 17343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* definition: '(' def_list ')'  */
#line 377 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 382 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 17355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 383 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 17361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* TableLikeOptionList: %empty  */
#line 384 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 17367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* generic_option_name: ColLabel  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 17373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 394 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 17379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ConstraintAttributeElem: DEFERRABLE  */
#line 395 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 17385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 396 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 17391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 397 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 17397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ConstraintAttributeElem: NOT VALID  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 17403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ConstraintAttributeElem: NO INHERIT  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 17409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* columnDef: ColId Typename ColQualList  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 17431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* def_list: def_elem  */
#line 437 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 17437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* def_list: def_list ',' def_elem  */
#line 438 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 17443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* index_name: ColId  */
#line 442 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 17449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* TableElement: columnDef  */
#line 446 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 17455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* TableElement: TableLikeClause  */
#line 447 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* TableElement: TableConstraint  */
#line 448 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 17467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* def_elem: ColLabel '=' def_arg  */
#line 453 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 17475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* def_elem: ColLabel  */
#line 457 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 17483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* opt_definition: WITH definition  */
#line 464 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* opt_definition: %empty  */
#line 465 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 17495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* OptTableElementList: TableElementList  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* OptTableElementList: TableElementList ','  */
#line 471 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* OptTableElementList: %empty  */
#line 472 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 17513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* columnElem: ColId  */
#line 477 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 17521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* opt_column_list: '(' columnList ')'  */
#line 484 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* opt_column_list: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 17533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* ColQualList: ColQualList ColConstraint  */
#line 490 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 17539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* ColQualList: %empty  */
#line 491 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 17545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* key_delete: ON DELETE_P key_action  */
#line 495 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 17551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* reloption_elem: ColLabel '=' def_arg  */
#line 501 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 17559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* reloption_elem: ColLabel  */
#line 505 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 17567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 17576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* reloption_elem: ColLabel '.' ColLabel  */
#line 514 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 17584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* columnList: columnElem  */
#line 521 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 17590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* columnList: columnList ',' columnElem  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* columnList_opt_comma: columnList  */
#line 526 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* columnList_opt_comma: columnList ','  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 17608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* func_type: Typename  */
#line 531 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 17614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 539 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 17635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 550 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 17652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 564 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 17669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 577 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 17687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 592 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 17704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 605 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 17722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 620 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 17744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* TableElementList: TableElement  */
#line 642 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 17752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* TableElementList: TableElementList ',' TableElement  */
#line 646 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 17760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* key_match: MATCH FULL  */
#line 653 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 17768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* key_match: MATCH PARTIAL  */
#line 657 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 17780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* key_match: MATCH SIMPLE  */
#line 665 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 17788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* key_match: %empty  */
#line 669 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 17796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 677 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 17807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptTemp: TEMPORARY  */
#line 686 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 17813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptTemp: TEMP  */
#line 687 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 17819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OptTemp: LOCAL TEMPORARY  */
#line 688 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 17825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* OptTemp: LOCAL TEMP  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 17831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* OptTemp: GLOBAL TEMPORARY  */
#line 691 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 17842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* OptTemp: GLOBAL TEMP  */
#line 698 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 17853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* OptTemp: UNLOGGED  */
#line 704 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 17859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* OptTemp: %empty  */
#line 705 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 17865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* generated_when: ALWAYS  */
#line 710 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 17871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* generated_when: BY DEFAULT  */
#line 711 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 17877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 17947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 17961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 17975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 17989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 17995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 18001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 18007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 18013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 18019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 18025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 18031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 18037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 18043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 18049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* drop_type_any_name: STATISTICS  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 18061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 18067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 18073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 18079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 18085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* drop_type_name: ACCESS METHOD  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 18091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* drop_type_name: EVENT TRIGGER  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 18097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* drop_type_name: EXTENSION  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 18103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* drop_type_name: PUBLICATION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 18115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* drop_type_name: SCHEMA  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 18121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 18127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 18163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 18169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 18175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 18181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 18187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
				
			}
#line 18202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				n->relpersistence=(yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				(yyval.node) = (PGNode *)n;
                         }
#line 18216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* param_list: '(' ')'  */
#line 42 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 18224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* param_list: '(' func_arg_list ')'  */
#line 46 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 18232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 18247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 18279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* CopyStmt: COPY '(' PreparableStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 18302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 18308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 18314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 18322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 18328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 18350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 18356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 18362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 18368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 18374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 18380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 18398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 18404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 18410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 18416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 18422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 18444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 18456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 18464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 18470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 18478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 18486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 18494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 18502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 18510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 18518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 18526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 18542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 18550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 18558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 18566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* copy_opt_item: FORCE NULL_P columnList  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 18574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* copy_opt_item: ENCODING Sconst  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 18582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 18588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* copy_file_name: Sconst  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* copy_file_name: STDIN  */
#line 210 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 18600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* copy_file_name: STDOUT  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 18606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 18628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 18651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 18687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 18699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 18723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 158 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 174 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* simple_select: values_clause_opt_comma  */
#line 188 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* simple_select: TABLE relation_expr  */
#line 190 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 18801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 209 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 213 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 18825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* with_clause: WITH cte_list  */
#line 234 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* with_clause: WITH_LA cte_list  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 18847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* with_clause: WITH RECURSIVE cte_list  */
#line 248 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 18858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* cte_list: common_table_expr  */
#line 257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* cte_list: cte_list ',' common_table_expr  */
#line 258 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 18883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* into_clause: INTO OptTempTableName  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 18897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* into_clause: %empty  */
#line 284 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 18903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 298 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 303 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 321 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 18963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 18972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* OptTempTableName: TABLE qualified_name  */
#line 334 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* OptTempTableName: qualified_name  */
#line 339 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 18990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* opt_table: TABLE  */
#line 345 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 18996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_table: %empty  */
#line 346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 19002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* all_or_distinct: ALL  */
#line 350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 19008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* all_or_distinct: DISTINCT  */
#line 351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* all_or_distinct: %empty  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* distinct_clause: DISTINCT  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 360 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* opt_all_clause: ALL  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 19038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* opt_all_clause: %empty  */
#line 365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 369 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 19050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 370 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 19056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* opt_ignore_nulls: %empty  */
#line 371 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 19062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* opt_sort_clause: sort_clause  */
#line 375 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 19068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* opt_sort_clause: %empty  */
#line 376 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* sort_clause: ORDER BY sortby_list  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 19094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 392 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 19108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* sortby_list: sortby  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 19114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* sortby_list: sortby_list ',' sortby  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 19120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 19146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* opt_asc_desc: ASC_P  */
#line 428 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 19152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* opt_asc_desc: DESC_P  */
#line 429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 19158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* opt_asc_desc: %empty  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 19164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 433 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 19170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 19176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* opt_nulls_order: %empty  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 19182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* select_limit: limit_clause offset_clause  */
#line 439 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 19188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* select_limit: offset_clause limit_clause  */
#line 440 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 19194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* select_limit: limit_clause  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 19200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_limit: offset_clause  */
#line 442 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 19206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* opt_select_limit: select_limit  */
#line 446 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* opt_select_limit: %empty  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 19218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* limit_clause: LIMIT select_limit_value  */
#line 452 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 19237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 470 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 19243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 472 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* offset_clause: OFFSET select_offset_value  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 19255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 19261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* sample_count: FCONST '%'  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 19269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* sample_count: ICONST '%'  */
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* sample_count: FCONST PERCENT  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 19285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* sample_count: ICONST PERCENT  */
#line 500 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 19293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* sample_count: ICONST  */
#line 504 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 19301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* sample_count: ICONST ROWS  */
#line 508 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 19309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 515 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* sample_clause: %empty  */
#line 519 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 19323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* opt_sample_func: ColId  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 19329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* opt_sample_func: %empty  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 19335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 19343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* tablesample_entry: sample_count  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 19351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 540 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 19359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 19367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* opt_tablesample_clause: tablesample_clause  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* opt_tablesample_clause: %empty  */
#line 558 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* opt_repeatable_clause: %empty  */
#line 564 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* select_limit_value: a_expr  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* select_limit_value: ALL  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 19414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* select_limit_value: a_expr '%'  */
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 19420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* select_limit_value: FCONST PERCENT  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 19426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* select_limit_value: ICONST PERCENT  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* select_offset_value: a_expr  */
#line 583 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* select_fetch_first_value: c_expr  */
#line 603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* select_fetch_first_value: '+' I_or_F_const  */
#line 605 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 19450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* select_fetch_first_value: '-' I_or_F_const  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* I_or_F_const: Iconst  */
#line 611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 19462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* I_or_F_const: FCONST  */
#line 612 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 19468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* row_or_rows: ROW  */
#line 616 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 19474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* row_or_rows: ROWS  */
#line 617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 19480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* first_or_next: FIRST_P  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 19486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* first_or_next: NEXT  */
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 19492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* group_clause: GROUP_P BY ALL  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 19507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* group_clause: GROUP_P BY '*'  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 19516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* group_clause: %empty  */
#line 657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* group_by_list: group_by_item  */
#line 661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* group_by_list: group_by_list ',' group_by_item  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 19534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* group_by_list_opt_comma: group_by_list  */
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* group_by_list_opt_comma: group_by_list ','  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* group_by_item: a_expr  */
#line 671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* group_by_item: empty_grouping_set  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* group_by_item: cube_clause  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* group_by_item: rollup_clause  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* group_by_item: grouping_sets_clause  */
#line 675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* empty_grouping_set: '(' ')'  */
#line 680 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 19584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 19600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* grouping_or_grouping_id: GROUPING  */
#line 713 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* grouping_or_grouping_id: GROUPING_ID  */
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* having_clause: HAVING a_expr  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* having_clause: %empty  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* qualify_clause: QUALIFY a_expr  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* qualify_clause: %empty  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* for_locking_clause: for_locking_items  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* for_locking_clause: FOR READ_P ONLY  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_for_locking_clause: for_locking_clause  */
#line 733 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_for_locking_clause: %empty  */
#line 734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* for_locking_items: for_locking_item  */
#line 738 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* for_locking_items: for_locking_items for_locking_item  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* for_locking_strength: FOR UPDATE  */
#line 754 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* for_locking_strength: FOR SHARE  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 19710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* for_locking_strength: FOR KEY SHARE  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 19716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* locked_rels_list: OF qualified_name_list  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* locked_rels_list: %empty  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 19728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_nowait_or_skip: NOWAIT  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 768 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 19740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_nowait_or_skip: %empty  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 19746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 779 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* values_clause_opt_comma: values_clause  */
#line 793 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* values_clause_opt_comma: values_clause ','  */
#line 794 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 19778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* from_clause: FROM from_list_opt_comma  */
#line 807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* from_clause: %empty  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 19790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* from_list: table_ref  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* from_list: from_list ',' table_ref  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* from_list_opt_comma: from_list  */
#line 817 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* from_list_opt_comma: from_list ','  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 19824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 19848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* table_ref: joined_table  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 19882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* table_ref: '(' joined_table ')' alias_clause  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 19891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* joined_table: '(' joined_table ')'  */
#line 895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 19899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 912 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 19969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 953 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 19986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* alias_clause: AS ColId '(' name_list_opt_comma ')'  */
#line 969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 19996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* alias_clause: AS ColIdOrString  */
#line 975 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 20005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 20015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* alias_clause: ColId  */
#line 986 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 20024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_alias_clause: alias_clause  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 20030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_alias_clause: %empty  */
#line 993 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 20036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* func_alias_clause: alias_clause  */
#line 1002 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 20044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* func_alias_clause: AS ColId '(' TableFuncElementList ')'  */
#line 1010 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 20062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 20072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* func_alias_clause: %empty  */
#line 1022 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 20080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* join_type: FULL join_outer  */
#line 1027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 20086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* join_type: LEFT join_outer  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* join_type: RIGHT join_outer  */
#line 1029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 20098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* join_type: INNER_P  */
#line 1030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 20104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* join_outer: OUTER_P  */
#line 1034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* join_outer: %empty  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 20122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* join_qual: ON a_expr  */
#line 1048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* relation_expr: qualified_name  */
#line 1054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 20139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* relation_expr: qualified_name '*'  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 20150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* relation_expr: ONLY qualified_name  */
#line 1068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 20161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1075 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* func_table: func_expr_windowless opt_ordinality  */
#line 1107 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 20187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 20208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* rowsfrom_list: rowsfrom_item  */
#line 1135 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1136 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1139 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* opt_col_def_list: %empty  */
#line 1140 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1143 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* opt_ordinality: %empty  */
#line 1144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* where_clause: WHERE a_expr  */
#line 1149 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* where_clause: %empty  */
#line 1150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 20256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* TableFuncElementList: TableFuncElement  */
#line 1156 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* TableFuncElement: ColId Typename opt_collate_clause  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 20294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* opt_collate_clause: COLLATE any_name  */
#line 1187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* opt_collate_clause: %empty  */
#line 1194 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 20312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* colid_type_list: ColId Typename  */
#line 1207 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* Typename: SimpleTypename opt_array_bounds  */
#line 1221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 20337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1233 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 20356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1238 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 20366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* Typename: SimpleTypename ARRAY  */
#line 1244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 20375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1249 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 20385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1254 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 20396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 20407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 20413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1272 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 20419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* opt_array_bounds: %empty  */
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 20425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* SimpleTypename: GenericType  */
#line 1278 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* SimpleTypename: Numeric  */
#line 1279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* SimpleTypename: Bit  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* SimpleTypename: Character  */
#line 1281 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* SimpleTypename: ConstDatetime  */
#line 1282 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* SimpleTypename: ConstInterval opt_interval  */
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* ConstTypename: Numeric  */
#line 1308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* ConstTypename: ConstBit  */
#line 1309 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* ConstTypename: ConstCharacter  */
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* ConstTypename: ConstDatetime  */
#line 1311 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* GenericType: type_name_token opt_type_modifiers  */
#line 1323 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* opt_type_modifiers: '(' expr_list_opt_comma ')'  */
#line 1336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* opt_type_modifiers: %empty  */
#line 1337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 20520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* Numeric: INT_P  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* Numeric: INTEGER  */
#line 1349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* Numeric: SMALLINT  */
#line 1354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* Numeric: BIGINT  */
#line 1359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* Numeric: REAL  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* Numeric: FLOAT_P opt_float  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* Numeric: DOUBLE_P PRECISION  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1379 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* Numeric: DEC opt_type_modifiers  */
#line 1385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* Numeric: BOOLEAN_P  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* opt_float: '(' Iconst ')'  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 20647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* opt_float: %empty  */
#line 1425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 20655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* Bit: BitWithLength  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* Bit: BitWithoutLength  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* ConstBit: BitWithLength  */
#line 1447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* ConstBit: BitWithoutLength  */
#line 1451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* BitWithoutLength: BIT opt_varying  */
#line 1471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* Character: CharacterWithLength  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* Character: CharacterWithoutLength  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* ConstCharacter: CharacterWithLength  */
#line 1502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 20743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* ConstCharacter: CharacterWithoutLength  */
#line 1506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 20758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* CharacterWithoutLength: character  */
#line 1527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* character: CHARACTER opt_varying  */
#line 1537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* character: CHAR_P opt_varying  */
#line 1539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* character: VARCHAR  */
#line 1541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 20798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* character: NATIONAL CHARACTER opt_varying  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* character: NATIONAL CHAR_P opt_varying  */
#line 1545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* character: NCHAR opt_varying  */
#line 1547 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 20816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* opt_varying: VARYING  */
#line 1551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 20822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* opt_varying: %empty  */
#line 1552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1569 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1577 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* ConstDatetime: TIME opt_timezone  */
#line 1586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 20878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* ConstInterval: INTERVAL  */
#line 1597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 20887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1604 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 20899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_timezone: %empty  */
#line 1606 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* opt_interval: year_keyword  */
#line 1635 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_interval: month_keyword  */
#line 1637 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 20917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_interval: day_keyword  */
#line 1639 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 20923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_interval: hour_keyword  */
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 20929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_interval: minute_keyword  */
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_interval: second_keyword  */
#line 1645 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 20941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_interval: millisecond_keyword  */
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 20947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_interval: microsecond_keyword  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 20953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_interval: year_keyword TO month_keyword  */
#line 1651 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 20962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* opt_interval: day_keyword TO hour_keyword  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 20971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* opt_interval: day_keyword TO minute_keyword  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 20981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* opt_interval: day_keyword TO second_keyword  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 20992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 21001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* opt_interval: hour_keyword TO second_keyword  */
#line 1679 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 21011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* opt_interval: minute_keyword TO second_keyword  */
#line 1685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 21020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_interval: %empty  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 21026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* a_expr: c_expr  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* a_expr: a_expr TYPECAST Typename  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 21038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* a_expr: a_expr COLLATE any_name  */
#line 1726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 21060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* a_expr: '+' a_expr  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* a_expr: '-' a_expr  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* a_expr: a_expr '+' a_expr  */
#line 1753 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* a_expr: a_expr '-' a_expr  */
#line 1755 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* a_expr: a_expr '*' a_expr  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* a_expr: a_expr '/' a_expr  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* a_expr: a_expr '%' a_expr  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* a_expr: a_expr '^' a_expr  */
#line 1763 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* a_expr: a_expr POWER_OF a_expr  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* a_expr: a_expr '<' a_expr  */
#line 1767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* a_expr: a_expr '>' a_expr  */
#line 1769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* a_expr: a_expr '=' a_expr  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1773 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1775 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* a_expr: a_expr qual_Op a_expr  */
#line 1780 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* a_expr: qual_Op a_expr  */
#line 1782 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* a_expr: a_expr qual_Op  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* a_expr: a_expr AND a_expr  */
#line 1787 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* a_expr: a_expr OR a_expr  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* a_expr: NOT a_expr  */
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* a_expr: NOT_LA a_expr  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* a_expr: a_expr GLOB a_expr  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* a_expr: a_expr LIKE a_expr  */
#line 1801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* a_expr: a_expr ILIKE a_expr  */
#line 1825 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1830 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 21261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 21281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1850 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 21293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1866 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 21317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 21329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* a_expr: a_expr IS NULL_P  */
#line 1892 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* a_expr: a_expr ISNULL  */
#line 1900 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* a_expr: a_expr IS NOT NULL_P  */
#line 1908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* a_expr: a_expr NOT NULL_P  */
#line 1916 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 21377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* a_expr: a_expr NOTNULL  */
#line 1924 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* a_expr: row  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 21398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* a_expr: '{' dict_arguments_opt_comma '}'  */
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                                           {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* a_expr: '[' opt_expr_list_opt_comma ']'  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 21416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 21428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* a_expr: row OVERLAPS row  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 21448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* a_expr: a_expr IS TRUE_P  */
#line 1968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* a_expr: a_expr IS NOT TRUE_P  */
#line 1976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* a_expr: a_expr IS FALSE_P  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* a_expr: a_expr IS NOT FALSE_P  */
#line 1992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* a_expr: a_expr IS UNKNOWN  */
#line 2000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 21508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 21520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2032 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2040 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 21588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2056 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 21600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* a_expr: a_expr IN_P in_expr  */
#line 2064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 21624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2084 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 21650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 21676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* a_expr: DEFAULT  */
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* a_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 21704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* b_expr: c_expr  */
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* b_expr: b_expr TYPECAST Typename  */
#line 2156 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 21716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* b_expr: '+' b_expr  */
#line 2158 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* b_expr: '-' b_expr  */
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* b_expr: b_expr '+' b_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* b_expr: b_expr '-' b_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* b_expr: b_expr '*' b_expr  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* b_expr: b_expr '/' b_expr  */
#line 2168 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* b_expr: b_expr '%' b_expr  */
#line 2170 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* b_expr: b_expr '^' b_expr  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* b_expr: b_expr POWER_OF b_expr  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* b_expr: b_expr '<' b_expr  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* b_expr: b_expr '>' b_expr  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* b_expr: b_expr '=' b_expr  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2184 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2186 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* b_expr: b_expr qual_Op b_expr  */
#line 2188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 21812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* b_expr: qual_Op b_expr  */
#line 2190 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* b_expr: b_expr qual_Op  */
#line 2192 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 21824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 21840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2202 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 21856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* c_expr: columnref  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* c_expr: AexprConst  */
#line 2220 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* c_expr: '#' ICONST  */
#line 2222 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* c_expr: '?' opt_indirection  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* c_expr: PARAM opt_indirection  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 21914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* c_expr: '(' a_expr ')' opt_indirection  */
#line 2256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* c_expr: case_expr  */
#line 2268 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* c_expr: func_expr opt_indirection  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* c_expr: select_with_parens  */
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 21967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* c_expr: select_with_parens indirection  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* c_expr: EXISTS select_with_parens  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2328 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 22021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* func_application: func_name '(' ')'  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 22029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2348 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 22064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2375 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* func_application: func_name '(' '*' ')'  */
#line 2383 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2411 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* func_expr: func_expr_common_subexpr  */
#line 2447 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 22157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* func_expr_windowless: func_application  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2458 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2466 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2472 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 22187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 22195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 22203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2484 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 22211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2488 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* func_expr_common_subexpr: LOCALTIME  */
#line 2492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2500 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2504 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2508 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 22259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2512 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 22267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* func_expr_common_subexpr: SESSION_USER  */
#line 2516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 22275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* func_expr_common_subexpr: USER  */
#line 2520 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 22299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 22305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2534 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2554 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 22371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 22406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 22414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 22425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2612 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* within_group_clause: %empty  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* filter_clause: %empty  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* export_clause: EXPORT_STATE  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* export_clause: %empty  */
#line 2623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* window_clause: WINDOW window_definition_list  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* window_clause: %empty  */
#line 2631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* window_definition_list: window_definition  */
#line 2635 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* window_definition: ColId AS window_specification  */
#line 2642 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 22495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* over_clause: OVER window_specification  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 22501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* over_clause: OVER ColId  */
#line 2652 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 22518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* over_clause: %empty  */
#line 2665 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 22524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 22542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* opt_existing_window_name: ColId  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* opt_existing_window_name: %empty  */
#line 2696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 22554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_partition_clause: %empty  */
#line 2700 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 22566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_frame_clause: RANGE frame_extent  */
#line 2712 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 22576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_frame_clause: ROWS frame_extent  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 22586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_frame_clause: %empty  */
#line 2724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* frame_extent: frame_bound  */
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 22660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* frame_bound: CURRENT_P ROW  */
#line 2812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* frame_bound: a_expr PRECEDING  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* frame_bound: a_expr FOLLOWING  */
#line 2828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 22720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* qualified_row: ROW '(' ')'  */
#line 2849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 22732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* row: qualified_row  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 22738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* row: '(' expr_list ',' a_expr ')'  */
#line 2853 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 22744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2857 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* dict_arguments: dict_arg  */
#line 2867 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 2868 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* dict_arguments_opt_comma: dict_arguments  */
#line 2872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* sub_type: ANY  */
#line 2877 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* sub_type: SOME  */
#line 2878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 22793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* sub_type: ALL  */
#line 2879 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* all_Op: Op  */
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* all_Op: MathOp  */
#line 2883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 22811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* MathOp: '+'  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 22817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* MathOp: '-'  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 22823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* MathOp: '*'  */
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* MathOp: '/'  */
#line 2889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* MathOp: '%'  */
#line 2890 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 22841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* MathOp: '^'  */
#line 2891 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 22847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* MathOp: POWER_OF  */
#line 2892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 22853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* MathOp: '<'  */
#line 2893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 22859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* MathOp: '>'  */
#line 2894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* MathOp: '='  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 22871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* MathOp: LESS_EQUALS  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* MathOp: GREATER_EQUALS  */
#line 2897 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 22883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* MathOp: NOT_EQUALS  */
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 22889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* qual_Op: Op  */
#line 2902 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 2904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* qual_all_Op: all_Op  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 2911 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* subquery_Op: all_Op  */
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* subquery_Op: LIKE  */
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 22931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* subquery_Op: NOT_LA LIKE  */
#line 2922 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 22937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* subquery_Op: GLOB  */
#line 2924 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 22943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* subquery_Op: NOT_LA GLOB  */
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 22949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* subquery_Op: ILIKE  */
#line 2928 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* subquery_Op: NOT_LA ILIKE  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* any_operator: all_Op  */
#line 2944 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* any_operator: ColId '.' any_operator  */
#line 2946 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* expr_list: a_expr  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* expr_list: expr_list ',' a_expr  */
#line 2954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* expr_list_opt_comma: expr_list  */
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 22997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* expr_list_opt_comma: expr_list ','  */
#line 2966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 2984 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* opt_expr_list_opt_comma: %empty  */
#line 2988 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* func_arg_list: func_arg_expr  */
#line 2997 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* func_arg_expr: a_expr  */
#line 3007 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 23058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 23071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* type_list: Typename  */
#line 3030 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 23077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* type_list: type_list ',' Typename  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* extract_list: extract_arg FROM a_expr  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 23091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* extract_list: %empty  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* extract_arg: IDENT  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* extract_arg: year_keyword  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 23109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* extract_arg: month_keyword  */
#line 3048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 23115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* extract_arg: day_keyword  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 23121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* extract_arg: hour_keyword  */
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 23127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* extract_arg: minute_keyword  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 23133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* extract_arg: second_keyword  */
#line 3052 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 23139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* extract_arg: millisecond_keyword  */
#line 3053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 23145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* extract_arg: microsecond_keyword  */
#line 3054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 23151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* extract_arg: Sconst  */
#line 3055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* overlay_placing: PLACING a_expr  */
#line 3077 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* position_list: b_expr IN_P b_expr  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 23185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* position_list: %empty  */
#line 3084 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* substr_list: a_expr substr_from substr_for  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* substr_list: a_expr substr_for substr_from  */
#line 3105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* substr_list: a_expr substr_from  */
#line 3110 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* substr_list: a_expr substr_for  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 23235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* substr_list: expr_list  */
#line 3129 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 23243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* substr_list: %empty  */
#line 3133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 23249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* substr_from: FROM a_expr  */
#line 3137 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* substr_for: FOR a_expr  */
#line 3140 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3143 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 23267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* trim_list: FROM expr_list_opt_comma  */
#line 3144 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* trim_list: expr_list_opt_comma  */
#line 3145 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* in_expr: select_with_parens  */
#line 3149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 23290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3155 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 23296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 23310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* when_clause_list: when_clause  */
#line 3179 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* when_clause_list: when_clause_list when_clause  */
#line 3180 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3185 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 23334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* case_default: ELSE a_expr  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* case_default: %empty  */
#line 3196 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* case_arg: a_expr  */
#line 3199 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* case_arg: %empty  */
#line 3200 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* columnref: ColId  */
#line 3204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* columnref: ColId indirection  */
#line 3208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 23374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* indirection_el: '.' attr_name  */
#line 3215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* indirection_el: '[' a_expr ']'  */
#line 3219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 23406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* opt_slice_bound: a_expr  */
#line 3237 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* opt_slice_bound: %empty  */
#line 3238 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* indirection: indirection_el  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* indirection: indirection indirection_el  */
#line 3243 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* opt_indirection: %empty  */
#line 3247 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* opt_indirection: opt_indirection indirection_el  */
#line 3248 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3262 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* opt_target_list_opt_comma: %empty  */
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* target_list: target_el  */
#line 3267 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* target_list: target_list ',' target_el  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 23466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* target_list_opt_comma: target_list  */
#line 3272 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* target_list_opt_comma: target_list ','  */
#line 3273 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* target_el: a_expr AS ColLabelOrString  */
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 23490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* target_el: a_expr IDENT  */
#line 3293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 23502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* target_el: a_expr  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 23514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 23533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* except_list: EXCLUDE ColId  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_except_list: except_list  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_except_list: %empty  */
#line 3346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* replace_list_el: a_expr AS ColId  */
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 23583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* replace_list: replace_list_el  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* replace_list: replace_list ',' replace_list_el  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* replace_list_opt_comma: replace_list  */
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* replace_list_opt_comma: replace_list ','  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* opt_replace_list: REPLACE replace_list_el  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* opt_replace_list: %empty  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 23625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* qualified_name_list: qualified_name  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 23631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3375 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 23637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* qualified_name: ColIdOrString  */
#line 3387 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 23645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* qualified_name: ColId indirection  */
#line 3391 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 23674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* name_list: name  */
#line 3418 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* name_list: name_list ',' name  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* name_list_opt_comma: name_list  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* name_list_opt_comma: name_list ','  */
#line 3426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* name: ColId  */
#line 3429 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* attr_name: ColLabel  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* func_name: function_name_token  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* func_name: ColId indirection  */
#line 3445 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* AexprConst: Iconst  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* AexprConst: FCONST  */
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* AexprConst: Sconst opt_indirection  */
#line 3464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 23757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* AexprConst: BCONST  */
#line 3476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* AexprConst: XCONST  */
#line 3480 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 23778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* AexprConst: func_name Sconst  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* AexprConst: ConstTypename Sconst  */
#line 3534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 23839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 23847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 23855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 23863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* AexprConst: TRUE_P  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 23871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* AexprConst: FALSE_P  */
#line 3554 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 23879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* AexprConst: NULL_P  */
#line 3558 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* Iconst: ICONST  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 23893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* Sconst: SCONST  */
#line 3564 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* ColId: IDENT  */
#line 3580 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* ColId: unreserved_keyword  */
#line 3581 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* ColId: col_name_keyword  */
#line 3582 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* ColIdOrString: ColId  */
#line 3585 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* ColIdOrString: SCONST  */
#line 3586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* type_function_name: IDENT  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* type_function_name: unreserved_keyword  */
#line 3593 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* type_function_name: type_func_name_keyword  */
#line 3594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* function_name_token: IDENT  */
#line 3597 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* function_name_token: unreserved_keyword  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* function_name_token: func_name_keyword  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* type_name_token: IDENT  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* type_name_token: unreserved_keyword  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* type_name_token: type_name_keyword  */
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 23983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* any_name: ColId  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* any_name: ColId attrs  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 23995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* attrs: '.' attr_name  */
#line 3612 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* attrs: attrs '.' attr_name  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 24007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* opt_name_list: '(' name_list ')'  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* opt_name_list: %empty  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* ColLabel: IDENT  */
#line 3630 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* ColLabel: other_keyword  */
#line 3631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* ColLabel: unreserved_keyword  */
#line 3632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* ColLabel: reserved_keyword  */
#line 3633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* ColLabelOrString: ColLabel  */
#line 3636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* ColLabelOrString: SCONST  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 24067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 24079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* CreateSchemaStmt: CREATE_P SCHEMA ColId OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS ColId OptSchemaEltList  */
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* OptSchemaEltList: %empty  */
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 24180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 24198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 24222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 24234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 24240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* CheckPointStmt: FORCE CHECKPOINT  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* CheckPointStmt: CHECKPOINT  */
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 24344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 24358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 21 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 24368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 24404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 24415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 24421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 24427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 24439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 24445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* NonReservedWord: IDENT  */
#line 65 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* NonReservedWord: unreserved_keyword  */
#line 66 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* NonReservedWord: other_keyword  */
#line 67 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 24463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 72 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* NonReservedWord_or_Sconst: Sconst  */
#line 73 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* explain_option_list: explain_option_elem  */
#line 79 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 24483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 83 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* analyze_keyword: ANALYZE  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* analyze_keyword: ANALYSE  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_boolean_or_string: TRUE_P  */
#line 96 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_boolean_or_string: FALSE_P  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_boolean_or_string: ON  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 110 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 24535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* explain_option_name: NonReservedWord  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* explain_option_name: analyze_keyword  */
#line 118 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 24557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 24577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 24619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 24631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 24655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 24677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 24683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 24724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 24735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 24741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 24753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 24776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 24787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 24798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 24810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 24846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 24862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 24874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 24888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 24894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 24900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 24906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 24912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 24926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 24944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 24950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 24956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 24962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 24976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* relation_expr_opt_alias: relation_expr  */
#line 22 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 24984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* relation_expr_opt_alias: relation_expr ColId  */
#line 26 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 24995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 33 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 25006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* where_or_current_clause: WHERE a_expr  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* where_or_current_clause: %empty  */
#line 44 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 25018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* using_clause: USING from_list_opt_comma  */
#line 50 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* using_clause: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 25030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 25044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 25058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 25064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 25075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* generic_reset: ALL  */
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 25085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* reset_rest: generic_reset  */
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 25091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* reset_rest: TIME ZONE  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 25102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 25113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 25137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* VariableShowStmt: SUMMARIZE var_name  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 25148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* VariableShowStmt: show_or_describe var_name  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 25257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 25278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 54 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 25299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* opt_check_option: WITH CHECK_P OPTION  */
#line 74 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 25305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 75 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 25311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 76 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* opt_check_option: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 25357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 25374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 25380 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 25386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 25392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 25406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 25410 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
