/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 243 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "grammar_out.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_POWER_OF = 15,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 16,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 17,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 18,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 19,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 20,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 21,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 22,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 23,                    /* ACCESS  */
  YYSYMBOL_ACTION = 24,                    /* ACTION  */
  YYSYMBOL_ADD_P = 25,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 26,                     /* ADMIN  */
  YYSYMBOL_AFTER = 27,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 28,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 29,                       /* ALL  */
  YYSYMBOL_ALSO = 30,                      /* ALSO  */
  YYSYMBOL_ALTER = 31,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 32,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 33,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 34,                   /* ANALYZE  */
  YYSYMBOL_AND = 35,                       /* AND  */
  YYSYMBOL_ANY = 36,                       /* ANY  */
  YYSYMBOL_ARRAY = 37,                     /* ARRAY  */
  YYSYMBOL_AS = 38,                        /* AS  */
  YYSYMBOL_ASC_P = 39,                     /* ASC_P  */
  YYSYMBOL_ASSERTION = 40,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 41,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 42,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 43,                        /* AT  */
  YYSYMBOL_ATTACH = 44,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 45,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 46,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 47,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 48,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 49,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 50,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 51,                    /* BIGINT  */
  YYSYMBOL_BINARY = 52,                    /* BINARY  */
  YYSYMBOL_BIT = 53,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 54,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 55,                      /* BOTH  */
  YYSYMBOL_BY = 56,                        /* BY  */
  YYSYMBOL_CACHE = 57,                     /* CACHE  */
  YYSYMBOL_CALL_P = 58,                    /* CALL_P  */
  YYSYMBOL_CALLED = 59,                    /* CALLED  */
  YYSYMBOL_CASCADE = 60,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 61,                  /* CASCADED  */
  YYSYMBOL_CASE = 62,                      /* CASE  */
  YYSYMBOL_CAST = 63,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 64,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 65,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 66,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 67,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 68,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 69,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 70,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 71,                     /* CLASS  */
  YYSYMBOL_CLOSE = 72,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 73,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 74,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 75,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 76,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 77,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 78,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 79,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 80,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 81,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 82,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 83,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 84,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 85,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 86,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 87,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 88,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 89,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 90,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 91,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 92,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 93,                      /* COPY  */
  YYSYMBOL_COST = 94,                      /* COST  */
  YYSYMBOL_CREATE_P = 95,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 96,                     /* CROSS  */
  YYSYMBOL_CSV = 97,                       /* CSV  */
  YYSYMBOL_CUBE = 98,                      /* CUBE  */
  YYSYMBOL_CURRENT_P = 99,                 /* CURRENT_P  */
  YYSYMBOL_CURRENT_CATALOG = 100,          /* CURRENT_CATALOG  */
  YYSYMBOL_CURRENT_DATE = 101,             /* CURRENT_DATE  */
  YYSYMBOL_CURRENT_ROLE = 102,             /* CURRENT_ROLE  */
  YYSYMBOL_CURRENT_SCHEMA = 103,           /* CURRENT_SCHEMA  */
  YYSYMBOL_CURRENT_TIME = 104,             /* CURRENT_TIME  */
  YYSYMBOL_CURRENT_TIMESTAMP = 105,        /* CURRENT_TIMESTAMP  */
  YYSYMBOL_CURRENT_USER = 106,             /* CURRENT_USER  */
  YYSYMBOL_CURSOR = 107,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 108,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 109,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 110,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 111,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 112,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 113,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 114,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 157,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 158,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 159,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 160,                   /* FAMILY  */
  YYSYMBOL_FETCH = 161,                    /* FETCH  */
  YYSYMBOL_FILTER = 162,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 163,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 164,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 165,                /* FOLLOWING  */
  YYSYMBOL_FOR = 166,                      /* FOR  */
  YYSYMBOL_FORCE = 167,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 168,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 169,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 170,                   /* FREEZE  */
  YYSYMBOL_FROM = 171,                     /* FROM  */
  YYSYMBOL_FULL = 172,                     /* FULL  */
  YYSYMBOL_FUNCTION = 173,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 174,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 175,                /* GENERATED  */
  YYSYMBOL_GLOB = 176,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 177,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 178,                    /* GRANT  */
  YYSYMBOL_GRANTED = 179,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 180,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 181,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 182,              /* GROUPING_ID  */
  YYSYMBOL_HANDLER = 183,                  /* HANDLER  */
  YYSYMBOL_HAVING = 184,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 185,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 186,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 187,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 188,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 189,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 190,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 191,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 192,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 193,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 194,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 195,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 196,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 197,                     /* IN_P  */
  YYSYMBOL_INCLUDING = 198,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 199,                /* INCREMENT  */
  YYSYMBOL_INDEX = 200,                    /* INDEX  */
  YYSYMBOL_INDEXES = 201,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 202,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 203,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 204,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 205,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 206,                  /* INNER_P  */
  YYSYMBOL_INOUT = 207,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 208,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 209,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 210,                   /* INSERT  */
  YYSYMBOL_INSTALL = 211,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 212,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 213,                    /* INT_P  */
  YYSYMBOL_INTEGER = 214,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 215,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 216,                 /* INTERVAL  */
  YYSYMBOL_INTO = 217,                     /* INTO  */
  YYSYMBOL_INVOKER = 218,                  /* INVOKER  */
  YYSYMBOL_IS = 219,                       /* IS  */
  YYSYMBOL_ISNULL = 220,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 221,                /* ISOLATION  */
  YYSYMBOL_JOIN = 222,                     /* JOIN  */
  YYSYMBOL_JSON = 223,                     /* JSON  */
  YYSYMBOL_KEY = 224,                      /* KEY  */
  YYSYMBOL_LABEL = 225,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 226,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 227,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 228,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 229,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 230,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 231,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 232,                     /* LEFT  */
  YYSYMBOL_LEVEL = 233,                    /* LEVEL  */
  YYSYMBOL_LIKE = 234,                     /* LIKE  */
  YYSYMBOL_LIMIT = 235,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 236,                   /* LISTEN  */
  YYSYMBOL_LOAD = 237,                     /* LOAD  */
  YYSYMBOL_LOCAL = 238,                    /* LOCAL  */
  YYSYMBOL_LOCALTIME = 239,                /* LOCALTIME  */
  YYSYMBOL_LOCALTIMESTAMP = 240,           /* LOCALTIMESTAMP  */
  YYSYMBOL_LOCATION = 241,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 242,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 243,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 244,                   /* LOGGED  */
  YYSYMBOL_MACRO = 245,                    /* MACRO  */
  YYSYMBOL_MAP = 246,                      /* MAP  */
  YYSYMBOL_MAPPING = 247,                  /* MAPPING  */
  YYSYMBOL_MATCH = 248,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 249,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 250,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 251,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 252,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 253,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 254,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 255,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 256,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 257,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 258,                 /* MINVALUE  */
  YYSYMBOL_MODE = 259,                     /* MODE  */
  YYSYMBOL_MONTH_P = 260,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 261,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 262,                     /* MOVE  */
  YYSYMBOL_NAME_P = 263,                   /* NAME_P  */
  YYSYMBOL_NAMES = 264,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 265,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 266,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 267,                    /* NCHAR  */
  YYSYMBOL_NEW = 268,                      /* NEW  */
  YYSYMBOL_NEXT = 269,                     /* NEXT  */
  YYSYMBOL_NO = 270,                       /* NO  */
  YYSYMBOL_NONE = 271,                     /* NONE  */
  YYSYMBOL_NOT = 272,                      /* NOT  */
  YYSYMBOL_NOTHING = 273,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 274,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 275,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 276,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 277,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 278,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 279,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 280,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 281,                 /* OBJECT_P  */
  YYSYMBOL_OF = 282,                       /* OF  */
  YYSYMBOL_OFF = 283,                      /* OFF  */
  YYSYMBOL_OFFSET = 284,                   /* OFFSET  */
  YYSYMBOL_OIDS = 285,                     /* OIDS  */
  YYSYMBOL_OLD = 286,                      /* OLD  */
  YYSYMBOL_ON = 287,                       /* ON  */
  YYSYMBOL_ONLY = 288,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 289,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 290,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 291,                  /* OPTIONS  */
  YYSYMBOL_OR = 292,                       /* OR  */
  YYSYMBOL_ORDER = 293,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 294,               /* ORDINALITY  */
  YYSYMBOL_OUT_P = 295,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 296,                  /* OUTER_P  */
  YYSYMBOL_OVER = 297,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 298,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 299,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 300,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 301,                    /* OWNED  */
  YYSYMBOL_OWNER = 302,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 303,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 304,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 305,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 306,                /* PARTITION  */
  YYSYMBOL_PASSING = 307,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 308,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 309,                  /* PERCENT  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_PRAGMA_P = 314,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 315,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 316,                /* PRECISION  */
  YYSYMBOL_PREPARE = 317,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 318,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 319,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 320,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 321,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 322,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 323,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 324,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 325,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 326,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 327,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 328,                    /* QUOTE  */
  YYSYMBOL_RANGE = 329,                    /* RANGE  */
  YYSYMBOL_READ_P = 330,                   /* READ_P  */
  YYSYMBOL_REAL = 331,                     /* REAL  */
  YYSYMBOL_REASSIGN = 332,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 333,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 334,                /* RECURSIVE  */
  YYSYMBOL_REF = 335,                      /* REF  */
  YYSYMBOL_REFERENCES = 336,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 337,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 338,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 339,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 340,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 341,                  /* RELEASE  */
  YYSYMBOL_RENAME = 342,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 343,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 344,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 345,                  /* REPLICA  */
  YYSYMBOL_RESET = 346,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 347,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 348,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 349,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 350,                /* RETURNING  */
  YYSYMBOL_RETURNS = 351,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 352,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 353,                    /* RIGHT  */
  YYSYMBOL_ROLE = 354,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 355,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 356,                   /* ROLLUP  */
  YYSYMBOL_ROW = 357,                      /* ROW  */
  YYSYMBOL_ROWS = 358,                     /* ROWS  */
  YYSYMBOL_RULE = 359,                     /* RULE  */
  YYSYMBOL_SAMPLE = 360,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 361,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 362,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 363,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 364,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 365,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 366,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 367,                /* SECONDS_P  */
  YYSYMBOL_SECURITY = 368,                 /* SECURITY  */
  YYSYMBOL_SELECT = 369,                   /* SELECT  */
  YYSYMBOL_SEQUENCE = 370,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 371,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 372,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 373,                   /* SERVER  */
  YYSYMBOL_SESSION = 374,                  /* SESSION  */
  YYSYMBOL_SESSION_USER = 375,             /* SESSION_USER  */
  YYSYMBOL_SET = 376,                      /* SET  */
  YYSYMBOL_SETOF = 377,                    /* SETOF  */
  YYSYMBOL_SETS = 378,                     /* SETS  */
  YYSYMBOL_SHARE = 379,                    /* SHARE  */
  YYSYMBOL_SHOW = 380,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 381,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 382,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 383,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 384,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 385,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 386,                     /* SOME  */
  YYSYMBOL_SQL_P = 387,                    /* SQL_P  */
  YYSYMBOL_STABLE = 388,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 389,             /* STANDALONE_P  */
  YYSYMBOL_START = 390,                    /* START  */
  YYSYMBOL_STATEMENT = 391,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 392,               /* STATISTICS  */
  YYSYMBOL_STDIN = 393,                    /* STDIN  */
  YYSYMBOL_STDOUT = 394,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 395,                  /* STORAGE  */
  YYSYMBOL_STORED = 396,                   /* STORED  */
  YYSYMBOL_STRICT_P = 397,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 398,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 399,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 400,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 401,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 402,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 403,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 404,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 405,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 406,                    /* TABLE  */
  YYSYMBOL_TABLES = 407,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 408,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 409,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 410,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 411,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 412,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 413,                   /* TEXT_P  */
  YYSYMBOL_THEN = 414,                     /* THEN  */
  YYSYMBOL_TIME = 415,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 416,                /* TIMESTAMP  */
  YYSYMBOL_TO = 417,                       /* TO  */
  YYSYMBOL_TRAILING = 418,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 419,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 420,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 421,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 422,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 423,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 424,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 425,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 426,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 427,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 428,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 429,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 430,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 431,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 432,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 433,                    /* UNION  */
  YYSYMBOL_UNIQUE = 434,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 435,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 436,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 437,                 /* UNLOGGED  */
  YYSYMBOL_UNTIL = 438,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 439,                   /* UPDATE  */
  YYSYMBOL_USE_P = 440,                    /* USE_P  */
  YYSYMBOL_USER = 441,                     /* USER  */
  YYSYMBOL_USING = 442,                    /* USING  */
  YYSYMBOL_VACUUM = 443,                   /* VACUUM  */
  YYSYMBOL_VALID = 444,                    /* VALID  */
  YYSYMBOL_VALIDATE = 445,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 446,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 447,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 448,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 449,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 450,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 451,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 452,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 453,                /* VERSION_P  */
  YYSYMBOL_VIEW = 454,                     /* VIEW  */
  YYSYMBOL_VIEWS = 455,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 456,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 457,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 458,                     /* WHEN  */
  YYSYMBOL_WHERE = 459,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 460,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 461,                   /* WINDOW  */
  YYSYMBOL_WITH = 462,                     /* WITH  */
  YYSYMBOL_WITHIN = 463,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 464,                  /* WITHOUT  */
  YYSYMBOL_WORK = 465,                     /* WORK  */
  YYSYMBOL_WRAPPER = 466,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 467,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 468,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 469,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 470,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 471,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 472,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 473,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 474,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 475,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 476,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 477,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 478,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 479,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 480,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 481,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 482,                    /* YES_P  */
  YYSYMBOL_ZONE = 483,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 484,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 485,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 486,                  /* WITH_LA  */
  YYSYMBOL_487_ = 487,                     /* '<'  */
  YYSYMBOL_488_ = 488,                     /* '>'  */
  YYSYMBOL_489_ = 489,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 490,                /* POSTFIXOP  */
  YYSYMBOL_491_ = 491,                     /* '+'  */
  YYSYMBOL_492_ = 492,                     /* '-'  */
  YYSYMBOL_493_ = 493,                     /* '*'  */
  YYSYMBOL_494_ = 494,                     /* '/'  */
  YYSYMBOL_495_ = 495,                     /* '%'  */
  YYSYMBOL_496_ = 496,                     /* '^'  */
  YYSYMBOL_UMINUS = 497,                   /* UMINUS  */
  YYSYMBOL_498_ = 498,                     /* '['  */
  YYSYMBOL_499_ = 499,                     /* ']'  */
  YYSYMBOL_500_ = 500,                     /* '('  */
  YYSYMBOL_501_ = 501,                     /* ')'  */
  YYSYMBOL_502_ = 502,                     /* '.'  */
  YYSYMBOL_503_ = 503,                     /* ';'  */
  YYSYMBOL_504_ = 504,                     /* ','  */
  YYSYMBOL_505_ = 505,                     /* '#'  */
  YYSYMBOL_506_ = 506,                     /* '$'  */
  YYSYMBOL_507_ = 507,                     /* '?'  */
  YYSYMBOL_508_ = 508,                     /* '{'  */
  YYSYMBOL_509_ = 509,                     /* '}'  */
  YYSYMBOL_510_ = 510,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 511,                 /* $accept  */
  YYSYMBOL_stmtblock = 512,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 513,                /* stmtmulti  */
  YYSYMBOL_stmt = 514,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 515,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 516,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 517,               /* SeqOptList  */
  YYSYMBOL_opt_with = 518,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 519,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 520,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 521,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 522,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 523,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 524, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 525,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 526, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 527, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 528,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 529,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 530, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 531,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 532,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 533,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 534,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 535,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 536,               /* DetachStmt  */
  YYSYMBOL_opt_database = 537,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 538,       /* opt_database_alias  */
  YYSYMBOL_ident_name = 539,               /* ident_name  */
  YYSYMBOL_ident_list = 540,               /* ident_list  */
  YYSYMBOL_CallStmt = 541,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 542,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 543,               /* opt_col_id  */
  YYSYMBOL_CopyStmt = 544,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 545,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 546,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 547, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 548,                /* opt_using  */
  YYSYMBOL_opt_as = 549,                   /* opt_as  */
  YYSYMBOL_opt_program = 550,              /* opt_program  */
  YYSYMBOL_copy_options = 551,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 552,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 553,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 554,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 555,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 556,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 557,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 558, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 559,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 560,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 561,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 562,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 563,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 564, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 565,       /* generic_option_arg  */
  YYSYMBOL_key_action = 566,               /* key_action  */
  YYSYMBOL_ColConstraint = 567,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 568,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 569,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 570,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 571,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 572,      /* generic_option_elem  */
  YYSYMBOL_key_update = 573,               /* key_update  */
  YYSYMBOL_key_actions = 574,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 575,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 576,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 577,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 578,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 579,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 580,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 581,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 582,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 583,                  /* OptWith  */
  YYSYMBOL_definition = 584,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 585,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 586,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 587,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 588,                /* columnDef  */
  YYSYMBOL_def_list = 589,                 /* def_list  */
  YYSYMBOL_index_name = 590,               /* index_name  */
  YYSYMBOL_TableElement = 591,             /* TableElement  */
  YYSYMBOL_def_elem = 592,                 /* def_elem  */
  YYSYMBOL_opt_definition = 593,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 594,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 595,               /* columnElem  */
  YYSYMBOL_opt_column_list = 596,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 597,              /* ColQualList  */
  YYSYMBOL_key_delete = 598,               /* key_delete  */
  YYSYMBOL_reloption_elem = 599,           /* reloption_elem  */
  YYSYMBOL_columnList = 600,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 601,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 602,                /* func_type  */
  YYSYMBOL_ConstraintElem = 603,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 604,         /* TableElementList  */
  YYSYMBOL_key_match = 605,                /* key_match  */
  YYSYMBOL_TableLikeClause = 606,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 607,                  /* OptTemp  */
  YYSYMBOL_generated_when = 608,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 609,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 610,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 611,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 612,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 613,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 614,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 615,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 616,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 617,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 618,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 619,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 620,              /* macro_alias  */
  YYSYMBOL_param_list = 621,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 622,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 623,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 624,              /* schema_stmt  */
  YYSYMBOL_CreateSeqStmt = 625,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 626,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 627,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 628,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 629,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 630,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 631,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 632,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 633,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 634,             /* using_clause  */
  YYSYMBOL_DropStmt = 635,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 636,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 637,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 638,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 639,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 640, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 641,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 642,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_clause = 643,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 644,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 645,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 646,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 647,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 648,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 649, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 650,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 651,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 652,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 653,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 654,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 655,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 656,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 657,                /* IndexStmt  */
  YYSYMBOL_access_method = 658,            /* access_method  */
  YYSYMBOL_access_method_clause = 659,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 660,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 661,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 662,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 663,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 664,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 665,              /* insert_rest  */
  YYSYMBOL_insert_target = 666,            /* insert_target  */
  YYSYMBOL_opt_conf_expr = 667,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 668,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 669,       /* insert_column_item  */
  YYSYMBOL_set_clause = 670,               /* set_clause  */
  YYSYMBOL_opt_on_conflict = 671,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 672,               /* index_elem  */
  YYSYMBOL_returning_clause = 673,         /* returning_clause  */
  YYSYMBOL_override_kind = 674,            /* override_kind  */
  YYSYMBOL_set_target_list = 675,          /* set_target_list  */
  YYSYMBOL_opt_collate = 676,              /* opt_collate  */
  YYSYMBOL_opt_class = 677,                /* opt_class  */
  YYSYMBOL_insert_column_list = 678,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 679,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 680, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 681,             /* index_params  */
  YYSYMBOL_set_target = 682,               /* set_target  */
  YYSYMBOL_LoadStmt = 683,                 /* LoadStmt  */
  YYSYMBOL_file_name = 684,                /* file_name  */
  YYSYMBOL_PragmaStmt = 685,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 686,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 687,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 688,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 689,               /* RenameStmt  */
  YYSYMBOL_opt_column = 690,               /* opt_column  */
  YYSYMBOL_SelectStmt = 691,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 692,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 693,         /* select_no_parens  */
  YYSYMBOL_select_clause = 694,            /* select_clause  */
  YYSYMBOL_opt_select = 695,               /* opt_select  */
  YYSYMBOL_simple_select = 696,            /* simple_select  */
  YYSYMBOL_with_clause = 697,              /* with_clause  */
  YYSYMBOL_cte_list = 698,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 699,        /* common_table_expr  */
  YYSYMBOL_into_clause = 700,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 701,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 702,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 703,          /* all_or_distinct  */
  YYSYMBOL_by_name = 704,                  /* by_name  */
  YYSYMBOL_distinct_clause = 705,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 706,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 707,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 708,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 709,              /* sort_clause  */
  YYSYMBOL_sortby_list = 710,              /* sortby_list  */
  YYSYMBOL_sortby = 711,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 712,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 713,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 714,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 715,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 716,             /* limit_clause  */
  YYSYMBOL_offset_clause = 717,            /* offset_clause  */
  YYSYMBOL_sample_count = 718,             /* sample_count  */
  YYSYMBOL_sample_clause = 719,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 720,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 721,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 722,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 723,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 724,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 725,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 726,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 727, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 728,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 729,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 730,            /* first_or_next  */
  YYSYMBOL_group_clause = 731,             /* group_clause  */
  YYSYMBOL_group_by_list = 732,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 733,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 734,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 735,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 736,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 737,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 738,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 739,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 740,            /* having_clause  */
  YYSYMBOL_qualify_clause = 741,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 742,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 743,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 744,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 745,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 746,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 747,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 748,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 749,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 750,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 751,              /* from_clause  */
  YYSYMBOL_from_list = 752,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 753,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 754,                /* table_ref  */
  YYSYMBOL_joined_table = 755,             /* joined_table  */
  YYSYMBOL_alias_clause = 756,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 757,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 758,        /* func_alias_clause  */
  YYSYMBOL_join_type = 759,                /* join_type  */
  YYSYMBOL_join_outer = 760,               /* join_outer  */
  YYSYMBOL_join_qual = 761,                /* join_qual  */
  YYSYMBOL_relation_expr = 762,            /* relation_expr  */
  YYSYMBOL_func_table = 763,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 764,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 765,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 766,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 767,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 768,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 769,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 770,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 771,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 772,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 773,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 774,             /* opt_Typename  */
  YYSYMBOL_Typename = 775,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 776,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 777,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 778,            /* ConstTypename  */
  YYSYMBOL_GenericType = 779,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 780,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 781,                  /* Numeric  */
  YYSYMBOL_opt_float = 782,                /* opt_float  */
  YYSYMBOL_Bit = 783,                      /* Bit  */
  YYSYMBOL_ConstBit = 784,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 785,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 786,         /* BitWithoutLength  */
  YYSYMBOL_Character = 787,                /* Character  */
  YYSYMBOL_ConstCharacter = 788,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 789,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 790,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 791,                /* character  */
  YYSYMBOL_opt_varying = 792,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 793,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 794,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 795,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 796,             /* year_keyword  */
  YYSYMBOL_month_keyword = 797,            /* month_keyword  */
  YYSYMBOL_day_keyword = 798,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 799,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 800,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 801,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 802,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 803,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 804,             /* opt_interval  */
  YYSYMBOL_a_expr = 805,                   /* a_expr  */
  YYSYMBOL_b_expr = 806,                   /* b_expr  */
  YYSYMBOL_c_expr = 807,                   /* c_expr  */
  YYSYMBOL_indirection_expr = 808,         /* indirection_expr  */
  YYSYMBOL_func_application = 809,         /* func_application  */
  YYSYMBOL_func_expr = 810,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 811,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 812, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 813,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 814,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 815,            /* filter_clause  */
  YYSYMBOL_export_clause = 816,            /* export_clause  */
  YYSYMBOL_window_clause = 817,            /* window_clause  */
  YYSYMBOL_window_definition_list = 818,   /* window_definition_list  */
  YYSYMBOL_window_definition = 819,        /* window_definition  */
  YYSYMBOL_over_clause = 820,              /* over_clause  */
  YYSYMBOL_window_specification = 821,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 822, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 823,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 824,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 825,             /* frame_extent  */
  YYSYMBOL_frame_bound = 826,              /* frame_bound  */
  YYSYMBOL_qualified_row = 827,            /* qualified_row  */
  YYSYMBOL_row = 828,                      /* row  */
  YYSYMBOL_dict_arg = 829,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 830,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 831, /* dict_arguments_opt_comma  */
  YYSYMBOL_sub_type = 832,                 /* sub_type  */
  YYSYMBOL_all_Op = 833,                   /* all_Op  */
  YYSYMBOL_MathOp = 834,                   /* MathOp  */
  YYSYMBOL_qual_Op = 835,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 836,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 837,              /* subquery_Op  */
  YYSYMBOL_any_operator = 838,             /* any_operator  */
  YYSYMBOL_expr_list = 839,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 840,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 841,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 842,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 843,            /* func_arg_expr  */
  YYSYMBOL_type_list = 844,                /* type_list  */
  YYSYMBOL_extract_list = 845,             /* extract_list  */
  YYSYMBOL_extract_arg = 846,              /* extract_arg  */
  YYSYMBOL_overlay_list = 847,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 848,          /* overlay_placing  */
  YYSYMBOL_position_list = 849,            /* position_list  */
  YYSYMBOL_substr_list = 850,              /* substr_list  */
  YYSYMBOL_substr_from = 851,              /* substr_from  */
  YYSYMBOL_substr_for = 852,               /* substr_for  */
  YYSYMBOL_trim_list = 853,                /* trim_list  */
  YYSYMBOL_in_expr = 854,                  /* in_expr  */
  YYSYMBOL_case_expr = 855,                /* case_expr  */
  YYSYMBOL_when_clause_list = 856,         /* when_clause_list  */
  YYSYMBOL_when_clause = 857,              /* when_clause  */
  YYSYMBOL_case_default = 858,             /* case_default  */
  YYSYMBOL_case_arg = 859,                 /* case_arg  */
  YYSYMBOL_columnref = 860,                /* columnref  */
  YYSYMBOL_indirection_el = 861,           /* indirection_el  */
  YYSYMBOL_opt_slice_bound = 862,          /* opt_slice_bound  */
  YYSYMBOL_indirection = 863,              /* indirection  */
  YYSYMBOL_opt_indirection = 864,          /* opt_indirection  */
  YYSYMBOL_opt_asymmetric = 865,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 866, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 867,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 868,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 869,                /* target_el  */
  YYSYMBOL_except_list = 870,              /* except_list  */
  YYSYMBOL_opt_except_list = 871,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 872,          /* replace_list_el  */
  YYSYMBOL_replace_list = 873,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 874,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 875,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 876,      /* qualified_name_list  */
  YYSYMBOL_qualified_name = 877,           /* qualified_name  */
  YYSYMBOL_name_list = 878,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 879,      /* name_list_opt_comma  */
  YYSYMBOL_name = 880,                     /* name  */
  YYSYMBOL_attr_name = 881,                /* attr_name  */
  YYSYMBOL_func_name = 882,                /* func_name  */
  YYSYMBOL_AexprConst = 883,               /* AexprConst  */
  YYSYMBOL_Iconst = 884,                   /* Iconst  */
  YYSYMBOL_Sconst = 885,                   /* Sconst  */
  YYSYMBOL_ColId = 886,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 887,            /* ColIdOrString  */
  YYSYMBOL_type_function_name = 888,       /* type_function_name  */
  YYSYMBOL_function_name_token = 889,      /* function_name_token  */
  YYSYMBOL_type_name_token = 890,          /* type_name_token  */
  YYSYMBOL_any_name = 891,                 /* any_name  */
  YYSYMBOL_attrs = 892,                    /* attrs  */
  YYSYMBOL_opt_name_list = 893,            /* opt_name_list  */
  YYSYMBOL_param_name = 894,               /* param_name  */
  YYSYMBOL_ColLabel = 895,                 /* ColLabel  */
  YYSYMBOL_ColLabelOrString = 896,         /* ColLabelOrString  */
  YYSYMBOL_named_param = 897,              /* named_param  */
  YYSYMBOL_TransactionStmt = 898,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 899,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 900,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 901,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 902,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 903,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 904,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 905,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 906,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 907,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 908,            /* generic_reset  */
  YYSYMBOL_reset_rest = 909,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 910,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 911,                 /* set_rest  */
  YYSYMBOL_generic_set = 912,              /* generic_set  */
  YYSYMBOL_var_value = 913,                /* var_value  */
  YYSYMBOL_zone_value = 914,               /* zone_value  */
  YYSYMBOL_var_list = 915,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 916,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 917,         /* show_or_describe  */
  YYSYMBOL_var_name = 918,                 /* var_name  */
  YYSYMBOL_table_id = 919,                 /* table_id  */
  YYSYMBOL_ViewStmt = 920,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 921          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  688
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   61112

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  511
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  411
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1970
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3233

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   743


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   505,   506,   495,     2,     2,
     500,   501,   493,   491,   504,   492,   502,   494,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   510,   503,
     487,   489,   488,   507,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   498,     2,   499,   496,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   508,     2,   509,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   490,   497
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   479,   479,   495,   507,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   529,   530,
     531,   532,   533,   534,   535,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   554,     9,    18,    27,    36,    45,    54,    63,
      72,    85,    87,    93,    94,    99,   103,   107,   118,   126,
     130,   139,   148,   157,   166,   175,   184,   192,   200,   209,
     218,   227,   236,   253,   262,   271,   280,   290,   303,   318,
     327,   335,   350,   358,   368,   378,   385,   392,   400,   407,
     418,   419,   424,   428,   433,   438,   446,   447,   452,   456,
     457,   458,     7,    13,    19,    25,     6,    15,    25,    35,
      45,    55,    65,    75,    85,    95,   106,   117,   127,   140,
     141,     8,    21,    27,    34,    40,    47,    57,    61,    70,
      79,    88,    95,    96,   101,   113,   118,   143,   153,   163,
     169,   180,   191,   206,   207,   213,   214,   219,   220,   226,
     227,   231,   232,   237,   239,   245,   246,   250,   251,   254,
     255,   260,     7,    16,    25,    46,    47,    50,    54,     7,
      14,    22,     9,    19,    32,    33,     7,    14,    31,    51,
      52,     9,    17,    29,    30,    34,    35,    36,    41,    42,
      43,    48,    52,    56,    60,    64,    68,    72,    76,    80,
      84,    88,    92,    97,   101,   105,   112,   113,   117,   118,
     119,     2,     9,    15,    21,    28,    35,    45,    46,    47,
       2,     7,    21,    36,    56,    57,    84,    85,    86,    87,
      88,    89,    93,    94,    99,   104,   105,   106,   107,   108,
     113,   120,   121,   122,   139,   146,   153,   163,   173,   185,
     193,   202,   220,   221,   225,   226,   230,   239,   262,   276,
     283,   288,   290,   292,   294,   297,   300,   301,   302,   303,
     308,   312,   313,   318,   325,   330,   331,   332,   333,   334,
     335,   336,   337,   343,   344,   348,   353,   360,   367,   374,
     386,   387,   388,   389,   393,   398,   399,   400,   405,   410,
     411,   412,   413,   414,   415,   420,   440,   469,   470,   474,
     478,   479,   480,   484,   488,   496,   497,   502,   503,   504,
     508,   516,   517,   522,   523,   527,   532,   536,   540,   545,
     553,   554,   558,   559,   563,   564,   570,   581,   594,   608,
     622,   636,   650,   673,   677,   684,   688,   696,   701,   708,
     718,   719,   720,   721,   722,   729,   736,   737,   742,   743,
       9,    19,    29,    39,    49,    59,    69,    79,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   115,   116,   117,   118,
     119,   120,   125,   126,   131,   132,   133,   138,   139,   140,
     143,   144,     8,    20,    33,    46,    58,    70,    86,    87,
      91,    95,     7,     1,    30,    53,    54,    59,    63,    68,
      72,    80,    81,    85,    86,    91,    92,    96,    97,   102,
     103,   104,   105,   106,   111,   119,   123,   128,   129,   134,
     138,   143,   147,   151,   155,   159,   163,   167,   171,   175,
     179,   183,   187,   191,   195,   199,   203,   211,   217,   218,
     219,   224,   228,    47,    48,    52,    53,    68,    69,    76,
      84,    92,   100,   108,   116,   127,   128,   155,   160,   168,
     184,   201,   218,   235,   236,   255,   259,   263,   267,   284,
     291,   298,   308,   309,   312,   324,   335,   343,   348,   353,
     358,   363,   371,   379,   384,   389,   396,   397,   401,   402,
     403,   407,   414,   415,   419,   420,   424,   425,   426,   430,
     431,   435,   436,   446,   459,   460,   463,   472,   483,   484,
     485,   488,   489,   490,   494,   495,   496,   497,   501,   502,
     506,   508,   524,   526,   531,   534,   542,   546,   550,   554,
     558,   562,   569,   574,   581,   582,   586,   591,   595,   599,
     607,   614,   615,   620,   621,   625,   626,   631,   633,   635,
     640,   660,   661,   663,   668,   669,   673,   674,   677,   678,
     703,   704,   709,   714,   718,   719,   723,   724,   728,   729,
     730,   731,   732,   736,   749,   756,   763,   770,   771,   775,
     776,   780,   781,   785,   786,   790,   791,   795,   796,   800,
     811,   812,   813,   814,   818,   819,   824,   825,   826,   835,
     841,   850,   851,   864,   865,   869,   870,   874,   875,   881,
     887,   895,   904,   912,   921,   930,   934,   960,   964,   977,
     991,  1006,  1018,  1034,  1040,  1045,  1051,  1058,  1059,  1067,
    1071,  1075,  1081,  1088,  1093,  1094,  1095,  1096,  1100,  1101,
    1113,  1114,  1119,  1126,  1133,  1140,  1172,  1183,  1196,  1201,
    1202,  1205,  1206,  1209,  1210,  1215,  1216,  1221,  1225,  1231,
    1252,  1260,  1273,  1276,  1280,  1280,  1283,  1284,  1286,  1291,
    1298,  1303,  1309,  1314,  1320,  1326,  1332,  1341,  1343,  1346,
    1350,  1351,  1352,  1353,  1354,  1355,  1360,  1380,  1381,  1382,
    1383,  1394,  1408,  1409,  1415,  1420,  1425,  1430,  1435,  1440,
    1445,  1450,  1456,  1462,  1468,  1475,  1497,  1506,  1510,  1518,
    1522,  1530,  1542,  1563,  1567,  1573,  1577,  1590,  1598,  1608,
    1610,  1612,  1614,  1616,  1618,  1623,  1624,  1631,  1640,  1648,
    1657,  1668,  1676,  1677,  1678,  1682,  1682,  1685,  1685,  1688,
    1688,  1691,  1691,  1694,  1694,  1697,  1697,  1700,  1700,  1703,
    1703,  1706,  1708,  1710,  1712,  1714,  1716,  1718,  1720,  1722,
    1727,  1732,  1738,  1745,  1750,  1756,  1762,  1793,  1795,  1797,
    1805,  1820,  1822,  1824,  1826,  1828,  1830,  1832,  1834,  1836,
    1838,  1840,  1842,  1844,  1846,  1848,  1851,  1853,  1855,  1858,
    1860,  1862,  1864,  1866,  1871,  1876,  1883,  1888,  1895,  1900,
    1907,  1912,  1920,  1928,  1936,  1944,  1962,  1970,  1978,  1986,
    1994,  2002,  2010,  2014,  2030,  2038,  2046,  2054,  2062,  2070,
    2078,  2082,  2086,  2090,  2094,  2102,  2110,  2118,  2126,  2146,
    2168,  2179,  2186,  2200,  2209,  2228,  2230,  2232,  2234,  2236,
    2238,  2240,  2242,  2244,  2246,  2248,  2250,  2252,  2254,  2256,
    2258,  2260,  2262,  2264,  2266,  2268,  2272,  2276,  2280,  2294,
    2295,  2296,  2303,  2315,  2319,  2323,  2327,  2330,  2341,  2346,
    2348,  2359,  2383,  2394,  2405,  2409,  2416,  2420,  2425,  2430,
    2434,  2441,  2449,  2457,  2468,  2476,  2504,  2540,  2551,  2552,
    2559,  2565,  2569,  2573,  2577,  2581,  2585,  2589,  2593,  2597,
    2601,  2605,  2609,  2613,  2617,  2621,  2625,  2627,  2629,  2633,
    2642,  2647,  2654,  2669,  2676,  2680,  2684,  2688,  2692,  2702,
    2711,  2733,  2734,  2738,  2739,  2740,  2744,  2745,  2752,  2753,
    2757,  2758,  2763,  2771,  2773,  2787,  2790,  2817,  2818,  2821,
    2822,  2833,  2839,  2846,  2855,  2872,  2917,  2925,  2933,  2941,
    2949,  2970,  2971,  2974,  2975,  2979,  2989,  2990,  2994,  2995,
    2999,  3000,  3001,  3004,  3005,  3008,  3009,  3010,  3011,  3012,
    3013,  3014,  3015,  3016,  3017,  3018,  3019,  3020,  3023,  3025,
    3030,  3032,  3037,  3039,  3041,  3043,  3045,  3047,  3049,  3051,
    3065,  3067,  3071,  3075,  3082,  3087,  3094,  3099,  3107,  3111,
    3117,  3121,  3130,  3141,  3142,  3146,  3150,  3157,  3158,  3159,
    3160,  3161,  3162,  3163,  3164,  3165,  3166,  3176,  3180,  3187,
    3194,  3195,  3211,  3215,  3220,  3224,  3239,  3244,  3248,  3251,
    3254,  3255,  3256,  3259,  3266,  3276,  3290,  3291,  3295,  3306,
    3307,  3310,  3311,  3314,  3318,  3325,  3329,  3337,  3348,  3349,
    3353,  3354,  3358,  3359,  3362,  3363,  3373,  3374,  3378,  3379,
    3383,  3384,  3387,  3403,  3411,  3419,  3434,  3452,  3453,  3456,
    3457,  3460,  3464,  3465,  3469,  3470,  3473,  3474,  3475,  3485,
    3486,  3497,  3501,  3529,  3531,  3537,  3538,  3541,  3543,  3553,
    3556,  3567,  3571,  3575,  3587,  3591,  3600,  3607,  3645,  3649,
    3653,  3657,  3661,  3665,  3669,  3675,  3676,  3692,  3693,  3694,
    3697,  3698,  3704,  3705,  3706,  3709,  3710,  3711,  3714,  3715,
    3716,  3719,  3720,  3723,  3725,  3730,  3731,  3734,  3742,  3743,
    3744,  3745,  3748,  3749,  3752,     7,    18,    19,    23,    24,
      25,    26,     7,    26,    54,    61,    66,    67,    68,    69,
       8,    33,    62,    66,    67,    72,    73,    78,    79,    83,
      84,    89,    90,     7,    16,    25,    34,    43,    52,     5,
      12,    22,    23,     7,    19,    33,     9,    16,    26,    33,
      44,    45,    50,    51,    52,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    90,    91,    92,    97,    98,
     103,   107,   115,   116,   121,   122,   123,   129,   134,   142,
     143,    10,    16,    22,    28,    38,    39,    47,    58,    70,
      78,    86,    93,   103,   105,   111,   115,   119,   134,   141,
     142,   143,   147,   148,     7,    14,    20,    28,    29,     8,
      22,    36,    48,    56,    70,    71,    72,    73,    74,    87,
      88,    93,    94,    98,    99,     7,    18,    31,    35,    42,
      53,    54,    60,    61,     9,    19,     7,    18,    28,    38,
      50,    51,    55,    56,    59,    62,    63,     2,     7,    15,
      26,    27,    34,     3,    10,    17,    24,    31,    38,    45,
      52,    61,    61,    63,    64,    68,    69,     6,     8,    21,
      34,    47,    65,    87,    88,    89,    90,    11,    24,    37,
      54,    55,    56,    61,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "POWER_OF", "LAMBDA_ARROW",
  "DOUBLE_ARROW", "LESS_EQUALS", "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P",
  "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE",
  "ALL", "ALSO", "ALTER", "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY",
  "ARRAY", "AS", "ASC_P", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT",
  "ATTACH", "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P",
  "BETWEEN", "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE",
  "CALL_P", "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CHAIN", "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P",
  "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE",
  "COLLATION", "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT",
  "COMMITTED", "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT",
  "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P",
  "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE",
  "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
  "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "HANDLER", "HAVING",
  "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT",
  "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P",
  "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P",
  "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT",
  "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION",
  "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH",
  "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P",
  "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL",
  "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P",
  "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE",
  "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
  "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USE_P", "USER", "USING", "VACUUM", "VALID",
  "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC",
  "VARYING", "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL",
  "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN",
  "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES",
  "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES",
  "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P",
  "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'",
  "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'",
  "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','", "'#'", "'$'",
  "'?'", "'{'", "'}'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "ident_name", "ident_list", "CallStmt",
  "CheckPointStmt", "opt_col_id", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list",
  "set_clause_list_opt_comma", "index_params", "set_target", "LoadStmt",
  "file_name", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "joined_table", "alias_clause", "opt_alias_clause", "func_alias_clause",
  "join_type", "join_outer", "join_qual", "relation_expr", "func_table",
  "rowsfrom_item", "rowsfrom_list", "opt_col_def_list", "opt_ordinality",
  "where_clause", "TableFuncElementList", "TableFuncElement",
  "opt_collate_clause", "colid_type_list", "RowOrStruct", "opt_Typename",
  "Typename", "opt_array_bounds", "SimpleTypename", "ConstTypename",
  "GenericType", "opt_type_modifiers", "Numeric", "opt_float", "Bit",
  "ConstBit", "BitWithLength", "BitWithoutLength", "Character",
  "ConstCharacter", "CharacterWithLength", "CharacterWithoutLength",
  "character", "opt_varying", "ConstDatetime", "ConstInterval",
  "opt_timezone", "year_keyword", "month_keyword", "day_keyword",
  "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "indirection_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr", "list_comprehension",
  "within_group_clause", "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
  "target_list", "target_list_opt_comma", "target_el", "except_list",
  "opt_except_list", "replace_list_el", "replace_list",
  "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
  "qualified_name", "name_list", "name_list_opt_comma", "name",
  "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
  "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "named_param", "TransactionStmt",
  "opt_transaction", "UpdateStmt", "UseStmt", "VacuumStmt",
  "vacuum_option_elem", "opt_full", "vacuum_option_list", "opt_freeze",
  "VariableResetStmt", "generic_reset", "reset_rest", "VariableSetStmt",
  "set_rest", "generic_set", "var_value", "zone_value", "var_list",
  "VariableShowStmt", "show_or_describe", "var_name", "table_id",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2728)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1899)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    5170,   -48,   838, -2728, -2728,   287,   -48, 39555, 54887,   -48,
      90,  1446, 41945, -2728,   406,  7060,   -48, 46229, 60611,   310,
     256, 24277,   327, 46710, 46710, 54887, 46229, 47191,   -48,   291,
   55368, -2728,   -48, 26682, 42426,   279, 46229,   -22,   189, 47672,
   46229,   788,   762,   263, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728,   329, -2728, -2728, -2728, -2728,
     163, -2728, -2728, -2728, -2728, -2728,   131, -2728,   162,   144,
     667,   268, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   26201, -2728, -2728, -2728, -2728, 48153, 46229, 48634, 42907, 49115,
   -2728,   822, -2728,   149, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728,   164, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728,   169, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728,   171, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728,   181, -2728, -2728, -2728,   359,
     577, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728,   788, 46229,   -55,   556,   557, 49596, -2728, -2728, 46229,
   -2728, -2728,   765,   732, -2728, -2728, 43388, -2728, -2728, -2728,
   -2728, 55849, -2728,   433,   716, -2728, -2728, -2728,   591, -2728,
     155, -2728, -2728,   635,   593, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728,   713, -2728, 43869, -2728, 56330, 50077, 50558,
   -2728,   594, 60612, 24758, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728,   329, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, 46710, 54887, 46710,   617,
     623,   945,   194,   210,   217,   219,   641,   676,   222,   682,
   25239,   687,   691,   721, 27164,   725,   745,   993,   223,   752,
     773,   781,   795,   225,   189, 23312, 51039, 51039,   -40,  1268,
   -2728, 51039, 51520, -2728,   743, -2728,   809,   577, -2728,   822,
   -2728, -2728, -2728, -2728, -2728,   -95,   816, -2728,   889,  1043,
   -2728, -2728, -2728,   877, -2728, -2728,  1126, 11209, 11209, 56811,
   56811,   822, 56811,   948, -2728, -2728,    75, -2728, -2728,   667,
   -2728,   944, -2728,   577, -2728, 42426, -2728, -2728,   305,  1283,
   16269, 46229,   965, -2728,   973,   965,   985,  1006, -2728,  5170,
   -2728, 46229,  1322,  1295, 42426,   396,   396,  1461,   396,   607,
     753, -2728,  1000, -2728,  1023, -2728,  1052,  1332, -2728,   944,
    1424,   319,  1252,  1450,  3182,  1468,   320,  1470,   751,  1567,
    8173, 16269, 37150, -2728,   577,  1112,  1118, -2728, -2728, -2728,
   -2728,   645,  1354, -2728,  1594, -2728, -2728,  1176, 52001, 52482,
   52963, 53444,  1561, -2728, -2728,  1498,  1161,  1180, -2728,  1683,
   -2728, -2728,  1212, -2728, -2728, -2728,   128, -2728, -2728, -2728,
   -2728,  1247, -2728,  1247,  1247, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728,  1200,  1200,  1387,  1207, -2728, -2728,
   -2728,  1557, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728,  1211,  1138, -2728,  1247, -2728,  1200, -2728, -2728,
   -2728, -2728, -2728, -2728, 59682, -2728, -2728, -2728, -2728,   380,
     684, -2728,  1215, -2728, -2728, -2728, -2728, -2728,   172,  1217,
   -2728,  1684, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
    1225, -2728,  2162,  1200,  1576,   180,  1578,   202, -2728,  1583,
    1452, 16269, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728,   189, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728,   719, -2728, -2728, 34512, 60612,  1241,  1330, -2728,
   -2728, 16269, 16269,  1249,  1745,  1745,  3280, 51039, 51520,  1745,
    1745, 16269, 46229, -2728, 16269, 20317,  1255, 16269, 16269,  9185,
   16269, 22831, 51039,  1268,  1257, 46229, -2728,  1348,  1259,  1348,
     291, 24277,  1543,  1539,  1467, -2728, 24277,  1467,   221,  1467,
    1540,  1348, 27645, -2728,  1348,  1264,  1475, -2728, -2728,   640,
   -2728, 34512, 16775, 44335,  1733, -2728,  1541, 54887,  1278, -2728,
   -2728, -2728, -2728, -2728, -2728,   779,  1777,   148,  1778, 16269,
     148,   148,  1284,   231,   231, -2728,  1286, -2728,   232,  1287,
    1291,  1788,  1789,   159,  1138,   148, 16269, -2728,   231,  1296,
    1790,  1297,  1793,   156,   158, -2728,   244, 16269, 16269, 16269,
    1653, 16269,  8679,  1794,  1799, -2728, 46229,   577,  1305,   822,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,   188,  5708,
   -2728, -2728,  1344, -2728, -2728, -2728, -2728,  1511, 16269, -2728,
   -2728,  1306,  1543, -2728,   248, -2728, -2728, -2728,   688,  1543,
   -2728, -2728, -2728, -2728, -2728,   267,  1715, 33550, 34031, 54887,
     577, -2728, 57292, -2728, -2728, -2728, -2728, -2728, -2728,   729,
   -2728,   329, 36164,  1313,  1317,   577,   965, 46229, 46229,  1782,
   -2728, -2728, -2728,   973, 42426, 46229,  1449, -2728, -2728,   667,
     667, 10197,   707,   201,  1153, 11715, 17281,  1660,  1545,   204,
     737,  1665, -2728,  1551,   607,   753, 16269, -2728,  1601, 46229,
   40036,   921,   986,  1343,  1418,  1355,    45,  1769, -2728,  1358,
   -2728,  1442, 46229, 59682,   264, -2728,  1807,   264,   264,   282,
    1809,  1458,   383,  1613,    34,    80,  2936, -2728,  1358, 42426,
     198,    52,  1358, 46229,  1462,    60,  1358, 54887,  1241,   143,
   16775,  1224,  1298,   348,   191,  1307,  1370,   153,   157,   168,
     170,   175, 16775,  1466,  1485,   182,  1585,  1595,  1621,  1623,
    1625,  1630,  1635,  1639,   187,  1641,  1644,  1646,  1650,  1655,
     193,  1662,   197,  1667,   253,   203, 16775,  1675,  1377, -2728,
     207, -2728, 36164,    -2, -2728, -2728,  1677, 31579,  1372, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,  1469,
   54887,  1423,   647,  1735,  1795, 44801, 46229,  1616,  2936,  1617,
    1853,  1392,  1626,  1118,  1627,  1395, -2728, 57773, 54887, 54887,
   37150,  1407, -2728, -2728, -2728, -2728, -2728, -2728, -2728,  1415,
   -2728, -2728, 16269, -2728, -2728, -2728,  1745, -2728, 44335, 44335,
    1247,  1247, -2728, -2728,  1860,  1501,  1503,  1745, -2728,  1745,
   -2728, 54887, -2728, -2728, 44335, -2728, 54887,  1421,  1426,  1745,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728,  1745,  1504, -2728,  1505,
    1509,  1510, -2728, -2728, -2728, -2728, -2728, 54887, -2728, 46229,
   46229, -2728, 46229, 54887,  1427, 60612, 39074, -2728, -2728, -2728,
   -2728,   399,   553, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, 37150, -2728,  3467,   822, 35052,  1428, 16269,  1429,
    1430, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
    1431,  1763, -2728, -2728, -2728,  1437,  1438,  5660,  1440, 35088,
    1443, 20317, 20317,  1592, -2728, -2728, 20317,  1447, 38112, 35003,
    1439,  1448, 35133, 12221, 16269, 12221, 12221, 35543, -2728,  1451,
   35622, 51039,  1455, 45267, -2728, -2728, 46229, -2728, 11209, 11209,
    1268, 45748,  1494, 24277, -2728, -2728,   790, -2728, 24277,  1734,
   -2728, 24277, -2728, 46229,  1457, -2728, 46229, -2728, -2728, -2728,
   -2728,  1454,   764, -2728,   771,   968, -2728, -2728, 16269, 16269,
   -2728, 36164,  1502,   134, -2728,  5845, 30053, 12727,  5845,  1948,
    1948, 28126, -2728,  1618, 35667, -2728,  1464,  2514,  6763,  1465,
   -2728, -2728, -2728, -2728,  1476,  1456,  1460,   577, 16269, -2728,
   16269,  4421,  4421, -2728,   214, 44335, 16269, 16269, 16269, 16269,
   16269, 16269, 16269, 36669,  1546,   205, 54887, 16269, 16269,  1479,
    1237, -2728, 16269,  1689, -2728,  1482, 16269,  1566,   928, 16269,
   16269, 16269, 16269, 16269, 16269, 16269, 16269, 16269, -2728, -2728,
   22341,   281,   577,  1805,  1822,   -52,   337, 11209,  1815,  8173,
   -2728,   577, 32107,   138,  1815, -2728, -2728, -2728, -2728,   249,
   -2728, -2728, -2728, -2728,  1454, -2728,  1454, -2728, 54887, -2728,
   46229,   305, 41464, 16269, -2728, -2728,  1484,  1486,  1489, -2728,
    1548,  2031,  1954, 28607,  1780, -2728,   314,   314,  1493, -2728,
   34990,  1730,  1780,   667, -2728, -2728, 20823,  1619,  1775,  1713,
   -2728, -2728,  1694,  1698, -2728,  1506, 36193, 17787, 17787, -2728,
    1335, 36164,  1338, -2728, -2728, -2728, -2728, -2728, -2728,   910,
   -2728, 46229,   435,  1660,   737,  1512, -2728,   812,  1516, 58254,
   46229,  1785,  1746,  1798,   -59, -2728, -2728, -2728, 44335, -2728,
   46229, 54887, 53925, 58735, 37631, 46229, 37150, -2728, -2728, -2728,
   -2728, 46229,  1150, 46229,  7133, -2728, -2728, -2728,   264, -2728,
   -2728, -2728, -2728, -2728, 54887, 46229, -2728, -2728,   264, 54887,
   46229,   264, -2728,   837, 46229, 46229, 46229, 46229,   958, 46229,
   46229, -2728, -2728,     8,     8,  1709, -2728, 13233,   140, -2728,
   16269, 16269, -2728, 16269,  1699, -2728,   793, -2728,  1740,    92,
    1565, 46229, 46229, 46229, 46229,   814, -2728, -2728, -2728, -2728,
   -2728,  1526, -2728,  1528,  1880,  2936, -2728,  1882,   805, 40517,
     950,  1883,  1577,  1886, 13739,  2002,  1771, -2728,  1754, -2728,
    1161, -2728, -2728, 37150, 16269,  1544,  1547,   172,   806, -2728,
   -2728,  1552,  1426,  1568,  1570,  1554,  1555,   829, 44335, -2728,
     835,  1745,   127,  1559,  1562,  1453,  1014,   894,  1352,   180,
     202, -2728,  1772,   238, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728,   846, 23796, -2728, -2728,  2006,   822,  2006,   844,
   -2728, -2728,  2006, -2728,  2008,  2006, -2728,  1241, 44335, -2728,
    7006, -2728, -2728, -2728, 16269, -2728, -2728, 16269, -2728, 16269,
    1887, -2728,  2051,  2051, 44335, 20317, 20317, 20317, 20317, 20317,
     786,  1296, 20317, 20317, 20317, 20317, 20317, 20317, 20317, 20317,
   20317, 21329,   415, -2728, -2728,   852,  2028, 16269, 16269,  1901,
    1887, 16269, -2728, 44335,  1569, -2728,  1575,  1581, 16269, -2728,
   44335, -2728, 46229,   -19,    18,  1589,  1591, -2728, -2728,  1593,
    1543, -2728,  1010,  1015, 46229,  3198,  3728,  3924, -2728, -2728,
   16269,  1888, -2728, 16269,  1596, -2728, -2728, 24277,   790,   891,
   -2728, 44335, 46229,   900, 44335, 34512, -2728, 16775, -2728, 44335,
   -2728, -2728, -2728, -2728, -2728,  1597,  1579, 16269,   126, -2728,
    1653,  1598, -2728, -2728, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728,  1599,  1590, -2728,
    1600, 46229, -2728, 18293, -2728, 54887, -2728, -2728, 16269, 46229,
   -2728, 16269,  1603,  7042, -2728, -2728, -2728,   361,  4750,   337,
    5895,  5895,  5895,  5845, -2728, -2728, -2728,  1612, -2728, 20317,
   20317, -2728,  6451,  2484,  8679, -2728, -2728,  1906, -2728,  1238,
   -2728,  1605, -2728, -2728,  3986, -2728, 30053,  4933, 16269,   206,
   -2728, 16269,  1479, 16269,  1680,  5895,  5895,  5895,   447,   447,
     208,   208,   208,   361,   337, -2728, -2728, -2728,  1606, -2728,
    1611,  1614,  1960,  1297, 16269, -2728, -2728, 24277,  1494,    -2,
    1653,  1494,  1745,  4421, -2728,   973, -2728, -2728, -2728, 36164,
   46229, -2728,   968, 24277,  1658,  1676,   -31, 26682,  1836, -2728,
   54887, 54887, -2728,  1622,  1815,  1638, -2728, -2728, -2728,  1645,
    1645, 16269,  1686,  1645, -2728,  1780,   -14,  1844,  1087,  1087,
    1335,  1845, -2728, -2728,  1697, -2728, -2728, -2728, 16269,  9691,
    1386, -2728,  1388, -2728, -2728, -2728, -2728,  1633, -2728, -2728,
    1895, -2728, -2728, -2728, -2728,  1722,  1358, 16269,  1868, -2728,
     173,  1643,  1989,   454,  1944, 54887, -2728,   269,   275, -2728,
     160,  1993,   238,  1995,   238, 37150, 37150, 37150,   901, -2728,
   -2728,   822, -2728, -2728,   905, -2728,    57, -2728, -2728, -2728,
    1736,   609,  2936,  1358, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728,   246,   633,  1358,  1737, -2728,  1739, -2728,  1741,   689,
    1358, -2728, -2728,   140,   140,   140, 16775, -2728,  1871,  1872,
    1651, 36164, 36164, 36164,  1661, -2728,   376, -2728, 54887, -2728,
   -2728, -2728,  1699, 46229,  2119,  1659,  1118,  1395, -2728,  1818,
     653,   135, -2728, 54887, 46229, 46229, 46229,  1701, 46229, -2728,
   -2728, -2728,  1663,  1664, -2728, 40998,   -16,  1881,  1897, 46229,
    1355,  2129, 46229, -2728,   906, 14245,  2018, 46229, -2728,  1670,
   -2728, -2728, -2728, -2728,  1745, -2728, -2728,   529,   529, -2728,
   54887, -2728, -2728,  1687, -2728,  1690, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728, -2728, 54887, -2728, -2728,
   37150, -2728, 38593, -2728, -2728, -2728, -2728,   822, -2728,   822,
    1918, 54887, 32588,   822, 33069,   822, -2728,  1695, -2728, 36164,
   30542, 36164,  1901, -2728,  2051,  4316,  4316,  4316,  1757,  2026,
     235,  1700,  4316,  4316,  4316,   512,   512,   220,   220,   220,
    2051,   415,   743, 38112,  1704, -2728, 36164, 36164, -2728, -2728,
    1706, -2728, -2728, -2728, -2728,  1710,  1712, -2728, -2728, -2728,
   -2728, -2728, 54887,  1159, -2728,  1494,   279,   279,   279,   279,
   -2728, 46229, 46229, 46229, 36164,  2143,  2017, 36164, 46229, -2728,
   -2728, -2728, 46229,  2135,   907, -2728, -2728, -2728, -2728, -2728,
   35753, 16269, -2728,  2071,  1618, -2728, -2728, 30053, -2728,  1714,
    8679, 35857, -2728,  2019, 30571, -2728, 36164, -2728,  4421, 16269,
    2246,  3019, 16269,  1716, 16269,  2047, -2728, -2728,  1719, -2728,
   -2728, 44335, 16269,  1720,  4195, 20317, 20317,  5143, -2728,  5827,
   16269,  8679, -2728,  1709, 14751, -2728,  1923,  1718, -2728,  1888,
     140,  1618,  1888,  1723, -2728, -2728,  1724, -2728, 16269,  1873,
   -2728, -2728, -2728,  1779, -2728,   925, -2728,  2141,  1873, -2728,
     934, -2728, 28607,  1658, 16269,   577,   161, -2728, -2728, -2728,
    1728, -2728,  1645, -2728, -2728, -2728,  1941, -2728, -2728, -2728,
   46229, -2728, 46229, 30607,  2078, -2728, 54887, 54887, 54887, -2728,
   54887,  1732,  1731,  1013,  1738,   992, -2728,  1508,  1013,  2059,
     226,  1355,   383,  3575,   536, -2728, -2728, -2728,  1811, 46229,
   -2728, 54887, -2728, -2728, -2728, -2728, -2728, 37631, -2728, -2728,
   -2728, 37150, 29571, 37150, 46229, 46229, 46229, 46229, 46229, 46229,
   46229, 46229, 46229, 46229,  1742,  1755,  1758,  1709, -2728, -2728,
   -2728, -2728, -2728, -2728,    80, -2728, -2728,   376,  1747,   788,
   40517,  1577,  2199,  1795,   645, 54406,  1759,  1764, -2728,   946,
    2936,  2202,  1762,   594,   237, -2728, -2728,   950, 40517, -2728,
   -2728, -2728,  2160, -2728,  1118, -2728,   788,  1395, -2728,   788,
   36164, 54887,  1816, -2728,  1426,  1768, -2728, -2728,  1426, 44335,
    1426, -2728, -2728,   238, -2728,   987, -2728, -2728, -2728, -2728,
   54887,  1765, -2728,  1765, -2728, -2728,  1765, -2728, -2728, -2728,
   -2728, 20317,  2092,  1770, 44335, -2728, -2728, 46229, -2728, -2728,
   -2728,  1002,  1781,  1888, 46229, 46229, 46229, 46229, -2728, -2728,
   -2728, 10703, 16269,  1810,  1783, -2728, 54887, -2728, -2728, 16269,
   36164, -2728,  1784, -2728, -2728,  6638, -2728,  1776,  1801, 54887,
   16269, -2728, -2728,   810, 16269, 16269,  6451, -2728,  6234, 16269,
   44335,  1004,  6451,   286, 16269,  3961,  4576, 16269, 16269,  6168,
   30636,  1803, 16269, 30921, 29088, -2728, 24277,  2017,  1808, -2728,
    2017,   822, -2728, 36164, 11209, -2728,   788,  1142, 54887,   577,
       1, -2728,  1797, 54887, -2728,  1873, 36164, -2728, -2728, 30053,
   -2728, -2728, -2728, -2728, -2728, 54887,  1812, -2728,  1813,  1013,
   -2728, 54887,  1817, -2728,   236,  2070,   230, -2728, 16269, -2728,
    2166,  2252,  1508,  1806, 54887, 46229, 20317, -2728,   280,   211,
   -2728,  2084, 46229,  1817,  2211, -2728, -2728, -2728,   992, -2728,
    2120,  2034, -2728,   264, -2728, 16269,   992,  2038,   132, 54887,
   -2728, -2728,  2529, -2728, 44335,   238,   238, -2728, -2728,  1814,
    1819,  1820,  1821,  1823,  1824,  1825,  1826,  1827,  1828,  1832,
    1834,  1835,  1837, -2728,  1838,  1841,  1846,  1849,  1851,  1854,
    1855,  1858,  1211,  1863, -2728,  1864,  1728,  1866,  1867,  1874,
    1875, 59216,  1876,  1877,  1878,  1885,  1215,  1889,  1890,   399,
     553, -2728, -2728, -2728,  1892, -2728, -2728, -2728, -2728,  1180,
    1829, -2728, -2728,  1900, -2728,  1902, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728,   140,  1241,   136, 54887,  1701,  1898,
    2300, 15257,   491,  2074,  1904, -2728,   822,  1577, -2728,   828,
   40517,  1701, -2728,  2264,   611,  1897, -2728,   199,  1577,  1912,
    2337, -2728,  2096, 54887,  1905, -2728, -2728, -2728, -2728, 38593,
    1765,  1804, 20317, 44335,  1012,  1017, -2728,  2373,  2042,  2017,
   -2728, -2728, -2728, -2728, -2728,  1908,   -62,  1910, -2728,  7667,
    1907, -2728, -2728, -2728, -2728, -2728, -2728, 36164, 36164, 54887,
    2061, -2728, -2728, 36164, -2728, 16269, -2728, -2728, 31592,  2196,
    6451,  6451,  6234,  1021, -2728,  6451, 16269, 16269,  6451,  6451,
   16269, -2728, -2728, 30950, -2728, 60148, -2728, -2728,  1810,   822,
    1810, -2728,  1909, -2728,   -31, -2728, -2728,  2302, 25720,  2269,
   16269, -2728, -2728,  1911,  1013, -2728,  2085,  1817,  1920, -2728,
   -2728, -2728, -2728, -2728, -2728, 31069, -2728,    63, 16269, -2728,
     772,  1757, -2728, -2728, -2728, -2728,  1817,  1118, -2728, 46229,
    2368,  2272, -2728, -2728, 36164, -2728, -2728,  1745,  1745, -2728,
   -2728,  2135, -2728, -2728, -2728, -2728,  1180,   355, 29571, 46229,
   46229,  1924, -2728, -2728,    80,  2303,  1056, -2728,   950,   788,
     788, 36164, 46229,  2274, 40517, -2728,  2390, 46229,  1701,  1928,
   -2728, -2728,  1042,  1042, -2728,  2077, -2728,  2082,  2398,   234,
   -2728, 15763, 46229, -2728, -2728, 25720, -2728,  1804,  1057, -2728,
   -2728,  1940,  1942, -2728,  1810, 16269,  1943, 16269, -2728, 18799,
    1945, -2728,  2406, 16269,  2003, -2728, -2728, 16269, -2728,  6451,
    6451,  6451, -2728,  2142, -2728,  2061, -2728,  2061, 11209,  2005,
   46229, 16269, -2728,  1070,  2378,    71,    81, 36164, -2728, 46229,
   -2728, 37150, -2728,  1013,   -68,  1957, 16269, 31201,  2181, -2728,
   -2728,  2212, -2728,  2270, -2728,  2020,   509,  2033, -2728, -2728,
   -2728, -2728,  1241,   822,  1577,  1897,  1912, -2728,  1963, 46229,
     788,   594, -2728,   950, -2728, -2728, -2728, -2728, -2728, -2728,
   -2728, -2728, -2728, -2728, -2728, -2728,   788,  2395,  2177,  2399,
     788, 36164,  1816,  1071, -2728, -2728,  2460,  2061,  1969, 18799,
    1970, -2728, 54887,  1972, 36164,  2113, -2728, 31628,  2418,  1709,
    2003,  2003,   788, -2728, 31299,  1494, 25720, 54887, 54887, 54887,
   -2728,  2099,  1118,  1013,  1077, -2728,  1987, -2728, -2728, -2728,
   -2728,  2936, -2728, 31349,  2207,   186,  2191,  1957, 16269, -2728,
    2052, -2728, -2728, -2728,  2459, -2728, -2728, 40517,  1998,  1912,
    1701,  1897,  1912,  2210, -2728,  2218, -2728,  2001,  1577,  2009,
    2003, -2728,  2010, -2728, -2728, -2728, 45267, -2728, 16269,    70,
   -2728, -2728, -2728,  2378, -2728, -2728, -2728,   314, -2728,   314,
   28607,  2212, -2728, 37150, 29571,  1028,   -68,  2310, -2728, -2728,
   -2728, -2728,    96,  2215, -2728,  2226, -2728, 36164, -2728,   788,
   40517, -2728, -2728, -2728, -2728, -2728, -2728, 25720,  1494, -2728,
   -2728, -2728, -2728,  1439, 19305, 19305,  2013, 54887,  1645,  1645,
    1494,  2191, -2728, -2728, -2728, -2728, -2728,   505,   505,  2393,
   -2728,  2079, -2728,  1912,  1083, -2728, 21835,  2159,   137, 35039,
   -2728, -2728, -2728, -2728,   314, -2728, -2728, -2728, -2728, -2728,
    2495, -2728,   177, -2728, -2728, -2728,  1577,  2485, -2728, -2728,
   -2728, -2728, -2728,  1645,  1013, -2728, -2728, -2728,  1494, 19811,
   -2728, -2728, -2728
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     133,   219,     0,  1243,  1242,  1311,   219,     0,  1192,   219,
     440,   357,     0,  1332,     0,     0,   219,     0,   133,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   219,   515,
       0,  1331,   219,     0,     0,   507,     0,  1290,     0,     0,
       0,     0,     0,     2,     4,     5,     6,     7,     8,     9,
      21,    10,    11,    12,    17,    13,    14,    15,    16,    18,
      19,    20,    22,    23,    24,  1201,    25,    26,    27,    28,
       0,    29,    30,    31,    32,    33,   476,   463,   520,   475,
     132,   621,   483,    34,    35,    36,    37,    38,    39,    40,
    1330,    41,   218,   217,   211,     0,     0,     0,     0,     0,
    1310,     0,   212,  1127,  1354,  1355,  1356,  1357,  1358,  1359,
    1360,  1361,  1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,
    1715,  1370,  1371,  1372,  1661,  1662,  1716,  1663,  1664,  1373,
    1374,  1375,  1376,  1377,  1378,  1379,  1380,  1665,  1666,  1381,
    1382,  1383,  1384,  1385,  1667,  1717,  1668,  1386,  1387,  1388,
    1389,  1390,  1718,  1391,  1392,  1393,  1394,  1395,  1396,  1397,
    1398,  1399,  1719,  1400,  1401,  1402,  1720,  1721,  1722,  1723,
    1724,  1403,  1404,  1405,  1406,  1407,  1408,  1409,  1669,  1670,
    1410,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,
    1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,
    1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1671,  1438,
    1439,  1440,  1441,  1442,  1672,  1443,  1444,  1445,  1673,  1446,
    1447,  1448,  1725,  1726,  1449,  1450,  1674,  1728,  1451,  1452,
    1675,  1676,  1453,  1454,  1455,  1456,  1457,  1458,  1459,  1460,
    1729,  1461,  1462,  1463,  1464,  1465,  1466,  1467,  1468,  1469,
    1470,  1471,  1730,  1677,  1472,  1473,  1474,  1475,  1476,  1678,
    1679,  1680,  1477,  1731,  1732,  1478,  1733,  1479,  1480,  1481,
    1482,  1483,  1484,  1485,  1734,  1486,  1735,  1487,  1488,  1489,
    1490,  1491,  1492,  1493,  1494,  1681,  1495,  1496,  1497,  1498,
    1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,
    1509,  1510,  1511,  1512,  1682,  1737,  1683,  1513,  1514,  1515,
    1684,  1516,  1517,  1738,  1518,  1685,  1519,  1686,  1520,  1521,
    1522,  1523,  1524,  1525,  1526,  1527,  1528,  1687,  1739,  1529,
    1740,  1688,  1530,  1531,  1532,  1533,  1534,  1535,  1536,  1537,
    1538,  1539,  1540,  1541,  1689,  1542,  1543,  1690,  1544,  1545,
    1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1554,  1555,
    1691,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,
    1565,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1573,  1574,
    1741,  1575,  1576,  1577,  1692,  1578,  1579,  1580,  1581,  1582,
    1583,  1584,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
    1593,  1742,  1594,  1693,  1595,  1596,  1597,  1743,  1598,  1599,
    1694,  1600,  1601,  1602,  1603,  1604,  1605,  1606,  1607,  1608,
    1609,  1610,  1611,  1612,  1695,  1613,  1696,  1614,  1615,  1616,
    1617,  1745,  1618,  1619,  1620,  1621,  1622,  1697,  1698,  1623,
    1624,  1699,  1625,  1700,  1626,  1627,  1701,  1628,  1629,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1746,  1639,
    1640,  1641,  1642,  1643,  1702,  1703,  1644,  1747,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,  1713,
    1714,  1657,  1658,  1659,  1660,  1128,  1129,  1137,  1337,     0,
       0,  1109,  1127,  1674,  1681,  1695,  1190,  1128,  1191,   214,
     439,     0,     0,     0,     0,     0,     0,   351,   350,     0,
    1181,   356,     0,     0,  1131,   104,  1544,   102,  1130,  1107,
    1314,     0,  1315,  1308,     0,   378,   379,   369,     0,   388,
       0,   371,   376,   372,     0,   397,   390,   398,   380,   370,
     391,   381,   368,     0,   399,     0,   374,     0,     0,     0,
     215,   180,   133,     0,  1205,  1206,  1207,  1208,  1209,  1210,
    1215,  1211,  1212,  1213,  1214,  1216,  1217,  1218,  1219,  1220,
    1196,  1201,  1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,
    1229,  1230,  1231,  1232,  1233,  1234,     0,  1192,     0,     0,
    1667,  1717,   924,   911,   920,   925,   912,   914,   921,  1672,
       0,   916,   918,  1685,     0,  1688,  1689,  1578,   922,  1696,
    1699,  1700,  1701,   923,  1702,     0,   648,     0,   478,   625,
     635,   648,   653,   908,   674,   909,   662,  1130,  1101,     0,
    1126,  1275,  1277,  1278,  1274,   169,  1157,  1319,  1697,  1623,
    1333,  1320,  1317,  1318,   216,   514,   512,     0,  1077,  1451,
    1489,  1582,  1593,  1697,  1251,  1255,     0,   213,  1324,     0,
    1335,  1325,   484,  1130,   506,     0,   220,  1289,     0,  1294,
       0,  1558,   489,   492,  1146,   490,   476,     0,     1,   133,
    1200,  1304,     0,     0,     0,   510,   510,     0,   510,     0,
     468,   476,   471,   475,   622,  1329,  1697,  1623,  1323,  1326,
    1459,     0,     0,  1459,     0,  1459,     0,  1459,     0,  1313,
       0,  1069,     0,  1070,  1110,     0,   322,   355,   354,   353,
     352,   357,  1459,  1165,     0,   408,   409,     0,     0,     0,
       0,     0,  1176,   105,   103,  1459,  1307,  1141,   392,     0,
     386,   387,     0,   377,   373,   375,     0,  1138,  1748,   717,
    1749,   746,   724,   746,   746,  1750,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,   713,   713,  1425,   726,  1759,  1760,
    1761,  1459,  1762,  1763,   714,   715,   751,  1764,  1765,  1766,
    1767,  1768,     0,     0,  1769,   746,  1770,   713,  1771,  1772,
     718,  1773,   684,  1774,     0,  1775,   716,   685,  1776,   754,
     754,  1777,     0,  1778,   741,  1779,  1139,  1140,   396,     0,
     400,   699,   700,   701,   702,   727,   728,   703,   733,   734,
     738,   704,   786,   713,  1459,   396,  1459,   396,  1103,  1459,
       0,     0,   176,  1198,  1235,  1780,  1781,  1782,  1783,  1784,
    1785,  1787,  1786,  1788,  1789,  1790,  1791,  1792,  1793,  1794,
    1795,  1796,  1797,  1798,  1799,  1800,  1801,  1802,  1803,  1804,
    1805,  1806,  1807,  1808,  1809,  1810,  1811,  1814,  1812,  1813,
    1815,  1816,  1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,
    1825,  1826,  1827,  1829,  1828,  1830,  1831,  1832,  1833,  1834,
    1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,  1844,
    1845,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,  1854,
    1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,  1236,
    1237,  1249,     0,  1250,  1240,  1204,   133,   438,     0,  1189,
    1276,     0,     0,     0,     0,     0,  1026,   648,   653,     0,
       0,     0,     0,   664,     0,  1041,     0,  1047,     0,     0,
       0,   476,   483,     0,   635,     0,   647,   562,   646,   562,
     515,     0,   496,     0,   659,   657,     0,   659,     0,   659,
       0,   562,     0,   649,   562,   646,     0,   666,   663,  1102,
    1195,     0,     0,     0,     0,  1321,     0,     0,     0,  1112,
    1114,  1115,   998,  1125,   895,     0,  1662,  1663,  1664,  1062,
    1665,  1666,  1668,  1669,  1670,   852,  1671,  1123,  1673,  1675,
    1676,  1678,  1679,  1680,  1682,  1683,     0,  1124,  1686,  1525,
    1691,  1692,  1694,  1697,  1698,  1122,  1703,     0,     0,     0,
    1090,  1017,     0,     0,     0,   894,     0,   890,     0,     0,
     707,   708,   729,   730,   709,   735,   736,   710,     0,  1084,
     787,  1072,   942,   898,   907,   886,   973,   884,     0,   889,
     879,  1080,   496,  1078,     0,   880,  1111,  1072,  1063,   496,
    1076,  1254,  1252,  1258,  1253,     0,     0,     0,     0,     0,
    1102,  1296,  1297,  1288,  1286,  1287,  1285,  1284,  1291,     0,
    1293,  1201,  1012,  1014,     0,  1063,   491,     0,     0,     0,
     466,   465,     3,  1146,     0,     0,     0,   508,   509,     0,
       0,     0,     0,     0,     0,     0,     0,   606,   536,   537,
     539,   603,   607,   615,     0,   472,     0,  1327,     0,     0,
       0,   120,   120,     0,     0,     0,     0,     0,    96,    45,
      89,     0,     0,     0,     0,   194,   207,     0,     0,     0,
       0,     0,   204,     0,     0,   187,   181,   183,    47,     0,
     120,     0,    43,     0,     0,     0,    49,     0,   438,  1127,
       0,  1715,  1716,  1717,  1668,  1718,  1719,   924,   911,   920,
     925,   921,     0,  1725,  1726,  1674,  1728,  1729,  1730,  1731,
    1732,  1733,  1734,  1735,  1681,  1737,  1738,  1739,  1740,  1741,
     922,  1743,  1695,  1745,  1701,   923,     0,  1747,     0,   899,
    1128,  1134,  1020,   520,  1018,  1147,     0,  1068,     0,  1148,
    1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,
    1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,
    1929,  1930,  1931,  1932,  1933,  1934,  1935,  1936,  1937,  1938,
    1939,  1940,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,
    1949,  1950,  1951,  1952,  1953,  1954,  1955,  1956,  1957,  1958,
    1959,  1960,  1961,  1962,  1963,  1964,  1965,  1850,  1966,  1967,
    1968,  1969,  1970,  1150,  1149,  1151,  1065,  1108,  1071,     0,
       0,   436,     0,     0,  1162,     0,     0,  1459,   175,  1459,
       0,   322,  1459,   322,  1459,     0,  1175,  1178,     0,     0,
       0,  1142,  1316,   389,   385,   383,   382,   384,   745,   732,
     740,   739,  1017,   722,   721,   720,     0,   719,     0,     0,
     746,   746,   744,   723,   699,     0,     0,     0,   750,     0,
     748,     0,   394,   395,     0,   366,     0,   692,   688,     0,
     759,   760,   761,   762,   769,   770,   767,   768,   763,   764,
     757,   758,   765,   766,   755,   756,     0,   771,   772,   773,
     774,   775,   776,   777,   778,   705,   711,     0,   361,     0,
       0,   363,     0,     0,     0,   133,     0,   188,  1245,  1246,
    1244,     0,     0,  1203,   191,  1248,  1238,  1247,  1202,   208,
    1239,  1197,     0,  1193,   427,     0,     0,     0,     0,     0,
       0,  1027,  1028,  1029,  1030,  1031,  1032,  1033,  1034,  1035,
       0,     0,  1036,   634,   632,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   855,   884,     0,     0,     0,  1012,
    1046,     0,     0,     0,     0,     0,     0,  1012,  1052,     0,
       0,   637,   644,   555,   561,   633,     0,   631,     0,  1077,
     626,     0,   676,     0,   658,   654,     0,   655,     0,     0,
     656,     0,   629,     0,   644,   630,     0,   673,  1264,  1263,
    1272,   170,     0,  1023,     0,   133,  1322,  1334,     0,  1017,
     887,  1061,     0,     0,   892,   811,     0,     0,   812,   791,
     792,     0,  1089,  1098,  1012,  1016,     0,   890,  1012,     0,
     881,  1154,   883,   976,   978,     0,     0,   891,     0,  1118,
       0,   786,   786,  1083,   998,     0,   991,     0,     0,   995,
     996,   997,     0,     0,     0,  1075,     0,  1006,  1008,     0,
       0,   827,  1004,     0,   830,     0,     0,     0,     0,   992,
     993,   994,   985,   986,   987,   988,   989,   990,  1002,   984,
     808,     0,   882,     0,   945,     0,   807,  1081,   624,     0,
    1116,  1113,     0,  1064,   624,  1266,  1270,  1271,  1269,     0,
    1265,  1257,  1256,  1261,  1259,  1262,  1260,  1336,     0,  1298,
    1282,     0,  1279,  1015,   619,   493,  1105,     0,     0,  1305,
    1303,     0,   127,     0,   488,   487,   530,   530,   521,   524,
     530,     0,   486,     0,   578,   579,     0,     0,     0,     0,
     612,   610,  1112,  1125,   566,   540,   565,     0,     0,   544,
       0,   570,   787,   605,   470,   534,   535,   538,   469,     0,
     608,     0,   618,   606,   539,     0,  1328,     0,     0,     0,
       0,     0,  1459,     0,     0,    80,    61,   274,   687,   119,
       0,     0,     0,     0,     0,     0,     0,    88,    85,    86,
      87,     0,     0,     0,     0,   192,   193,   206,     0,   197,
     198,   195,   199,   200,     0,     0,   185,   186,     0,     0,
       0,     0,   184,     0,     0,     0,     0,     0,     0,     0,
       0,  1312,  1306,   520,   520,   520,   905,     0,   518,   519,
       0,     0,  1066,  1069,   426,   330,     0,   320,     0,     0,
       0,     0,     0,     0,     0,   357,  1166,  1164,  1168,  1167,
    1169,  1431,   164,     0,     0,   174,   172,     0,     0,   319,
     293,     0,  1180,     0,     0,     0,  1459,  1177,     0,   309,
    1309,   393,  1143,     0,     0,     0,     0,   396,     0,   743,
     742,   693,   689,     0,     0,     0,     0,     0,     0,   401,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   396,
     396,  1104,     0,   396,   179,  1199,  1241,   189,   209,   190,
     210,   461,     0,   433,   441,   446,   424,     0,   424,     0,
     443,   447,   424,   442,     0,   424,   437,   438,     0,   938,
       0,   913,   915,   928,     0,   917,   919,     0,   665,     0,
       0,   929,   857,   858,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   874,   873,   930,   669,     0,   672,     0,     0,  1044,
    1045,     0,   931,     0,     0,  1051,     0,     0,     0,   936,
       0,   636,     0,     0,   550,   557,     0,   560,   554,     0,
     496,   477,  1451,  1489,     0,   507,   507,   507,   495,   505,
       0,   583,   638,     0,     0,   640,   642,     0,     0,     0,
     677,     0,     0,     0,  1107,     0,   171,     0,  1156,     0,
    1161,  1159,  1155,  1158,  1160,     0,     0,     0,  1060,  1056,
    1090,     0,   983,   991,   995,   996,   997,   992,   993,   994,
     985,   986,   987,   988,   989,   990,  1010,     0,     0,   972,
       0,     0,  1088,     0,  1085,     0,   885,   896,     0,   979,
     897,     0,     0,     0,  1120,  1121,   788,   799,   831,   832,
     803,   804,   805,   809,  1153,  1152,  1082,     0,  1074,     0,
       0,   789,   813,   818,     0,  1053,   848,     0,   836,     0,
     826,     0,   834,   838,   814,   829,     0,   810,     0,  1075,
    1007,  1009,     0,  1005,     0,   800,   801,   802,   793,   794,
     795,   796,   797,   798,   806,   982,   980,   981,     0,  1073,
       0,     0,   947,     0,     0,   833,  1079,     0,   676,   520,
    1090,   676,     0,   786,  1299,  1146,  1292,  1281,  1280,  1013,
    1106,  1145,   133,     0,  1301,     0,     0,     0,   139,   122,
       0,     0,   155,   157,   624,     0,  1072,   528,   529,   533,
     533,     0,     0,   533,   511,   485,  1692,  1578,     0,     0,
       0,     0,   571,   613,     0,   604,   568,   569,     0,   567,
    1112,   572,  1111,   573,   576,   577,   545,   614,  1099,   616,
       0,   609,   474,   473,   620,     0,    46,     0,  1459,    63,
       0,     0,     0,     0,     0,     0,   224,     0,   324,   224,
     101,  1459,   396,  1459,   396,  1358,  1426,  1594,     0,    59,
      92,     0,   298,   113,     0,   283,   327,    82,    97,   106,
       0,     0,   182,    48,   196,   201,   109,   205,   202,  1185,
     203,   120,     0,    44,     0,   107,     0,  1183,     0,     0,
      50,   111,  1187,   518,   518,   518,     0,  1019,     0,     0,
       0,  1021,  1022,  1068,     0,   425,     0,   321,     0,   435,
     415,   416,   426,     0,     0,   322,   322,     0,  1165,     0,
       0,   166,   162,     0,     0,     0,     0,  1352,     0,   312,
     310,   343,     0,   317,   311,   320,     0,     0,   269,     0,
       0,     0,     0,   410,     0,     0,     0,     0,  1144,     0,
     712,   725,   367,   699,     0,   753,   752,   754,   754,   699,
       0,   682,   699,     0,   697,     0,   737,   706,   779,   780,
     781,   782,   783,   784,   785,   360,   362,     0,   364,   428,
       0,   431,     0,   430,   434,   429,   423,     0,   456,     0,
       0,     0,     0,     0,     0,     0,  1194,     0,   910,  1025,
       0,  1039,  1038,   856,   865,   869,   870,   871,  1040,     0,
       0,     0,   866,   867,   868,   859,   860,   861,   862,   863,
     864,   872,   674,     0,     0,   668,  1049,  1048,  1042,  1043,
       0,   933,   934,   935,  1050,     0,     0,   548,   546,   549,
     551,   547,     0,     0,   645,   676,   507,   507,   507,   507,
     504,     0,     0,     0,   675,     0,   600,   661,     0,   641,
     639,   650,     0,   681,     0,   652,  1273,  1024,   513,   888,
       0,     0,  1057,     0,  1098,   854,   999,     0,   971,     0,
       0,     0,  1097,     0,  1013,   977,   975,   893,   786,     0,
       0,     0,     0,     0,     0,     0,   837,   828,     0,   835,
     839,     0,     0,     0,   822,     0,     0,   820,   849,   816,
       0,     0,   850,     0,     0,   946,   955,   627,   623,   583,
     518,  1098,   583,     0,  1267,  1283,     0,  1302,     0,   144,
     126,   146,   145,     0,   153,     0,  1072,     0,   144,   128,
       0,   147,   158,  1301,     0,   161,     0,   522,   523,   525,
       0,  1000,   533,   527,   575,   574,     0,   543,   611,   541,
       0,   617,     0,     0,     0,   273,     0,     0,     0,   224,
       0,   332,     0,   339,     0,     0,   324,   305,    81,     0,
       0,     0,    55,   100,    73,    65,    51,    79,     0,     0,
      84,     0,    77,    94,    95,    93,    98,     0,   259,   234,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   520,   516,   517,
     900,  1067,   459,   460,   187,   458,   331,     0,     0,     0,
     319,  1180,     0,  1163,   357,     0,     0,   165,   167,     0,
     175,     0,   322,   180,     0,  1347,   297,   293,   318,   291,
     290,   292,     0,  1353,   322,  1179,     0,     0,   411,     0,
     405,     0,  1174,   731,   695,     0,   749,   747,   696,     0,
     694,   690,   698,   396,   462,     0,   419,   457,   444,   449,
       0,   455,   451,   450,   445,   453,   452,   448,   926,   937,
    1037,     0,     0,     0,     0,   667,   670,     0,   932,   927,
     643,     0,     0,   583,     0,     0,     0,     0,   498,   497,
     503,     0,     0,   949,     0,   678,     0,   679,   651,     0,
    1059,  1055,     0,  1011,  1087,  1012,  1092,  1094,     0,     0,
       0,   974,  1119,   790,     0,     0,   819,  1054,   840,     0,
       0,     0,   815,   999,     0,     0,     0,     0,     0,   824,
       0,     0,     0,     0,     0,   906,   628,   600,     0,  1086,
     600,     0,   494,  1300,     0,  1295,     0,     0,     0,   134,
     131,   121,     0,     0,   156,   144,   135,   531,   532,     0,
     526,   542,  1100,   114,   224,     0,     0,    62,     0,   341,
     285,   333,   316,   300,     0,     0,     0,   225,     0,   358,
       0,     0,   306,     0,     0,     0,     0,   286,     0,     0,
     245,     0,     0,   316,     0,   323,   241,   242,     0,    54,
      74,     0,    70,     0,    99,     0,     0,     0,     0,     0,
      57,    69,     0,    52,     0,   396,   396,    60,   284,  1138,
    1748,  1749,  1750,  1751,  1752,  1753,  1754,  1755,  1756,  1757,
    1758,  1759,  1760,  1877,  1761,  1762,  1763,  1764,  1765,  1766,
    1767,  1768,  1886,  1769,   231,  1770,  1525,  1771,  1772,  1773,
    1774,     0,  1775,   685,  1776,  1777,  1963,  1778,  1779,   985,
     986,   229,   326,   226,  1139,   227,   334,   228,   230,     0,
     329,   110,  1186,     0,   108,     0,  1184,   117,   115,   112,
    1188,   903,   904,   901,   518,   438,   418,     0,  1352,     0,
       0,     0,     0,  1459,     0,   163,     0,  1180,   173,     0,
     319,  1352,  1350,     0,   349,   269,   344,     0,  1180,  1346,
       0,   402,     0,     0,     0,   691,   683,   365,   432,     0,
     454,   875,     0,     0,     0,     0,   558,     0,   564,   600,
     502,   501,   500,   499,   581,  1401,  1675,  1577,   582,     0,
     586,   580,   584,   589,   591,   590,   592,   588,   599,     0,
     602,   660,   680,  1058,   853,  1095,  1096,  1091,     0,   787,
     846,   844,   841,     0,   842,   823,     0,     0,   821,   817,
       0,   851,   941,     0,   944,   958,   953,   954,   949,   900,
     949,  1268,   143,   123,     0,   124,   154,     0,     0,     0,
       0,   148,   412,     0,   337,    64,     0,   316,     0,   224,
     302,   301,   304,   299,   303,     0,   359,     0,     0,   243,
       0,   250,   288,   289,   287,   244,   316,   322,   246,     0,
       0,     0,    66,    56,    53,    58,    67,     0,     0,    68,
      71,   681,    83,    76,  1886,  1894,     0,     0,     0,     0,
       0,     0,   414,   421,   187,     0,     0,  1349,   293,     0,
       0,   407,     0,     0,   319,   168,     0,     0,  1352,     0,
     177,  1351,     0,     0,   221,     0,   266,     0,     0,     0,
    1338,     0,     0,  1173,  1172,     0,   420,   876,     0,   877,
     671,     0,     0,   556,   949,     0,     0,     0,   593,   587,
     948,   950,     0,     0,   553,  1093,   939,     0,   843,   847,
     845,   825,   943,   960,   957,   602,  1117,   602,     0,     0,
       0,     0,   159,     0,   150,   150,     0,   136,  1001,     0,
     224,     0,   315,   338,   255,   233,     0,     0,     0,   240,
     247,   348,   249,     0,    75,    91,     0,     0,   328,   118,
     116,   902,   438,     0,  1180,   269,  1346,   404,     0,     0,
       0,   180,  1348,   293,   282,   275,   276,   277,   278,   279,
     280,   281,   296,   295,   267,   268,     0,     0,     0,     0,
       0,   406,  1174,     0,   878,   559,     0,   602,     0,     0,
       0,   585,     0,     0,   601,     0,   481,     0,     0,   520,
     553,   553,     0,   130,     0,   676,     0,     0,   152,   152,
     138,     0,   322,   340,     0,   307,   314,   253,   252,   254,
     258,     0,   256,     0,   272,     0,   265,   233,     0,    78,
       0,   335,   413,   417,     0,   223,  1340,   319,     0,  1346,
    1352,   269,  1346,     0,  1343,     0,   403,     0,  1180,     0,
     553,   595,     0,   594,   951,   952,   555,   940,     0,   963,
     480,   479,   125,   150,   129,   160,   149,   530,   151,   530,
       0,   348,   294,     0,     0,     0,   255,     0,   248,   345,
     346,   347,     0,   261,   251,   262,    72,    90,   336,     0,
     319,  1341,   178,   222,  1339,  1344,  1345,     0,   676,   563,
     482,   596,   552,   959,     0,     0,     0,   152,   533,   533,
     676,   265,   308,   313,   232,   257,   271,     0,     0,     0,
     263,     0,   264,  1346,     0,  1170,  1661,  1402,  1630,     0,
     961,   964,   962,   956,   530,   141,   140,   137,   224,   237,
       0,   236,     0,   325,   260,  1342,  1180,     0,   968,   967,
     966,   970,   969,   533,   342,   235,   239,   238,   676,     0,
     142,  1171,   965
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2728, -2728, -2728,  1843,    89,    91,  -693, -1124,  -913, -1103,
   -2728,  -164,    94, -2728, -2728,    82, -2728,   833, -2728,    73,
    -649,   423, -2728,   926, -2728, -2728, -2728, -2728,  1791, -2728,
      95,    98,  1949,    99, -2728, -2728, -2728, -2728,  -666,   365,
   -1150, -2728,   299, -2728, -2728, -2728, -2728,  -258,    55, -2728,
       3, -2043, -2634,  -549, -2728,  -643, -2728,  -341, -2728,  -596,
   -2728,  -652,  -603,  -626, -2556, -1098, -2728,  1416,  -386, -2728,
     455, -2728, -2378, -2728, -2728,   444, -2728, -1089, -2728, -1988,
      53,  -581, -2381, -2389, -1965,  -710,   130,  -590,   108, -1993,
    -840, -2728,   468, -2728,  -571, -2728,  -695, -2090,   100, -2543,
   -1596,    -7, -2728, -2728, -2728,  -557, -2728, -2327,   102,  1263,
   -1963,   103,   393, -2728,    10,    76,   105, -2728, -2728,   107,
      23,  -539,   176, -2728,   110, -2728, -2728,  -477,  -760, -2728,
    1230,   114, -2392, -2728,  -455, -2728,  -489,  -485, -2728, -2728,
      22,  -896,  1174, -2728, -2728, -2728,    12, -2728,  -471, -2728,
   -2728, -2364, -2728,    31, -2728, -2728, -2728, -2728,   -44,   183,
   -2728,  -487, -2116,  -274, -2728, -2670, -2400, -2728, -2728,  -545,
   -2668, -1955,   115,    85,   116,   117, -2728,   549,   118, -1087,
     119,  1884,   -39,   -36, -2728,   -32,    19,    64,  1487,  -987,
   -2728, -1436,   895, -2728,  1628,  1629, -2021,  -698,   -61, -2728,
     541, -1585, -2001,  -562,   940,  1477,  1490,   309, -2207, -2728,
    -513, -2728,   285, -2728, -2728,   545,   988, -1499, -1416, -2728,
   -2019, -2728,  -434,  -342, -2728, -2728, -2728, -2728, -2728, -2306,
   -1920,  -552,   967, -2728,  1497, -2728, -2728, -2728, -2728,   -13,
   -1456,  2610,   589,  -601,  2011,  -546,  -398,  1685,  1656,   637,
     731,    30,  2030,   363, -2728, -2728,   362, -1970, -1447,   325,
    -263,  1289, -2728, -2728,  -529, -1283,  -784, -2728, -2728,   603,
    -525, -2728, -2728, -2728,   663,  1351, -2728, -2728,  1368,  1558,
   -2728,  -604,  1999,  -548,  -757,  1703,  -864,  1711,  -867,  -870,
    -874,  1717,  1721, -1454,  3920, -1119,  1397, -2728,    -6, -2728,
   -1425,     6, -2728, -2728, -2728, -2728, -2518, -2728,  -412, -2728,
    -407, -2728, -2728, -2728,  -517, -2235, -2728,  1483,   705, -2728,
   -2728, -2728, -1470, -2728,  4587,   606, -2728, -1888,  -952,  -662,
   -1030,  -899, -1156, -1299, -2728, -2728, -2728, -2728, -2728, -2728,
   -1472, -1704,  -104,   668, -2728, -2728,   741, -2728, -2728, -2728,
    -689,   932,  -567, -1023,   672,  1193,    49,  -573, -1549, -2728,
   -1611, -2210, -2728, -2728, -1435, -2728,  1693,  -484, -1056,    17,
   -1179,     4, -2728,  3078,   154,  2095,  3136, -2365, -2728, -2728,
   -1209, -2431, -1045, -2728,  -713, -2728, -2728,   121,  1359,    32,
   -2728,   122,  1063, -2728, -2728, -2728,   123, -2728, -2728,   124,
     533, -2728,   769, -2728,   664,   125, -2728,  2650,  2589,    13,
   -2727
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    42,    43,    44,   564,   565,  1755,  1708,  1498,  1167,
    1698,  1414,   566,  2444,  2445,  2446,  2118,  1148,  3099,  2119,
    1149,  1150,  2448,    48,    49,    50,   101,  1178,   532,   533,
     567,   568,   506,   569,  2172,  2924,  2535,  2925,  2247,  2166,
    1423,  2244,  1811,  1739,  1424,   512,  1826,  2536,  2484,  1812,
     570,  2433,  2742,  3092,  2458,  3213,  2675,  2676,  3089,  3090,
    2436,  2120,  3153,  3154,  2513,  1690,  3148,  2189,  3042,  2124,
    2106,  2677,  2198,  3002,  2784,  2121,  2657,  2190,  3084,  1767,
    2191,  3085,  2879,  2192,  1735,  1760,  2437,  3155,  2125,  1736,
    2432,  2743,  1677,  2193,  3096,  2194,   522,  2661,   571,  2505,
    1320,   507,   496,   497,   817,  1304,  1221,  1305,   572,   741,
    1765,   573,  1314,  1747,   574,  1756,   575,  2496,  2497,   576,
     577,  1091,  2389,  2044,   578,   557,   558,   746,  1365,   559,
     818,   579,   842,    64,   691,  1415,   580,  1416,  1417,   932,
      65,  1499,   934,   935,    66,    67,   582,  2953,  2794,  1327,
    1768,  2201,   523,   583,  2048,  1621,  2869,    70,  2394,  2052,
    2398,  2992,  2625,  2393,  2400,  3078,  3137,  2395,  2053,  2054,
    2993,  2055,   584,   641,   585,   586,   994,  1922,   587,  1681,
     588,  1047,    77,    78,   972,    79,   669,   682,   683,  1482,
    1898,   675,  1119,  1633,   657,   658,  2160,   699,  1729,  1628,
    1629,  2059,  2407,  1657,  1658,  1128,  1129,  1885,  3066,  1886,
    1887,  1474,  1475,  2963,  1645,  1649,  1650,  2081,  2071,  1636,
    2316,  2820,  2821,  2822,  2823,  2824,  2825,  2826,  1048,  2573,
    2974,  1653,  1654,  1131,  1132,  1133,  1662,  2091,    81,    82,
    2028,  2377,  2378,   629,   630,   966,   967,   984,   980,  1485,
    1905,   631,   632,  1864,  1865,  2285,   987,  1901,  1909,  1910,
    2577,  1787,   819,  2107,  1503,  1368,   821,  1049,   822,  1343,
    1050,  1347,   824,  1051,  1052,  1053,   827,  1054,  1055,  1056,
     830,  1339,  1057,  1058,  1358,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1394,  1395,  1102,  1453,  1060,  1061,  1062,  1063,
     634,  1064,  1065,  1584,  2022,  2376,  2830,  2970,  2971,  2615,
    2856,  2983,  3069,  3176,  3200,  3201,  1066,  1067,  1533,  1534,
    1535,  2018,  1578,  1579,  1068,  2747,  1581,  1947,  1103,  1468,
    1526,  1223,  1224,  1504,  1440,  1441,  1450,  1840,  1457,  1461,
    1869,  1870,  1469,  1986,  1069,  1928,  1929,  2333,  1512,  1070,
     723,  1228,   724,  1582,  1980,  1079,  1071,  1080,  1073,  1522,
    1523,  2342,  2587,  2588,  1954,  2087,   636,  1616,  1889,   838,
    1306,  1074,  1075,  1076,  1077,  1105,   638,  1225,   501,   833,
     748,  1331,  1109,  1226,  2122,  1976,  1532,   589,    94,   590,
      85,   591,  1098,   679,  1099,  1101,   592,   651,   652,   593,
     664,   665,  1500,  1601,  1501,   594,    90,   666,   671,   595,
    2950
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     495,   498,   687,    54,  1134,  1460,   930,   832,   627,  1307,
      58,   499,    68,    91,   495,   633,  1311,   700,  1104,    80,
    1354,  1166,  1413,    61,   963,   499,   820,   635,  1722,   527,
     823,    69,    84,  1866,   561,  1308,  1312,    80,  2026,  1418,
     581,  1711,  2060,   646,   702,  2063,  1946,  1687,   703,  1913,
    1778,  1676,  1617,  1360,  1591,  1683,   684,   684,  2379,  2408,
    1725,  2382,  2413,  1712,   672,  1168,  2438,  1172,  1619,  1176,
     989,  1782,  1437,   843,   837,  1398,  1436,  1401,   931,  1435,
     835,   969,  1433,  1716,  1072,  1588,   983,  1964,  1965,    45,
    1529,    46,  1594,  1502,    47,    51,  2401,  2749,    52,    53,
      55,  2769,    56,    57,   685,    59,  1090,    60,  2363,   644,
      62,  2781,  2431,   712,    63,    71,    72,    73,    74,    75,
    1771,    83,    86,    87,    88,    89,   936,  2770,   716,  2785,
    2586,  -464,  2474,  2475,  2476,  2745,  1003,  1127,  2031,   640,
     640,  1003,   510, -1110,  -467,  2174,  3077,  1130, -1135,  2083,
     677,  1772,   668,  -746, -1135,  1116, -1132, -1132, -1720,  1340,
    1341,  -754, -1721,  -754,  -751,  2288, -1870, -1870,  -751, -1727,
   -1871, -1871,  1598, -1722, -1736, -1723, -1744,   642,   642,  1404,
   -1724, -1872, -1872, -1873, -1873,  2439, -1136, -1727, -1874, -1874,
    2499,  1352, -1736,   640,  1803, -1877, -1877,  1003, -1742, -1720,
   -1886, -1886, -1744,  2486, -1867, -1867, -1892, -1892, -1746,   708,
   -1894, -1894, -1136,  1334,  2492, -1721, -1897, -1897,  3187,  1545,
   -1133, -1133, -1722,  1546, -1723,  2927,  -464, -1724, -1742,  2944,
   -1746,  1844,  1362,   981,  2086,  1845,  -713,  -726,  2940,  -467,
    1362,  1696,  1668,  -983,  1699,  1700,  1086,  1978,  1978,  -741,
    -983,  1554,  3005,   640,   640,   719,   832,  1335,  2541,  2543,
    -422,  2546,  1362,  2170,   752,  2331, -1896, -1896,  1407,  2509,
    1595,  1407,   640,  1003,  -576,  1679,  1003,  1360,  1688,   823,
    1427,  1723,  2631,  1556,  3018,   692,  1714,  3053,  2867,  1688,
    2297,   697,  2898,  1724,  3226,  3047,  1688,  2440,  1362,  3106,
    1308,   697,  3219,  3048,  1688,  2023,    21,  2434,  1093,   695,
    2015,  2858,  1775,  -686,  2860, -1003,  2966,  2016,  2917,  2334,
     655,  2945, -1003,  1679,  2637,  3079,   597,  2299,  3087,   970,
    2894,  2158,  1842,  1843,  2466,  2563,  2946,  1862,     3,     4,
    2985,  1671,  2987,  2679,  1140,  1140,  2782,  1981,  1545,  2883,
    1141,  1141,  1546,  2057,  3080,   727,  2880,   728,  3149,  2618,
    2617, -1866, -1866,  2620,  1634,  1123,  2916,  2552,  2262,  1695,
    1480,    92,  1545,   693,  2391,  1486,  2300,   696,   930,  1525,
    1554,   640,  3161,  2104,  1596,  3164,  2649,  -187,  3088,  2638,
    1701,  2939,  -187,   974,   991,  3032,  1710,   100,  2289,  3174,
    2892,  1308,   983,  1807,  1554,   992,  1340,  1341,  1003,   530,
    2392,  2640,  1556,  2936,  1717,  2680,   969,    93,  -464,  2381,
     596,  1352,  1720,   656,  2948,  1117,  1844,   975,  3175,  2881,
    1845,  -467,  1336,  2431,   930,  2431,  1556,   639,  -597,  1125,
    2058,  2105,  2650,  1488,  2435,   832,  3057,  1421,  2024,  2583,
    -686,  1143,  3220,   977,  3227,   697,  1142,  1142,  1545,  2311,
    2312,  2313,  1546,  3177,   971,  2324,  3215,   598,   823,  3105,
    1635,  1689,  3049,  2893,  1665,  1094,  2298,  1095,   678,  1926,
    1537,  -464,  1689,   786,  1686,  3016,  1517,  2159,  2895,  1689,
    1554,  3150,  1087,  1673,  -467,  2135,  3000,  1689,  2681,  3194,
    2138,  2868,  1727,  2964,    29,  1597,  2441,  2783,  2442,  2171,
    3183,  1593,  1917,  2301,   943,  3010,   531,  2553,  2947,  2872,
    3081,  1363,  1556,  1844,   687,  1728,  1946,  1845,  1118,  1363,
     930,   930,  1702,  2792,  1686,  3188,  2443,  1599,  1593,  1337,
    1703,    34,  1706,   744,  2809,  1686,  2462,  2800,   816,  1443,
    3025,  1363,  1686,  2749,  2790,  3163,   929,  1809,  2550,  2463,
    1686,   753,  1003,  3006,  1088,  3209,  1707,  3162,  3151,   721,
    2083,  2157,  1663,   722,   979,  1620,   840,   997,  2923,  2384,
    2099,    80,  1664,    38,  1927,   933,   687,  1363,  2900,  2501,
     511,  2745,  2411,  -464,  2208,   698,  2905,    39,  2403,  1338,
    -983,  2874,   694,   495,   633,   832,  -467,  1674,  1979,  2365,
    1143,  1143,   962,  1762,   499,  1715,   635,  1307,   495,   633,
    1355,    40,  1355,  2907,  2908,  2975,  2224,  1930,   823,   499,
     725,   635,  -464,   702,  -464,    41,   721,   703, -1110,  3110,
     722,  1135,  1356, -1135,  1356,  -467,  1612,  -467,  -746, -1135,
     495,   495,  1712, -1720,  2416,  3111,  1357, -1721,  1359,  -751,
    3104,  1144,  1170,  2467, -1727,  1145,  1145,  2017, -1722, -1736,
   -1723, -1744, -1003,   495,  2884, -1724,  1364,  2256,  2871,  3139,
    1525, -1136, -1727,   940,  1329,   674,  2486, -1736,  1540,   680,
    2029,  1513,    54, -1742, -1720,  1146,  1171, -1744,   684,    58,
    1097,    68,    91, -1746,  1577,  1092,  1400, -1136,    80,  1813,
   -1721,  2089,    61,  1220,   495,  1303,  1860, -1722,  2769, -1723,
      69,    84, -1724, -1742,  1092, -1746,  2264,  2265,  2266,  2267,
    2268,  1342,  1346,  2272,  2273,  2274,  2275,  2276,  2277,  2278,
    2279,  2280,  2281,  2921,  -741,  1106,  1779,  1780,  1589,  2032,
     937,  2873,   642,   960,  3168,  1411,  1412,  1096,  1411,  1412,
    2942,  2157,   688,  1631,  1147,  1147,   689,   832,  1123,  2482,
    2483,  2939,   704,  1124,  2926,  3210,  1140,  3204,    45,  2749,
      46,   690,  1141,    47,    51,  2134,  1752,    52,    53,    55,
     823,    56,    57,   990,    59,  2137,    60,   816,  2140,    62,
     832,   832,  1875,    63,    71,    72,    73,    74,    75,  2943,
      83,    86,    87,    88,    89,  1083,   832,  2745,  2090,   820,
     735,  1545,   513,   823,   823,  1740,  2296,   640,  1572,  1573,
    1574,  1575,  1576,  1577,   495,  1789,  3003,  1140,    21,   823,
    1975,  2663,  1125,  1141,  1355,  1706,  1925,  1525,  1308,   930,
    3017,  1770,  3228,  1688,  3211,  1950,  2296,  1773,  1866,   720,
    2350,  2351,  1140,  3130,  3131,  2204,  1356,  1946,  1141,  1707,
    2564,  2565,  2566,  2567,  -187,  -187,  1962,  1688,    21,  1307,
    1357,  3212,  1902,   514,  2442,  1556,   973,  1906,  1142,  2666,
    1908,  1126,   736,  2019,  2592,  2339,  2104,  2932,  1123,  2582,
    2243,   731,  2019,  2305,  1308,  1890,  1855,  1856,  1857,  1858,
    1859,  1860,  2692,  3170,  -519,  1800,  1805,  2245,  2269,  -519,
    1799,   931,  2231,  2233,  2234,  1881,  2230,  2232,   929,  2229,
    2524,  2228,   742,  1688,   495,   495,  2528,   749,   735,  2530,
    1574,  1575,  1576,  1577,   495,  1742,  2619,   495,   495,  1142,
     495,   495,   495,   495,  2428,    80,  2186,  3083,   627,    21,
    1537,  3217,   974,   627,   495,   633,   729,   750,   730,   495,
     633,  2465,  1125,  2126,  1142,   499,    21,   635,  1999,  2937,
     499,  1740,   635,  1140,   929,  1220,   816,   737,  -519,  1141,
    2385,   513,  2411,  1355,  3232,  2469,   975,   832,  1679,    21,
    2477,  2132,   495,   687,  3100,  1857,  1858,  1859,  1860,  1680,
     736,  1773,   976,   751, -1182,  1356,  1966,  2212,  2096,   495,
     823,  1126,   977,   738,  2659,  2153,  2154,  2155,  2533,  1712,
     495,   495,   495,  2405,   495,   495,    29,  -519,    95,  2235,
    2236,   754,  1143,  2238,  3008,  2133,  1689,   755,  2660,  2670,
    2180,  2473,   514,  1741,  2468,   517,   978,   518,  2270,  2495,
    1307,   495,  2601,  1679,  2143,  3070,  1153,  3071,  2271,  2150,
    1689,  3034,  1529,    34,  1682,   721,    29,  1903,   756,   722,
     929,   929,   521,  1624,  1625,  1154,  1632,   703,   703,  1420,
     703,  2414,  2671,  1174,   841,  1142,  1003,  1145,  2510,   737,
    1442,  1742,  2515,  1143,  2000,  3134,  2179,   740,  2672,  1686,
    2805,   943,  2209,    34,   495,    38,  2250,   941,   495,   495,
    2001,  2251,  3035,   942,   684,  2002,  1689,  1175,  1143,   495,
     832,  3036,  2653,  1686,  1637,   738,  1155,  3120,   721,    21,
   -1110,   944,   722,   979,  1092,  1420,   816,   695,  1355,  2108,
    1378,  1379,  2249,   823,  2095,    38,  2253,    29,  1145,  2255,
    3037,  -520,  2003,  1883,   956,  3224,  -520,    41,  1884,  1946,
    1356,   739,  2252,  1220,    29,  1140,   945,  3205,  3206,  2141,
    1638,  1141,   946,  1145,  1359,  1220,   721,   949,  1146,  1686,
    1592,   950,  1081,  1082,    34,  1084,  1147,    29,  3195,  1713,
      96,  1372,  1373,  1539,  1350,  1351,  2673,    41,    97,  1220,
    3207,    34,  1542,  2142,  2674,   696,  2294,  2654,   825,   740,
    1405,   951,  3230,  1406,   517,   954,   518,  1156,  1590,   986,
    1610,  3038,  1904,  1611,    34,  -520,    38, -1864, -1864,  1600,
     832,  1420,  1420,  3039,    98,   955,  2605,  2606,   520,  1143,
      39,   521,   957,    38,  1477,  2804,   930,  1147,  3231,  2221,
    1382,  1383,  2574,   823,   996,  1916,  1492,    39,  1917,  1495,
    1378,  1379,  1918,   958,    40,  1919,    38,  1509,  1157,    41,
     832,   959,  1147,  2655,  -520,  2656,  1158,  1142,    41,  1640,
      39,    40,    99,   697,  2167,   960,   832,  2168,  1159,  2257,
    2148,  2843,   988,   823,  1145,    41,  2319,  2213,   816,  2004,
    1919, -1865, -1865,    21,    40,  2263,   993,  1746,  2683,   823,
   -1868, -1868,  2353,  1303,  1748,   832,  1749,  1750,    41,  1160,
    2219,  2380,   832,  2220,  2149,   495,  2222,    29,  2647,  2220,
    2690,   816,   816,  2682,  2290,  2691,  2537,  2239,   823,  1641,
    2240,  2295,  2450,  2282,  2452,   823,  2283,   816,   930,  1874,
    2765,  1876,  1877,   832,   973,   102,   832,  2832,   509,  1987,
    2355,   832,   995,  2629,    34,   560,  1162,  1637,  1344,   997,
    1382,  1383,  2323, -1869, -1869,  2323,   823,   654,  1529,   823,
    2327,   667,  2321,    35,   823,  2322,  1988,  2356,  1163,   929,
    1353,  2325,  2456,  1147,  2322,  2457,  2460,  2518,  2578,  2461,
    1917,  2322,  2196,   998,  2197,  1303,    38,  1801,  1165,  1802,
    2306,   495,  2307,  1638,    80,  2308,  2627,  2309,   933,  2628,
      39,  1085,  2801,   698,  3040,  2632,  1396,  3041,  2633,  2026,
     974,  1143,  2864,  2994,   495,   495,  1089,  2777,  2411,   495,
    2168,   495,   633,  1100,    40,  2889,   495,   495,   495,   495,
    2526,  2527,   499,  2453,   635,  2455,  2491,   825,    41,  1107,
     627,   495,   495,  1108,   975,   627,   495,   633,   627, -1875,
   -1875,   495,   633,  1639,   495,   633,  1110,   499,  2798,   635,
     976,  2799,   499,  1114,   635,   499,  1145,   635, -1876, -1876,
     977,   495,   495,  2806,  2958,  2844,  2807,  1111,  1919,  1989,
     495,    29,  1115,  2959,  1990,  2357,  1919,  1121,  2960,  1991,
    2358,  2322,  2978,  1136,    80,  1919,  1146,  1813,  1920,  3184,
    2994,   495,  1640,   495,   978,  1137,  1921,  1924,   816,   495,
     495,   495,   495,   495,   495,   495,  1303,  2891,    34,  2741,
     495,   495,  3178,  1138,  3179,   495,  2875,  3024,  3054,   495,
    2168,  1919,   495,   495,   495,   495,   495,   495,   495,   495,
     495,  3075,  3118,   495,  3076,  3076,  1139,  2663,  3142,  1827,
     495,  3143,  1220,  2664,  3216,  1303,  2646,  3076,  2648,  2690,
      38,  1120,  1641,  1122,  1151,  1147,  2665,  2065, -1878, -1878,
    1002,   703,  1152,  1844,    39,  1177,   495,  1845, -1879, -1879,
    1846,  1847,  1848,  1309,  1487,  2922,  1490,  1344,  1310,  3223,
    1169,   979,  1173,   513,  1923,  2666,  1313,  2667,    40,   495,
    1316,  1353,  1315,  1097, -1880, -1880, -1881, -1881, -1882, -1882,
     495,   495,    41, -1883, -1883,  1326, -1182,   832, -1884, -1884,
    1328,  2994, -1885, -1885, -1887, -1887,   825, -1888, -1888, -1889,
   -1889,  1992,  2359, -1890, -1890,  1329,  2108,  1931, -1891, -1891,
     823,   816,  1993,  2360,  2411, -1893, -1893,  1303,  1333,  1303,
   -1895, -1895,  1330,  2957,   514,   930,   530,  2100, -1898, -1898,
    1730,  1731,  2084,  2085,  1932,  -571,  -571,  2109,  1338,  2112,
    1342,  1933,  2123,  1345,  1934,  1935,  1936,  1346,  2127,  1348,
    2129,  1349,  2668,  1380,  1381,  1361,  2019,  1366,  1382,  1383,
    1220,  1367,  2136,   495,   495,  1369,   495,  2139,  1397,   676,
    1399,  2144,  2145,  2146,  2147,  1402,  2151,  2152,   515,  1403,
    2049,  1422,  2994,  -575,  -575,  -574,  -574,  1425,  2126,  1428,
    2750,  1604,  1606,  2033,  1003,  1458,  1473,  1220,  1471,  1476,
    1481,  1483,  1491,  1484,  1496,  1002,  1303,   495,  1844,  1497,
    2903,  1505,  1845,  2797,  1506,  1846,  1847,  1848,  1508,  2764,
    2669,   816,  -717,  -724,  1513,  2670,    41,  -597,   711,  1849,
     714,  -598,   718,  -714,  -715,  -718,  1516,  1517,  -716,  2772,
    3022,  1521,  1531,  1530,  2788,  1538,   929,  1583,   516,  1585,
    1587,  1850,  1002,   832,  1602,  1844,   825,  1613,  1614,  1845,
    1618,   816,  1846,  1847,  1848,  1623,  1124,   495,  2671,  1126,
     495,  1659,   495,  1661,  1666,  1685,   823,   816,   495,   495,
     495,   495,   495,  1684,  2672,   495,   495,   495,   495,   495,
     495,   495,   495,   495,   495,  1686,   517,  1691,   518,  1693,
     495,   495,  1692,  1697,   495,  1704,   816,  1529,  3136,  3138,
    3138,   495,  3102,   816,   519,  1705,  1709,  2187,  1726,  1719,
     520,  1851,  1733,   521,    76,  1738,  1734,  1744,  1754,  1757,
    1745,  1758,  1759,   495,   627,  1764,   495,  1781,  1761,  1763,
     495,   633,    76,  2537,   816,   626,   826,   816,   929,  1773,
    1220,   499,   816,   635,   832,  1774,  1783,    76,  1784,  1791,
     495,  1795,  1796,   828,  1792,   686,  1797,  1798,  1804,  1829,
    1831,  1832,  1833,  2746,  1834,  2912,  2913,   823,  1835,  1836,
    2019,  1838,  2673,  1871,  1841,   687,   495,  1354,  1863,  1872,
    2674,   495,  1879,  1900,   495,  1882,  1907,  1912,  1915,  1545,
    1927,  1977,  1953,  1956,   701,  1960,  1995,  1420,  3138,  1958,
    1961,  2248,   495,   495,    76,  2410,  1850,   495,   825,  1984,
    1959,   832,  1996,  1998,  2021,  2020,  2027,  2041,  2040,  2042,
    2043,   495,  2050,  2064,   495,   696,   495,  2061,  2073,  2074,
    2796,  2075,   697,  2076,   823,  2741,   832,  2077,   687,  2101,
    2078,   825,   825,  2094,   627,  1480,  2097,   495,  2102,  2173,
     495,   633,  2103, -1899,  2165,  2169,  2181,   825,  2183,   823,
     627,   499,  2184,   635,  2185,  2199,   495,   633,  2202,  2200,
    2205,  2207,  1712,  2206,  2246,  2210,  1851,   499,  2211,   635,
    2214,  2215,   832,  2216,   495,  2217,  2218,  1801,  1868,  2237,
    2226,    80,  1844,  2227,  2254,  1920,  2284,  1867,  2315,  1420,
    2291,   495,   495,  1921,  1924,   823,  2292,  2354,  2329,  1852,
    1853,  1854,  2293,  1855,  1856,  1857,  1858,  1859,  1860,  2302,
     495,  2303,  2337,  1851,  2304,  2349,  2318,  2370,  2328,  2335,
    2336,  2338,   500,   508,  2347,  2361,  2371,   528,  1303,  1303,
    1303,  2373,   528,   829,  2374,  2375,   637,  2388,   643,   643,
     645,   528,   650,  2397,  2390,   650,  2402,  2404,   670,   673,
    2406,   673,  -577,  2417,   528,   528,  2418,  2420,  2421,  2422,
    2424,  2427,   687,  2426,  2430,  2449,   832,  2451,  2045,  1220,
    2478,  2479,  2480,  2464,  2470,   826,  2471,  2489,  2472,  2490,
    2481,  1923,  2494,  2504,  2507,  2911,  2511,  2516,  2508,   823,
    2521,  2523,   828,  1937,  1938,  1939,  3173,  1940,  1941,  1942,
    1943,  1944,  1945,   832,  2512,   670,  2531,  3011,   816,  2532,
     673,   528,   673,   673,   673,  2540,  2548,  2551,   495,  2571,
    2554,  2572,    21,  2503,  2557,   726,   823,  2558,   825,   733,
    2576,  2559,   734,  2560,  2581,  2584,  2590,  2597,  2599,  2600,
    2614,  2603,  2616,  2624,  2621,  2622,  2626,  2630,  2639,  2641,
    2645,  2741,  2652,  1303,  2678,   929,  2651,  2771,  2658,  2694,
    2779,  2787,   930,  2761,  1852,  1853,  1854,  2767,  1855,  1856,
    1857,  1858,  1859,  1860,  1002,   832,  2762,  1844,  2793,  2763,
    2775,  1845,  2780,  2802,  1846,  1847,  1848,  2795,  2776,  2168,
    2803,  2829,  2882,  1370,  1371,  2459,   495,   633,   823,  2878,
    2835,  2594,  2808,  2886,  2831,  2834,  2870,   499,  3086,   635,
    2887,  1852,  1853,  1854,  2899,  1855,  1856,  1857,  1858,  1859,
    1860,   687,  2836,  3058,  2852,  3060,  2888,   953,  2896,  2859,
    2901,  2902,  2611,  2876,  2877,  2906, -1132,  2919,  2918,  2920,
    2485, -1864, -1865, -1866,   495, -1867, -1868, -1869, -1870, -1871,
   -1872,  2046,   687,   495, -1873,  2498, -1874, -1875,  2929, -1876,
   -1878,   825,   495, -1879,   826,   495,  2933,   495, -1880,  1372,
    1373, -1881,  1454, -1882,   816,   495, -1883, -1884,   495,   495,
   -1885,   828,   829,   495,   495, -1887, -1888,   495, -1889, -1890,
     832,  3129,  3141,  2941,  2949,  2951, -1891, -1892, -1893, -1894,
   -1895,   495,  2961,  2952,  1113,  2962,  2977, -1896,  2973,  2746,
    2990, -1897, -1898,   823, -1133,    76,  1420,   495,  3145,  2928,
      29,  2538,  2996,  2539,  2934,  2955,  3013,  2544,  2965,  2547,
    2967,  2969,  2998,  2988,  1374,  1375,  1376,  1377,  1378,  1379,
    3001,  2999,  1380,  1381,  3014,  3021,  3029,  3023,  3030,  3033,
    3086,  1318,  1321,  1323,  1325,  3044,  3046,    34,  1455,  2643,
    3045,  3055,  3056,  3059,  3063,  3065,    76,   686,  3068,  3062,
    1303,   825,  3072,  3077,  1303,  2744,  1303,  3091,  2895,  3097,
    3095,  3101,  3098,  3107,  3113,  1850,  2695,  3114,  3115,  3119,
    3121,  3123,  2855,  3126,  3128,  3140,  3144,  3147,  3152,    38,
    3158,  2751,  2752,  2753,  2754,  2755,  2756,  2757,  2758,  2759,
    2760,   825,  1544,    39,   947,  1545,  1746,  3159,  3160,  1546,
    3165,  3167,  3189,  1748,   826,  1749,  1750,   825,  3166,   961,
    3169,  3171,  3186,  3191,  3203,  3187,  3218,    40,  3188,  3225,
    3229,   828,   816,  1652,  2909,  2128,  2693,  1554,  1382,  1383,
    2697,  2047,  1112,  2447, -1899,  1851,   825,  2487,  2037,  2534,
    1332,  2956,  2766,   825,   495,  3214,   939,   816,  3156,  3009,
    3185,   829,  3192,   701,   831,  3208,  1675,  3043,  2429,  1556,
    2454,  2786,  3182,  3190,   495,   495,  2662,  1153,  2425,  2698,
    3181,  2493,   495,    76,   825,  1743,  2778,   825,  1777,  2635,
    1806,  3117,   825,   495,  2866,  2634,  1154,   495,   495,  3135,
    2989,  2386,   495,   816,  1615,  3180,   832,   495,  1478,  1479,
     495,   495,  2409,   627,  2093,   495,  1656,   673,  2768,   495,
     633,   673,  2562,  3172,   673,  2746,  2748,   495,  1655,   823,
     499,   528,   635,  2419,  2070,  3122,   747,  3061,  1660,  2352,
    2092,   628,  2387,  1444,  1489,  2789,   964,  1155,  2791,  2320,
     948,  2485,  1384,  1385,  2555,  1448,  2556,  2575,  3015,  1432,
    3124,   495,   747,   528,   528,  1790,  3125,  1434,  3202,   495,
   -1899,  -476,  1386,  1438,  2345,  2164,   826,  1439,  2412,  2332,
    2368,  2366,  1891,  2862,  2036,  -476, -1899,   653,   495,   709,
    -476, -1899,  2890,   828,  2326,     0,     0,   816,     0,     0,
       0,   938,   508,   643,     0,     0,     0,     0,     0,   826,
     826,     0,     0,     0,  2686,   500,     0,     0,     0,   673,
       0,   829,     0,     0,     0,   826,   828,   828, -1899,     0,
     637,   968,   968,     0,  2744,     0,   968,   985,  1156,  -476,
       0,     0,   828,  1852,  1853,  1854,     0,  1855,  1856,  1857,
    1858,  1859,  1860,     0,     0,  2863,  2865,     0,     0,  -476,
       0,     0,  1078,  1078,   650,   650,     0,   650,     0,     0,
       0,     0,     0,     0,   495,     0,     0,     0,     0,     0,
     673,     0,     0,  1565,     0,  2861,   528,     0,     0,  1157,
     687,     0,     0,     0,     0,     0,   673,  1158,     0,   673,
       0,     0,   929,     0,     0,   495,   816,     0,  -476,  1159,
       0,     0,     0,   831,     0,     0,     0,  -476,  1622,     0,
       0,     0,   495,     0,     0,     0,     0,     0,     0,     0,
      76,     0,     0,     0,     0,     0,     0,     0,   495,     0,
    1160,     0,  1667,   673,   673,   673,   673,     0,     0,   495,
     495,     0,     0,   495,     0,  1694,     0,     0,  1454,  1454,
       0,     0,     0,  1454,     0,   626,     0,     0,   825,     0,
     626,   495,   633,   495,     0, -1899,  1718,     0,     0,     0,
       0,     0,   499,   829,   635,     0,     0,  1162,     0,     0,
       0,   495,     0,     0,     0,     0,     0,     0,     0,  1510,
       0,     0,     0,     0,     0,     0,   826,     0,  2938,  1163,
    1514,     0,     0,     0,     0,     0,   829,   829,     0,     0,
       0,  2744,     0,   828,     0,     0,  3012,     0,     0,  1165,
       0,     0,   829,     0,     0,     0,  1527,     0,     0,     0,
    2935,     0,     0,     0,  1455,  1455,  3019,  3020,     0,  1455,
       0,     0,     0,     0,   495,     0,     0,  -476,   495,   633,
       0,     0,     0,  1420,  3031,     0,     0,     0,   495,   499,
     495,   635,   495,     0,     0,     0,   495,     0, -1899,     0,
     495,     0,     0,     0,  1153,  1572,  1573,  1574,  1575,  1576,
    1577,   495,     0,     0,   495,     0,     0,     0,     0,     0,
       0,     0,   831,  1154,  1303,     0,     0,     0,     0,   495,
       0,     0,     0,   701,   701,     0,   701,  3073,     0,  1753,
       0,     0,   721,  2986,     0,  1110,   722,     0,     0,     0,
       0,     0,     0,     0,   825,     0,     0,  1002,     0,   826,
    1844,     0,     0,  2072,  1845,     0,     0,  1846,  1847,  1848,
       0,     0,   968,   985,  1155,     0,   828,   673,  3026,  3027,
       0,     0,   495,     0,  2595,     0,   968,   968,     0,     0,
     528,     0,     0,     0,     0,     0,   637,     0,  2025,   495,
     633,   637,  2748,     0,     0,     0,     0,   528,     0,     0,
     499,     0,   635,     0,     0,     0,     0,     0,     0,     0,
       0,   495,  1507,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   829,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1455,
       0,   495,     0,     0,     0,   825,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1156,  1303,  2744,     0,   826,
       0,   528,     0,     0,     0,     0,     0,     0,   529,  3109,
       0,     0,   831,   529,     0,     0,   828,     0,     0,     0,
     495,   633,   529,     0,     0,  3112,     0,   495,   495,  3116,
       0,   499,     0,   635,  1899,   529,   529,  3103,     0,   826,
       0,     0,     0,     0,  1607,     0,  1157,  1609,     0,   495,
       0,  3132,   825,     0,  1158,   826,   828,     0, -1619,     0,
       0,     0,   528,   528,     0,     0,  1159,  1140,     0,   673,
     673,     0,   828,  1141,     0,     0,     0,   825,     0,     0,
    1153,     0,   495,     0,   826,     0,     0,     0,     0,     0,
       0,   826,   529,     0,   673,  1678,   829,  1160,  1850,  1154,
       0,   828,  1454,  1454,  1454,  1454,  1454,   673,   828,  1454,
    1454,  1454,  1454,  1454,  1454,  1454,  1454,  1454,  1454,     0,
       0,     0,   826,   825,   673,   826,     0,     0,   673,     0,
     826,     0,  1721,     0,     0,     0,     0,     0,  3193,   828,
       0,     0,   828,  1431,  1162,   640,     0,   828,     0,    76,
    1155,     0,     0, -1619,     0,     0,     0,     0,  2748,     0,
       0,     0,     0,  2035,     0,  2038,  1163,     0,  1851,     0,
       0,     0,     0,     0,   831,     0,     0,     0,     0,  1142,
       0,     0,     0,     0,     0,     0,  1165,     0,  1455,  1455,
    1455,  1455,  1455,     0,     0,  1455,  1455,  1455,  1455,  1455,
    1455,  1455,  1455,  1455,  1455, -1619,   829,   831,   831,     0,
       0,     0,     0,     0,  2088,     0,     0,   825,     0, -1619,
       0,     0,     0,   831, -1619,     0,     0,   626,     0, -1619,
       0,     0,   626,     0,     0,   626,  1454,  1454, -1619,     0,
       0,  1156, -1619,     0,     0,     0,   829,     0,     0,    76,
       0,  1370,  1371,     0,   825,     0,     0,     0,     0,     0,
       0,     0,   829,     0,     0,  1737,     0,     0,     0,     0,
       0,   673,     0, -1619,     0,     0,     0,     0,     0,     0,
       0,     0,  1769,   747,   747,     0,     0,     0,     0,     0,
       0,   829,  1157, -1619,  2175,  2176,  2177,  2178,   829,     0,
    1158,     0,     0,  1985,     0,     0,     0,     0,     0,     0,
       0,     0,  1159,     0,     0,     0,  1788,     0,     0,     0,
       0,  1788,  1455,  1455,     0,     0,   825,  1372,  1373,   829,
       0,     0,   829,  1143,     0,     0,     0,   829,     0,     0,
       0,     0, -1619,  1160,     0, -1619,     0,     0,     0,     0,
       0, -1619,   747,     0,   528,   528,     0,   528,   747,     0,
       0,     0,     0,     0,     0,    76,  1852,  1853,  1854,     0,
    1855,  1856,  1857,  1858,  1859,  1860,     0,   701,     0,  1814,
       0,     0,     0,     0,  1161, -1619,     0,     0,  1145,     0,
    1162,     0,  1374,  1375,  1376,  1377,  1378,  1379,     0,     0,
    1380,  1381,     0,     0,   831,     0,   826,     0, -1619,     0,
       0,     0,  1163,   500,     0,     0,     0,     0,  1164,     0,
       0,     0,     0,   828,  1815,     0,   968,     0,  1888,     0,
       0,   528,  1165,  1078,  1078,     0,   673,     0,   637,     0,
       0,   825,     0,   637,     0,     0,   637,  2310,   528,     0,
    1816,   528,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   674,     0,     0,     0,  1817,     0,
       0,  1948,  1818,  1153,     0,     0,  1952,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1147,     0,     0,
       0, -1619,  1154,     0,  1819,  2182,     0,  1820,     0,     0,
   -1619,     0,    76,     0,     0,     0,  1382,  1383,     0,     0,
       0,   747,  1821,     0,     0,     0,     0, -1619,     0, -1619,
   -1619,     0,   529,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   831,     0,     0,
       0,     0,  1078,  1155,  2684,     0,     0,     0,     0,     0,
       0,     0,  2685,     0,   529,   529, -1619,     0,     0, -1619,
   -1619, -1619,     0,  2034,     0,   673,     0,   673,     0,     0,
       0,     0,   826,     0,     0,     0,     0,     0,  2056,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1621,   828,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1822,     0,     0,     0,     0,     0,
    2686,     0,  1823,   829,     0,     0,   673,     0,     0,     0,
    1384,  1385,  1454,  1454,  1678,   528,     0,     0,     0,     0,
       0,     0,     0,  1824,  1156,   528,  2110,   528,  2114,     0,
     528,     0,     0,     0,     0,     0,   528,   831,   528,     0,
       0,   626,     0,     0,     0,  1825,     0,     0,     0,   747,
     528,     0,     0,     0,   747,   528,     0,   825,     0,   528,
     528,   528,   528,   826,   528,   528,     0,   529,     0,     0,
       0,     0,     0, -1621,     0,  1157,     0,   831,     0,     0,
     828,     0,     0,  1158,     0,     0,   673,   673,   673,   673,
       0,     0,     0,   831,     0,  1159,     0,  2687,  1455,  1455,
       0,     0,     0,     0,  2195,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2488,     0,  1527,     0,
       0,     0,   831,     0,     0, -1621,  1160,  2500,  2502,   831,
     826,  2506,     0,     0,     0,     0,  1985,     0,     0, -1621,
       0,     0,  2514,     0, -1621,  2517,     0,   828,     0, -1621,
    2522,     0,  2372,     0,     0,   826,     0,     0, -1621,     0,
     831,   626, -1621,   831,     0,     0,     0,     0,   831,   829,
       0,     0,   828,  1162, -1635,     0,    76,   626,     0,     0,
       0,   686,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1621,     0,  1163,     0,     0,  1454,     0,
       0,   826,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1621,     0,  1165,     0,  2688,   828,  1002,
    2689,     0,  1844,     0,     0,     0,  1845,   528,     0,  1846,
    1847,  1848,     0,     0,     0,     0,     0,  2839,     0,   673,
       0,     0,     0,     0,  1544,     0,  2846,  1545,     0,     0,
       0,  1546,   637,     0,  2568,  2569,  2570,   528,     0,     0,
       0,     0, -1621,  1419,     0, -1621,     0,     0,     0, -1635,
     829, -1621,  1429,  1430,     0,     0,     0,  1445,  1446,  1554,
       0,     0,     0,     0,  1455,     0, -1899,     0,     0,     0,
       0,     0,     0,     0,     0,   826,   528,     0,     0,     0,
    2343,     0,     0,     0,   528, -1621,     0,     0,     0,     0,
       0,  1556,   828,  1454,     0,   686,     0,     0,     0,  1419,
       0, -1635,     0,     0,     0,  1686,     0,     0, -1621,     0,
       0,     0,   826,     0,     0, -1635,     0,   829,     0,     0,
   -1635,  1948,     0,     0,     0, -1635,     0,     0,     0,   828,
       0,  1472,     0,     0, -1635,     0,     0,     0, -1635,     0,
       0,     0,   829,  2642,     0,     0,     0,     0,  1494,     0,
       0,     0,   637,     0,     0,     0,     0,     0,     0,     0,
       0,  2362,     0,     0,   674,   528,  1541,     0,   637, -1635,
       0,     0,  2396,     0,     0,  2399,  2056,     0,     0,  1455,
       0,     0,     0,     0,   826,     0,     0,     0,   829, -1635,
       0, -1621, -1899,  1419,     0,  1419,  1419,     0,     0,     0,
   -1621,   828,     0,     0,     0,     0,     0,     0, -1899,     0,
    1850,     0,  1536, -1899,     0,     0,     0, -1621,  2774, -1621,
   -1621,     0,     0,     0,   831,     0,     0,     0,     0,  1454,
    1737,     0,     0,  1544,     0,     0,  1545,     0, -1635,     0,
    1546, -1635,     0,     0,     0,     0,     0, -1635,     0,     0,
   -1899,     0,     0,     0,  1527,     0, -1621,     0,     0, -1621,
   -1621, -1621,  1419,     0,     0,  1419,  1419,     0,  1554,     0,
       0,     0,     0,   529,   529, -1899,     0,     0,     0,     0,
    1851, -1635,   829,     0,     0,  1527,     0,  2810,  2811,  2812,
    2813,     0,     0,  1737,     0,     0,     0,     0,   673,   826,
    1556,     0,     0,     0, -1635,  1565,     0,     0,  1737,   673,
     673,   528,     0,   673,     0,  1455,   828,     0,     0,   829,
       0,     0,     0,     0,   673,     0,     0,   673,     0,     0,
       0,     0,   673,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2529,     0,     0,     0,     0,
       0,     0,     0,     0,  1002,     0,     0,  1844,     0,     0,
     674,  1845,   747,     0, -1899, -1899, -1899,     0,     0,     0,
    2604,     0,     0,     0,     0,     0,  1737,  1737,     0,  1737,
       0,     0,     0,     0,     0,     0,     0, -1635,     0,     0,
     831,   829,     0,     0,     0,  2897, -1635, -1899,     0,     0,
       0, -1899,     0,    76,     0,     0,     0,     0,   500,     0,
       0,     0,     0, -1635,     0, -1635, -1635, -1899,     0,     0,
       0,     0, -1899,     0,     0,     0,     0,  2561,     0,     0,
      76,     0,     0,    76,     0,     0,   673,   673,   673,     0,
       0,     0,     0,   528,     0,     0,     0,   528,     0,     0,
       0,     0, -1635,     0,  1776, -1635, -1635, -1635,     0, -1899,
       0,     0,  1948,     0,     0,  1785,     0,  1786,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1793,  1852,  1853,
    1854,     0,  1855,  1856,  1857,  1858,  1859,  1860,     0,     0,
       0,   831,     0,     0,  1794,     0,     0,     0,     0,     0,
   -1899,     0,     0,     0,     0,     0,   829,  1572,  1573,  1574,
    1575,  1576,  1577,     0,  1565,     0,     0,     0,     0,  1808,
    1810,     0,     0,     0,     0,   826,     0,  2056,     0,     0,
     626,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      76,    76,   828,     0,     0,   673,     0,   528,     0,     0,
       0,  1737,  1678,  1737,     0,  1769,     0,     0,   831,     0,
       0,     0,  1370,  1371,     0,   529,   529,     0,   529,     0,
       0,     0,     0,     0,   528,     0,  2696,     0,     0,     0,
       0,     0,     0,   831,     0,     0,     0,     0,     0,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,     0,
       0,     0,     0,     0,     0,     0, -1899,  1059,  1059,     0,
       0,     0,     0,     0,  1002,  2195,     0,  1844,     0,     0,
     673,  1845,     0,     0,  1846,  1847,  1848,     0,     0,   831,
       0,     0,     0,  1678,     0,  1851,     0,     0,  1372,  1373,
       0,  2847,   529,     0,     0,     0,  1769,     0,     0,     0,
       0,     0,     0,     0,     0,  3028,     0,     0,     0,  1911,
       0,     0,  1914,     0,     0,  1737,     0,     0,     0,     0,
    1222,  1227,     0,     0,     0,  3052,     0,     0,     0,     0,
       0,     0,   528,     0,     0,     0,     0,     0,     0,   673,
     673,   673,   673,    76,     0,     0,     0,     0,     0,     0,
       0,   747,     0,  1374,  1375,  1376,  1377,  1378,  1379, -1899,
       0,  1380,  1381,     0,  2837,     0,  1572,  1573,  1574,  1575,
    1576,  1577,  3082,   831,     0,     0,     0,     0,     0,     0,
       0,     0,   829,  1527,     0,     0,     0,     0,     0,  2857,
       0,   637,     0,     0,     0,     0,     0,     0,     0,  1078,
       0,     0,  3108,  2396,     0,  2082,  2082,     0,  2056,     0,
     831,     0,     0,     0,  1948,     0,     0,     0,     0,     0,
    1678,     0,     0,     0,     0,     0,  1737,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1544,   747,
     528,  1545,     0,     0,     0,  1546,     0,   673,  1549,  1550,
    1551,     0,     0,     0,     0,     0,  1419,     0,     0,     0,
       0,     0,     0,     0,  2910,  1552,  1419,  1382,  1383,  1419,
       0,     0,     0,  1554,     0,  1850,     0,     0,     0,     0,
    1555,     0,   831, -1899, -1899, -1899,   529,  1855,  1856,  1857,
    1858,  1859,  1860,    76,    76,     0,   529,     0,   529,     0,
       0,   529,     0,     0,     0,  1556,     0,   529,     0,   529,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   529,     0,     0,     0,     0,   529,     0,     0,     0,
     529,   529,   529,   529,     0,   529,   529,     0,     0,     0,
       0,  1426,  1737,     0,     0,  1851,     0,     0,     0,  2223,
    2225,  1447,     0,     0,  1449,  2195,     0,  1459,  1462,  1467,
    1470,     0,     0,     0,     0,     0,     0,     0,  2954,     0,
       0,  1419,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1384,  1385,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1222,     0,    76,     0,     0,   831,     0,     0,
       0,     0,     0,     0,  2972,     0,  1557,     0,     0,  1511,
      76,     0,     0,     0,    76,     0,     0,     0,     0,     0,
       0,  1544,  1558,     0,  1545,     0,  1515,  1559,  1546,     0,
    2984,  1549,  1550,  1551,     0,     0,    76,  1518,  1519,  1520,
       0,  1524,  1528,  2995,     0,     0,     0,     0,  1552,  1560,
    1561,     0,     0,     0,     0,     0,  1554,     0,     0,     0,
       0,     0,     0,  1555,  1562,     0,     0,     0,  1586,     0,
       0,     0,     0,  1419,   528,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1556,     0,
       0,     0,     0,     0,   528,   528,     0,     0,   529,     0,
       0,     0,  1563,     0,     0,  1564,     0,   673,     0,  1678,
       0,     0,   528,     0,     0,     0,     0,     0,     0,  1565,
       0,  1630,  1566,    76,     0,  1646,  1651,   673,  1914,     0,
    2995,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1852,  1853,  1854,     0,  1855,  1856,  1857,
    1858,  1859,  1860,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1078,     0,   528,     0,   529,     0,     0,
       0,     0,     0,     0,   673,  1536,     0,     0,     0,     0,
    1222,     0,     0,     0,     0,     0,     0,     0,     0,  1557,
    2383,     0,  1222,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   673,  1558,     0,     0,     0,     0,
    1559,  1567,     0,     0,     0,     0,  1222,     0,     0,     0,
       0,     0,     0,   831,     0,     0,  2415,  2415,     0,     0,
       0,  1544,  1560,  1561,  1545,     0,     0,  2972,  1546,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
     -42,  2995,   747,   747,   747,     0,   529,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1554,     0,     0,     0,
       0,     1,     0, -1899,     0,     0,     0,     0,     0,     0,
       0,     2,  1678,     3,     4,  1563,     0,     0,  1564,     0,
       0,     0,     0,     0,     5,     0,     0,     0,  1556,     6,
       0,  1888,  1565,     0,     0,     0,     0,     0,     7,     0,
       0,     0,     0,     0,  1568,  2056,     0,  1569,  1570,  1571,
       8,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,     0,
       0,     9,     0,     0,     0,  1678,     0,     0,     0,     0,
       0,     0,  2995,    10,     0,    11,     0,     0,     0,     0,
       0,     0,   747,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    12,     0,     0,     0,     0,  2607,     0,
       0,     0,  2525,     0,     0,     0,     0,    13,    14,     0,
       0,     0,     0,     0,     0,     0,     0,    15,     0,     0,
       0,     0,     0,    16,  1567,     0,     0,     0,     0, -1899,
       0,    17,   529,    18,    19,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1899,     0,    20,     0,     0,
   -1899,    21,     0,     0,     0,     0,     0,     0,  1830,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    22,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1899,     0,     0,
       0,    23,     0,  1467,     0,  1467,  1467,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1059,  1059,
       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1568,     0,     0,
    1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,
       0,     0,  1565,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   529,     0,     0,     0,  1911,     0,
    1963,     0,     0,     0,     0,     0,  1967,  1968,  1969,  1970,
    1971,  1972,  1973,     0,     0,     0,     0,  1982,  1983,     0,
       0,     0,  1994,     0,    25,     0,  1997,    26,     0,  2005,
    2006,  2007,  2008,  2009,  2010,  2011,  2012,  2013,     0,     0,
    2014,     0,     0,     0,     0,     0,     0,  1059,     0,  1222,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0, -1899,    28,     0,     0,     0,     0,
       0,     0,     0,  2039,     0,     0,     0,     0,     0,    29,
    1419,     0,  1456,     0,     0,     0,    30,     0,     0,     0,
      31,     0,     0,     0,     0,     0,     0,     0,   529,     0,
      32,     0,     0,     0,     0,     0,     0,  1519,  1520,     0,
       0,     0,    33,     0,     0,     0,    34,     0,     0,     0,
       0,     0,     0,     0,     0,   529,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    35,     0,     0,     0,     0,
     529,   529,   529,   529,   529,   529,   529,   529,   529,   529,
      36,     0,     0,    37,     0,     0,     0,     0,    38,     0,
       0,     0,     0,     0,     0,     0,     0, -1899,     0,     0,
       0,     0,    39,     0,  1572,  1573,  1574,  1575,  1576,  1577,
       0,     0,     0,     0,     0,     0,  1580,  1222,     0,     0,
    2161,  2162,     0,  2163,     0,     0,    40,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1544,     0,
      41,  1545,     0,   -42,     0,  1546,  1547,  1548,  1549,  1550,
    1551,     0,     0,     0,  1222,     0,     0,     0,     0,  1580,
       0,     0,     0,  1911,     0,  1552,     0,     0,     0,     0,
       0,     0,     0,  1554,     0,     0,     0,     0,     0,     0,
    1555,  1543,     0,     0,     0,     0,  1544,     0,     0,  1545,
       0,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,     0,
       0,     0,     0,     0,     0,  1556,     0,     0,     0,     0,
       0,     0,     0,  1552,     0,     0,  1553,     0,     0,     0,
       0,  1554,     0,     0,  2259,     0,     0,  2260,  1555,  2261,
       0,  1419,     0,     0,     0,     0,  1419,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1556,     0,     0,     0,  2286,  2287,     0,
       0,  2039,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   529,     0,     0,     0,     0,     0,     0,     0,  1580,
       0,     0,     0,     0,  1580,     0,     0,  1808,  1810,     0,
    2314,     0,     0,  2317,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1544,  1557,  1222,  1545,     0,
       0,     0,  1546,     0,     0,     0,     0,  2330,     0,     0,
       0,     0,  1558,  1544,     0,     0,  1545,  1559,     0,     0,
    1546,     0,     0,  1549,  1550,  1551,     0,     0,     0,     0,
    1554,     0,     0,  2341,     0,     0,     0, -1899,  2344,  1560,
    1561,  2346,     0,     0,  1557,     0,     0,     0,  1554,     0,
       0,     0,     0,     0,  1562,  1555,     0,     0,     0,     0,
    1558,     0,  1556,  1544,     0,  1559,  1545,     0,     0,     0,
    1546,     0,     0, -1899, -1899, -1899,     0,     0,  2364,     0,
    1556,  2367,     0,  2369,     0,     0,     0,  1560,  1561,     0,
       0,     0,  1563,     0,     0,  1564,     0,     0,  1554,     0,
       0,     0,  1562,     0,     0,  1555,     0,     0,     0,  1565,
       0,     0,  1566,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1556,     0,  2608,     0,     0,     0,     0,     0,     0,     0,
    1563,  1630,     0,  1564,     0,  1808,  1810,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1419,  1565,  1651,  2012,
    1566,     0,     0, -1899,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,     0,  2423,     0, -1899,
       0,  1557,     0,     0, -1899,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,   529,  1580,  1558,  1456,  1456,
    1861,  1567,  1559,  1456,     0,     0,  1580,     0,     0,  1580,
       0,     0,     0,     0,  1580,   529,   529,  1580,     0,     0,
       0, -1899,     0,     0,  1560,  1561,     0,     0,     0,     0,
       0,  1557,     0,   529,     0,     0,  1222,     0,     0,  1562,
       0,     0,     0,     0,     0,     0,     0,  1558,     0,  1567,
       0,     0,  1559,     0,     0,     0,     0,     0,  1580,     0,
       0,     0,  1580,     0,     0,  1580,  1580,  1580,     0,     0,
       0,  1580,     0,     0,     0,  1580,  1565,  1563,     0,     0,
    1564,     0,     0,     0,     0,  2520,   529,     0,     0,  1562,
       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,
       0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,     0,
       0,     0,     0,     0,  1837,     0,     0,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,  1544,     0,     0,  1545,
       0,     0,     0,  1546,  1565,     0,     0,     0,     0,     0,
       0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,  1572,
    1573,  1574,  1575,  1576,  1577,     0,     0,     0, -1899,     0,
       0,  1554,     0,     0,     0,     0,     0,  1580, -1899,     0,
       0,     0,  1419,     0,     0,     0,  1567,     0,     0,     0,
       0,     0,     0,  1580,     0,     0,     0,     0,  1580,     0,
       0,     0,  1544,  1556,     0,  1545,     0,     0,     0,  1546,
       0,  2580,  1549,  1550,  1551,     0,     0,     0,     0,     0,
    2585,     0,     0,     0,     0,     0,     0,     0,     0,  2593,
       0,     0,  2596,     0,  2598,     0,  1567,  1554,     0,     0,
       0,     0,  2602,     0,  1555,     0,     0,     0,     0,     0,
    2609,  2610,     0,     0,  2613,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2623,  1556,
       0, -1899,     0,  2850,     0,     0,     0,     0,  1572,  1573,
    1574,  1575,  1576,  1577,  2636,     0,     0,     0,     0,  1568,
       0,     0,  1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,
    1576,  1577,     0,     0, -1899,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1899,     0,     0,     0,     0, -1899,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1568,
       0,     0, -1899, -1899, -1899,     0,  1572,  1573,  1574,  1575,
    1576,  1577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1899,     0,     0,     0,     0,     0,     0,     0,
    1557,     0,     0,     0,     0,     0,     0,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,  1558,     0,     0,  1861,
    1861,  1559,  1456,  1456,  1456,  1456,  1456,     0,     0,  1456,
    1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  1861,
       0,     0,     0, -1899, -1899,     0,     0,  1565,     0,  1544,
       0,     0,  1545,     0,     0,     0,  1546,     0,  1562,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2827,  2828,     0,  1554,     0,     0,     0,     0,  2833,
       0, -1899,     0,     0,     0,     0,     0,     0,     0, -1899,
    2838,     0,     0,     0,  2840,  2841,     0,     0,     0,  2842,
       0,     0,     0,  1565,  2845,     0,  1556,  2848,  2849,     0,
       0,     0,  2853,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1059,     0,     0,     0,     0, -1899,
    1580,     0,     0,     0,  1580,  1580,  1580,  1580,  1580,  1580,
    1580,     0,     0,     0,     0,     0,  1456,  1456,     0,  1580,
    1580,     0,     0,     0,     0,     0,     0,     0,  2885,     0,
       0,  1580,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,     0,  1580,  1580,  1580,  1580,  1580,  1580,  1580,  1580,
    1580,  1580,     0,     0,     0,  2904,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580, -1899,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -1899,     0,     0,  1544,     0, -1899,  1545,
       0,     0, -1899,  1546,  1547,  1548,  1549,  1550,  1551,  1572,
    1573,  1574,  1575,  1576,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,  1552,     0,     0,  2589,     0,     0,     0,
       0,  1554,     0,     0,     0, -1899,     0,     0,  1555,     0,
       0,  2931,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1556,     0,     0,     0,     0,  1568,     0,
       0,  1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,  1528,
    1565,     0,     0,     0,     0,     0,     0,     0,  1580,  1580,
    1580,     0,     0,     0,     0,  2341,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2979,  2980,     0,     0,
    2981,  1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,
    1548,  1549,  1550,  1551,     0,     0,     0,     0,     0,     0,
    2997,     0,     0,     0,     0,     0,     0,     0,  1552,     0,
       0,     0,     0,     0,     0,     0,  1554,     0,  3007,     0,
       0,     0,     0,  1555,  1557,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1558,     0, -1899,     0,     0,  1559,     0,     0,  1556,     0,
       0,     0,     0,     0,     0,     0,  1580,  1580,  1580,     0,
       0,  1861,  1861,  1861,  1861,  1861,     0,  1560,  1561,  1861,
    1861,  1861,  1861,  1861,  1861,  1861,  1861,  1861,  1861,     0,
       0,  3051,  1562,  1580,  1580,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2827,
       0,     0,     0,  3064,     0,     0,     0,  3067,     0,     0,
       0,  1580,     0,     0,  1580,     0,     0,     0,  1059,     0,
    1563,  3074,     0,  1564,     0,     0,     0,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,  3093,  1565,  1580,     0,
    1566,  1580,     0,  1580,     0, -1899,     0,  1861,  1861,  1557,
       0,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,
       0,  1580,  1456,  1456,  1580,  1558,  1580,     0,     0,     0,
    1559,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2827,
       0,     0,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,     0,     0,  1544,     0,     0,  1545,  3157,  1567,
       0,  1546,  1547,  1548,  1549,  1550,  1551,     0,     0,     0,
       0,     0,     0,     0,     0,  1563,     0,     0,  1564,     0,
       0,  1552,     0,     0,     0,     0,     0,     0,     0,  1554,
    1544,     0,  1565,  1545,     0,  1566,  1555,  1546,  1547,  1548,
    1549,  1550,  1551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1552,     0,     0,
       0,  1556,     0,   534,     0,  1554,     0,     0,     0,     0,
       0,     0,  1555,     0,  3199,  3199,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,  3199,  1556,     0,     0,
       0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,  1572,
    1573,  1574,  1575,  1576,  1577,     0,   535,     0,  1456,  1957,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  3199,
       0,     0,   536,     0,     0,     0,     0,     0,  1140,     0,
       0,     0,     0,     0,  1141,     0,     0,  1580,     0,     0,
     537,  1153,  1580,     0,     0,     0,     0,     0,     0,     0,
    1580,     0,  1557,  1580,     0,  1580,     0,     0,     0,  1580,
    1154,     0,  1861,  1861,     0,     0,  1580,  1580,  1558,     0,
    1580,     0,     0,  1559,     0,     0,   538,     0,     0,     0,
    1580,     0,     0,     0,     0,     0,   539,     0,  1557,     0,
       0,     0,     0,  1580,     0,  1560,  1561,     0,   540,     0,
       0,     0,     0,   541,  1558,     0,     0,     0,     0,  1559,
    1562,  1155,     0,     0,     0,     0,     0,  1568,     0,     0,
    1569,  1570,  1571,  1456,  1572,  1573,  1574,  1575,  1576,  1577,
     542,  1560,  1561,     0,  1957,     0,     0,     0,     0,     0,
    1142,     0,     0,     0,     0,     0,  1562,     0,  1563,     0,
       0,  1564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1565,     0,     0,  1566,     0,
       0,     0,     0,     0,     0,   543,     0,     0,     0,   544,
       0,     0,     0,     0,  1563,     0,     0,  1564,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1565,  1156,     0,  1566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   545,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1157,     0,     0,   546,  1567,  1861,  1456,
       0,  1158,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1159,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,  1580,     0,     0,     0,   547,
    1580,     0,   548,  1567,  1143,  1580,     0,  1580,  1580,  1580,
     549,     0,  1580,   550,  1160,  1580,  1580,     0,     0,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   552,     0,     0,     0,
       0,     0,  1580,   553,     0,  2130,     0,     0,  1861,  1145,
       0,  1162,   554,     0,     0,     0,     0,     0,   555,     0,
    1568,  1580,     0,  1569,  1570,  1571,     0,  1572,  1573,  1574,
    1575,  1576,  1577,  1163,     0,     0,     0,  2258,     0,  2131,
       0,     0,     0,     0,   556,     0,     0,     0,  1580,     0,
       0,     0,     0,  1165,     0,     0,  1568,     0,     0,  1569,
    1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,
       0,     0,     0,  2348,  1861,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1580,  1580,  1580,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1147,     0,
       0,     0,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1580,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,  1580,     0,     0,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
     103,   999,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,  1580,  1012,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,  1015,   181,  1580,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,    21,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,  1026,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,    29,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,    34,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   624,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,    39,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,  1037,     0,    40,     0,     0,     0,     0,  1038,  1039,
       0,     0,     0,     0,     0,  1041,     0,  1042,  2968,     0,
       0,     0,  1043,  1044,  1045,  1046,  1179,   999,   640,  1000,
    1001,  1002,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,  1180,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,  1181,
     121,   122,   123,   124,  1006,  1182,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,  1183,
       0,  1184,   147,   148,   149,   150,   151,  1185,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,  1186,
     163,   164,   165,  1187,  1188,  1189,  1190,   606,   607,  1191,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
    1015,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,  1192,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,  1193,     0,  1194,   224,   225,  1195,  1196,
     228,     0,   229,     0,  1019,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,  1197,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,  1198,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,  1199,  1200,   265,  1201,   267,   268,   269,   270,
     271,   272,     0,     0,   273,  1202,   275,  1203,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,  1204,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,  1205,
    1025,   307,   308,   309,   310,  1026,   311,   312,  1206,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,  1029,   324,   325,     0,     0,   326,   327,  1207,
     329,  1208,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,  1209,   381,   382,   383,
    1031,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,  1210,   402,
     403,   404,   405,   406,  1211,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,  1212,   425,   619,   427,     0,   428,   429,     0,
     430,  1213,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
    1214,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,  1215,     0,   459,   460,   461,   462,
     463,   464,  1036,  1216,   466,  1217,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,  1037,     0,     0,
       0,     0,     0,     0,  1038,  1039,  1218,     0,     0,     0,
       0,  1041,     0,  1042,  1219,     0,     0,     0,  1043,  1044,
    1045,  1046,   103,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
    1006,   126,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,  1012,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,  1015,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,   222,
      21,   223,   224,   225,   226,   227,   228,     0,   229,     0,
    1019,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,   305,  1025,   307,   308,   309,
     310,  1026,   311,   312,   313,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,    29,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,    34,   430,   431,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   624,  1036,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,    39,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,  1037,     0,    40,     0,     0,     0,     0,
    1038,  1039,     0,     0,     0,     0,     0,  1041,     0,  1042,
       0,     0,     0,     0,  1043,  1044,  1045,  1046,   103,   999,
     640,  1000,  1001,  1002,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123,   124,  1006,   126,  1007,  1008,
    1463,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,   601,     0,  1012,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   602,   603,   604,   605,   606,
     607,   608,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,   222,  1464,   223,   224,   225,
     226,   227,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,     0,  1465,   273,   274,   275,   276,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,   305,  1025,   307,   308,   309,   310,  1026,   311,   312,
     313,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     618,   402,   403,   404,   405,   406,   407,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   619,   427,     0,   428,
     429,     0,   430,   431,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,  1466,   439,   440,   620,   442,   621,  1035,
     444,   445,   622,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   623,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  1037,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
    -989,   112,   113,   114,     0,     0,     0,  -989,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,   124,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   276,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,  1026,   311,   312,   313,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,   407,   408,   409,  1032,   411,  -989,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,  1037,     0,     0,     0,     0,
       0,     0,  1038,  1039,     0,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
     103,   999,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,  1626,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,  1012,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,  1015,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,  1026,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,     0,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   464,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,  1037,     0,     0,     0,     0,     0,     0,  1038,  1039,
    1627,     0,     0,     0,     0,  1041,     0,  1042,     0,     0,
       0,     0,  1043,  1044,  1045,  1046,   103,   999,   640,  1000,
    1001,  1002,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,  2814,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,   123,   124,  1006,   126,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,   601,
       0,  1012,   147,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,   162,
     163,  2815,   165,   602,   603,   604,   605,   606,   607,   608,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
    1015,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,   222,     0,   223,   224,   225,   226,   227,
     228,     0,   229,     0,  2816,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,   276,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,   305,
    1025,   307,   308,   309,   310,  1026,   311,   312,   313,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,  1029,   324,   325,     0,     0,   326,   327,   328,
     329,   330,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,  2817,
    1031,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   618,   402,
     403,   404,   405,   406,   407,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   619,   427,     0,   428,   429,     0,
     430,   431,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
     622,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   623,     0,   459,   460,   461,   462,
     463,   464,  1036,     0,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,  1037,     0,     0,
       0,     0,     0,     0,  1038,  1039,  2818,     0,     0,     0,
       0,  1041,     0,  2819,     0,     0,     0,     0,  1043,  1044,
    1045,  1046,   103,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
    1006,   126,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,  1012,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,  1015,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,   222,
       0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
    1019,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,   305,  1025,   307,   308,   309,
     310,  1026,   311,   312,   313,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,     0,   430,   431,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   464,  1036,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,  1037,     0,     0,     0,     0,     0,     0,
    1038,  1039,  1040,     0,     0,     0,     0,  1041,     0,  1042,
       0,     0,     0,     0,  1043,  1044,  1045,  1046,   103,  1642,
     640,  1000,  1001,  1002,  1643,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,  1644,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123,   124,  1006,   126,  1007,  1008,
       0,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,   601,     0,  1012,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   602,   603,   604,   605,   606,
     607,   608,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,   222,     0,   223,   224,   225,
     226,   227,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,   276,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,   305,  1025,   307,   308,   309,   310,  1026,   311,   312,
     313,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     618,   402,   403,   404,   405,   406,   407,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   619,   427,     0,   428,
     429,     0,   430,   431,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,     0,   439,   440,   620,   442,   621,  1035,
     444,   445,   622,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   623,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  1037,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,   124,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,  1464,   223,   224,   225,   226,   227,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   276,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,  1026,   311,   312,   313,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,   407,   408,   409,  1032,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,  1037,     0,     0,     0,     0,
       0,     0,  1038,  1039,     0,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
     103,   999,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,  1012,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,  1015,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,  1026,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,     0,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   464,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,  1037,     0,     0,     0,     0,     0,     0,  1038,  1039,
       0,     0,     0,     0,     0,  1041,     0,  1042,  1949,     0,
       0,     0,  1043,  1044,  1045,  1046,  1179,   999,   640,  1000,
    1001,  1002,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,  1181,
     121,   122,   123,   124,  1006,  1182,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,  1183,
       0,  1184,   147,   148,   149,   150,   151,  1185,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,  1186,
     163,   164,   165,  1187,  1188,  1189,  1190,   606,   607,  1191,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
    1015,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,  1193,     0,  1194,   224,   225,  1195,  1196,
     228,     0,   229,     0,  1019,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,  1197,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,  1198,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,  1199,  1200,   265,  1201,   267,   268,   269,   270,
     271,   272,     0,     0,   273,  1202,   275,  1203,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,  1204,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,  1205,
    1025,   307,   308,   309,   310,  1026,   311,   312,  1206,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,  1029,   324,   325,     0,     0,   326,   327,  1207,
     329,  1208,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,  1209,   381,   382,   383,
    1031,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,  1210,   402,
     403,   404,   405,   406,  1211,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,  1212,   425,   619,   427,     0,   428,   429,     0,
     430,  1213,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
    1214,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,  1215,     0,   459,   460,   461,   462,
     463,   464,  1036,  2156,   466,  1217,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,  1037,     0,     0,
       0,     0,     0,     0,  1038,  1039,     0,     0,     0,     0,
       0,  1041,     0,  1042,     0,     0,     0,     0,  1043,  1044,
    1045,  1046,  1179,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,  1181,   121,   122,   123,   124,
    1006,  1182,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,  1183,     0,  1184,   147,   148,
     149,   150,   151,  1185,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,  1186,   163,   164,   165,  1187,
    1188,  1189,  1190,   606,   607,  1191,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,  1015,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,  1193,
       0,  1194,   224,   225,  1195,  1196,   228,     0,   229,     0,
    1019,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,  1197,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,  1198,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,  1199,  1200,
     265,  1201,   267,   268,   269,   270,   271,   272,     0,     0,
     273,  1202,   275,  1203,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,  1204,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,  1205,  1025,   307,   308,   309,
     310,  1026,   311,   312,  1206,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,  1207,   329,  1208,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,  1209,   381,   382,   383,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,  1210,   402,   403,   404,   405,   406,
    1211,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,  1212,   425,
     619,   427,     0,   428,   429,     0,   430,  1213,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,  1214,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
    1215,     0,   459,   460,   461,   462,   463,   464,  1036,     0,
     466,  1217,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,  1037,     0,     0,     0,     0,     0,     0,
    1038,  1039,     0,     0,     0,     0,     0,  1041,     0,  1042,
    2203,     0,     0,     0,  1043,  1044,  1045,  1046,   103,   999,
     640,  1000,  1001,  1002,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123,   124,  1006,   126,  1007,  1008,
       0,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,   601,     0,  1012,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   602,   603,   604,   605,   606,
     607,   608,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,   222,     0,   223,   224,   225,
     226,   227,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,   276,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,   305,  1025,   307,   308,   309,   310,  1026,   311,   312,
     313,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     618,   402,   403,   404,   405,   406,   407,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   619,   427,     0,   428,
     429,  2519,   430,   431,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,     0,   439,   440,   620,   442,   621,  1035,
     444,   445,   622,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   623,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  1037,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,   124,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   276,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,  1026,   311,   312,   313,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,   407,   408,   409,  1032,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
    2612,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,  1037,     0,     0,     0,     0,
       0,     0,  1038,  1039,     0,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
     103,   999,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,  1012,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,  1015,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,  1026,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,  2930,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   464,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,  1037,     0,     0,     0,     0,     0,     0,  1038,  1039,
       0,     0,     0,     0,     0,  1041,     0,  1042,     0,     0,
       0,     0,  1043,  1044,  1045,  1046,   103,   999,   640,  1000,
    1001,  1002,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,   123,   124,  1006,   126,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,   601,
       0,  1012,   147,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   602,   603,   604,   605,   606,   607,   608,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
    1015,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,   222,     0,   223,   224,   225,   226,   227,
     228,     0,   229,     0,  1019,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,   276,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,   305,
    1025,   307,   308,   309,   310,  1026,   311,   312,   313,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,  1029,   324,   325,     0,     0,   326,   327,   328,
     329,   330,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
    1031,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   618,   402,
     403,   404,   405,   406,   407,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   619,   427,     0,   428,   429,  3050,
     430,   431,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
     622,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   623,     0,   459,   460,   461,   462,
     463,   464,  1036,     0,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,  1037,     0,     0,
       0,     0,     0,     0,  1038,  1039,     0,     0,     0,     0,
       0,  1041,     0,  1042,     0,     0,     0,     0,  1043,  1044,
    1045,  1046,   103,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
    1006,   126,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,  1012,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,  1015,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,   222,
       0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
    1019,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,   305,  1025,   307,   308,   309,
     310,  1026,   311,   312,   313,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,     0,   430,   431,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   464,  1036,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,  1037,     0,     0,     0,     0,     0,     0,
    1038,  1039,     0,     0,     0,     0,     0,  1041,     0,  1042,
       0,     0,     0,     0,  1043,  1044,  1045,  1046,  1179,   999,
     640,  1000,  1001,  1002,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,  1181,   121,   122,   123,   124,  1006,  1182,  1007,  1008,
       0,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,  1183,     0,  1184,   147,   148,   149,   150,   151,  1185,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,  1186,   163,   164,   165,  1187,  1188,  1189,  1190,   606,
     607,  1191,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,  1193,     0,  1194,   224,   225,
    1195,  1196,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239,  1197,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,  1198,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,  1199,  1200,   265,  1201,   267,   268,
     269,   270,   271,   272,     0,     0,   273,  1202,   275,  1203,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,  1204,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,  1205,  1025,   307,   308,   309,   310,  1026,   311,   312,
    1206,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,  1207,   329,  1208,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,  1209,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
    1210,   402,   403,   404,   405,   406,  1211,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,  1212,   425,   619,   427,     0,   428,
     429,     0,   430,  1213,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,     0,   439,   440,   620,   442,   621,  1035,
     444,   445,  1214,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,  1215,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,  1217,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  1037,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,   124,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   276,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,  1026,   311,   312,   313,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,   407,   408,   409,  1032,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,  1037,     0,     0,     0,     0,
       0,     0,  1647,  1648,     0,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
     103,  2080,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,  1012,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,  1015,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,  1026,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,     0,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   464,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,  1037,     0,     0,     0,     0,     0,     0,  1038,  1039,
       0,     0,     0,     0,     0,  1041,     0,  1042,     0,     0,
       0,     0,  1043,  1044,  1045,  1046,   103,   999,   640,  1000,
    1001,  1002,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,   123,   124,  1006,   126,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,   601,
       0,  1012,   147,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   602,   603,   604,   605,   606,   607,   608,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
    1015,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,   222,     0,   223,   224,   225,   226,   227,
     228,     0,   229,     0,  1019,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,   276,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,   305,
    1025,   307,   308,   309,   310,  1026,   311,   312,   313,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,  1029,   324,   325,     0,     0,   326,   327,   328,
     329,   330,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
    1031,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   618,   402,
     403,   404,   405,   406,   407,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   619,   427,     0,   428,   429,     0,
     430,   431,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
     622,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   623,     0,   459,   460,   461,   462,
     463,   464,  1036,     0,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,  1037,     0,     0,
       0,     0,     0,     0,  1038,  1039,     0,     0,     0,     0,
       0,  1041,     0,  2340,     0,     0,     0,     0,  1043,  1044,
    1045,  1046,   103,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
    1006,   126,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,  1012,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,  2815,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,  1015,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,   222,
       0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
    2816,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,   305,  1025,   307,   308,   309,
     310,  1026,   311,   312,   313,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,  2817,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,     0,   430,   431,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   464,  1036,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,  1037,     0,     0,     0,     0,     0,     0,
    1038,  1039,     0,     0,     0,     0,     0,  1041,     0,  2819,
       0,     0,     0,     0,  1043,  1044,  1045,  1046,   103,   999,
     640,  1000,  1001,  1002,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123,  3196,  1006,   126,  1007,  1008,
       0,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,   601,     0,  1012,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,  3197,   602,   603,   604,   605,   606,
     607,   608,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,   222,     0,   223,   224,   225,
     226,   227,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,   276,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,   305,  1025,   307,   308,   309,   310,  1026,   311,   312,
     313,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     618,   402,   403,   404,   405,   406,   407,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   619,   427,     0,   428,
     429,     0,   430,   431,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,     0,   439,   440,   620,   442,   621,  1035,
     444,   445,   622,   447,   448,  3198,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   623,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  1037,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,   124,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
    3197,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,     0,   223,   224,   225,   226,   227,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,   276,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,  1026,   311,   312,   313,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,   407,   408,   409,  1032,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,  3198,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,  1037,     0,     0,     0,     0,
       0,     0,  1038,  1039,     0,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
     103,   999,   640,  1000,  1001,  1002,  1003,  1004,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,  1005,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,  1006,   126,
    1007,  1008,     0,   129,   130,   131,   132,   133,   134,  1009,
     599,   135,   136,  1010,  1011,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,  1013,  1014,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   776,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,  1016,
     209,   210,   211,   212,   213,   609,  1017,   215,     0,   216,
     217,  1018,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,  1019,  1020,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
    1021,  1022,     0,  1023,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,     0,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,  1024,   305,  1025,   307,   308,   309,   310,     0,
     311,   312,   313,   314,  1027,   613,   316,  1028,   318,   319,
     320,     0,   321,   322,     0,     0,  1029,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,  1030,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,  1031,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,  1032,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,     0,   430,   431,   432,   433,   434,   435,
     436,     0,  1033,  1034,     0,     0,   439,   440,   620,   442,
     621,  1035,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   464,  1036,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,     0,     0,     0,     0,     0,     0,     0,  1451,  1452,
       0,     0,     0,     0,     0,  1041,     0,  1042,     0,     0,
       0,     0,  1043,  1044,  1045,  1046,   103,   999,   640,  1000,
    1001,     0,  1003,  1004,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
    1005,     0,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,   123,   124,  1006,   126,  1007,  1008,     0,   129,
     130,   131,   132,   133,   134,  1009,   599,   135,   136,  1010,
    1011,   139,     0,   140,   141,   142,   143,   600,     0,   601,
       0,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,   162,
     163,   164,   165,   602,   603,   604,   605,   606,   607,   608,
     171,   172,   173,   174,   175,   176,   177,  1013,  1014,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   776,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,  1016,   209,   210,   211,   212,
     213,   609,  1017,   215,     0,   216,   217,  1018,   219,     0,
     220,     0,   221,   222,     0,   223,   224,   225,   226,   227,
     228,     0,   229,     0,  1019,  1020,   232,     0,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,   258,  1021,  1022,     0,  1023,
       0,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,     0,     0,   273,   274,   275,   276,     0,   277,
     278,   279,   611,   612,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,  1024,   305,
    1025,   307,   308,   309,   310,     0,   311,   312,   313,   314,
    1027,   613,   316,  1028,   318,   319,   320,     0,   321,   322,
       0,     0,   323,   324,   325,     0,     0,   326,   327,   328,
     329,   330,   615,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   616,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,  1030,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
    2066,  2067,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   618,   402,
     403,   404,   405,   406,   407,   408,   409,  1032,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   619,   427,     0,   428,   429,     0,
     430,   431,   432,   433,   434,   435,   436,     0,  1033,  1034,
       0,     0,   439,   440,   620,   442,   621,  1035,   444,   445,
     622,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   623,     0,   459,   460,   461,   462,
     463,   464,  1036,     0,   466,   467,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,     0,     0,     0,
       0,     0,     0,     0,  2068,  2069,     0,     0,     0,     0,
       0,  1041,     0,  1042,     0,     0,     0,     0,  1043,  1044,
    1045,  1046,   103,   999,   640,  1000,  1001,  1002,  1003,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,  1005,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
    1006,   126,  1007,  1008,     0,   129,   130,   131,   132,   133,
     134,  1009,   599,   135,   136,  1010,  1011,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,  1013,  1014,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,  1016,   209,   210,   211,   212,   213,   609,  1017,   215,
       0,   216,   217,  1018,   219,     0,   220,     0,   221,   222,
       0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
    1019,  1020,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,  1021,  1022,     0,  1023,     0,   262,     0,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,  1024,   305,  1025,   307,   308,   309,
     310,     0,   311,   312,   313,   314,  1027,   613,   316,  1028,
     318,   319,   320,     0,   321,   322,     0,     0,  1029,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
    1030,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,  1031,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,  1032,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,     0,   430,   431,   432,   433,
     434,   435,   436,     0,  1033,  1034,     0,     0,   439,   440,
     620,   442,   621,  1035,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   464,  1036,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,     0,     0,     0,     0,     0,     0,     0,
    1451,  1452,     0,     0,     0,     0,     0,  1041,     0,  1042,
       0,     0,     0,     0,  1043,  1044,  1045,  1046,   103,   999,
     640,  1000,  1001,  1002,  1003,  1004,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,  1005,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123, -1899,  1006,   126,  1007,  1008,
       0,   129,   130,   131,   132,   133,   134,  1009,   599,   135,
     136,  1010,  1011,   139,     0,   140,   141,   142,   143,   600,
       0,   601,     0,  1012,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,  3197,   602,   603,   604,   605,   606,
     607,   608,   171,   172,   173,   174,   175,   176,   177,  1013,
    1014,   180,  1015,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,  1016,   209,   210,
     211,   212,   213,   609,  1017,   215,     0,   216,   217,  1018,
     219,     0,   220,     0,   221,   222,     0,   223,   224,   225,
     226, -1899,   228,     0,   229,     0,  1019,  1020,   232,     0,
     233,   234,   235,   236,   237,   238,   239, -1899,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,  1021,  1022,
       0,  1023,     0,   262,     0,     0,   265,   266,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275, -1899,
       0,   277,   278,   279,   611,   612,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
    1024,   305,  1025,   307,   308,   309,   310,     0,   311,   312,
       0,   314,  1027,   613,   316,  1028,   318,   319,   320,     0,
     321,   322,     0,     0,  1029,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   615,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   616,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,  1030,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,  1031,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     618,   402,   403,   404,   405,   406, -1899,   408,   409,  1032,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   619,   427,     0,   428,
     429,     0,   430,   431,   432,   433,   434,   435,   436,     0,
    1033,  1034,     0,     0,   439,   440,   620,   442,   621,  1035,
     444,   445,   622,   447,   448,  3198,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   623,     0,   459,   460,
     461,   462,   463,   464,  1036,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494, -1899,
       0,     0,     0,     0,     0,     0,  1038,  1039,     0,     0,
       0,     0,     0,  1041,     0,  1042,     0,     0,     0,     0,
    1043,  1044,  1045,  1046,   103,   999,   640,  1000,  1001,  1002,
    1003,  1004,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,  1005,     0,
       0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
     123,     0,  1006,   126,  1007,  1008,     0,   129,   130,   131,
     132,   133,   134,  1009,   599,   135,   136,  1010,  1011,   139,
       0,   140,   141,   142,   143,   600,     0,   601,     0,  1012,
     147,   148,   149,   150,   151,   152,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   162,   163,   164,
     165,   602,   603,   604,   605,   606,   607,   608,   171,   172,
     173,   174,   175,   176,   177,  1013,  1014,   180,  1015,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,   201,     0,   203,     0,   204,
     205,   206,   207,  1016,   209,   210,   211,   212,   213,   609,
    1017,   215,     0,   216,   217,  1018,   219,     0,   220,     0,
     221,   222,     0,   223,   224,   225,   226,     0,   228,     0,
     229,     0,  1019,  1020,   232,     0,   233,   234,   235,   236,
     237,   238,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,   258,  1021,  1022,     0,  1023,     0,   262,
       0,     0,   265,   266,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   274,   275,     0,     0,   277,   278,   279,
     611,   612,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,  1024,   305,  1025,   307,
     308,   309,   310,     0,   311,   312,     0,   314,  1027,   613,
     316,  1028,   318,   319,   320,     0,   321,   322,     0,     0,
    1029,   324,   325,     0,     0,   326,   327,   328,   329,   330,
     615,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   616,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,  1030,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   380,   381,   382,   383,  1031,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   618,   402,   403,   404,
     405,   406,     0,   408,   409,  1032,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   619,   427,     0,   428,   429,     0,   430,   431,
     432,   433,   434,   435,   436,     0,  1033,  1034,     0,     0,
     439,   440,   620,   442,   621,  1035,   444,   445,   622,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   623,     0,   459,   460,   461,   462,   463,   464,
    1036,     0,   466,   467,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,     0,     0,     0,     0,     0,
       0,     0,  1038,  1039,   502,     0,     0,     0,     0,  1041,
       0,  1042,     0,     0,     0,     0,  1043,  1044,  1045,  1046,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,     0,   965,
       0,   115,   116,     0,   117,   118,   119,     0,   121,   122,
     123,   124,   125,     0,   127,   128,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,  -648,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,     0,   216,   217,   218,   219,     0,   220,     0,
     221,     0,     0,  -648,   224,   225,   503,     0,   228,     0,
     229,     0,   230,   231,   232,     0,   233,   234,   235,   236,
     237,   238,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,  -648,   253,   254,
     255,   256,   257,   258,   259,   260,     0,   261,     0,   262,
       0,     0,   265,  -648,   267,   268,   269,   270,   271,   272,
       0,     0,   273,  -648,   275,     0,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   504,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,  -648,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   314,     0,   315,
     316,   317,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,   327,     0,   329,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,  -648,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,     0,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     505,   425,   426,   427,     0,   428,   429,     0,   430,  -648,
     432,   433,   434,   435,   436,     0,   437,   438,     0,     0,
     439,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,     0,     0,   459,   460,   461,   462,   463,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   103,     0,   524,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1110,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,   599,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   600,     0,   601,     0,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   602,   603,   604,   605,   606,   607,   608,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     609,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,   222,    21,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   610,     0,   273,   274,   275,   276,     0,   277,   278,
     279,   611,   612,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     613,   316,   317,   318,   319,   320,     0,   321,   322,     0,
     614,   323,   324,   325,     0,     0,   326,   327,   328,   329,
     330,   615,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   616,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     617,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    29,   396,   397,   398,   399,   400,   618,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   619,   427,     0,   428,   429,    34,   430,
     431,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   620,   442,   621,     0,   444,   445,   622,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   623,     0,   459,   460,   461,   462,   463,
     624,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,     0,    39,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,     0,     0,    40,   844,
    1407,   640,     0,     0,     0,  1003,     0,     0,     0,     0,
       0,     0,   625,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,   845,   121,   122,   123,   846,   847,   848,   849,
     850,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   851,   852,   139,     0,   140,   141,   142,   143,
     853,     0,   854,     0,   855,   147,   148,   149,   150,   151,
     856,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,   857,   163,   164,   165,   858,   859,   860,   861,
       0,     0,   862,   171,   172,   173,   174,   175,   176,   177,
     863,   864,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   865,   209,
     210,   211,   212,   213,   866,  1408,   215,     0,   216,   217,
     867,   219,     0,   220,     0,   221,   868,     0,   869,   224,
     225,   870,   871,   228,     0,   229,     0,   872,   873,   232,
       0,   233,   234,   235,   236,   237,   238,   239,   874,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,   875,   876,   254,   255,   256,   257,   258,   877,
     878,     0,   879,     0,   262,   880,   881,   265,   882,   267,
     268,   269,   270,   271,   272,     0,     0,   273,   883,   275,
     884,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   885,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   886,   887,   888,   307,   308,   309,   889,     0,   311,
     312,   890,   314,     0,   891,   316,   892,   318,   319,   320,
       0,   321,   322,  1409,     0,   323,   324,   325,     0,     0,
     326,   893,   894,   329,   895,   896,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   897,
     345,   346,   898,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   899,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,   900,
     381,   382,   383,   901,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,   902,   402,   903,   404,   405,   406,   904,   408,   409,
     905,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   906,   425,   907,   427,     0,
     428,   429,     0,   430,   908,   432,   433,   434,   435,   436,
       0,   909,   910,     0,     0,   439,   440,   911,   442,   912,
    1410,   444,   445,   913,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,   914,     0,   459,
     460,   461,   462,   463,  1297,   916,     0,   466,   917,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   918,   919,   920,   921,   922,
     923,   924,   925,   926,   927,   928,   491,   492,   493,   494,
     103,     0,   524,     0,     0,     0,     0,  1411,  1412,  2241,
       0,     0,     0,     0,     0,     0,  2242,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
     599,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   600,     0,   601,     0,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,   162,   163,   164,   165,   602,   603,   604,
     605,   606,   607,   608,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   609,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,   222,     0,   223,
     224,   225,   226,   227,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   610,     0,   273,   274,
     275,   276,     0,   277,   278,   279,   611,   612,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,     0,
     311,   312,   313,   314,     0,   613,   316,   317,   318,   319,
     320,     0,   321,   322,     0,   614,   323,   324,   325,     0,
       0,   326,   327,   328,   329,   330,   615,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     616,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
     380,   381,   382,   383,   384,   617,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,   618,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   619,   427,
       0,   428,   429,     0,   430,   431,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   620,   442,
     621,     0,   444,   445,   622,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,   623,     0,
     459,   460,   461,   462,   463,   624,   465,     0,   466,   467,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   844,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   625,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     3,     4,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,   845,   121,   122,   123,   846,   847,
     848,   849,   850,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   851,   852,   139,     0,   140,   141,
     142,   143,   853,     0,   854,     0,   855,   147,   148,   149,
     150,   151,   856,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,   857,   163,   164,   165,   858,   859,
     860,   861,     0,     0,   862,   171,   172,   173,   174,   175,
     176,   177,   863,   864,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     865,   209,   210,   211,   212,   213,   866,     0,   215,     0,
     216,   217,   867,   219,     0,   220,     0,   221,   868,    21,
     869,   224,   225,   870,   871,   228,     0,   229,     0,   872,
     873,   232,     0,   233,   234,   235,   236,   237,   238,   239,
     874,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   875,   876,   254,   255,   256,   257,
     258,   877,   878,     0,   879,     0,   262,   880,   881,   265,
     882,   267,   268,   269,   270,   271,   272,     0,     0,   273,
     883,   275,   884,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   885,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   886,   887,   888,   307,   308,   309,   889,
       0,   311,   312,   890,   314,     0,   891,   316,   892,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   893,   894,   329,   895,   896,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   897,   345,   346,   898,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   899,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   900,   381,   382,   383,   901,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,    29,   396,   397,
     398,   399,   400,   902,   402,   903,   404,   405,   406,   904,
     408,   409,   905,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   906,   425,   907,
     427,     0,   428,   429,    34,   430,   908,   432,   433,   434,
     435,   436,     0,   909,   910,     0,     0,   439,   440,   911,
     442,   912,     0,   444,   445,   913,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,   914,
       0,   459,   460,   461,   462,   463,   915,   916,     0,   466,
     917,   468,   469,   470,   471,   472,     0,     0,   473,     0,
      39,   474,   475,   476,   477,   478,   479,   918,   919,   920,
     921,   922,   923,   924,   925,   926,   927,   928,   491,   492,
     493,   494,   103,     0,    40,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,     0,   129,   130,   131,   132,   133,
     134,     0,   599,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   600,     0,   601,     0,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   162,   163,   164,   165,   602,
     603,   604,   605,   606,   607,   608,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   195,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   609,     0,   215,
       0,   216,   217,   218,   219,     0,   220,     0,   221,   222,
       0,   223,   224,   225,   226,   227,   228,     0,   229,     0,
     230,   231,   232,     0,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,     0,   261,     0,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   274,   275,   276,     0,   277,   278,   279,   611,   612,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,     0,   311,   312,   313,   314,     0,   613,   316,   317,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,   327,   328,   329,   330,   615,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   616,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,   383,   384,   617,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   618,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     619,   427,     0,   428,   429,     0,   430,   431,   432,   433,
     434,   435,   436,     0,   437,   438,     0,     0,   439,   440,
     620,   442,   621,     0,   444,   445,   622,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
     623,     0,   459,   460,   461,   462,   463,   464,   465,     0,
     466,   467,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   103,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,   104,   105,   106,   107,   108,   109,   110,   111,     0,
     112,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,     0,   129,   130,   131,   132,
     133,   134,     0,   599,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   600,     0,   601,     0,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,     0,   156,
     157,   158,   159,   160,   161,     0,   162,   163,   164,   165,
     602,   603,   604,   605,   606,   607,   608,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,   195,   196,   197,     0,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   609,     0,
     215,     0,   216,   217,   218,   219,     0,   220,     0,   221,
     222,     0,   223,   224,   225,   226,   227,   228,     0,   229,
       0,   230,   231,   232,     0,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,     0,   261,     0,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,     0,
       0,   273,   274,   275,   276,     0,   277,   278,   279,   611,
     612,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,     0,   311,   312,   313,   314,     0,   613,   316,
     317,   318,   319,   320,     0,   321,   322,     0,     0,   323,
     324,   325,     0,     0,   326,   327,   328,   329,   330,   615,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   616,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   618,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   619,   427,     0,   428,   429,     0,   430,   431,   432,
     433,   434,   435,   436,     0,   437,   438,     0,     0,   439,
     440,   620,   442,   621,     0,   444,   445,   622,   447,   448,
     449,   450,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   623,     0,   459,   460,   461,   462,   463,   464,   465,
       0,   466,   467,   468,   469,   470,   471,   472,     0,     0,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2991,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     705,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,     0,   121,   122,
     123,   124,   125,     0,   127,   128,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,     0,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,     0,   216,   217,   218,   219,     0,   220,     0,
     221,     0,    21,     0,   224,   225,   503,     0,   228,     0,
     229,     0,   230,   231,   232,     0,   233,   234,   235,   236,
     237,   238,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   253,   254,
     255,   256,   257,   258,   259,   260,     0,   261,     0,   262,
       0,     0,   265,     0,   267,   268,   269,   270,   271,   272,
       0,     0,   273,     0,   275,     0,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   504,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,     0,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   314,     0,   315,
     316,   317,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,   327,     0,   329,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
      29,   396,   397,   398,   399,   400,     0,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     505,   425,   426,   427,     0,   428,   429,    34,   430,     0,
     432,   433,   434,   435,   436,     0,   706,   438,     0,     0,
     707,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,     0,     0,   459,   460,   461,   462,   463,   624,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
       0,   473,     0,    39,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   502,     0,    40,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    41,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,     0,   121,
     122,   123,   124,   125,     0,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,     0,    21,     0,   224,   225,   503,     0,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,   238,   239,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,     0,     0,   265,     0,   267,   268,   269,   270,   271,
     272,     0,     0,   273,     0,   275,     0,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,   504,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   306,
     307,   308,   309,   310,     0,   311,   312,     0,   314,     0,
     315,   316,   317,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,   327,     0,   329,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,    29,   396,   397,   398,   399,   400,     0,   402,   403,
     404,   405,   406,     0,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   505,   425,   426,   427,     0,   428,   429,    34,   430,
       0,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,     0,     0,   459,   460,   461,   462,   463,
     624,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,     0,   473,     0,    39,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,     0,   502,    40,   524,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    41,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
       0,   121,   122,   123,   124,   125,     0,   127,   128,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,     0,   216,   217,   218,   219,
       0,   220,     0,   221,     0,     0,     0,   224,   225,   503,
       0,   228,     0,   229,     0,   230,   231,   232,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   253,   254,   255,   256,   257,   258,   259,   260,     0,
     261,     0,   262,     0,     0,   265,     0,   267,   268,   269,
     270,   271,   272,     0,     0,   273,     0,   275,     0,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     504,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     314,     0,   315,   316,   317,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   327,
       0,   329,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,     0,   408,   409,   410,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   505,   425,   426,   427,     0,   428,   429,
       0,   430,     0,   432,   433,   434,   435,   436,     0,   437,
     438,     0,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,     0,     0,   459,   460,   461,
     462,   463,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   502,     0,
     524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   952,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,     0,   121,   122,   123,   124,   125,     0,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,     0,     0,     0,   224,   225,
     503,     0,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,   238,   239,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,     0,     0,   265,     0,   267,   268,
     269,   270,   271,   272,     0,     0,   273,     0,   275,     0,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   504,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,     0,   329,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
       0,   402,   403,   404,   405,   406,     0,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   505,   425,   426,   427,     0,   428,
     429,     0,   430,     0,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1493,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,     0,   121,   122,   123,   124,   125,     0,   127,
     128,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
     218,   219,     0,   220,     0,   221,     0,     0,     0,   224,
     225,   503,     0,   228,     0,   229,     0,   230,   231,   232,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   253,   254,   255,   256,   257,   258,   259,
     260,     0,   261,     0,   262,     0,     0,   265,     0,   267,
     268,   269,   270,   271,   272,     0,     0,   273,     0,   275,
       0,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   504,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   314,     0,   315,   316,   317,   318,   319,   320,
       0,   321,   322,     0,     0,   323,   324,   325,     0,     0,
     326,   327,     0,   329,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   505,   425,   426,   427,     0,
     428,   429,     0,   430,     0,   432,   433,   434,   435,   436,
       0,   437,   438,     0,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,     0,     0,   459,
     460,   461,   462,   463,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1951,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   238,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,     0,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,     0,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   502,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2051,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   228,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,     0,     0,  2699,  1407,   640,     0,     0,  1932,
    1003,     0,     0,     0,     0,     0,  1933,     0,  2855,  1934,
    1935,  1936,   104,   105,   106,   107,   108,   109,   110,   111,
    1230,   112,   113,   114,  1231,  1232,  1233,  1234,  1235,  1236,
    1237,   115,   116,  1238,   117,   118,   119,  2700,   121,   122,
     123,     0,   759,  2701,   761,   762,  1239,   129,   130,   131,
     132,   133,   134,  1240,  1241,   135,   136,   763,   764,   139,
    1242,   140,   141,   142,   143,     0,  1243,  2702,  1244,  2703,
     147,   148,   149,   150,   151,  2704,   153,   154,   155,  1245,
     156,   157,   158,   159,   160,   161,  1246,  2705,   163,   164,
     165,  2706,  2707,  2708,  2709,  1247,  1248,  2710,   171,   172,
     173,   174,   175,   176,   177,   774,   775,   180,  1249,   181,
    1250,   182,   183,   184,   185,   186,   187,  1251,   188,   189,
     190,   191,   192,  1252,  1253,   193,   194,   776,   196,   197,
    1254,   198,   199,   200,  1255,   201,   202,   203,  1256,   204,
     205,   206,   207,     0,   209,   210,   211,   212,   213,     0,
    1257,   215,  1258,   216,   217,   777,   219,  1259,   220,  1260,
     221,  2711,  1261,  2712,   224,   225,  2713,  2714,   228,  1262,
     229,  1263,     0,     0,   232,  1264,   233,   234,   235,   236,
     237,   238,   239,  2715,   241,   242,   243,   244,  1265,   245,
     246,   247,   248,   249,   250,  1266,   251,  2716,     0,   254,
     255,   256,   257,   258,   784,   785,  1267,   786,  1268,   262,
    2717,  2718,   265,  2719,   267,   268,   269,   270,   271,   272,
    1269,  1270,   273,  2720,   275,  2721,  1271,   277,   278,   279,
    1272,  1273,   280,   281,   282,   283,   284,  2722,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   793,  2723,   795,   307,
     308,   309,  2724,  1274,   311,   312,  2725,   314,  1275,     0,
     316,   797,   318,   319,   320,  1276,   321,   322,  1277,  1278,
    2726,   324,   325,  1279,  1280,   326,     0,  2727,   329,  2728,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,  1281,   342,   343,     0,   345,   346,     0,   348,   349,
     350,  1282,   351,   352,   353,   354,   355,   356,  1283,   357,
     358,   359,   800,   361,   362,   363,   364,  1284,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,  1285,   378,   379,  2729,   381,   382,   383,   802,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
    1286,   396,   397,   398,   399,   400,  2730,   402,  2731,   404,
     405,   406,  2732,   408,   409,   806,   411,  1287,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
    2733,   425,     0,   427,  1288,   428,   429,  1289,   430,  2734,
     432,   433,   434,   435,   436,  1290,   809,   810,  1291,  1292,
     439,   440,     0,   442,     0,  1293,   444,   445,  2735,   447,
     448,   449,   450,   451,  2736,  1295,   452,   453,   454,   455,
     456,   457,  2737,  1296,   459,   460,   461,   462,   463,     0,
     814,  1298,   466,  2738,   468,   469,   470,   471,   472,  1299,
    1300,   473,  1301,  1302,   474,   475,   476,   477,   478,   479,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   491,   492,   493,   494,     0,   502,     0,  1937,  1938,
    1939,  1932,  2739,  2740,  1942,  1943,  1944,  1945,  1933,     0,
       0,  1934,  1935,  1936,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,   115,   116,     0,   117,   118,   119,     0,
     121,   122,   123,   124,   125,     0,   127,   128,     0,   129,
     130,   131,   132,   133,   134,     0,     0,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,     0,
     163,   164,   165,     0,     0,     0,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   195,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,     0,   216,   217,   218,   219,     0,
     220,     0,   221,     0,     0,     0,   224,   225,   503,     0,
     228,     0,   229,     0,   230,   231,   232,     0,   233,   234,
     235,   236,   237,   238,   239,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     253,   254,   255,   256,   257,   258,   259,   260,     0,   261,
       0,   262,     0,     0,   265,     0,   267,   268,   269,   270,
     271,   272,     0,     0,   273,     0,   275,     0,     0,   277,
     278,   279,     0,     0,   280,   281,   282,   283,   284,   504,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,     0,
     306,   307,   308,   309,   310,     0,   311,   312,     0,   314,
       0,   315,   316,   317,   318,   319,   320,     0,   321,   322,
       0,     0,   323,   324,   325,     0,     0,   326,   327,     0,
     329,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,     0,   402,
     403,   404,   405,   406,     0,   408,   409,   410,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   505,   425,   426,   427,     0,   428,   429,     0,
     430,     0,   432,   433,   434,   435,   436,     0,   437,   438,
       0,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,     0,     0,   459,   460,   461,   462,
     463,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,     0,     0,     0,
    1937,  1938,  1939,     0,  1940,  1941,  1942,  1943,  1944,  1945,
    1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,  1548,
    1549,  1550,  1551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1552,     0,  1544,
       0,     0,  1545,     0,     0,  1554,  1546,  1547,  1548,  1549,
    1550,  1551,  1555,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1552,     0,     0,     0,
       0,     0,     0,     0,  1554,  1544,     0,  1556,  1545,     0,
       0,  1555,  1546,  1547,  1548,  1549,  1550,  1551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1552,     0,  1544,     0,  1556,  1545,     0,     0,
    1554,  1546,  1547,  1548,  1549,  1550,  1551,  1555,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1552,     0,     0,     0,     0,     0,     0,     0,  1554,
       0,     0,  1556,     0,     0,     0,  1555,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1556,     0,     0,     0,     0,     0,     0,  1557,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1558,     0,     0,     0,     0,  1559,
       0,     0,     0,     0,     0,     0,     0,  1557,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1560,  1561,  1558,     0,     0,     0,     0,  1559,     0,
       0,     0,     0,     0,     0,     0,  1562,     0,     0,     0,
       0,     0,     0,  1557,     0,     0,     0,     0,     0,     0,
    1560,  1561,     0,     0,     0,     0,     0,     0,     0,  1558,
       0,     0,     0,     0,  1559,  1562,     0,     0,     0,     0,
       0,     0,  1557,     0,  1563,     0,     0,  1564,     0,     0,
       0,     0,     0,     0,     0,     0,  1560,  1561,  1558,     0,
       0,  1565,     0,  1559,  1566,     0,     0,     0,     0,     0,
       0,  1562,     0,  1563,     0,     0,  1564,     0,     0,     0,
       0,     0,     0,     0,     0,  1560,  1561,     0,     0,     0,
    1565,     0,     0,  1566,     0,     0,     0,     0,     0,     0,
    1562,     0,     0,     0,     0,     0,     0,     0,     0,  1563,
       0,     0,  1564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,  1563,     0,
       0,  1564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,  1565,     0,     0,  1566,  1544,
       0,     0,  1545,     0,     0,     0,  1546,  1547,  1548,  1549,
    1550,  1551,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1567,     0,     0,     0,  1552,     0,  1544,     0,
       0,  1545,     0,     0,  1554,  1546,  1547,  1548,  1549,  1550,
    1551,  1555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1552,     0,     0,  1567,     0,
       0,     0,     0,  1554,     0,     0,  1556,     0,     0,     0,
    1555,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,
       0,     0,     0,     0,     0,  1556,  1568,     0,     0,  1569,
    1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,
       0,     0,     0,  2549,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1568,     0,     0,  1569,  1570,
    1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,
       0,     0,  2591,     0,     0,     0,     0,  1544,     0,     0,
    1545,     0,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,
       0,  1568,     0,     0,  1569,  1570,  1571,  1557,  1572,  1573,
    1574,  1575,  1576,  1577,  1552,     0,     0,     0,  2644,     0,
       0,     0,  1554,  1558,     0,     0,     0,     0,  1559,  1555,
    1568,     0,     0,  1569,  1570,  1571,  1557,  1572,  1573,  1574,
    1575,  1576,  1577,     0,     0,     0,     0,  2851,     0,     0,
    1560,  1561,  1558,     0,  1556,     0,     0,  1559,     0,     0,
       0,     0,     0,     0,     0,  1562,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1560,
    1561,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1562,     0,     0,     0,     0,     0,
       0,     0,     0,  1563,     0,     0,  1564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1544,
    1565,     0,  1545,  1566,     0,     0,  1546,  1547,  1548,  1549,
    1550,  1551,  1563,     0,     0,  1564,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1552,     0,     0,  1565,
       0,     0,  1566,     0,  1554,  1557,     0,     0,     0,     0,
       0,  1555,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1558,     0,     0,     0,     0,  1559,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1556,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1560,  1561,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1567,  1562,     0,     0,     0,  1544,     0,     0,
    1545,     0,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1567,     0,     0,  1552,     0,     0,     0,     0,     0,
       0,  1563,  1554,     0,  1564,     0,     0,     0,     0,  1555,
       0,     0,     0,     0,     0,     0,     0,  1544,  1565,     0,
    1545,  1566,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,
       0,     0,     0,     0,  1556,     0,     0,  1557,     0,     0,
       0,     0,     0,     0,  1552,     0,     0,     0,     0,     0,
       0,     0,  1554,  1558,     0,     0,     0,     0,  1559,  1555,
       0,     0,     0,     0,     0,  1568,     0,     0,  1569,  1570,
    1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,
    1560,  1561,  2854,     0,  1556,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1568,  1562,     0,  1569,  1570,  1571,
       0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,     0,
    1567,  2982,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1563,     0,  1557,  1564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1565,  1558,     0,  1566,     0,     0,  1559,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1560,  1561,
       0,     0,     0,     0,     0,  1557,     0,     0,     0,     0,
       0,     0,     0,  1562,     0,     0,     0,     0,     0,     0,
       0,  1558,     0,     0,     0,     0,  1559,     0,     0,     0,
       0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,
    1572,  1573,  1574,  1575,  1576,  1577,     0,     0,  1560,  1561,
    3004,  1563,     0,     0,  1564,     0,     0,     0,     0,     0,
       0,     0,  1567,  1562,     0,     0,     0,  1544,  1565,     0,
    1545,  1566,     0,     0,  1546,  1547,  1548,  1549,  1550,  1551,
    1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,  1548,
    1549,  1550,  1551,     0,  1552,     0,     0,     0,     0,     0,
       0,  1563,  1554,     0,  1564,     0,     0,  1552,     0,  1555,
       0,     0,     0,     0,     0,  1554,  1544,     0,  1565,  1545,
       0,  1566,  1555,  1546,  1547,  1548,  1549,  1550,  1551,     0,
       0,     0,     0,     0,  1556,     0,     0,     0,     0,     0,
       0,     0,     0,  1552,     0,     0,     0,  1556,     0,     0,
       0,  1554,     0,     0,     0,     0,     0,     0,  1555,     0,
    1567,     0,     0,     0,     0,  1568,     0,     0,  1569,  1570,
    1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,     0,
       0,     0,  3094,  1556,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1557,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1557,     0,
       0,  1558,     0,     0,     0,     0,  1559,     0,     0,     0,
       0,     0,     0,  1568,  1558,     0,  1569,  1570,  1571,  1559,
    1572,  1573,  1574,  1575,  1576,  1577,     0,     0,  1560,  1561,
    3133,     0,     0,     0,  1557,     0,     0,     0,     0,     0,
       0,  1560,  1561,  1562,     0,     0,     0,     0,     0,     0,
    1558,     0,     0,     0,     0,  1559,  1562,     0,     0,     0,
       0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,
    1572,  1573,  1574,  1575,  1576,  1577,     0,  1560,  1561,     0,
    3146,  1563,     0,     0,  1564,     0,     0,     0,     0,     0,
       0,     0,  1562,     0,  1563,     0,     0,  1564,  1565,     0,
       0,  1566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1565,     0,     0,  1566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1563,     0,     0,  1564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1565,     0,     0,
    1566,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,
    1572,  1573,  1574,  1575,  1576,  1577,  1568,     0,  1732,  1569,
    1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,
       0,  2976,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1229,     0,  1568,     0,     0,  1569,  1570,  1571,     0,  1572,
    1573,  1574,  1575,  1576,  1577,     0,     0,  3127,   104,   105,
     106,   107,   108,   109,   110,   111,  1230,   112,   113,   114,
    1231,  1232,  1233,  1234,  1235,  1236,  1237,   115,   116,  1238,
     117,   118,   119,   845,   121,   122,   123,   846,   847,   848,
     849,   850,  1239,   129,   130,   131,   132,   133,   134,  1240,
    1241,   135,   136,   851,   852,   139,  1242,   140,   141,   142,
     143,   853,  1243,   854,  1244,   855,   147,   148,   149,   150,
     151,   856,   153,   154,   155,  1245,   156,   157,   158,   159,
     160,   161,  1246,   857,   163,   164,   165,   858,   859,   860,
     861,  1247,  1248,   862,   171,   172,   173,   174,   175,   176,
     177,   863,   864,   180,  1249,   181,  1250,   182,   183,   184,
     185,   186,   187,  1251,   188,   189,   190,   191,   192,  1252,
    1253,   193,   194,   195,   196,   197,  1254,   198,   199,   200,
    1255,   201,   202,   203,  1256,   204,   205,   206,   207,   865,
     209,   210,   211,   212,   213,   866,  1257,   215,  1258,   216,
     217,   867,   219,  1259,   220,  1260,   221,   868,  1261,   869,
     224,   225,   870,   871,   228,  1262,   229,  1263,   872,   873,
     232,  1264,   233,   234,   235,   236,   237,   238,   239,   874,
     241,   242,   243,   244,  1265,   245,   246,   247,   248,   249,
     250,  1266,   251,   875,   876,   254,   255,   256,   257,   258,
     877,   878,  1267,   879,  1268,   262,   880,   881,   265,   882,
     267,   268,   269,   270,   271,   272,  1269,  1270,   273,   883,
     275,   884,  1271,   277,   278,   279,  1272,  1273,   280,   281,
     282,   283,   284,   885,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   886,   887,   888,   307,   308,   309,   889,  1274,
     311,   312,   890,   314,  1275,   891,   316,   892,   318,   319,
     320,  1276,   321,   322,  1277,  1278,   323,   324,   325,  1279,
    1280,   326,   893,   894,   329,   895,   896,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,  1281,   342,   343,
     897,   345,   346,   898,   348,   349,   350,  1282,   351,   352,
     353,   354,   355,   356,  1283,   357,   358,   359,   899,   361,
     362,   363,   364,  1284,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,  1285,   378,   379,
     900,   381,   382,   383,   901,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,  1286,   396,   397,   398,
     399,   400,   902,   402,   903,   404,   405,   406,   904,   408,
     409,   905,   411,  1287,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   906,   425,   907,   427,
    1288,   428,   429,  1289,   430,   908,   432,   433,   434,   435,
     436,  1290,   909,   910,  1291,  1292,   439,   440,   911,   442,
     912,  1293,   444,   445,   913,   447,   448,   449,   450,   451,
    1294,  1295,   452,   453,   454,   455,   456,   457,   914,  1296,
     459,   460,   461,   462,   463,  1297,   916,  1298,   466,   917,
     468,   469,   470,   471,   472,  1299,  1300,   473,  1301,  1302,
     474,   475,   476,   477,   478,   479,   918,   919,   920,   921,
     922,   923,   924,   925,   926,   927,   928,   491,   492,   493,
     494,   502,     0,     0,     0,     0,     0,     0,     0,     0,
    2030,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   228,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   502,     0,     0,     0,     0,     0,     0,     0,
       0,  2542,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     116,     0,   117,   118,   119,     0,   121,   122,   123,   124,
     125,     0,   127,   128,     0,   129,   130,   131,   132,   133,
     134,     0,     0,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,     0,   163,   164,   165,     0,
       0,     0,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   195,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
       0,   216,   217,   218,   219,     0,   220,     0,   221,     0,
       0,     0,   224,   225,   503,     0,   228,     0,   229,     0,
     230,   231,   232,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   253,   254,   255,   256,
     257,   258,   259,   260,     0,   261,     0,   262,     0,     0,
     265,     0,   267,   268,   269,   270,   271,   272,     0,     0,
     273,     0,   275,     0,     0,   277,   278,   279,     0,     0,
     280,   281,   282,   283,   284,   504,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   314,     0,   315,   316,   317,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,   327,     0,   329,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,     0,   402,   403,   404,   405,   406,
       0,   408,   409,   410,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   505,   425,
     426,   427,     0,   428,   429,     0,   430,     0,   432,   433,
     434,   435,   436,     0,   437,   438,     0,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
       0,     0,   459,   460,   461,   462,   463,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   844,  1407,   640,     0,     0,     0,  1003,
       0,     0,  2545,     0,     0,     0,     0,     0,     0,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,     0,
     112,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     115,   116,     0,   117,   118,   119,   845,   121,   122,   123,
     846,   847,   848,   849,   850,     0,   129,   130,   131,   132,
     133,   134,     0,     0,   135,   136,   851,   852,   139,     0,
     140,   141,   142,   143,   853,     0,   854,     0,   855,   147,
     148,   149,   150,   151,   856,   153,   154,   155,     0,   156,
     157,   158,   159,   160,   161,     0,   857,   163,   164,   165,
     858,   859,   860,   861,     0,     0,   862,   171,   172,   173,
     174,   175,   176,   177,   863,   864,   180,  1603,   181,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,   195,   196,   197,     0,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   865,   209,   210,   211,   212,   213,   866,  1408,
     215,     0,   216,   217,   867,   219,     0,   220,     0,   221,
     868,     0,   869,   224,   225,   870,   871,   228,     0,   229,
       0,   872,   873,   232,     0,   233,   234,   235,   236,   237,
     238,   239,   874,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,   875,   876,   254,   255,
     256,   257,   258,   877,   878,     0,   879,     0,   262,   880,
     881,   265,   882,   267,   268,   269,   270,   271,   272,     0,
       0,   273,   883,   275,   884,     0,   277,   278,   279,     0,
       0,   280,   281,   282,   283,   284,   885,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   886,   887,   888,   307,   308,
     309,   889,     0,   311,   312,   890,   314,     0,   891,   316,
     892,   318,   319,   320,     0,   321,   322,  1409,     0,   323,
     324,   325,     0,     0,   326,   893,   894,   329,   895,   896,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   897,   345,   346,   898,   348,   349,   350,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   899,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,   900,   381,   382,   383,   901,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,   902,   402,   903,   404,   405,
     406,   904,   408,   409,   905,   411,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   906,
     425,   907,   427,     0,   428,   429,     0,   430,   908,   432,
     433,   434,   435,   436,     0,   909,   910,     0,     0,   439,
     440,   911,   442,   912,  1410,   444,   445,   913,   447,   448,
     449,   450,   451,     0,     0,   452,   453,   454,   455,   456,
     457,   914,     0,   459,   460,   461,   462,   463,  1297,   916,
       0,   466,   917,   468,   469,   470,   471,   472,     0,     0,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   918,
     919,   920,   921,   922,   923,   924,   925,   926,   927,   928,
     491,   492,   493,   494,   844,  1407,   640,     0,     0,     0,
    1003,  1411,  1412,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,   845,   121,   122,
     123,   846,   847,   848,   849,   850,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   851,   852,   139,
       0,   140,   141,   142,   143,   853,     0,   854,     0,   855,
     147,   148,   149,   150,   151,   856,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   857,   163,   164,
     165,   858,   859,   860,   861,     0,     0,   862,   171,   172,
     173,   174,   175,   176,   177,   863,   864,   180,  1605,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   865,   209,   210,   211,   212,   213,   866,
    1408,   215,     0,   216,   217,   867,   219,     0,   220,     0,
     221,   868,     0,   869,   224,   225,   870,   871,   228,     0,
     229,     0,   872,   873,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   874,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   875,   876,   254,
     255,   256,   257,   258,   877,   878,     0,   879,     0,   262,
     880,   881,   265,   882,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   883,   275,   884,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   885,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   886,   887,   888,   307,
     308,   309,   889,     0,   311,   312,   890,   314,     0,   891,
     316,   892,   318,   319,   320,     0,   321,   322,  1409,     0,
     323,   324,   325,     0,     0,   326,   893,   894,   329,   895,
     896,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   897,   345,   346,   898,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   899,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   900,   381,   382,   383,   901,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   902,   402,   903,   404,
     405,   406,   904,   408,   409,   905,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     906,   425,   907,   427,     0,   428,   429,     0,   430,   908,
     432,   433,   434,   435,   436,     0,   909,   910,     0,     0,
     439,   440,   911,   442,   912,  1410,   444,   445,   913,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,   914,     0,   459,   460,   461,   462,   463,  1297,
     916,     0,   466,   917,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     918,   919,   920,   921,   922,   923,   924,   925,   926,   927,
     928,   491,   492,   493,   494,   844,  1407,   640,     0,     0,
       0,  1003,  1411,  1412,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,   845,   121,
     122,   123,   846,   847,   848,   849,   850,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   851,   852,
     139,     0,   140,   141,   142,   143,   853,     0,   854,     0,
     855,   147,   148,   149,   150,   151,   856,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,   857,   163,
     164,   165,   858,   859,   860,   861,     0,     0,   862,   171,
     172,   173,   174,   175,   176,   177,   863,   864,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   865,   209,   210,   211,   212,   213,
     866,  1408,   215,     0,   216,   217,   867,   219,     0,   220,
       0,   221,   868,     0,   869,   224,   225,   870,   871,   228,
       0,   229,     0,   872,   873,   232,     0,   233,   234,   235,
     236,   237,   238,   239,   874,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   875,   876,
     254,   255,   256,   257,   258,   877,   878,     0,   879,     0,
     262,   880,   881,   265,   882,   267,   268,   269,   270,   271,
     272,     0,     0,   273,   883,   275,   884,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,   885,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   886,   887,   888,
     307,   308,   309,   889,     0,   311,   312,   890,   314,     0,
     891,   316,   892,   318,   319,   320,     0,   321,   322,  1409,
       0,   323,   324,   325,     0,     0,   326,   893,   894,   329,
     895,   896,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   897,   345,   346,   898,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   899,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   900,   381,   382,   383,   901,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   902,   402,   903,
     404,   405,   406,   904,   408,   409,   905,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   906,   425,   907,   427,     0,   428,   429,     0,   430,
     908,   432,   433,   434,   435,   436,     0,   909,   910,     0,
       0,   439,   440,   911,   442,   912,  1410,   444,   445,   913,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   914,     0,   459,   460,   461,   462,   463,
    1297,   916,     0,   466,   917,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   918,   919,   920,   921,   922,   923,   924,   925,   926,
     927,   928,   491,   492,   493,   494,     0,     0,  1544,     0,
       0,  1545,     0,  1411,  1412,  1546,  1547,  1548,  1549,  1550,
    1551,  1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,
    1548,  1549,  1550,  1551,     0,  1552,     0,     0,     0,  2057,
       0,     0,     0,  1554,     0,     0,     0,     0,  1552,     0,
    1555,     0,     0,     0,     0,     0,  1554,  1544,     0,     0,
    1545,     0,     0,  1555,  1546,  1547,  1548,  1549,  1550,  1551,
    1544,     0,     0,  1545,     0,  1556,     0,  1546,  1547,  1548,
    1549,  1550,  1551,     0,  1552,     0,     0,     0,  1556,     0,
       0,     0,  1554,     0,     0,     0,     0,  1552,     0,  1555,
    1828,     0,     0,     0,     0,  1554,  1544,     0,     0,  1545,
       0,     0,  1555,  1546,  1547,  1548,  1549,  1550,  1551,     0,
       0,     0,     0,     0,  1556,     0,  2058,     0,     0,     0,
       0,     0,     0,  1552,     0,     0,     0,  1556,     0,     0,
       0,  1554,     0,     0,     0,     0,     0,     0,  1555,     0,
       0,  1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,
    1548,  1549,  1550,  1551,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1556,     0,     0,  1557,     0,  1552,  1867,
       0,  1873,     0,     0,  1868,     0,  1554,     0,     0,  1557,
       0,     0,  1558,  1555,     0,     0,     0,  1559,     0,     0,
       0,     0,     0,     0,     0,  1558,     0,     0,     0,     0,
    1559,     0,     0,     0,  3221,     0,     0,     0,  1556,  1560,
    1561,     0,     0,     0,     0,  1557,     0,     0,     0,     0,
       0,     0,  1560,  1561,  1562,     0,     0,     0,  1557,     0,
       0,  1558,     0,     0,     0,     0,  1559,  1562,     0,     0,
       0,     0,     0,     0,  1558,     0,     0,     0,     0,  1559,
       0,     0,     0,     0,     0,     0,     0,     0,  1560,  1561,
       0,     0,  1563,     0,  1557,  1564,     0,     0,     0,     0,
       0,  1560,  1561,  1562,     0,  1563,     0,     0,  1564,  1565,
    1558,     0,  1566,     0,     0,  1559,  1562,     0,     0,     0,
       0,     0,  1565,     0,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1560,  1561,  1557,
       0,  1563,     0,     0,  1564,     0,     0,     0,     0,     0,
       0,     0,  1562,     0,  1563,  1558,     0,  1564,  1565,     0,
    1559,  1566,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1565,     0,     0,  1566,     0,     0,     0,     0,     0,
       0,     0,  1560,  1561,  3222,     0,     0,     0,     0,     0,
    1563,     0,     0,  1564,     0,     0,     0,  1562,     0,     0,
       0,  1567,     0,     0,     0,     0,     0,  1565,     0,     0,
    1566,     0,     0,     0,  1567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1839,     0,
       0,     0,     0,     0,     0,  1563,     0,     0,  1564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1567,     0,  1565,     0,     0,  1566,     0,     0,     0,     0,
       0,     0,  2062,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,
       0,     0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,
       0,  1572,  1573,  1574,  1575,  1576,  1577,  1568,     0,     0,
    1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,     0,
       0,     0,     0,  1568,     0,     0,  1569,  1570,  1571,     0,
    1572,  1573,  1574,  1575,  1576,  1577,  1568,     0,     0,  1569,
    1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,
       0,  1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,
    1548,  1549,  1550,  1551,     0,     0,     0,     0,     0,     0,
       0,     0,  1568,     0,     0,  1569,  1570,  1571,  1552,  1572,
    1573,  1574,  1575,  1576,  1577,     0,  1554,     0,     0,     0,
       0,     0,     0,  1555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1568,  1556,     0,
    1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,
    1544,     0,     0,  1545,     0,     0,     0,  1546,  1547,  1548,
    1549,  1550,  1551,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1552,     0,     0,
    1880,     0,     0,     0,     0,  1554,     0,     0,     0,     0,
       0,     0,  1555,     0,     0,  1544,     0,     0,  1545,     0,
       0,     0,  1546,  1547,  1548,  1549,  1550,  1551,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1556,     0,     0,
       0,     0,  1552,     0,     0,     0,     0,     0,     0,     0,
    1554,     0,     0,     0,  1878,     0,     0,  1555,     0,  1557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1558,     0,     0,     0,     0,
    1559,     0,  1556,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1544,  1560,  1561,  1545,     0,     0,     0,  1546,  1547,
    1548,  1549,  1550,  1551,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1552,     0,
       0,     0,     0,     0,     0,     0,  1554,     0,  1557,     0,
       0,     0,     0,  1555,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1558,  1563,     0,     0,  1564,  1559,
       0,     0,     0,     0,     0,     0,     0,     0,  1556,     0,
       0,     0,  1565,  1955,     0,  1566,     0,     0,     0,     0,
       0,  1560,  1561,  1557,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1562,     0,     0,  1558,
       0,     0,     0,     0,  1559,  1544,     0,     0,  1545,     0,
       0,     0,  1546,  1547,  1548,  1549,  1550,  1551,     0,     0,
       0,     0,     0,     0,     0,     0,  1560,  1561,     0,     0,
       0,     0,  1552,     0,  1563,  2589,     0,  1564,     0,     0,
    1554,  1562,     0,     0,     0,     0,     0,  1555,     0,     0,
       0,  1565,     0,     0,  1566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1557,
       0,     0,  1556,     0,     0,     0,     0,     0,     0,  1563,
       0,     0,  1564,     0,     0,  1558,     0,     0,     0,     0,
    1559,     0,     0,     0,     0,     0,  1565,     0,     0,  1566,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1563,     0,  1568,  1564,     0,
    1569,  1570,  1571,  1557,  1572,  1573,  1574,  1575,  1576,  1577,
       0,     0,  1565,     0,     0,  1566,     0,     0,  1567,  1558,
       0,     0,     0,     0,  1559,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1560,  1561,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1562,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1568,     0,     0,  1569,
    1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1563,
       0,     0,  1564,     0,  1567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1565,     0,     0,  1566,
       0,  1568,     0,     0,  1569,  1570,  1571,     0,  1572,  1573,
    1574,  1575,  1576,  1577,     0,     0,     0,  2579,     0,     0,
       0,     0,  1544,     0,     0,  1545,     0,     0,     0,  1546,
    1547,  1548,  1549,  1550,  1551,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1552,
       0,  1544,     0,     0,  1545,     0,     0,  1554,  1546,  1547,
    1548,  1549,  1550,  1551,  1555,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1552,     0,
       0,     0,     0,     0,     0,     0,  1554,  1568,  1567,  1556,
    1569,  1570,  1571,  1555,  1572,  1573,  1574,  1575,  1576,  1577,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1556,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1557,  1568,     0,     0,  1569,  1570,  1571,     0,  1572,  1573,
    1574,  1575,  1576,  1577,     0,     0,  1558,     0,     0,     0,
       0,  1559,     0,     0,     0,     0,     0,     0,     0,  1557,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1560,  1561,  1558,     0,     0,     0,     0,
    1559,     0,     0,     0,     0,     0,     0,     0,  1562,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1560,  1561,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1562,     0,     0,
       0,     0,     0,     0,     0,     0,  1563,     0,     0,  1564,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1565,     0,     0,  1566,     0,     0,     0,
       0,     0,     0,     0,     0,  1563,     0,     0,  1564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1565,     0,     0,  1566,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1567,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1568,     0,
       0,  1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  1576,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1229,     0,  1974,     0,     0,  1568,     0,     0,
    1569,  1570,  1571,     0,  1572,  1573,  1574,  1575,  2079,  1577,
     104,   105,   106,   107,   108,   109,   110,   111,  1230,   112,
     113,   114,  1231,  1232,  1233,  1234,  1235,  1236,  1237,   115,
     116,  1238,   117,   118,   119,   845,   121,   122,   123,   846,
     847,   848,   849,   850,  1239,   129,   130,   131,   132,   133,
     134,  1240,  1241,   135,   136,   851,   852,   139,  1242,   140,
     141,   142,   143,   853,  1243,   854,  1244,   855,   147,   148,
     149,   150,   151,   856,   153,   154,   155,  1245,   156,   157,
     158,   159,   160,   161,  1246,   857,   163,   164,   165,   858,
     859,   860,   861,  1247,  1248,   862,   171,   172,   173,   174,
     175,   176,   177,   863,   864,   180,  1249,   181,  1250,   182,
     183,   184,   185,   186,   187,  1251,   188,   189,   190,   191,
     192,  1252,  1253,   193,   194,   195,   196,   197,  1254,   198,
     199,   200,  1255,   201,   202,   203,  1256,   204,   205,   206,
     207,   865,   209,   210,   211,   212,   213,   866,  1257,   215,
    1258,   216,   217,   867,   219,  1259,   220,  1260,   221,   868,
    1261,   869,   224,   225,   870,   871,   228,  1262,   229,  1263,
     872,   873,   232,  1264,   233,   234,   235,   236,   237,   238,
     239,   874,   241,   242,   243,   244,  1265,   245,   246,   247,
     248,   249,   250,  1266,   251,   875,   876,   254,   255,   256,
     257,   258,   877,   878,  1267,   879,  1268,   262,   880,   881,
     265,   882,   267,   268,   269,   270,   271,   272,  1269,  1270,
     273,   883,   275,   884,  1271,   277,   278,   279,  1272,  1273,
     280,   281,   282,   283,   284,   885,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   886,   887,   888,   307,   308,   309,
     889,  1274,   311,   312,   890,   314,  1275,   891,   316,   892,
     318,   319,   320,  1276,   321,   322,  1277,  1278,   323,   324,
     325,  1279,  1280,   326,   893,   894,   329,   895,   896,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,  1281,
     342,   343,   897,   345,   346,   898,   348,   349,   350,  1282,
     351,   352,   353,   354,   355,   356,  1283,   357,   358,   359,
     899,   361,   362,   363,   364,  1284,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,  1285,
     378,   379,   900,   381,   382,   383,   901,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,  1286,   396,
     397,   398,   399,   400,   902,   402,   903,   404,   405,   406,
     904,   408,   409,   905,   411,  1287,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   906,   425,
     907,   427,  1288,   428,   429,  1289,   430,   908,   432,   433,
     434,   435,   436,  1290,   909,   910,  1291,  1292,   439,   440,
     911,   442,   912,  1293,   444,   445,   913,   447,   448,   449,
     450,   451,  1294,  1295,   452,   453,   454,   455,   456,   457,
     914,  1296,   459,   460,   461,   462,   463,  1297,   916,  1298,
     466,   917,   468,   469,   470,   471,   472,  1299,  1300,   473,
    1301,  1302,   474,   475,   476,   477,   478,   479,   918,   919,
     920,   921,   922,   923,   924,   925,   926,   927,   928,   491,
     492,   493,   494,  1229,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,  1230,
     112,   113,   114,  1231,  1232,  1233,  1234,  1235,  1236,  1237,
     115,   116,  1238,   117,   118,   119,   845,   121,   122,   123,
     846,   847,   848,   849,   850,  1239,   129,   130,   131,   132,
     133,   134,  1240,  1241,   135,   136,   851,   852,   139,  1242,
     140,   141,   142,   143,   853,  1243,   854,  1244,   855,   147,
     148,   149,   150,   151,   856,   153,   154,   155,  1245,   156,
     157,   158,   159,   160,   161,  1246,   857,   163,   164,   165,
     858,   859,   860,   861,  1247,  1248,   862,   171,   172,   173,
     174,   175,   176,   177,   863,   864,   180,  1249,   181,  1250,
     182,   183,   184,   185,   186,   187,  1251,   188,   189,   190,
     191,   192,  1252,  1253,   193,   194,   195,   196,   197,  1254,
     198,   199,   200,  1255,   201,   202,   203,  1256,   204,   205,
     206,   207,   865,   209,   210,   211,   212,   213,   866,  1257,
     215,  1258,   216,   217,   867,   219,  1259,   220,  1260,   221,
     868,  1261,   869,   224,   225,   870,   871,   228,  1262,   229,
    1263,   872,   873,   232,  1264,   233,   234,   235,   236,   237,
     238,   239,   874,   241,   242,   243,   244,  1265,   245,   246,
     247,   248,   249,   250,  1266,   251,   875,   876,   254,   255,
     256,   257,   258,   877,   878,  1267,   879,  1268,   262,   880,
     881,   265,   882,   267,   268,   269,   270,   271,   272,  1269,
    1270,   273,   883,   275,   884,  1271,   277,   278,   279,  1272,
    1273,   280,   281,   282,   283,   284,   885,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   886,   887,   888,   307,   308,
     309,   889,  1274,   311,   312,   890,   314,  1275,   891,   316,
     892,   318,   319,   320,  1276,   321,   322,  1277,  1278,   323,
     324,   325,  1279,  1280,   326,   893,   894,   329,   895,   896,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
    1281,   342,   343,   897,   345,   346,   898,   348,   349,   350,
    1282,   351,   352,   353,   354,   355,   356,  1283,   357,   358,
     359,   899,   361,   362,   363,   364,  1284,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
    1285,   378,   379,   900,   381,   382,   383,   901,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,  1286,
     396,   397,   398,   399,   400,   902,   402,   903,   404,   405,
     406,   904,   408,   409,   905,   411,  1287,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   906,
     425,   907,   427,  1288,   428,   429,  1289,   430,   908,   432,
     433,   434,   435,   436,  1290,   909,   910,  1291,  1292,   439,
     440,   911,   442,   912,  1293,   444,   445,   913,   447,   448,
     449,   450,   451,  1294,  1295,   452,   453,   454,   455,   456,
     457,   914,  1296,   459,   460,   461,   462,   463,  1297,   916,
    1298,   466,   917,   468,   469,   470,   471,   472,  1299,  1300,
     473,  1301,  1302,   474,   475,   476,   477,   478,   479,   918,
     919,   920,   921,   922,   923,   924,   925,   926,   927,   928,
     491,   492,   493,   494,  1229,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,  2115,   109,   110,   111,
    1230,   112,   113,   114,  1231,  1232,  1233,  1234,  1235,  1236,
    1237,   115,   116,  1238,   117,   118,   119,   845,   121,   122,
     123,   846,   847,   848,   849,   850,  1239,   129,   130,   131,
     132,   133,   134,  1240,  1241,   135,   136,   851,   852,   139,
    1242,   140,   141,   142,   143,   853,  1243,   854,  1244,   855,
     147,   148,   149,   150,   151,   856,   153,   154,   155,  1245,
     156,   157,   158,   159,   160,   161,  1246,   857,   163,   164,
     165,   858,   859,   860,   861,  1247,  1248,   862,   171,   172,
     173,   174,   175,   176,   177,   863,   864,   180,  1249,   181,
    1250,   182,   183,   184,   185,   186,   187,  1251,   188,   189,
     190,   191,   192,  1252,  1253,   193,   194,   195,  2116,   197,
    1254,   198,   199,   200,  1255,   201,   202,   203,  1256,   204,
     205,   206,   207,   865,   209,   210,   211,   212,   213,   866,
    1257,   215,  1258,   216,   217,   867,   219,  1259,   220,  1260,
     221,   868,  1261,   869,   224,   225,   870,   871,   228,  1262,
     229,  1263,   872,   873,   232,  1264,   233,   234,   235,   236,
     237,   238,   239,   874,   241,   242,   243,   244,  1265,   245,
     246,   247,   248,   249,   250,  1266,   251,   875,   876,   254,
     255,   256,   257,   258,   877,   878,  1267,   879,  1268,   262,
     880,   881,   265,   882,   267,   268,   269,   270,   271,   272,
    1269,  1270,   273,   883,   275,   884,  1271,   277,   278,   279,
    1272,  1273,   280,   281,   282,   283,   284,   885,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   886,   887,   888,   307,
     308,   309,   889,  1274,   311,   312,   890,   314,  1275,   891,
     316,   892,   318,   319,   320,  1276,   321,   322,  1277,  1278,
     323,   324,   325,  1279,  1280,   326,   893,   894,   329,   895,
     896,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,  1281,   342,   343,   897,   345,   346,   898,   348,   349,
     350,  1282,   351,   352,   353,   354,   355,   356,  1283,   357,
     358,   359,   899,   361,   362,   363,   364,  1284,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,  1285,   378,   379,   900,   381,   382,   383,   901,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
    1286,   396,   397,   398,   399,   400,   902,  2117,   903,   404,
     405,   406,   904,   408,   409,   905,   411,  1287,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     906,   425,   907,   427,  1288,   428,   429,  1289,   430,   908,
     432,   433,   434,   435,   436,  1290,   909,   910,  1291,  1292,
     439,   440,   911,   442,   912,  1293,   444,   445,   913,   447,
     448,   449,   450,   451,  1294,  1295,   452,   453,   454,   455,
     456,   457,   914,  1296,   459,   460,   461,   462,   463,  1297,
     916,  1298,   466,   917,   468,   469,   470,   471,   472,  1299,
    1300,   473,  1301,  1302,   474,   475,   476,   477,   478,   479,
     918,   919,   920,   921,   922,   923,   924,   925,   926,   927,
     928,   491,   492,   493,   494,   103,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,   120,   121,
     122,   123,   124,   125,   126,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,   599,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   600,     0,   601,     0,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,   162,   163,
     164,   165,   602,   603,   604,   605,   606,   607,   608,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     609,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,   222,     0,   223,   224,   225,   226,   227,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,     0,     0,   273,   274,   275,   276,     0,   277,   278,
     279,   611,   612,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,     0,   311,   312,   313,   314,     0,
     613,   316,   317,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,   327,   328,   329,
     330,   615,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   616,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   618,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   619,   427,     0,   428,   429,     0,   430,
     431,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   620,   442,   621,     0,   444,   445,   622,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   623,     0,   459,   460,   461,   462,   463,
     464,   465,     0,   466,   467,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   844,     0,   640,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,   115,   116,     0,   117,   118,   119,   845,
     121,   122,   123,   846,   847,   848,   849,   850,     0,   129,
     130,   131,   132,   133,   134,     0,     0,   135,   136,   851,
     852,   139,     0,   140,   141,   142,   143,   853,     0,   854,
       0,   855,   147,   148,   149,   150,   151,   856,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,   857,
     163,   164,   165,   858,   859,   860,   861,     0,     0,   862,
     171,   172,   173,   174,   175,   176,   177,   863,   864,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   195,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   865,   209,   210,   211,   212,
     213,   866,  1408,   215,     0,   216,   217,   867,   219,     0,
     220,     0,   221,   868,     0,   869,   224,   225,   870,   871,
     228,     0,   229,     0,   872,   873,   232,     0,   233,   234,
     235,   236,   237,   238,   239,   874,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,   875,
     876,   254,   255,   256,   257,   258,   877,   878,     0,   879,
       0,   262,   880,   881,   265,   882,   267,   268,   269,   270,
     271,   272,     0,     0,   273,   883,   275,   884,     0,   277,
     278,   279,     0,     0,   280,   281,   282,   283,   284,   885,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   886,   887,
     888,   307,   308,   309,   889,     0,   311,   312,   890,   314,
       0,   891,   316,   892,   318,   319,   320,     0,   321,   322,
    1409,     0,   323,   324,   325,     0,     0,   326,   893,   894,
     329,   895,   896,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   897,   345,   346,   898,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   899,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,   900,   381,   382,   383,
     901,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,   902,   402,
     903,   404,   405,   406,   904,   408,   409,   905,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   906,   425,   907,   427,     0,   428,   429,     0,
     430,   908,   432,   433,   434,   435,   436,     0,   909,   910,
       0,     0,   439,   440,   911,   442,   912,  1410,   444,   445,
     913,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,   914,     0,   459,   460,   461,   462,
     463,  1297,   916,     0,   466,   917,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   918,   919,   920,   921,   922,   923,   924,   925,
     926,   927,   928,   491,   492,   493,   494,   844,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     3,     4,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
     845,   121,   122,   123,   846,   847,   848,   849,   850,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     851,   852,   139,     0,   140,   141,   142,   143,   853,     0,
     854,     0,   855,   147,   148,   149,   150,   151,   856,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
     857,   163,   164,   165,   858,   859,   860,   861,     0,     0,
     862,   171,   172,   173,   174,   175,   176,   177,   863,   864,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   865,   209,   210,   211,
     212,   213,   866,     0,   215,     0,   216,   217,   867,   219,
       0,   220,     0,   221,   868,     0,   869,   224,   225,   870,
     871,   228,     0,   229,     0,   872,   873,   232,     0,   233,
     234,   235,   236,   237,   238,   239,   874,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
     875,   876,   254,   255,   256,   257,   258,   877,   878,     0,
     879,     0,   262,   880,   881,   265,   882,   267,   268,   269,
     270,   271,   272,     0,     0,   273,   883,   275,   884,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     885,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   886,
     887,   888,   307,   308,   309,   889,     0,   311,   312,   890,
     314,     0,   891,   316,   892,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   893,
     894,   329,   895,   896,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   897,   345,   346,
     898,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   899,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,   900,   381,   382,
     383,   901,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,   902,
     402,   903,   404,   405,   406,   904,   408,   409,   905,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   906,   425,   907,   427,     0,   428,   429,
       0,   430,   908,   432,   433,   434,   435,   436,     0,   909,
     910,     0,     0,   439,   440,   911,   442,   912,     0,   444,
     445,   913,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,   914,     0,   459,   460,   461,
     462,   463,  1297,   916,     0,   466,   917,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   918,   919,   920,   921,   922,   923,   924,
     925,   926,   927,   928,   491,   492,   493,   494,   103,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,   145,     0,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   162,   163,   164,   165,   166,   167,   168,   169,     0,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,   222,     0,   223,   224,   225,
     226,   227,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   274,   275,   276,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,     0,   311,   312,
     313,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,   430,   431,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,   458,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,   467,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   502,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,     0,   121,   122,   123,   124,   125,     0,   127,
     128,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   137,   138,   139,  1668,   140,   141,   142,   143,
     144,     0,     0,  1669,   146,   147,   148,   149,   150,   151,
       0,   153,   154,   155,  1670,   156,   157,   158,   159,   160,
     161,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
     218,   219,     0,   220,  1671,   221,     0,     0,     0,   224,
     225,   503,     0,   228,     0,   229,     0,   230,   231,   232,
       0,   233,   234,   235,   236,   237,  1672,   239,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   253,   254,   255,   256,   257,   258,   259,
     260,     0,   261,     0,   262,     0,     0,   265,     0,   267,
     268,   269,   270,   271,   272,     0,     0,   273,     0,   275,
       0,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   504,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   314,     0,   315,   316,   317,   318,   319,   320,
       0,   321,   322,     0,     0,   323,   324,   325,     0,     0,
     326,   327,     0,   329,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,  1673,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   505,   425,   426,   427,     0,
     428,   429,     0,   430,     0,   432,   433,   434,   435,   436,
       0,   437,   438,     0,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,     0,
    1674,   452,   453,   454,   455,   456,   457,     0,     0,   459,
     460,   461,   462,   463,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,  1668,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,  1670,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,  1671,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   238,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,  2188,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,     0,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,  1673,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,  1674,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   757,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,  -687,     0,   115,   116,
       0,   117,   118,   119,   758,   121,   122,   123,     0,   759,
     760,   761,   762,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   763,   764,   139,     0,   140,   141,
     142,   143,     0,     0,   765,     0,   766,   147,   148,   149,
     150,   151,   767,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,   768,   163,   164,   165,   769,   770,
     771,   772,     0,     0,   773,   171,   172,   173,   174,   175,
     176,   177,   774,   775,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   776,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
       0,   209,   210,   211,   212,   213,     0,     0,   215,     0,
     216,   217,   777,   219,     0,   220,     0,   221,   778,     0,
     779,   224,   225,  -687,   780,   228,     0,   229,     0,     0,
       0,   232,     0,   233,   234,   235,   236,   237,   238,   239,
     782,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,   783,     0,   254,   255,   256,   257,
     258,   784,   785,     0,   786,     0,   262,   787,   788,   265,
     789,   267,   268,   269,   270,   271,   272,     0,     0,   273,
     790,   275,   791,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   792,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   793,   794,   795,   307,   308,   309,     0,
       0,   311,   312,   796,   314,     0,     0,   316,   797,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,     0,   798,   329,   799,     0,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,     0,   345,   346,     0,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   800,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,   801,   381,   382,   383,   802,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,   803,   402,   804,   404,   405,   406,   805,
     408,   409,   806,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   807,   425,     0,
     427,     0,   428,   429,     0,   430,   808,   432,   433,   434,
     435,   436,     0,   809,   810,     0,     0,   439,   440,     0,
     442,     0,     0,   444,   445,   811,   447,   448,   449,   450,
     451,   812,     0,   452,   453,   454,   455,   456,   457,   813,
       0,   459,   460,   461,   462,   463,     0,   814,     0,   466,
     815,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   502,     0,   524,
       0,     0,     0,     0,     0,     0,     0,     0,   491,   492,
     493,   494,     0,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     3,     4,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
       0,   121,   122,   123,   124,   125,     0,   127,   128,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,     0,   216,   217,   218,   219,
       0,   220,     0,   221,     0,     0,     0,   224,   225,   503,
       0,   228,     0,   229,     0,   230,   231,   232,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   253,   254,   255,   256,   257,   258,   259,   260,     0,
     261,     0,   262,     0,     0,   265,     0,   267,   268,   269,
     270,   271,   272,     0,     0,   273,     0,   275,     0,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     504,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     314,     0,   315,   316,   317,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   327,
       0,   329,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,     0,   408,   409,   410,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   505,   425,   426,   427,     0,   428,   429,
       0,   430,     0,   432,   433,   434,   435,   436,     0,   437,
     438,     0,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,     0,     0,   459,   460,   461,
     462,   463,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   502,     0,
     524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,   525,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,     0,   121,   122,   123,   124,   125,     0,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,     0,     0,     0,   224,   225,
     503,     0,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,   238,   239,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,     0,     0,   265,     0,   267,   268,
     269,   270,   271,   272,     0,     0,   273,     0,   275,     0,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   504,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,     0,   329,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   526,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
       0,   402,   403,   404,   405,   406,     0,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   505,   425,   426,   427,     0,   428,
     429,     0,   430,     0,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   502,
       0,   524,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,     0,   121,   122,   123,   124,   125,     0,   127,
     128,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
     218,   219,     0,   220,     0,   221,     0,     0,     0,   224,
     225,   503,     0,   228,     0,   229,     0,   230,   231,   232,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   253,   254,   255,   256,   257,   258,   259,
     260,     0,   261,     0,   262,     0,     0,   265,     0,   267,
     268,   269,   270,   271,   272,     0,     0,   273,     0,   275,
       0,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   504,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   314,     0,   315,   316,   317,   318,   319,   320,
       0,   321,   322,     0,   614,   323,   324,   325,     0,     0,
     326,   327,     0,   329,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   505,   425,   426,   427,     0,
     428,   429,     0,   430,     0,   432,   433,   434,   435,   436,
       0,   437,   438,     0,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,     0,     0,   459,
     460,   461,   462,   463,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     502,     0,   524,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   715,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,     0,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,   614,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   502,     0,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,   743,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   228,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   757,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     116,     0,   117,   118,   119,   758,   121,   122,   123,     0,
     759,   760,   761,   762,     0,   129,   130,   131,   132,   133,
     134,     0,     0,   135,   136,   763,   764,   139,     0,   140,
     141,   142,   143,     0,     0,   765,     0,   766,   147,   148,
     149,   150,   151,   767,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,   768,   163,   164,   165,   769,
     770,   771,   772,     0,     0,   773,   171,   172,   173,   174,
     175,   176,   177,   774,   775,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   776,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,     0,   209,   210,   211,   212,   213,     0,     0,   215,
       0,   216,   217,   777,   219,     0,   220,     0,   221,   778,
       0,   779,   224,   225,     0,   780,   228,     0,   229,     0,
       0,     0,   232,     0,   233,   234,   235,   236,   237,   781,
     239,   782,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,   783,     0,   254,   255,   256,
     257,   258,   784,   785,     0,   786,     0,   262,   787,   788,
     265,   789,   267,   268,   269,   270,   271,   272,     0,     0,
     273,   790,   275,   791,     0,   277,   278,   279,     0,     0,
     280,   281,   282,   283,   284,   792,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   793,   794,   795,   307,   308,   309,
       0,     0,   311,   312,   796,   314,     0,     0,   316,   797,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,     0,   798,   329,   799,     0,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,     0,   345,   346,     0,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     800,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,   801,   381,   382,   383,   802,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,   803,   402,   804,   404,   405,   406,
     805,   408,   409,   806,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   807,   425,
       0,   427,     0,   428,   429,     0,   430,   808,   432,   433,
     434,   435,   436,     0,   809,   810,     0,     0,   439,   440,
       0,   442,     0,     0,   444,   445,   811,   447,   448,   449,
     450,   451,   812,     0,   452,   453,   454,   455,   456,   457,
     813,     0,   459,   460,   461,   462,   463,     0,   814,     0,
     466,   815,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   757,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   491,
     492,   493,   494,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,   758,   121,   122,   123,     0,   759,   760,   761,   762,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   763,   764,   139,     0,   140,   141,   142,   143,     0,
       0,   765,     0,   766,   147,   148,   149,   150,   151,   767,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,   768,   163,   164,   165,   769,   770,   771,   772,     0,
       0,   773,   171,   172,   173,   174,   175,   176,   177,   774,
     775,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   776,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,     0,   209,   210,
     211,   212,   213,     0,     0,   215,     0,   216,   217,   777,
     219,     0,   220,     0,   221,   778,     0,   779,   224,   225,
       0,   780,   228,     0,   229,     0,     0,     0,   232,     0,
     233,   234,   235,   236,   237,   238,   239,   782,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,   783,     0,   254,   255,   256,   257,   258,   784,   785,
       0,   786,     0,   262,   787,   788,   265,   789,   267,   268,
     269,   270,   271,   272,     0,     0,   273,   790,   275,   791,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   792,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     793,   794,   795,   307,   308,   309,     0,     0,   311,   312,
     796,   314,     0,     0,   316,   797,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
       0,   798,   329,   799,     0,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,     0,   345,
     346,     0,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   800,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,   801,   381,
     382,   383,   802,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
     803,   402,   804,   404,   405,   406,   805,   408,   409,   806,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   807,   425,     0,   427,     0,   428,
     429,     0,   430,   808,   432,   433,   434,   435,   436,     0,
     809,   810,     0,     0,   439,   440,     0,   442,     0,     0,
     444,   445,   811,   447,   448,   449,   450,   451,   812,     0,
     452,   453,   454,   455,   456,   457,   813,     0,   459,   460,
     461,   462,   463,     0,   814,     0,   466,   815,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   757,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   491,   492,   493,   494,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,   758,   121,   122,
     123,     0,   759,   760,   761,   762,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   763,   764,   139,
       0,   140,   141,   142,   143,     0,     0,   765,     0,   766,
     147,   148,   149,   150,   151,   767,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,   768,   163,   164,
     165,   769,   770,   771,   772,     0,     0,   773,   171,   172,
     173,   174,   175,   176,   177,   774,   775,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   776,   196,   197,
       0,   198,   199,   200,     0,  1751,   202,   203,     0,   204,
     205,   206,   207,     0,   209,   210,   211,   212,   213,     0,
       0,   215,     0,   216,   217,   777,   219,     0,   220,     0,
     221,   778,     0,   779,   224,   225,     0,   780,   228,     0,
     229,     0,     0,     0,   232,     0,   233,   234,   235,   236,
     237,   238,   239,   782,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,   783,     0,   254,
     255,   256,   257,   258,   784,   785,     0,   786,     0,   262,
     787,   788,   265,   789,   267,   268,   269,   270,   271,   272,
       0,     0,   273,   790,   275,   791,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   792,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   793,   794,   795,   307,
     308,   309,     0,     0,   311,   312,   796,   314,     0,     0,
     316,   797,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,     0,   798,   329,   799,
       0,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,     0,   345,   346,     0,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   800,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,   801,   381,   382,   383,   802,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,   803,   402,   804,   404,
     405,   406,   805,   408,   409,   806,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     807,   425,     0,   427,     0,   428,   429,     0,   430,   808,
     432,   433,   434,   435,   436,     0,   809,   810,     0,     0,
     439,   440,     0,   442,     0,     0,   444,   445,   811,   447,
     448,   449,   450,   451,   812,     0,   452,   453,   454,   455,
     456,   457,   813,     0,   459,   460,   461,   462,   463,     0,
     814,     0,   466,   815,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     502,  1883,     0,     0,     0,     0,  1884,     0,     0,     0,
       0,   491,   492,   493,   494,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   238,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,     0,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,     0,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   502,     0,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,  1892,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,  1893,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,  1894,   430,     0,   432,  1895,   434,
    1896,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,  1897,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   502,     0,   524,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     116,     0,   117,   118,   119,     0,   121,   122,   123,   124,
     125,     0,   127,   128,     0,   129,   130,   131,   132,   133,
     134,     0,     0,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,     0,   163,   164,   165,     0,
       0,     0,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   195,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
       0,   216,   217,   218,   219,     0,   220,     0,   221,     0,
       0,     0,   224,   225,   503,     0,   228,     0,   229,     0,
     230,   231,   232,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   253,   254,   255,   256,
     257,   258,   259,   260,     0,   261,     0,   262,     0,     0,
     265,     0,   267,   268,   269,   270,   271,   272,     0,     0,
     273,     0,   275,     0,     0,   277,   278,   279,     0,     0,
     280,   281,   282,   283,   284,   504,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   314,     0,   315,   316,   317,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,   327,     0,   329,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,     0,   402,   403,   404,   405,   406,
       0,   408,   409,   410,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   505,   425,
     426,   427,     0,   428,   429,     0,   430,     0,   432,   433,
     434,   435,   436,     0,   437,   438,     0,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
       0,     0,   459,   460,   461,   462,   463,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   502,     0,   640,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,     0,
     112,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     115,   116,     0,   117,   118,   119,     0,   121,   122,   123,
     124,   125,     0,   127,   128,     0,   129,   130,   131,   132,
     133,   134,     0,     0,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,   153,   154,   155,     0,   156,
     157,   158,   159,   160,   161,     0,     0,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,   195,   196,   197,     0,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,     0,   216,   217,   218,   219,     0,   220,     0,   221,
       0,     0,     0,   224,   225,   503,     0,   228,     0,   229,
       0,   230,   231,   232,     0,   233,   234,   235,   236,   237,
     238,   239,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   253,   254,   255,
     256,   257,   258,   259,   260,     0,   261,     0,   262,     0,
       0,   265,     0,   267,   268,   269,   270,   271,   272,     0,
       0,   273,     0,   275,     0,     0,   277,   278,   279,     0,
       0,   280,   281,   282,   283,   284,   504,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   306,   307,   308,
     309,   310,     0,   311,   312,     0,   314,     0,   315,   316,
     317,   318,   319,   320,     0,   321,   322,     0,     0,   323,
     324,   325,     0,     0,   326,   327,     0,   329,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,     0,   402,   403,   404,   405,
     406,     0,   408,   409,   410,   411,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   505,
     425,   426,   427,     0,   428,   429,     0,   430,     0,   432,
     433,   434,   435,   436,     0,   437,   438,     0,     0,   439,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,     0,     0,   452,   453,   454,   455,   456,
     457,     0,     0,   459,   460,   461,   462,   463,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,     0,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
     647,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,     0,   121,   122,
     123,   124,   125,     0,   127,   128,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,     0,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,     0,   216,   217,   218,   219,     0,   220,     0,
     221,     0,     0,     0,   224,   225,   503,     0,   228,     0,
     229,     0,   230,   231,   232,     0,   233,   234,   235,   236,
     237,   238,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   253,   254,
     255,   256,   257,   258,   259,   260,     0,   261,     0,   262,
       0,     0,   265,     0,   267,   268,   269,   270,   271,   272,
       0,     0,   273,     0,   275,     0,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   504,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,     0,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   314,     0,   315,
     316,   317,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,   327,     0,   329,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,     0,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     505,   425,   426,   427,     0,   428,   429,     0,   430,     0,
     432,   433,   434,   435,   436,     0,   648,   438,     0,     0,
     649,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,     0,     0,   459,   460,   461,   462,   463,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   502,     0,   524,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,     0,   121,
     122,   123,   124,   125,     0,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,     0,     0,     0,   224,   225,   503,     0,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,   238,   239,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,     0,     0,   265,     0,   267,   268,   269,   270,   271,
     272,     0,     0,   273,     0,   275,     0,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,   504,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   306,
     307,   308,   309,   310,     0,   311,   312,     0,   314,     0,
     315,   316,   317,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,   327,     0,   329,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   681,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,     0,   402,   403,
     404,   405,   406,     0,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   505,   425,   426,   427,     0,   428,   429,     0,   430,
       0,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,     0,     0,   459,   460,   461,   462,   463,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   502,     0,   524,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,   115,   116,     0,   117,   118,   119,     0,
     121,   122,   123,   124,   125,     0,   127,   128,     0,   129,
     130,   131,   132,   133,   134,     0,     0,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,     0,
     163,   164,   165,     0,     0,     0,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   195,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,     0,   216,   217,   218,   219,     0,
     220,     0,   221,     0,     0,     0,   224,   225,   503,     0,
     228,     0,   229,     0,   230,   231,   232,     0,   233,   234,
     235,   236,   237,   710,   239,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     253,   254,   255,   256,   257,   258,   259,   260,     0,   261,
       0,   262,     0,     0,   265,     0,   267,   268,   269,   270,
     271,   272,     0,     0,   273,     0,   275,     0,     0,   277,
     278,   279,     0,     0,   280,   281,   282,   283,   284,   504,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,     0,
     306,   307,   308,   309,   310,     0,   311,   312,     0,   314,
       0,   315,   316,   317,   318,   319,   320,     0,   321,   322,
       0,     0,   323,   324,   325,     0,     0,   326,   327,     0,
     329,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,     0,   402,
     403,   404,   405,   406,     0,   408,   409,   410,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   505,   425,   426,   427,     0,   428,   429,     0,
     430,     0,   432,   433,   434,   435,   436,     0,   437,   438,
       0,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,     0,     0,   459,   460,   461,   462,
     463,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   502,     0,   524,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
       0,   121,   122,   123,   124,   125,     0,   127,   128,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,     0,   216,   217,   218,   219,
       0,   220,     0,   221,     0,     0,     0,   224,   225,   503,
       0,   228,     0,   229,     0,   230,   231,   232,     0,   233,
     234,   235,   236,   237,   713,   239,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   253,   254,   255,   256,   257,   258,   259,   260,     0,
     261,     0,   262,     0,     0,   265,     0,   267,   268,   269,
     270,   271,   272,     0,     0,   273,     0,   275,     0,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     504,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     314,     0,   315,   316,   317,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   327,
       0,   329,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,     0,   408,   409,   410,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   505,   425,   426,   427,     0,   428,   429,
       0,   430,     0,   432,   433,   434,   435,   436,     0,   437,
     438,     0,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,     0,     0,   459,   460,   461,
     462,   463,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   502,     0,
     524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,     0,   121,   122,   123,   124,   125,     0,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,     0,     0,     0,   224,   225,
     503,     0,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,   717,   239,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,     0,     0,   265,     0,   267,   268,
     269,   270,   271,   272,     0,     0,   273,     0,   275,     0,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   504,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,     0,   329,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
       0,   402,   403,   404,   405,   406,     0,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   505,   425,   426,   427,     0,   428,
     429,     0,   430,     0,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   502,
       0,   524,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,     0,   121,   122,   123,   124,   125,     0,   127,
     128,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
     218,   219,     0,   220,     0,   221,     0,     0,     0,   224,
     225,   503,     0,   228,     0,   229,     0,   230,   231,   232,
       0,   233,   234,   235,   236,   237,   732,   239,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   253,   254,   255,   256,   257,   258,   259,
     260,     0,   261,     0,   262,     0,     0,   265,     0,   267,
     268,   269,   270,   271,   272,     0,     0,   273,     0,   275,
       0,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   504,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   314,     0,   315,   316,   317,   318,   319,   320,
       0,   321,   322,     0,     0,   323,   324,   325,     0,     0,
     326,   327,     0,   329,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   505,   425,   426,   427,     0,
     428,   429,     0,   430,     0,   432,   433,   434,   435,   436,
       0,   437,   438,     0,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,     0,     0,   459,
     460,   461,   462,   463,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     502,     0,   524,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   836,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,     0,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,     0,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   502,     0,   524,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   228,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   839,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   502,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,   965,     0,   115,
     116,     0,   117,   118,   119,     0,   121,   122,   123,   124,
     125,     0,   127,   128,     0,   129,   130,   131,   132,   133,
     134,     0,     0,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,     0,   163,   164,   165,     0,
       0,     0,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   195,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
       0,   216,   217,   218,   219,     0,   220,     0,   221,     0,
       0,     0,   224,   225,   503,     0,   228,     0,   229,     0,
     230,   231,   232,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   253,   254,   255,   256,
     257,   258,   259,   260,     0,   261,     0,   262,     0,     0,
     265,     0,   267,   268,   269,   270,   271,   272,     0,     0,
     273,     0,   275,     0,     0,   277,   278,   279,     0,     0,
     280,   281,   282,   283,   284,   504,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   314,     0,   315,   316,   317,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,   327,     0,   329,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,     0,   402,   403,   404,   405,   406,
       0,   408,   409,   410,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   505,   425,
     426,   427,     0,   428,   429,     0,   430,     0,   432,   433,
     434,   435,   436,     0,   437,   438,     0,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
       0,     0,   459,   460,   461,   462,   463,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,     0,
     112,   113,   114,     0,     0,     0,     0,     0,   982,     0,
     115,   116,     0,   117,   118,   119,     0,   121,   122,   123,
     124,   125,     0,   127,   128,     0,   129,   130,   131,   132,
     133,   134,     0,     0,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,   153,   154,   155,     0,   156,
     157,   158,   159,   160,   161,     0,     0,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,   195,   196,   197,     0,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,     0,   216,   217,   218,   219,     0,   220,     0,   221,
       0,     0,     0,   224,   225,   503,     0,   228,     0,   229,
       0,   230,   231,   232,     0,   233,   234,   235,   236,   237,
     238,   239,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   253,   254,   255,
     256,   257,   258,   259,   260,     0,   261,     0,   262,     0,
       0,   265,     0,   267,   268,   269,   270,   271,   272,     0,
       0,   273,     0,   275,     0,     0,   277,   278,   279,     0,
       0,   280,   281,   282,   283,   284,   504,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   306,   307,   308,
     309,   310,     0,   311,   312,     0,   314,     0,   315,   316,
     317,   318,   319,   320,     0,   321,   322,     0,     0,   323,
     324,   325,     0,     0,   326,   327,     0,   329,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,     0,   402,   403,   404,   405,
     406,     0,   408,   409,   410,   411,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   505,
     425,   426,   427,     0,   428,   429,     0,   430,     0,   432,
     433,   434,   435,   436,     0,   437,   438,     0,     0,   439,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,     0,     0,   452,   453,   454,   455,   456,
     457,     0,     0,   459,   460,   461,   462,   463,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,     0,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   502,     0,   524,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,     0,   121,   122,
     123,   124,   125,     0,   127,   128,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,     0,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,     0,   216,   217,   218,   219,     0,   220,     0,
     221,     0,     0,     0,   224,   225,   503,     0,   228,     0,
     229,     0,   230,   231,   232,     0,   233,   234,   235,   236,
     237,  1317,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   253,   254,
     255,   256,   257,   258,   259,   260,     0,   261,     0,   262,
       0,     0,   265,     0,   267,   268,   269,   270,   271,   272,
       0,     0,   273,     0,   275,     0,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   504,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,     0,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   314,     0,   315,
     316,   317,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,   327,     0,   329,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,     0,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     505,   425,   426,   427,     0,   428,   429,     0,   430,     0,
     432,   433,   434,   435,   436,     0,   437,   438,     0,     0,
     439,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,     0,     0,   459,   460,   461,   462,   463,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   502,     0,   524,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,     0,   121,
     122,   123,   124,   125,     0,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,     0,     0,     0,   224,   225,   503,     0,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,  1319,   239,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,     0,     0,   265,     0,   267,   268,   269,   270,   271,
     272,     0,     0,   273,     0,   275,     0,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,   504,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   306,
     307,   308,   309,   310,     0,   311,   312,     0,   314,     0,
     315,   316,   317,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,   327,     0,   329,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,     0,   402,   403,
     404,   405,   406,     0,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   505,   425,   426,   427,     0,   428,   429,     0,   430,
       0,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,     0,     0,   459,   460,   461,   462,   463,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   502,     0,   524,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,   115,   116,     0,   117,   118,   119,     0,
     121,   122,   123,   124,   125,     0,   127,   128,     0,   129,
     130,   131,   132,   133,   134,     0,     0,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,     0,
     163,   164,   165,     0,     0,     0,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   195,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,     0,   216,   217,   218,   219,     0,
     220,     0,   221,     0,     0,     0,   224,   225,   503,     0,
     228,     0,   229,     0,   230,   231,   232,     0,   233,   234,
     235,   236,   237,  1322,   239,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     253,   254,   255,   256,   257,   258,   259,   260,     0,   261,
       0,   262,     0,     0,   265,     0,   267,   268,   269,   270,
     271,   272,     0,     0,   273,     0,   275,     0,     0,   277,
     278,   279,     0,     0,   280,   281,   282,   283,   284,   504,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,     0,
     306,   307,   308,   309,   310,     0,   311,   312,     0,   314,
       0,   315,   316,   317,   318,   319,   320,     0,   321,   322,
       0,     0,   323,   324,   325,     0,     0,   326,   327,     0,
     329,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,     0,   402,
     403,   404,   405,   406,     0,   408,   409,   410,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   505,   425,   426,   427,     0,   428,   429,     0,
     430,     0,   432,   433,   434,   435,   436,     0,   437,   438,
       0,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,     0,     0,   459,   460,   461,   462,
     463,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   502,     0,   524,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
       0,   121,   122,   123,   124,   125,     0,   127,   128,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,     0,   216,   217,   218,   219,
       0,   220,     0,   221,     0,     0,     0,   224,   225,   503,
       0,   228,     0,   229,     0,   230,   231,   232,     0,   233,
     234,   235,   236,   237,  1324,   239,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   253,   254,   255,   256,   257,   258,   259,   260,     0,
     261,     0,   262,     0,     0,   265,     0,   267,   268,   269,
     270,   271,   272,     0,     0,   273,     0,   275,     0,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     504,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     314,     0,   315,   316,   317,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   327,
       0,   329,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,     0,   408,   409,   410,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   505,   425,   426,   427,     0,   428,   429,
       0,   430,     0,   432,   433,   434,   435,   436,     0,   437,
     438,     0,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,     0,     0,   459,   460,   461,
     462,   463,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   502,     0,
     524,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,     0,   121,   122,   123,   124,   125,     0,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,     0,     0,     0,   224,   225,
     503,     0,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,  2111,   239,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,     0,     0,   265,     0,   267,   268,
     269,   270,   271,   272,     0,     0,   273,     0,   275,     0,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   504,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,     0,   329,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
       0,   402,   403,   404,   405,   406,     0,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   505,   425,   426,   427,     0,   428,
     429,     0,   430,     0,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   502,
       0,   524,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,     0,   121,   122,   123,   124,   125,     0,   127,
     128,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   137,   138,   139,     0,   140,   141,   142,   143,
     144,     0,     0,     0,   146,   147,   148,   149,   150,   151,
       0,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,     0,   163,   164,   165,     0,     0,     0,     0,
       0,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   195,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
     218,   219,     0,   220,     0,   221,     0,     0,     0,   224,
     225,   503,     0,   228,     0,   229,     0,   230,   231,   232,
       0,   233,   234,   235,   236,   237,  2773,   239,     0,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,     0,   253,   254,   255,   256,   257,   258,   259,
     260,     0,   261,     0,   262,     0,     0,   265,     0,   267,
     268,   269,   270,   271,   272,     0,     0,   273,     0,   275,
       0,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,   504,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,     0,   306,   307,   308,   309,   310,     0,   311,
     312,     0,   314,     0,   315,   316,   317,   318,   319,   320,
       0,   321,   322,     0,     0,   323,   324,   325,     0,     0,
     326,   327,     0,   329,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   360,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,     0,   402,   403,   404,   405,   406,     0,   408,   409,
     410,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   505,   425,   426,   427,     0,
     428,   429,     0,   430,     0,   432,   433,   434,   435,   436,
       0,   437,   438,     0,     0,   439,   440,   441,   442,   443,
       0,   444,   445,   446,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,     0,     0,   459,
     460,   461,   462,   463,   464,   465,     0,   466,     0,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     502,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   104,   105,
     106,   107,   108,   109,   110,   111,     0,   112,   113,   114,
       0,     0,     0,     0,     0,     0,     0,   115,   116,     0,
     117,   118,   119,     0,   121,   122,   123,   124,   125,     0,
     127,   128,     0,   129,   130,   131,   132,   133,   134,     0,
       0,   135,   136,   137,   138,   139,     0,   140,   141,   142,
     143,   144,     0,     0,     0,   146,   147,   148,   149,   150,
     151,     0,   153,   154,   155,     0,   156,   157,   158,   159,
     160,   161,     0,     0,   163,   164,   165,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,     0,   181,     0,   182,   183,   184,
     185,   186,   187,     0,   188,   189,   190,   191,   192,     0,
       0,   193,   194,   195,   196,   197,     0,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
     217,   218,   219,     0,   220,     0,   221,     0,     0,     0,
     224,   225,   503,     0,   228,     0,   229,     0,   230,   231,
     232,     0,   233,   234,   235,   236,   237,   238,   239,     0,
     241,   242,   243,   244,     0,   245,   246,   247,   248,   249,
     250,     0,   251,     0,   253,   254,   255,   256,   257,   258,
     259,   260,     0,   261,     0,   262,     0,     0,   265,     0,
     267,   268,   269,   270,   271,   272,     0,     0,   273,     0,
     275,     0,     0,   277,   278,   279,     0,     0,   280,   281,
     282,   283,   284,   504,   286,   287,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,     0,   306,   307,   308,   309,   310,     0,
     311,   312,     0,   314,     0,   315,   316,   317,   318,   319,
     320,     0,   321,   322,     0,     0,   323,   324,   325,     0,
       0,   326,   327,     0,   329,     0,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,     0,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,   351,   352,
     353,   354,   355,   356,     0,   357,   358,   359,   360,   361,
     362,   363,   364,     0,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,     0,   378,   379,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,     0,   396,   397,   398,
     399,   400,     0,   402,   403,   404,   405,   406,     0,   408,
     409,   410,   411,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   505,   425,   426,   427,
       0,   428,   429,     0,   430,     0,   432,   433,   434,   435,
     436,     0,   437,   438,     0,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,   447,   448,   449,   450,   451,
       0,     0,   452,   453,   454,   455,   456,   457,     0,     0,
     459,   460,   461,   462,   463,   464,   465,     0,   466,     0,
     468,   469,   470,   471,   472,     0,     0,   473,     0,     0,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   502,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   659,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   660,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,   358,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     661,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   662,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   663,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   502,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     104,   105,   106,   107,   108,   109,   110,   111,     0,   112,
     113,   114,     0,     0,     0,     0,     0,     0,     0,   115,
     116,     0,   117,   118,   119,     0,   121,   122,   123,   124,
     125,     0,   127,   128,     0,   129,   130,   131,   132,   133,
     134,     0,     0,   135,   136,   137,   138,   139,     0,   140,
     141,   142,   143,   144,     0,     0,     0,   146,   147,   148,
     149,   150,   151,     0,   153,   154,   155,     0,   156,   157,
     158,   159,   160,   161,     0,     0,   163,   164,   165,     0,
       0,     0,     0,     0,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,     0,   181,     0,   182,
     183,   184,   185,   186,   187,     0,   188,   189,   190,   191,
     192,     0,     0,   193,   194,   195,   196,   197,     0,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,     0,   215,
       0,   216,   217,   218,   219,     0,   220,     0,   221,     0,
       0,     0,   224,   225,   503,     0,   228,     0,   229,     0,
     230,   231,   232,     0,   233,   234,   235,   236,   237,   745,
     239,     0,   241,   242,   243,   244,     0,   245,   246,   247,
     248,   249,   250,     0,   251,     0,   253,   254,   255,   256,
     257,   258,   259,   260,     0,   261,     0,   262,     0,     0,
     265,     0,   267,   268,   269,   270,   271,   272,     0,     0,
     273,     0,   275,     0,     0,   277,   278,   279,     0,     0,
     280,   281,   282,   283,   284,   504,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,     0,   306,   307,   308,   309,
     310,     0,   311,   312,     0,   314,     0,   315,   316,   317,
     318,   319,   320,     0,   321,   322,     0,     0,   323,   324,
     325,     0,     0,   326,   327,     0,   329,     0,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,     0,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
     351,   352,   353,   354,   355,   356,     0,   357,   358,   359,
     360,   361,   362,   363,   364,     0,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,     0,
     378,   379,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,     0,   396,
     397,   398,   399,   400,     0,   402,   403,   404,   405,   406,
       0,   408,   409,   410,   411,     0,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   505,   425,
     426,   427,     0,   428,   429,     0,   430,     0,   432,   433,
     434,   435,   436,     0,   437,   438,     0,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,   447,   448,   449,
     450,   451,     0,     0,   452,   453,   454,   455,   456,   457,
       0,     0,   459,   460,   461,   462,   463,   464,   465,     0,
     466,     0,   468,   469,   470,   471,   472,     0,     0,   473,
       0,     0,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   502,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   104,   105,   106,   107,   108,   109,   110,   111,     0,
     112,   113,   114,     0,     0,     0,     0,     0,     0,     0,
     115,   116,     0,   117,   118,   119,     0,   121,   122,   123,
     124,   125,     0,   127,   128,     0,   129,   130,   131,   132,
     133,   134,     0,     0,   135,   136,   137,   138,   139,     0,
     140,   141,   142,   143,   144,     0,     0,     0,   146,   147,
     148,   149,   150,   151,     0,   153,   154,   155,     0,   156,
     157,   158,   159,   160,   161,     0,     0,   163,   164,   165,
       0,     0,     0,     0,     0,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,     0,   181,     0,
     182,   183,   184,   185,   186,   187,     0,   188,   189,   190,
     191,   192,     0,     0,   193,   194,   195,   196,   197,     0,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,     0,
     215,     0,   216,   217,   218,   219,     0,   220,     0,   221,
       0,     0,     0,   224,   225,   503,     0,   228,     0,   229,
       0,   230,   231,   232,     0,   233,   234,   235,   236,   237,
     834,   239,     0,   241,   242,   243,   244,     0,   245,   246,
     247,   248,   249,   250,     0,   251,     0,   253,   254,   255,
     256,   257,   258,   259,   260,     0,   261,     0,   262,     0,
       0,   265,     0,   267,   268,   269,   270,   271,   272,     0,
       0,   273,     0,   275,     0,     0,   277,   278,   279,     0,
       0,   280,   281,   282,   283,   284,   504,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,     0,   306,   307,   308,
     309,   310,     0,   311,   312,     0,   314,     0,   315,   316,
     317,   318,   319,   320,     0,   321,   322,     0,     0,   323,
     324,   325,     0,     0,   326,   327,     0,   329,     0,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
       0,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,   351,   352,   353,   354,   355,   356,     0,   357,   358,
     359,   360,   361,   362,   363,   364,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
       0,   378,   379,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
     396,   397,   398,   399,   400,     0,   402,   403,   404,   405,
     406,     0,   408,   409,   410,   411,     0,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   505,
     425,   426,   427,     0,   428,   429,     0,   430,     0,   432,
     433,   434,   435,   436,     0,   437,   438,     0,     0,   439,
     440,   441,   442,   443,     0,   444,   445,   446,   447,   448,
     449,   450,   451,     0,     0,   452,   453,   454,   455,   456,
     457,     0,     0,   459,   460,   461,   462,   463,   464,   465,
       0,   466,     0,   468,   469,   470,   471,   472,     0,     0,
     473,     0,     0,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   502,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   104,   105,   106,   107,   108,   109,   110,   111,
       0,   112,   113,   114,     0,     0,     0,     0,     0,     0,
       0,   115,   116,     0,   117,   118,   119,     0,   121,   122,
     123,   124,   125,     0,   127,   128,     0,   129,   130,   131,
     132,   133,   134,     0,     0,   135,   136,   137,   138,   139,
       0,   140,   141,   142,   143,   144,     0,     0,     0,   146,
     147,   148,   149,   150,   151,     0,   153,   154,   155,     0,
     156,   157,   158,   159,   160,   161,     0,     0,   163,   164,
     165,     0,     0,     0,     0,     0,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,     0,   181,
       0,   182,   183,   184,   185,   186,   187,     0,   188,   189,
     190,   191,   192,     0,     0,   193,   194,   195,   196,   197,
       0,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
       0,   215,     0,   216,   217,   218,   219,     0,   220,     0,
     221,     0,     0,     0,   224,   225,   503,     0,   228,     0,
     229,     0,   230,   231,   232,     0,   233,   234,   235,   236,
     237,   238,   239,     0,   241,   242,   243,   244,     0,   245,
     246,   247,   248,   249,   250,     0,   251,     0,   253,   254,
     255,   256,   257,   258,   259,   260,     0,   261,     0,   262,
       0,     0,   265,     0,   267,   268,   269,   270,   271,   272,
       0,     0,   273,     0,   275,     0,     0,   277,   278,   279,
       0,     0,   280,   281,   282,   283,   284,   504,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,     0,   306,   307,
     308,   309,   310,     0,   311,   312,     0,   314,     0,   315,
     316,   317,   318,   319,   320,     0,   321,   322,     0,     0,
     323,   324,   325,     0,     0,   326,   327,     0,   329,     0,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,     0,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,   351,   352,   353,   354,   355,   356,     0,   357,
     358,   359,   360,   361,   362,   363,   364,     0,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,     0,   378,   379,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   661,   390,   391,   392,   393,   394,   395,
       0,   396,   397,   398,   399,   400,     0,   402,   403,   404,
     405,   406,     0,   408,   409,   410,   411,     0,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     505,   425,   426,   427,     0,   428,   429,     0,   430,     0,
     432,   433,   434,   435,   436,     0,   663,   438,     0,     0,
     439,   440,   441,   442,   443,     0,   444,   445,   446,   447,
     448,   449,   450,   451,     0,     0,   452,   453,   454,   455,
     456,   457,     0,     0,   459,   460,   461,   462,   463,   464,
     465,     0,   466,     0,   468,   469,   470,   471,   472,     0,
       0,   473,     0,     0,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   502,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
    1608,     0,   115,   116,     0,   117,   118,   119,     0,   121,
     122,   123,   124,   125,     0,   127,   128,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   137,   138,
     139,     0,   140,   141,   142,   143,   144,     0,     0,     0,
     146,   147,   148,   149,   150,   151,     0,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,     0,   163,
     164,   165,     0,     0,     0,     0,     0,     0,     0,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   195,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,     0,   215,     0,   216,   217,   218,   219,     0,   220,
       0,   221,     0,     0,     0,   224,   225,   503,     0,   228,
       0,   229,     0,   230,   231,   232,     0,   233,   234,   235,
     236,   237,   238,   239,     0,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,     0,   253,
     254,   255,   256,   257,   258,   259,   260,     0,   261,     0,
     262,     0,     0,   265,     0,   267,   268,   269,   270,   271,
     272,     0,     0,   273,     0,   275,     0,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,   504,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,     0,   306,
     307,   308,   309,   310,     0,   311,   312,     0,   314,     0,
     315,   316,   317,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,   327,     0,   329,
       0,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   360,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,     0,     0,   403,
     404,   405,   406,     0,   408,   409,   410,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   505,   425,   426,   427,     0,   428,   429,     0,   430,
       0,   432,   433,   434,   435,   436,     0,   437,   438,     0,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,     0,     0,   459,   460,   461,   462,   463,
     464,   465,     0,   466,     0,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   502,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   104,   105,   106,   107,   108,   109,
     110,   111,     0,   112,   113,   114,     0,     0,     0,     0,
       0,     0,     0,   115,   116,     0,   117,   118,   119,     0,
     121,   122,   123,   124,   125,     0,   127,   128,     0,   129,
     130,   131,   132,   133,   134,     0,     0,   135,   136,   137,
     138,   139,     0,   140,   141,   142,   143,   144,     0,     0,
       0,   146,   147,   148,   149,   150,   151,     0,   153,   154,
     155,     0,   156,   157,   158,   159,   160,   161,     0,     0,
     163,   164,   165,     0,     0,     0,     0,     0,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
       0,   181,     0,   182,   183,   184,   185,   186,   187,     0,
     188,   189,   190,   191,   192,     0,     0,   193,   194,   195,
     196,   197,     0,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,     0,   215,     0,   216,   217,   218,   219,     0,
     220,     0,   221,     0,     0,     0,   224,   225,   503,     0,
     228,     0,   229,     0,   230,   231,   232,     0,   233,   234,
     235,   236,   237,  1766,   239,     0,   241,   242,   243,   244,
       0,   245,   246,   247,   248,   249,   250,     0,   251,     0,
     253,   254,   255,   256,   257,   258,   259,   260,     0,   261,
       0,   262,     0,     0,   265,     0,   267,   268,   269,   270,
     271,   272,     0,     0,   273,     0,   275,     0,     0,   277,
     278,   279,     0,     0,   280,   281,   282,   283,   284,   504,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,     0,
     306,   307,   308,   309,   310,     0,   311,   312,     0,   314,
       0,   315,   316,   317,   318,   319,   320,     0,   321,   322,
       0,     0,   323,   324,   325,     0,     0,   326,   327,     0,
     329,     0,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,   351,   352,   353,   354,   355,   356,
       0,   357,   358,   359,   360,   361,   362,   363,   364,     0,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,     0,   378,   379,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,     0,   396,   397,   398,   399,   400,     0,   402,
     403,   404,   405,   406,     0,   408,   409,   410,   411,     0,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   505,   425,   426,   427,     0,   428,   429,     0,
     430,     0,   432,   433,   434,   435,   436,     0,   437,   438,
       0,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,   447,   448,   449,   450,   451,     0,     0,   452,   453,
     454,   455,   456,   457,     0,     0,   459,   460,   461,   462,
     463,   464,   465,     0,   466,     0,   468,   469,   470,   471,
     472,     0,     0,   473,     0,     0,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   502,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   104,   105,   106,   107,   108,
     109,   110,   111,     0,   112,   113,   114,     0,     0,     0,
       0,     0,     0,     0,   115,   116,     0,   117,   118,   119,
       0,   121,   122,   123,   124,   125,     0,   127,   128,     0,
     129,   130,   131,   132,   133,   134,     0,     0,   135,   136,
     137,   138,   139,     0,   140,   141,   142,   143,   144,     0,
       0,     0,   146,   147,   148,   149,   150,   151,     0,   153,
     154,   155,     0,   156,   157,   158,   159,   160,   161,     0,
       0,   163,   164,   165,     0,     0,     0,     0,     0,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,     0,   181,     0,   182,   183,   184,   185,   186,   187,
       0,   188,   189,   190,   191,   192,     0,     0,   193,   194,
     195,   196,   197,     0,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,     0,   215,     0,   216,   217,   218,   219,
       0,   220,     0,   221,     0,     0,     0,   224,   225,   503,
       0,   228,     0,   229,     0,   230,   231,   232,     0,   233,
     234,   235,   236,   237,  2098,   239,     0,   241,   242,   243,
     244,     0,   245,   246,   247,   248,   249,   250,     0,   251,
       0,   253,   254,   255,   256,   257,   258,   259,   260,     0,
     261,     0,   262,     0,     0,   265,     0,   267,   268,   269,
     270,   271,   272,     0,     0,   273,     0,   275,     0,     0,
     277,   278,   279,     0,     0,   280,   281,   282,   283,   284,
     504,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
       0,   306,   307,   308,   309,   310,     0,   311,   312,     0,
     314,     0,   315,   316,   317,   318,   319,   320,     0,   321,
     322,     0,     0,   323,   324,   325,     0,     0,   326,   327,
       0,   329,     0,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,   351,   352,   353,   354,   355,
     356,     0,   357,   358,   359,   360,   361,   362,   363,   364,
       0,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,     0,   378,   379,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,     0,   396,   397,   398,   399,   400,     0,
     402,   403,   404,   405,   406,     0,   408,   409,   410,   411,
       0,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   505,   425,   426,   427,     0,   428,   429,
       0,   430,     0,   432,   433,   434,   435,   436,     0,   437,
     438,     0,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,   447,   448,   449,   450,   451,     0,     0,   452,
     453,   454,   455,   456,   457,     0,     0,   459,   460,   461,
     462,   463,   464,   465,     0,   466,     0,   468,   469,   470,
     471,   472,     0,     0,   473,     0,     0,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   502,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   104,   105,   106,   107,
     108,   109,   110,   111,     0,   112,   113,   114,     0,     0,
       0,     0,     0,     0,     0,   115,   116,     0,   117,   118,
     119,     0,   121,   122,   123,   124,   125,     0,   127,   128,
       0,   129,   130,   131,   132,   133,   134,     0,     0,   135,
     136,   137,   138,   139,     0,   140,   141,   142,   143,   144,
       0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     153,   154,   155,     0,   156,   157,   158,   159,   160,   161,
       0,     0,   163,   164,   165,     0,     0,     0,     0,     0,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,     0,   181,     0,   182,   183,   184,   185,   186,
     187,     0,   188,   189,   190,   191,   192,     0,     0,   193,
     194,   195,   196,   197,     0,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
     219,     0,   220,     0,   221,     0,     0,     0,   224,   225,
     503,     0,   228,     0,   229,     0,   230,   231,   232,     0,
     233,   234,   235,   236,   237,  2113,   239,     0,   241,   242,
     243,   244,     0,   245,   246,   247,   248,   249,   250,     0,
     251,     0,   253,   254,   255,   256,   257,   258,   259,   260,
       0,   261,     0,   262,     0,     0,   265,     0,   267,   268,
     269,   270,   271,   272,     0,     0,   273,     0,   275,     0,
       0,   277,   278,   279,     0,     0,   280,   281,   282,   283,
     284,   504,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,     0,   306,   307,   308,   309,   310,     0,   311,   312,
       0,   314,     0,   315,   316,   317,   318,   319,   320,     0,
     321,   322,     0,     0,   323,   324,   325,     0,     0,   326,
     327,     0,   329,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,   351,   352,   353,   354,
     355,   356,     0,   357,   358,   359,   360,   361,   362,   363,
     364,     0,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,     0,   378,   379,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
       0,   402,   403,   404,   405,   406,     0,   408,   409,   410,
     411,     0,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   505,   425,   426,   427,     0,   428,
     429,     0,   430,     0,   432,   433,   434,   435,   436,     0,
     437,   438,     0,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,   447,   448,   449,   450,   451,     0,     0,
     452,   453,   454,   455,   456,   457,     0,     0,   459,   460,
     461,   462,   463,   464,   465,     0,   466,     0,   468,   469,
     470,   471,   472,     0,     0,   473,     0,     0,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,  2699,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   104,   105,   106,
     107,   108,   109,   110,   111,     0,   112,   113,   114,     0,
       0,     0,     0,     0,     0,     0,   115,   116,     0,   117,
     118,   119,  2700,   121,   122,   123,     0,   759,  2701,   761,
     762,     0,   129,   130,   131,   132,   133,   134,     0,     0,
     135,   136,   763,   764,   139,     0,   140,   141,   142,   143,
       0,     0,  2702,     0,  2703,   147,   148,   149,   150,   151,
    2704,   153,   154,   155,     0,   156,   157,   158,   159,   160,
     161,     0,  2705,   163,   164,   165,  2706,  2707,  2708,  2709,
       0,     0,  2710,   171,   172,   173,   174,   175,   176,   177,
     774,   775,   180,     0,   181,     0,   182,   183,   184,   185,
     186,   187,     0,   188,   189,   190,   191,   192,     0,     0,
     193,   194,   776,   196,   197,     0,   198,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,   207,     0,   209,
     210,   211,   212,   213,     0,     0,   215,     0,   216,   217,
     777,   219,     0,   220,     0,   221,  2711,     0,  2712,   224,
     225,  2713,  2714,   228,     0,   229,     0,     0,     0,   232,
       0,   233,   234,   235,   236,   237,   238,   239,  2715,   241,
     242,   243,   244,     0,   245,   246,   247,   248,   249,   250,
       0,   251,  2716,     0,   254,   255,   256,   257,   258,   784,
     785,     0,   786,     0,   262,  2717,  2718,   265,  2719,   267,
     268,   269,   270,   271,   272,     0,     0,   273,  2720,   275,
    2721,     0,   277,   278,   279,     0,     0,   280,   281,   282,
     283,   284,  2914,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   793,  2723,   795,   307,   308,   309,     0,     0,   311,
     312,  2725,   314,     0,     0,   316,   797,   318,   319,   320,
       0,   321,   322,     0,     0,   323,   324,   325,     0,     0,
     326,     0,  2727,   329,  2728,     0,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,     0,   342,   343,     0,
     345,   346,     0,   348,   349,   350,     0,   351,   352,   353,
     354,   355,   356,     0,   357,   358,   359,   800,   361,   362,
     363,   364,     0,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,     0,   378,   379,  2729,
     381,   382,   383,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,     0,   396,   397,   398,   399,
     400,  2730,   402,     0,   404,   405,   406,  2732,   408,   409,
     806,   411,     0,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,  2915,   425,     0,   427,     0,
     428,   429,     0,   430,  2734,   432,   433,   434,   435,   436,
       0,   809,   810,     0,     0,   439,   440,     0,   442,     0,
       0,   444,   445,  2735,   447,   448,   449,   450,   451,     0,
       0,   452,   453,   454,   455,   456,   457,  2737,     0,   459,
     460,   461,   462,   463,     0,   814,     0,   466,  2738,   468,
     469,   470,   471,   472,     0,     0,   473,     0,     0,   474,
     475,   476,   477,   478,   479,   757,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   491,   492,   493,   494,
       0,     0,     0,   104,   105,   106,   107,   108,   109,   110,
     111,     0,   112,   113,   114,     0,     0,     0,     0,     0,
       0,     0,   115,   116,     0,   117,   118,   119,   758,   121,
     122,   123,     0,   759,   760,   761,   762,     0,   129,   130,
     131,   132,   133,   134,     0,     0,   135,   136,   763,   764,
     139,     0,   140,   141,   142,   143,     0,     0,   765,     0,
     766,   147,   148,   149,   150,   151,   767,   153,   154,   155,
       0,   156,   157,   158,   159,   160,   161,     0,   768,   163,
     164,   165,   769,   770,   771,   772,     0,     0,   773,   171,
     172,   173,   174,   175,   176,   177,   774,   775,   180,     0,
     181,     0,   182,   183,   184,   185,   186,   187,     0,   188,
     189,   190,   191,   192,     0,     0,   193,   194,   776,   196,
     197,     0,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,   207,     0,   209,   210,   211,   212,   213,
       0,     0,   215,     0,   216,   217,   777,   219,     0,   220,
       0,   221,   778,     0,   779,   224,   225,     0,   780,   228,
       0,   229,     0,     0,     0,   232,     0,   233,   234,   235,
     236,   237,   238,   239,   782,   241,   242,   243,   244,     0,
     245,   246,   247,   248,   249,   250,     0,   251,   783,     0,
     254,   255,   256,   257,   258,   784,   785,     0,   786,     0,
     262,   787,   788,   265,   789,   267,   268,   269,   270,   271,
     272,     0,     0,   273,   790,   275,   791,     0,   277,   278,
     279,     0,     0,   280,   281,   282,   283,   284,     0,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   793,   794,   795,
     307,   308,   309,     0,     0,   311,   312,   796,   314,     0,
       0,   316,   797,   318,   319,   320,     0,   321,   322,     0,
       0,   323,   324,   325,     0,     0,   326,     0,   798,   329,
     799,     0,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,     0,   342,   343,     0,   345,   346,     0,   348,
     349,   350,     0,   351,   352,   353,   354,   355,   356,     0,
     357,   358,   359,   800,   361,   362,   363,   364,     0,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,     0,   378,   379,   801,   381,   382,   383,     0,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,     0,   396,   397,   398,   399,   400,   803,   402,     0,
     404,   405,   406,   805,   408,   409,   806,   411,     0,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,   425,     0,   427,     0,   428,   429,     0,   430,
     808,   432,   433,   434,   435,   436,     0,   809,   810,     0,
       0,   439,   440,     0,   442,     0,     0,   444,   445,   811,
     447,   448,   449,   450,   451,     0,     0,   452,   453,   454,
     455,   456,   457,   813,     0,   459,   460,   461,   462,   463,
       0,   814,     0,   466,   815,   468,   469,   470,   471,   472,
       0,     0,   473,     0,     0,   474,   475,   476,   477,   478,
     479,   502,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   491,   492,   493,   494,     0,     0,     0,   104,
     105,   106,   107,   108,   109,   110,   111,     0,   112,   113,
     114,     0,     0,     0,     0,     0,     0,     0,   115,   116,
       0,   117,   118,   119,     0,   121,   122,   123,   124,   125,
       0,   127,   128,     0,   129,   130,   131,   132,   133,   134,
       0,     0,   135,   136,   137,   138,   139,     0,   140,   141,
     142,   143,   144,     0,     0,     0,   146,   147,   148,   149,
     150,   151,     0,   153,   154,   155,     0,   156,   157,   158,
     159,   160,   161,     0,     0,   163,   164,   165,     0,     0,
       0,     0,     0,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,     0,   181,     0,   182,   183,
     184,   185,   186,   187,     0,   188,   189,   190,   191,   192,
       0,     0,   193,   194,   195,   196,   197,     0,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,     0,   215,     0,
     216,   217,   218,   219,     0,   220,     0,   221,     0,     0,
       0,   224,   225,   503,     0,   228,     0,   229,     0,   230,
     231,   232,     0,   233,   234,   235,   236,   237,   238,   239,
       0,   241,   242,   243,   244,     0,   245,   246,   247,   248,
     249,   250,     0,   251,     0,   253,   254,   255,   256,   257,
     258,   259,   260,     0,   261,     0,   262,     0,     0,   265,
       0,   267,   268,   269,   270,   271,   272,     0,     0,   273,
       0,   275,     0,     0,   277,   278,   279,     0,     0,   280,
     281,   282,   283,   284,   504,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,     0,   306,   307,   308,   309,   310,
       0,   311,   312,     0,   314,     0,   315,   316,   317,   318,
     319,   320,     0,   321,   322,     0,     0,   323,   324,   325,
       0,     0,   326,   327,     0,   329,     0,   331,   332,   333,
     334,   335,   336,   337,     0,   339,   340,   341,     0,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,   351,
     352,   353,   354,   355,   356,     0,   357,     0,   359,   360,
     361,   362,   363,   364,     0,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,     0,   378,
     379,     0,   381,   382,   383,   384,     0,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
     398,   399,   400,     0,   402,   403,   404,   405,   406,     0,
     408,   409,   410,   411,     0,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   505,   425,   426,
     427,     0,   428,   429,     0,   430,     0,   432,   433,   434,
     435,   436,     0,   437,   438,     0,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,   447,   448,   449,   450,
     451,     0,     0,   452,   453,   454,   455,   456,   457,     0,
       0,   459,   460,   461,   462,   463,   464,   465,     0,   466,
       0,   468,   469,   470,   471,   472,     0,     0,   473,     0,
       0,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,     1,     1,     0,     0,     0,     0,     0,     0,
       0,     0,     2,     2,     3,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       6,     6,     0,     0,     0,     0,     0,     0,     0,     7,
       7,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     8,     8,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     9,     9,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    10,    10,    11,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    12,    12,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    13,    13,
       0,     0,     0,     0,     0,     0,     0,     0,    15,    15,
       0,     0,     0,     0,    16,    16,     0,     0,     0,     0,
       0,     0,    17,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    20,    20,
       0,     0,    21,    21,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    24,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    25,     0,    26,    26,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    27,    27,     0,
       0,     0,     0,     0,     0,     0,    28,    28,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      29,    29,     0,     0,     0,     0,     0,    30,    30,     0,
       0,    31,    31,     0,     0,     0,     0,     0,     0,     0,
       0,    32,    32,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    33,    33,     0,     0,    34,    34,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    35,    35,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    37,    37,     0,     0,     0,    38,
      38,     0,     0,   562,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    39,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    40,    40,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   563,    41
};

static const yytype_int16 yycheck[] =
{
       7,     7,    41,     0,   702,   957,   563,   555,    21,   722,
       0,     7,     0,     0,    21,    21,   726,    78,   680,     0,
     804,   714,   935,     0,   625,    21,   555,    21,  1178,    12,
     555,     0,     0,  1458,    17,   724,   731,    18,  1587,   935,
      18,  1165,  1627,    26,    80,  1630,  1516,  1145,    80,  1496,
    1349,  1140,  1108,   810,  1077,  1142,    39,    40,  2028,  2060,
    1216,  2031,  2063,  1166,    34,   714,  2109,   716,  1113,   718,
     637,  1354,   946,   562,   558,   835,   946,   837,   563,   946,
     557,   627,   946,  1170,   657,  1072,   632,  1541,  1542,     0,
    1042,     0,  1079,   992,     0,     0,  2051,  2462,     0,     0,
       0,  2490,     0,     0,    40,     0,   673,     0,  1996,    24,
       0,  2503,  2105,    96,     0,     0,     0,     0,     0,     0,
    1329,     0,     0,     0,     0,     0,   581,  2491,    98,  2507,
    2340,     0,  2153,  2154,  2155,  2462,     9,   699,  1594,     5,
       5,     9,    52,     5,     0,  1741,    75,   699,     5,  1648,
     172,  1330,    33,     5,     5,   694,    13,    14,     5,   763,
     764,     5,     5,     5,     5,  1869,    13,    14,     9,     5,
      13,    14,  1085,     5,     5,     5,     5,    23,    24,   841,
       5,    13,    14,    13,    14,    25,     5,     5,    13,    14,
    2183,   795,     5,     5,  1403,    13,    14,     9,     5,     5,
      13,    14,     5,  2168,    13,    14,    13,    14,     5,    90,
      13,    14,     5,    85,  2177,     5,    13,    14,   122,    11,
      13,    14,     5,    15,     5,  2768,    95,     5,     5,  2785,
       5,    11,    60,   631,  1650,    15,     5,     5,  2781,    95,
      60,  1154,    69,    29,  1157,  1158,   171,    42,    42,     5,
      36,    43,   189,     5,     5,   101,   804,   129,  2251,  2252,
     124,  2254,    60,   171,   109,   139,    13,    14,     4,   285,
       3,     4,     5,     9,   288,    77,     9,  1034,   244,   804,
     942,  1180,  2398,    75,  2918,   122,    88,  2955,   287,   244,
     309,   293,  2673,  1192,   117,    61,   244,   137,    60,  3026,
     989,   293,   165,    69,   244,   357,   171,    38,     3,   147,
      29,  2617,  1342,    38,  2620,    29,   378,    36,  2749,  1930,
      29,   122,    36,    77,   163,  2995,    70,   309,   396,   369,
     119,   191,  1451,  1452,    88,  2305,   137,  1456,    33,    34,
    2858,   168,  2860,   117,    25,    25,   109,  1556,    11,   119,
      31,    31,    15,    39,   273,   410,   120,   412,   172,  2380,
    2379,    13,    14,  2382,   163,   161,  2731,   132,  1840,  1153,
     971,   419,    11,   210,   405,   976,   358,   215,   935,  1041,
      43,     5,  3109,   442,   117,  3112,  2429,     4,   456,   228,
     108,  2780,     9,   172,   489,  2938,   362,   110,  1870,   329,
     120,  1090,   948,     4,    43,   500,  1010,  1011,     9,     3,
     441,  2412,    75,  2777,   362,   189,   962,   465,   287,  2030,
     110,  1025,   362,   132,  2788,    29,    11,   206,   358,   193,
      15,   287,   304,  2426,   991,  2428,    75,   110,   500,   235,
     126,   500,  2430,   222,   175,   993,  2964,   936,   500,  2337,
     175,   291,   315,   232,   277,   293,   137,   137,    11,  1895,
    1896,  1897,    15,  3133,   504,  1912,  3193,   211,   993,  3025,
     269,   437,   238,   193,  1136,   170,   495,   172,   500,  1509,
    1047,   350,   437,   216,   500,  2916,   500,   347,   277,   437,
      43,   305,   417,   320,   350,  1704,  2877,   437,   272,  3167,
    1709,   500,   504,  2809,   369,   238,   346,   270,   348,   417,
    3144,  1078,   504,   495,   166,  2896,   110,   282,   319,  2635,
     439,   349,    75,    11,   563,  1223,  1996,    15,   132,   349,
    1087,  1088,   250,  2521,   500,   439,   376,  1085,  1105,   411,
     258,   406,   462,   526,  2563,   500,   489,  2540,   555,   947,
    2928,   349,   500,  2918,  2517,  3111,   563,     4,  2262,   502,
     500,   406,     9,   500,   489,    60,   486,  3110,   382,   498,
    2069,  1727,  1134,   502,   353,  1114,   559,   502,   442,  2033,
    1669,   562,  1134,   448,   458,   563,   625,   349,  2678,  2185,
     500,  2918,  2062,   462,  1773,   433,  2686,   462,  2054,   451,
     386,  2644,   439,   610,   610,  1153,   462,   434,   403,   403,
     291,   291,   625,  1323,   610,   417,   610,  1330,   625,   625,
     464,   486,   464,   491,   492,  2835,   499,   493,  1153,   625,
     511,   625,   501,   669,   503,   500,   498,   669,   500,  3031,
     502,   702,   486,   500,   486,   501,  1101,   503,   500,   500,
     657,   658,  1755,   500,  2070,  3033,   500,   500,   500,   500,
    3024,   342,   342,   417,   500,   346,   346,   386,   500,   500,
     500,   500,   386,   680,   444,   500,   504,  1827,  2633,  3079,
    1342,   500,   500,   598,   504,   406,  2651,   500,   500,   500,
    1589,   500,   689,   500,   500,   376,   376,   500,   681,   689,
     678,   689,   689,   500,   496,   675,   504,   500,   689,  1422,
     500,   276,   689,   720,   721,   722,   496,   500,  3107,   500,
     689,   689,   500,   500,   694,   500,  1845,  1846,  1847,  1848,
    1849,   500,   500,  1852,  1853,  1854,  1855,  1856,  1857,  1858,
    1859,  1860,  1861,  2764,   500,   681,  1350,  1351,   500,   500,
     596,  2639,   598,   500,  3118,   491,   492,   452,   491,   492,
     149,  1917,     0,    56,   445,   445,   503,  1315,   161,   393,
     394,  3160,   504,   166,  2767,   270,    25,  3177,   689,  3144,
     689,   452,    31,   689,   689,  1698,  1315,   689,   689,   689,
    1315,   689,   689,   639,   689,  1708,   689,   804,  1711,   689,
    1348,  1349,  1464,   689,   689,   689,   689,   689,   689,   198,
     689,   689,   689,   689,   689,   661,  1364,  3144,   383,  1348,
     173,    11,   177,  1348,  1349,   334,  1882,     5,   491,   492,
     493,   494,   495,   496,   841,  1364,  2879,    25,   171,  1364,
    1553,    69,   235,    31,   464,   462,  1508,  1509,  1537,  1406,
     495,  1328,  3216,   244,   349,  1517,  1912,   502,  2283,   500,
    1979,  1980,    25,  3070,  3071,  1764,   486,  2337,    31,   486,
    2306,  2307,  2308,  2309,   491,   492,  1538,   244,   171,  1592,
     500,   376,  1483,   238,   348,    75,    96,  1488,   137,   117,
    1491,   284,   245,  1582,  2348,  1951,   442,   406,   161,  2334,
    1813,   344,  1591,  1890,  1593,  1478,   491,   492,   493,   494,
     495,   496,   376,  3120,   161,  1399,  1405,  1813,   132,   166,
    1397,  1406,  1796,  1797,  1798,  1471,  1796,  1797,   935,  1796,
    2213,  1795,   200,   244,   941,   942,  2219,   504,   173,  2222,
     493,   494,   495,   496,   951,   454,  2381,   954,   955,   137,
     957,   958,   959,   960,   500,   936,   151,  3000,   971,   171,
    1527,  3196,   172,   976,   971,   971,   410,   251,   412,   976,
     976,   362,   235,  1686,   137,   971,   171,   971,    50,   151,
     976,   334,   976,    25,   991,   992,   993,   334,   235,    31,
    2035,   177,  2462,   464,  3229,   362,   206,  1545,    77,   171,
    2156,  1694,  1009,  1042,   495,   493,   494,   495,   496,    88,
     245,   502,   222,   422,   200,   486,  1545,  1777,  1667,  1026,
    1545,   284,   232,   370,    32,  1723,  1724,  1725,  2237,  2132,
    1037,  1038,  1039,  2056,  1041,  1042,   369,   284,   200,  1799,
    1800,   406,   291,  1803,   272,  1694,   437,   454,    56,   277,
    1745,   362,   238,   406,  2141,   410,   266,   412,   272,   406,
    1773,  1068,  2361,    77,  1713,  2985,    38,  2987,   282,  1718,
     437,    29,  2024,   406,    88,   498,   369,   287,   365,   502,
    1087,  1088,   437,  1119,  1120,    57,  1122,  1119,  1120,   935,
    1122,     4,   320,   342,   500,   137,     9,   346,  2196,   334,
     946,   454,  2200,   291,   176,  3075,   292,   454,   336,   500,
    2557,   166,  1774,   406,  1121,   448,   272,   500,  1125,  1126,
     192,   277,    80,   500,  1107,   197,   437,   376,   291,  1136,
    1678,    89,   119,   500,   224,   370,   108,  3057,   498,   171,
     500,   500,   502,   353,  1114,   991,  1153,   147,   464,  1678,
     256,   257,  1818,  1678,   342,   448,  1822,   369,   346,  1825,
     118,   161,   234,     4,   171,  3208,   166,   500,     9,  2639,
     486,   406,   328,  1180,   369,    25,   500,  3178,  3179,   342,
     270,    31,   500,   346,   500,  1192,   498,   500,   376,   500,
     502,   500,   659,   660,   406,   662,   445,   369,  3168,  1169,
     362,   187,   188,  1049,    66,    67,   434,   500,   370,  1216,
    3180,   406,  1058,   376,   442,   215,  1878,   204,   555,   454,
     501,   500,  3223,   504,   410,   500,   412,   199,  1074,   486,
     501,   189,   442,   504,   406,   235,   448,    13,    14,  1085,
    1788,  1087,  1088,   201,   406,   500,  2365,  2366,   434,   291,
     462,   437,   500,   448,   969,  2554,  1813,   445,  3228,  1788,
     366,   367,  2318,  1788,   221,   501,   981,   462,   504,   984,
     256,   257,   501,   500,   486,   504,   448,   498,   250,   500,
    1828,   500,   445,   270,   284,   272,   258,   137,   500,   379,
     462,   486,   454,   293,   501,   500,  1844,   504,   270,  1828,
     342,  2600,   493,  1828,   346,   500,  1907,   501,  1315,   381,
     504,    13,    14,   171,   486,  1844,   500,  1314,  2442,  1844,
      13,    14,  1984,  1330,  1314,  1873,  1314,  1314,   500,   301,
     501,  2029,  1880,   504,   376,  1342,   501,   369,  2427,   504,
    2443,  1348,  1349,  2441,  1873,  2443,  2242,   501,  1873,   439,
     504,  1880,  2112,   501,  2114,  1880,   504,  1364,  1915,  1463,
    2484,  1465,  1466,  1911,    96,     6,  1914,  2576,     9,   132,
     132,  1919,   483,  2396,   406,    16,   348,   224,   775,   502,
     366,   367,  1911,    13,    14,  1914,  1911,    28,  2340,  1914,
    1919,    32,   501,   425,  1919,   504,   159,   159,   370,  1406,
     797,   501,   501,   445,   504,   504,   501,   501,   501,   504,
     504,   504,   462,   287,   464,  1422,   448,  1400,   390,  1402,
     410,  1428,   412,   270,  1405,   410,   501,   412,  1406,   504,
     462,   483,  2551,   433,   392,   501,   833,   395,   504,  2988,
     172,   291,   300,  2868,  1451,  1452,   502,   501,  2918,  1456,
     504,  1458,  1458,   170,   486,  2664,  1463,  1464,  1465,  1466,
    2217,  2218,  1458,  2115,  1458,  2117,  2176,   804,   500,   504,
    1483,  1478,  1479,   500,   206,  1488,  1483,  1483,  1491,    13,
      14,  1488,  1488,   330,  1491,  1491,   501,  1483,   501,  1483,
     222,   504,  1488,   171,  1488,  1491,   346,  1491,    13,    14,
     232,  1508,  1509,   501,  2803,   501,   504,   501,   504,   272,
    1517,   369,   217,   501,   277,   277,   504,    56,   501,   282,
     282,   504,   501,   500,  1505,   504,   376,  2240,  1505,   501,
    2955,  1538,   379,  1540,   266,   483,  1505,  1505,  1545,  1546,
    1547,  1548,  1549,  1550,  1551,  1552,  1553,  2666,   406,  2462,
    1557,  1558,  3137,   221,  3139,  1562,  2645,   501,   501,  1566,
     504,   504,  1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,
    1577,   501,   501,  1580,   504,   504,   152,    69,   501,  1425,
    1587,   504,  1589,    75,   501,  1592,  2426,   504,  2428,  2692,
     448,   696,   439,   698,   342,   445,    88,  1633,    13,    14,
       8,  1633,   152,    11,   462,    38,  1613,    15,    13,    14,
      18,    19,    20,   501,   977,  2765,   979,  1014,   500,  3204,
     152,   353,   152,   177,  1505,   117,   272,   119,   486,  1636,
     454,  1028,    38,  1611,    13,    14,    13,    14,    13,    14,
    1647,  1648,   500,    13,    14,    84,   200,  2195,    13,    14,
     152,  3076,    13,    14,    13,    14,   993,    13,    14,    13,
      14,   424,   424,    13,    14,   504,  2195,  1513,    13,    14,
    2195,  1678,   435,   435,  3144,    13,    14,  1684,   466,  1686,
      13,    14,   502,  2802,   238,  2242,     3,  1670,    13,    14,
      13,    14,   357,   358,     8,   357,   358,  1680,   451,  1682,
     500,    15,  1685,   316,    18,    19,    20,   500,  1691,   152,
    1693,   500,   204,   260,   261,   500,  2405,   500,   366,   367,
    1727,    37,  1705,  1730,  1731,   500,  1733,  1710,   152,    36,
     152,  1714,  1715,  1716,  1717,   152,  1719,  1720,   292,   287,
    1621,   500,  3167,   357,   358,   357,   358,   417,  2461,   500,
    2463,  1087,  1088,  1599,     9,   500,   408,  1764,   501,   500,
     217,   222,   222,   296,   500,     8,  1773,  1774,    11,   294,
    2683,    38,    15,  2533,   233,    18,    19,    20,   500,  2477,
     272,  1788,     5,     5,   500,   277,   500,   500,    95,   197,
      97,   500,    99,     5,     5,     5,   500,   500,     5,  2494,
    2924,   148,     3,     9,  2514,   500,  1813,   463,   362,   298,
     504,   219,     8,  2361,    99,    11,  1153,   504,   501,    15,
      38,  1828,    18,    19,    20,   376,   166,  1834,   320,   284,
    1837,   166,  1839,   282,   233,   417,  2361,  1844,  1845,  1846,
    1847,  1848,  1849,   500,   336,  1852,  1853,  1854,  1855,  1856,
    1857,  1858,  1859,  1860,  1861,   500,   410,    88,   412,   417,
    1867,  1868,   504,    56,  1871,    56,  1873,  2819,  3077,  3078,
    3079,  1878,  3022,  1880,   428,   417,   263,  1758,   501,   417,
     434,   289,   510,   437,     0,   462,   417,   152,   272,   272,
      95,    38,   500,  1900,  1907,   500,  1903,    37,   272,   272,
    1907,  1907,    18,  2799,  1911,    21,   555,  1914,  1915,   502,
    1917,  1907,  1919,  1907,  2462,   500,   415,    33,   415,   498,
    1927,   417,   417,   555,   498,    41,   417,   417,   501,   501,
     501,   501,   501,  2462,   171,  2695,  2696,  2462,   501,   501,
    2629,   501,   434,   504,   501,  1984,  1953,  2731,   501,   501,
     442,  1958,   501,   459,  1961,   500,   222,   500,   504,    11,
     458,   415,   344,   499,    80,   509,   277,  1813,  3177,   504,
     510,  1817,  1979,  1980,    90,   289,   219,  1984,  1315,   500,
     504,  2529,   500,   417,   162,   180,   171,   501,   504,   500,
     442,  1998,    38,   263,  2001,   215,  2003,   504,   379,   224,
    2529,   288,   293,   309,  2529,  2918,  2554,   309,  2047,   224,
     504,  1348,  1349,   501,  2027,  2616,   500,  2024,   272,   454,
    2027,  2027,   224,   219,   325,   285,   500,  1364,   500,  2554,
    2043,  2027,   152,  2027,   152,   152,  2043,  2043,   152,   462,
      38,   287,  3145,   272,    38,   501,   289,  2043,   501,  2043,
     498,   483,  2600,   483,  2061,   501,   501,  2040,   171,   287,
     501,  2042,    11,   501,    56,  2042,    38,   166,   180,  1915,
     501,  2078,  2079,  2042,  2042,  2600,   501,   171,   499,   487,
     488,   489,   501,   491,   492,   493,   494,   495,   496,   500,
    2097,   500,   502,   289,   501,   483,   500,   417,   501,   501,
     501,   501,     7,     8,   501,   500,   500,    12,  2115,  2116,
    2117,   500,    17,   555,   500,   155,    21,   459,    23,    24,
      25,    26,    27,   287,   448,    30,   504,   489,    33,    34,
     485,    36,   288,   288,    39,    40,   439,   504,   243,   417,
     272,   152,  2181,   500,   200,   152,  2694,   152,   117,  2156,
     279,   279,   501,   417,   417,   804,   417,    38,   417,   500,
     499,  2042,   344,   462,   501,  2694,   285,    38,   504,  2694,
     152,   501,   804,   487,   488,   489,  3128,   491,   492,   493,
     494,   495,   496,  2731,   287,    90,   499,  2897,  2195,   499,
      95,    96,    97,    98,    99,   277,   501,   171,  2205,    56,
     500,   184,   171,  2186,   500,   512,  2731,   501,  1545,   516,
      75,   501,   519,   501,   143,   501,   197,   501,   171,   500,
     297,   501,   504,   350,   501,   501,   447,    86,   500,   288,
     152,  3144,   501,  2240,   175,  2242,   504,    38,   500,   428,
      38,    81,  2799,   501,   487,   488,   489,   500,   491,   492,
     493,   494,   495,   496,     8,  2803,   501,    11,   442,   501,
     501,    15,   500,   171,    18,    19,    20,   499,   504,   504,
     500,   461,   202,   111,   112,  2121,  2283,  2283,  2803,   462,
     504,    35,   501,   117,   501,   501,   489,  2283,  3001,  2283,
      38,   487,   488,   489,    83,   491,   492,   493,   494,   495,
     496,  2340,   501,  2965,   501,  2967,   500,   614,   224,   501,
     190,   277,  2373,   501,   501,   277,   502,   417,   489,   417,
    2166,   502,   502,   502,  2331,   502,   502,   502,   502,   502,
     502,   300,  2371,  2340,   502,  2181,   502,   502,    38,   502,
     502,  1678,  2349,   502,   993,  2352,   272,  2354,   502,   187,
     188,   502,   955,   502,  2361,  2362,   502,   502,  2365,  2366,
     502,   993,   804,  2370,  2371,   502,   502,  2374,   502,   502,
    2918,  3069,  3082,   109,   462,    38,   502,   502,   502,   502,
     502,  2388,     9,   287,   691,   343,   190,   502,   327,  2918,
      88,   502,   502,  2918,   502,   511,  2242,  2404,  3091,   501,
     369,  2247,   133,  2249,   500,   500,    38,  2253,   500,  2255,
     500,   504,   501,   504,   252,   253,   254,   255,   256,   257,
     500,   336,   260,   261,   152,   501,   152,   124,    38,   501,
    3143,   738,   739,   740,   741,   358,    38,   406,   955,  2422,
     358,   501,   500,   500,    38,   442,   562,   563,   306,   504,
    2457,  1788,   447,    75,  2461,  2462,  2463,   500,   277,   189,
     248,   428,   442,   500,    69,   219,  2449,   290,    69,     9,
     501,   501,   500,   360,    56,   376,   489,   270,   287,   448,
     428,  2464,  2465,  2466,  2467,  2468,  2469,  2470,  2471,  2472,
    2473,  1828,     8,   462,   610,    11,  2493,    38,   500,    15,
     290,   500,   287,  2493,  1153,  2493,  2493,  1844,   290,   625,
     501,   501,   202,   287,   501,   122,   357,   486,   439,    24,
      35,  1153,  2529,  1126,  2688,  1692,  2444,    43,   366,   367,
    2457,   500,   689,  2110,    50,   289,  1873,  2172,  1612,  2240,
     749,  2799,  2487,  1880,  2551,  3188,   597,  2554,  3097,  2890,
    3146,   993,  3155,   669,   555,  3181,  1140,  2943,  2103,    75,
    2116,  2508,  3143,  3153,  2571,  2572,  2436,    38,  2100,  2461,
    3141,  2178,  2579,   689,  1911,  1312,  2500,  1914,  1348,  2403,
    1406,  3052,  1919,  2590,  2628,  2402,    57,  2594,  2595,  3076,
    2864,  2042,  2599,  2600,  1107,  3140,  3144,  2604,   970,   970,
    2607,  2608,  2061,  2616,  1664,  2612,  1129,   512,  2489,  2616,
    2616,   516,  2303,  3126,   519,  3144,  2462,  2624,  1128,  3144,
    2616,   526,  2616,  2078,  1636,  3059,   531,  2969,  1131,   145,
    1663,    21,  2043,   948,   978,  2516,   625,   108,  2519,  1908,
     610,  2487,   480,   481,  2282,   952,  2283,  2322,  2911,   946,
    3062,  2658,   557,   558,   559,  1366,  3063,   946,  3175,  2666,
     176,   147,   500,   946,  1959,  1733,  1315,   946,  2062,  1928,
    2002,  1999,  1479,  2624,  1611,   161,   192,    27,  2685,    90,
     166,   197,  2665,  1315,  1915,    -1,    -1,  2694,    -1,    -1,
      -1,   596,   597,   598,    -1,    -1,    -1,    -1,    -1,  1348,
    1349,    -1,    -1,    -1,   175,   610,    -1,    -1,    -1,   614,
      -1,  1153,    -1,    -1,    -1,  1364,  1348,  1349,   234,    -1,
     625,   626,   627,    -1,  2731,    -1,   631,   632,   199,   215,
      -1,    -1,  1364,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,    -1,    -1,  2626,  2627,    -1,    -1,   235,
      -1,    -1,   657,   658,   659,   660,    -1,   662,    -1,    -1,
      -1,    -1,    -1,    -1,  2771,    -1,    -1,    -1,    -1,    -1,
     675,    -1,    -1,   289,    -1,  2621,   681,    -1,    -1,   250,
    2819,    -1,    -1,    -1,    -1,    -1,   691,   258,    -1,   694,
      -1,    -1,  2799,    -1,    -1,  2802,  2803,    -1,   284,   270,
      -1,    -1,    -1,   804,    -1,    -1,    -1,   293,  1115,    -1,
      -1,    -1,  2819,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     936,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2835,    -1,
     301,    -1,  1139,   738,   739,   740,   741,    -1,    -1,  2846,
    2847,    -1,    -1,  2850,    -1,  1152,    -1,    -1,  1451,  1452,
      -1,    -1,    -1,  1456,    -1,   971,    -1,    -1,  2195,    -1,
     976,  2868,  2868,  2870,    -1,   381,  1173,    -1,    -1,    -1,
      -1,    -1,  2868,  1315,  2868,    -1,    -1,   348,    -1,    -1,
      -1,  2888,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1005,
      -1,    -1,    -1,    -1,    -1,    -1,  1545,    -1,  2779,   370,
    1016,    -1,    -1,    -1,    -1,    -1,  1348,  1349,    -1,    -1,
      -1,  2918,    -1,  1545,    -1,    -1,  2899,    -1,    -1,   390,
      -1,    -1,  1364,    -1,    -1,    -1,  1042,    -1,    -1,    -1,
    2776,    -1,    -1,    -1,  1451,  1452,  2919,  2920,    -1,  1456,
      -1,    -1,    -1,    -1,  2951,    -1,    -1,   433,  2955,  2955,
      -1,    -1,    -1,  2799,  2937,    -1,    -1,    -1,  2965,  2955,
    2967,  2955,  2969,    -1,    -1,    -1,  2973,    -1,   484,    -1,
    2977,    -1,    -1,    -1,    38,   491,   492,   493,   494,   495,
     496,  2988,    -1,    -1,  2991,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   993,    57,  3001,    -1,    -1,    -1,    -1,  3006,
      -1,    -1,    -1,  1119,  1120,    -1,  1122,  2990,    -1,  1316,
      -1,    -1,   498,  2859,    -1,   501,   502,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2361,    -1,    -1,     8,    -1,  1678,
      11,    -1,    -1,  1636,    15,    -1,    -1,    18,    19,    20,
      -1,    -1,   947,   948,   108,    -1,  1678,   952,  2929,  2930,
      -1,    -1,  3059,    -1,    35,    -1,   961,   962,    -1,    -1,
     965,    -1,    -1,    -1,    -1,    -1,   971,    -1,  1585,  3076,
    3076,   976,  2918,    -1,    -1,    -1,    -1,   982,    -1,    -1,
    3076,    -1,  3076,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3098,   997,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1545,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1636,
      -1,  3128,    -1,    -1,    -1,  2462,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   199,  3143,  3144,    -1,  1788,
      -1,  1046,    -1,    -1,    -1,    -1,    -1,    -1,    12,  3030,
      -1,    -1,  1153,    17,    -1,    -1,  1788,    -1,    -1,    -1,
    3167,  3167,    26,    -1,    -1,  3046,    -1,  3174,  3175,  3050,
      -1,  3167,    -1,  3167,  1481,    39,    40,  3023,    -1,  1828,
      -1,    -1,    -1,    -1,  1089,    -1,   250,  1092,    -1,  3196,
      -1,  3072,  2529,    -1,   258,  1844,  1828,    -1,     0,    -1,
      -1,    -1,  1107,  1108,    -1,    -1,   270,    25,    -1,  1114,
    1115,    -1,  1844,    31,    -1,    -1,    -1,  2554,    -1,    -1,
      38,    -1,  3229,    -1,  1873,    -1,    -1,    -1,    -1,    -1,
      -1,  1880,    96,    -1,  1139,  1140,  1678,   301,   219,    57,
      -1,  1873,  1845,  1846,  1847,  1848,  1849,  1152,  1880,  1852,
    1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,    -1,
      -1,    -1,  1911,  2600,  1169,  1914,    -1,    -1,  1173,    -1,
    1919,    -1,  1177,    -1,    -1,    -1,    -1,    -1,  3159,  1911,
      -1,    -1,  1914,     3,   348,     5,    -1,  1919,    -1,  1405,
     108,    -1,    -1,    95,    -1,    -1,    -1,    -1,  3144,    -1,
      -1,    -1,    -1,  1610,    -1,  1612,   370,    -1,   289,    -1,
      -1,    -1,    -1,    -1,  1315,    -1,    -1,    -1,    -1,   137,
      -1,    -1,    -1,    -1,    -1,    -1,   390,    -1,  1845,  1846,
    1847,  1848,  1849,    -1,    -1,  1852,  1853,  1854,  1855,  1856,
    1857,  1858,  1859,  1860,  1861,   147,  1788,  1348,  1349,    -1,
      -1,    -1,    -1,    -1,  1661,    -1,    -1,  2694,    -1,   161,
      -1,    -1,    -1,  1364,   166,    -1,    -1,  1483,    -1,   171,
      -1,    -1,  1488,    -1,    -1,  1491,  1979,  1980,   180,    -1,
      -1,   199,   184,    -1,    -1,    -1,  1828,    -1,    -1,  1505,
      -1,   111,   112,    -1,  2731,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1844,    -1,    -1,  1310,    -1,    -1,    -1,    -1,
      -1,  1316,    -1,   215,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1327,  1328,  1329,    -1,    -1,    -1,    -1,    -1,
      -1,  1873,   250,   235,  1741,  1742,  1743,  1744,  1880,    -1,
     258,    -1,    -1,  1559,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   270,    -1,    -1,    -1,  1361,    -1,    -1,    -1,
      -1,  1366,  1979,  1980,    -1,    -1,  2803,   187,   188,  1911,
      -1,    -1,  1914,   291,    -1,    -1,    -1,  1919,    -1,    -1,
      -1,    -1,   284,   301,    -1,   287,    -1,    -1,    -1,    -1,
      -1,   293,  1397,    -1,  1399,  1400,    -1,  1402,  1403,    -1,
      -1,    -1,    -1,    -1,    -1,  1621,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,  1633,    -1,    52,
      -1,    -1,    -1,    -1,   342,   327,    -1,    -1,   346,    -1,
     348,    -1,   252,   253,   254,   255,   256,   257,    -1,    -1,
     260,   261,    -1,    -1,  1545,    -1,  2195,    -1,   350,    -1,
      -1,    -1,   370,  1458,    -1,    -1,    -1,    -1,   376,    -1,
      -1,    -1,    -1,  2195,    97,    -1,  1471,    -1,  1473,    -1,
      -1,  1476,   390,  1478,  1479,    -1,  1481,    -1,  1483,    -1,
      -1,  2918,    -1,  1488,    -1,    -1,  1491,  1894,  1493,    -1,
     123,  1496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,   141,    -1,
      -1,  1516,   145,    38,    -1,    -1,  1521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,    -1,
      -1,   433,    57,    -1,   167,  1751,    -1,   170,    -1,    -1,
     442,    -1,  1758,    -1,    -1,    -1,   366,   367,    -1,    -1,
      -1,  1556,   185,    -1,    -1,    -1,    -1,   459,    -1,   461,
     462,    -1,   526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1678,    -1,    -1,
      -1,    -1,  1587,   108,   109,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   117,    -1,   558,   559,   498,    -1,    -1,   501,
     502,   503,    -1,  1608,    -1,  1610,    -1,  1612,    -1,    -1,
      -1,    -1,  2361,    -1,    -1,    -1,    -1,    -1,  1623,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,  2361,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   277,    -1,    -1,    -1,    -1,    -1,
     175,    -1,   285,  2195,    -1,    -1,  1661,    -1,    -1,    -1,
     480,   481,  2365,  2366,  1669,  1670,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   306,   199,  1680,  1681,  1682,  1683,    -1,
    1685,    -1,    -1,    -1,    -1,    -1,  1691,  1788,  1693,    -1,
      -1,  1907,    -1,    -1,    -1,   328,    -1,    -1,    -1,  1704,
    1705,    -1,    -1,    -1,  1709,  1710,    -1,  3144,    -1,  1714,
    1715,  1716,  1717,  2462,  1719,  1720,    -1,   681,    -1,    -1,
      -1,    -1,    -1,    95,    -1,   250,    -1,  1828,    -1,    -1,
    2462,    -1,    -1,   258,    -1,    -1,  1741,  1742,  1743,  1744,
      -1,    -1,    -1,  1844,    -1,   270,    -1,   272,  2365,  2366,
      -1,    -1,    -1,    -1,  1759,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2173,    -1,  1984,    -1,
      -1,    -1,  1873,    -1,    -1,   147,   301,  2184,  2185,  1880,
    2529,  2188,    -1,    -1,    -1,    -1,  2002,    -1,    -1,   161,
      -1,    -1,  2199,    -1,   166,  2202,    -1,  2529,    -1,   171,
    2207,    -1,  2018,    -1,    -1,  2554,    -1,    -1,   180,    -1,
    1911,  2027,   184,  1914,    -1,    -1,    -1,    -1,  1919,  2361,
      -1,    -1,  2554,   348,     0,    -1,  2042,  2043,    -1,    -1,
      -1,  2047,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   215,    -1,   370,    -1,    -1,  2551,    -1,
      -1,  2600,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,   390,    -1,   392,  2600,     8,
     395,    -1,    11,    -1,    -1,    -1,    15,  1882,    -1,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,  2590,    -1,  1894,
      -1,    -1,    -1,    -1,     8,    -1,    35,    11,    -1,    -1,
      -1,    15,  1907,    -1,  2311,  2312,  2313,  1912,    -1,    -1,
      -1,    -1,   284,   935,    -1,   287,    -1,    -1,    -1,    95,
    2462,   293,   944,   945,    -1,    -1,    -1,   949,   950,    43,
      -1,    -1,    -1,    -1,  2551,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2694,  1951,    -1,    -1,    -1,
    1955,    -1,    -1,    -1,  1959,   327,    -1,    -1,    -1,    -1,
      -1,    75,  2694,  2666,    -1,  2181,    -1,    -1,    -1,   991,
      -1,   147,    -1,    -1,    -1,   500,    -1,    -1,   350,    -1,
      -1,    -1,  2731,    -1,    -1,   161,    -1,  2529,    -1,    -1,
     166,  1996,    -1,    -1,    -1,   171,    -1,    -1,    -1,  2731,
      -1,   965,    -1,    -1,   180,    -1,    -1,    -1,   184,    -1,
      -1,    -1,  2554,  2420,    -1,    -1,    -1,    -1,   982,    -1,
      -1,    -1,  2027,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   145,    -1,    -1,   406,  2040,  1058,    -1,  2043,   215,
      -1,    -1,  2047,    -1,    -1,  2050,  2051,    -1,    -1,  2666,
      -1,    -1,    -1,    -1,  2803,    -1,    -1,    -1,  2600,   235,
      -1,   433,   176,  1085,    -1,  1087,  1088,    -1,    -1,    -1,
     442,  2803,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,
     219,    -1,  1046,   197,    -1,    -1,    -1,   459,  2495,   461,
     462,    -1,    -1,    -1,  2195,    -1,    -1,    -1,    -1,  2802,
    2105,    -1,    -1,     8,    -1,    -1,    11,    -1,   284,    -1,
      15,   287,    -1,    -1,    -1,    -1,    -1,   293,    -1,    -1,
     234,    -1,    -1,    -1,  2340,    -1,   498,    -1,    -1,   501,
     502,   503,  1154,    -1,    -1,  1157,  1158,    -1,    43,    -1,
      -1,    -1,    -1,  1107,  1108,    50,    -1,    -1,    -1,    -1,
     289,   327,  2694,    -1,    -1,  2371,    -1,  2564,  2565,  2566,
    2567,    -1,    -1,  2168,    -1,    -1,    -1,    -1,  2173,  2918,
      75,    -1,    -1,    -1,   350,   289,    -1,    -1,  2183,  2184,
    2185,  2186,    -1,  2188,    -1,  2802,  2918,    -1,    -1,  2731,
      -1,    -1,    -1,    -1,  2199,    -1,    -1,  2202,    -1,    -1,
      -1,    -1,  2207,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2220,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
     406,    15,  2237,    -1,    18,    19,    20,    -1,    -1,    -1,
     145,    -1,    -1,    -1,    -1,    -1,  2251,  2252,    -1,  2254,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   433,    -1,    -1,
    2361,  2803,    -1,    -1,    -1,  2672,   442,   381,    -1,    -1,
      -1,   176,    -1,  2489,    -1,    -1,    -1,    -1,  2283,    -1,
      -1,    -1,    -1,   459,    -1,   461,   462,   192,    -1,    -1,
      -1,    -1,   197,    -1,    -1,    -1,    -1,  2302,    -1,    -1,
    2516,    -1,    -1,  2519,    -1,    -1,  2311,  2312,  2313,    -1,
      -1,    -1,    -1,  2318,    -1,    -1,    -1,  2322,    -1,    -1,
      -1,    -1,   498,    -1,  1346,   501,   502,   503,    -1,   234,
      -1,    -1,  2337,    -1,    -1,  1357,    -1,  1359,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1369,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,  2462,    -1,    -1,  1386,    -1,    -1,    -1,    -1,    -1,
     484,    -1,    -1,    -1,    -1,    -1,  2918,   491,   492,   493,
     494,   495,   496,    -1,   289,    -1,    -1,    -1,    -1,  1411,
    1412,    -1,    -1,    -1,    -1,  3144,    -1,  2402,    -1,    -1,
    2616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2626,  2627,  3144,    -1,    -1,  2420,    -1,  2422,    -1,    -1,
      -1,  2426,  2427,  2428,    -1,  2430,    -1,    -1,  2529,    -1,
      -1,    -1,   111,   112,    -1,  1399,  1400,    -1,  1402,    -1,
      -1,    -1,    -1,    -1,  2449,    -1,  2451,    -1,    -1,    -1,
      -1,    -1,    -1,  2554,    -1,    -1,    -1,    -1,    -1,  2464,
    2465,  2466,  2467,  2468,  2469,  2470,  2471,  2472,  2473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   381,   657,   658,    -1,
      -1,    -1,    -1,    -1,     8,  2490,    -1,    11,    -1,    -1,
    2495,    15,    -1,    -1,    18,    19,    20,    -1,    -1,  2600,
      -1,    -1,    -1,  2508,    -1,   289,    -1,    -1,   187,   188,
      -1,    35,  1476,    -1,    -1,    -1,  2521,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2932,    -1,    -1,    -1,  1493,
      -1,    -1,  1496,    -1,    -1,  2540,    -1,    -1,    -1,    -1,
     720,   721,    -1,    -1,    -1,  2952,    -1,    -1,    -1,    -1,
      -1,    -1,  2557,    -1,    -1,    -1,    -1,    -1,    -1,  2564,
    2565,  2566,  2567,  2779,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2576,    -1,   252,   253,   254,   255,   256,   257,   484,
      -1,   260,   261,    -1,  2589,    -1,   491,   492,   493,   494,
     495,   496,  2999,  2694,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3144,  2819,    -1,    -1,    -1,    -1,    -1,  2614,
      -1,  2616,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2624,
      -1,    -1,  3029,  2628,    -1,  1647,  1648,    -1,  2633,    -1,
    2731,    -1,    -1,    -1,  2639,    -1,    -1,    -1,    -1,    -1,
    2645,    -1,    -1,    -1,    -1,    -1,  2651,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,  2664,
    2665,    11,    -1,    -1,    -1,    15,    -1,  2672,    18,    19,
      20,    -1,    -1,    -1,    -1,    -1,  1698,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2689,    35,  1708,   366,   367,  1711,
      -1,    -1,    -1,    43,    -1,   219,    -1,    -1,    -1,    -1,
      50,    -1,  2803,   487,   488,   489,  1670,   491,   492,   493,
     494,   495,   496,  2929,  2930,    -1,  1680,    -1,  1682,    -1,
      -1,  1685,    -1,    -1,    -1,    75,    -1,  1691,    -1,  1693,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1705,    -1,    -1,    -1,    -1,  1710,    -1,    -1,    -1,
    1714,  1715,  1716,  1717,    -1,  1719,  1720,    -1,    -1,    -1,
      -1,   941,  2767,    -1,    -1,   289,    -1,    -1,    -1,  1791,
    1792,   951,    -1,    -1,   954,  2780,    -1,   957,   958,   959,
     960,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2793,    -1,
      -1,  1813,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   992,    -1,  3030,    -1,    -1,  2918,    -1,    -1,
      -1,    -1,    -1,    -1,  2829,    -1,   176,    -1,    -1,  1009,
    3046,    -1,    -1,    -1,  3050,    -1,    -1,    -1,    -1,    -1,
      -1,     8,   192,    -1,    11,    -1,  1026,   197,    15,    -1,
    2855,    18,    19,    20,    -1,    -1,  3072,  1037,  1038,  1039,
      -1,  1041,  1042,  2868,    -1,    -1,    -1,    -1,    35,   219,
     220,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    50,   234,    -1,    -1,    -1,  1068,    -1,
      -1,    -1,    -1,  1915,  2899,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,  2919,  2920,    -1,    -1,  1882,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,  2932,    -1,  2934,
      -1,    -1,  2937,    -1,    -1,    -1,    -1,    -1,    -1,   289,
      -1,  1121,   292,  3159,    -1,  1125,  1126,  2952,  1912,    -1,
    2955,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2988,    -1,  2990,    -1,  1951,    -1,    -1,
      -1,    -1,    -1,    -1,  2999,  1959,    -1,    -1,    -1,    -1,
    1180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
    2032,    -1,  1192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3029,   192,    -1,    -1,    -1,    -1,
     197,   381,    -1,    -1,    -1,    -1,  1216,    -1,    -1,    -1,
      -1,    -1,    -1,  3144,    -1,    -1,  2068,  2069,    -1,    -1,
      -1,     8,   219,   220,    11,    -1,    -1,  3062,    15,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
       0,  3076,  3077,  3078,  3079,    -1,  2040,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,
      -1,    21,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    31,  3107,    33,    34,   272,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,    75,    49,
      -1,  3126,   289,    -1,    -1,    -1,    -1,    -1,    58,    -1,
      -1,    -1,    -1,    -1,   484,  3140,    -1,   487,   488,   489,
      70,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    81,    -1,    -1,    -1,  3160,    -1,    -1,    -1,    -1,
      -1,    -1,  3167,    93,    -1,    95,    -1,    -1,    -1,    -1,
      -1,    -1,  3177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   113,    -1,    -1,    -1,    -1,   145,    -1,
      -1,    -1,  2214,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,    -1,    -1,
      -1,    -1,    -1,   143,   381,    -1,    -1,    -1,    -1,   176,
      -1,   151,  2186,   153,   154,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,   167,    -1,    -1,
     197,   171,    -1,    -1,    -1,    -1,    -1,    -1,  1428,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   196,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   211,    -1,  1463,    -1,  1465,  1466,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1478,  1479,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2318,    -1,    -1,    -1,  2322,    -1,
    1540,    -1,    -1,    -1,    -1,    -1,  1546,  1547,  1548,  1549,
    1550,  1551,  1552,    -1,    -1,    -1,    -1,  1557,  1558,    -1,
      -1,    -1,  1562,    -1,   314,    -1,  1566,   317,    -1,  1569,
    1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,    -1,    -1,
    1580,    -1,    -1,    -1,    -1,    -1,    -1,  1587,    -1,  1589,
      -1,    -1,    -1,    -1,    -1,    -1,   346,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,   355,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1613,    -1,    -1,    -1,    -1,    -1,   369,
    2462,    -1,   955,    -1,    -1,    -1,   376,    -1,    -1,    -1,
     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2422,    -1,
     390,    -1,    -1,    -1,    -1,    -1,    -1,  1647,  1648,    -1,
      -1,    -1,   402,    -1,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2449,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,    -1,
    2464,  2465,  2466,  2467,  2468,  2469,  2470,  2471,  2472,  2473,
     440,    -1,    -1,   443,    -1,    -1,    -1,    -1,   448,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
      -1,    -1,   462,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,  1059,  1727,    -1,    -1,
    1730,  1731,    -1,  1733,    -1,    -1,   486,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
     500,    11,    -1,   503,    -1,    15,    16,    17,    18,    19,
      20,    -1,    -1,    -1,  1764,    -1,    -1,    -1,    -1,  1102,
      -1,    -1,    -1,  2557,    -1,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,     3,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    43,    -1,    -1,  1834,    -1,    -1,  1837,    50,  1839,
      -1,  2683,    -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,  1867,  1868,    -1,
      -1,  1871,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2665,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1222,
      -1,    -1,    -1,    -1,  1227,    -1,    -1,  2739,  2740,    -1,
    1900,    -1,    -1,  1903,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,   176,  1917,    11,    -1,
      -1,    -1,    15,    -1,    -1,    -1,    -1,  1927,    -1,    -1,
      -1,    -1,   192,     8,    -1,    -1,    11,   197,    -1,    -1,
      15,    -1,    -1,    18,    19,    20,    -1,    -1,    -1,    -1,
      43,    -1,    -1,  1953,    -1,    -1,    -1,    50,  1958,   219,
     220,  1961,    -1,    -1,   176,    -1,    -1,    -1,    43,    -1,
      -1,    -1,    -1,    -1,   234,    50,    -1,    -1,    -1,    -1,
     192,    -1,    75,     8,    -1,   197,    11,    -1,    -1,    -1,
      15,    -1,    -1,    18,    19,    20,    -1,    -1,  1998,    -1,
      75,  2001,    -1,  2003,    -1,    -1,    -1,   219,   220,    -1,
      -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    43,    -1,
      -1,    -1,   234,    -1,    -1,    50,    -1,    -1,    -1,   289,
      -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      75,    -1,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,  2061,    -1,   275,    -1,  2907,  2908,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2918,   289,  2078,  2079,
     292,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1426,    -1,    -1,    -1,  2097,    -1,   192,
      -1,   176,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1447,  2899,  1449,   192,  1451,  1452,
    1453,   381,   197,  1456,    -1,    -1,  1459,    -1,    -1,  1462,
      -1,    -1,    -1,    -1,  1467,  2919,  2920,  1470,    -1,    -1,
      -1,   234,    -1,    -1,   219,   220,    -1,    -1,    -1,    -1,
      -1,   176,    -1,  2937,    -1,    -1,  2156,    -1,    -1,   234,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,   381,
      -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,  1511,    -1,
      -1,    -1,  1515,    -1,    -1,  1518,  1519,  1520,    -1,    -1,
      -1,  1524,    -1,    -1,    -1,  1528,   289,   272,    -1,    -1,
     275,    -1,    -1,    -1,    -1,  2205,  2990,    -1,    -1,   234,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1586,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    15,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,    -1,    -1,   381,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,  1630,    50,    -1,
      -1,    -1,  3144,    -1,    -1,    -1,   381,    -1,    -1,    -1,
      -1,    -1,    -1,  1646,    -1,    -1,    -1,    -1,  1651,    -1,
      -1,    -1,     8,    75,    -1,    11,    -1,    -1,    -1,    15,
      -1,  2331,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
    2340,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2349,
      -1,    -1,  2352,    -1,  2354,    -1,   381,    43,    -1,    -1,
      -1,    -1,  2362,    -1,    50,    -1,    -1,    -1,    -1,    -1,
    2370,  2371,    -1,    -1,  2374,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2388,    75,
      -1,   484,    -1,   145,    -1,    -1,    -1,    -1,   491,   492,
     493,   494,   495,   496,  2404,    -1,    -1,    -1,    -1,   484,
      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,
      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,
     495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,    -1,    -1,    -1,    -1,    -1,    -1,  1830,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,  1842,
    1843,   197,  1845,  1846,  1847,  1848,  1849,    -1,    -1,  1852,
    1853,  1854,  1855,  1856,  1857,  1858,  1859,  1860,  1861,  1862,
      -1,    -1,    -1,   219,   220,    -1,    -1,   289,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2571,  2572,    -1,    43,    -1,    -1,    -1,    -1,  2579,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
    2590,    -1,    -1,    -1,  2594,  2595,    -1,    -1,    -1,  2599,
      -1,    -1,    -1,   289,  2604,    -1,    75,  2607,  2608,    -1,
      -1,    -1,  2612,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2624,    -1,    -1,    -1,    -1,   381,
    1963,    -1,    -1,    -1,  1967,  1968,  1969,  1970,  1971,  1972,
    1973,    -1,    -1,    -1,    -1,    -1,  1979,  1980,    -1,  1982,
    1983,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2658,    -1,
      -1,  1994,    -1,    -1,  1997,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,    -1,    -1,    -1,  2685,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2039,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   192,    -1,    -1,     8,    -1,   197,    11,
      -1,    -1,   484,    15,    16,    17,    18,    19,    20,   491,
     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    38,    -1,    -1,    -1,
      -1,    43,    -1,    -1,    -1,   234,    -1,    -1,    50,    -1,
      -1,  2771,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,   484,    -1,
      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2819,
     289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2161,  2162,
    2163,    -1,    -1,    -1,    -1,  2835,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2846,  2847,    -1,    -1,
    2850,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
    2870,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,  2888,    -1,
      -1,    -1,    -1,    50,   176,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,   381,    -1,    -1,   197,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2259,  2260,  2261,    -1,
      -1,  2264,  2265,  2266,  2267,  2268,    -1,   219,   220,  2272,
    2273,  2274,  2275,  2276,  2277,  2278,  2279,  2280,  2281,    -1,
      -1,  2951,   234,  2286,  2287,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2969,
      -1,    -1,    -1,  2973,    -1,    -1,    -1,  2977,    -1,    -1,
      -1,  2314,    -1,    -1,  2317,    -1,    -1,    -1,  2988,    -1,
     272,  2991,    -1,   275,    -1,    -1,    -1,  2330,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3006,   289,  2341,    -1,
     292,  2344,    -1,  2346,    -1,   484,    -1,  2350,  2351,   176,
      -1,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,  2364,  2365,  2366,  2367,   192,  2369,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3059,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2423,    -1,    -1,    -1,     8,    -1,    -1,    11,  3098,   381,
      -1,    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
       8,    -1,   289,    11,    -1,   292,    50,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      -1,    75,    -1,    23,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,  3174,  3175,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2520,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3196,    75,    -1,    -1,
      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,    76,    -1,  2551,   501,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,  3229,
      -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,    25,    -1,
      -1,    -1,    -1,    -1,    31,    -1,    -1,  2580,    -1,    -1,
     110,    38,  2585,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2593,    -1,   176,  2596,    -1,  2598,    -1,    -1,    -1,  2602,
      57,    -1,  2605,  2606,    -1,    -1,  2609,  2610,   192,    -1,
    2613,    -1,    -1,   197,    -1,    -1,   146,    -1,    -1,    -1,
    2623,    -1,    -1,    -1,    -1,    -1,   156,    -1,   176,    -1,
      -1,    -1,    -1,  2636,    -1,   219,   220,    -1,   168,    -1,
      -1,    -1,    -1,   173,   192,    -1,    -1,    -1,    -1,   197,
     234,   108,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,  2666,   491,   492,   493,   494,   495,   496,
     200,   219,   220,    -1,   501,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,   234,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,   249,
      -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,   199,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   250,    -1,    -1,   326,   381,  2801,  2802,
      -1,   258,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2827,  2828,    -1,    -1,    -1,   359,
    2833,    -1,   362,   381,   291,  2838,    -1,  2840,  2841,  2842,
     370,    -1,  2845,   373,   301,  2848,  2849,    -1,    -1,    -1,
    2853,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,
      -1,    -1,  2885,   413,    -1,   342,    -1,    -1,  2891,   346,
      -1,   348,   422,    -1,    -1,    -1,    -1,    -1,   428,    -1,
     484,  2904,    -1,   487,   488,   489,    -1,   491,   492,   493,
     494,   495,   496,   370,    -1,    -1,    -1,   501,    -1,   376,
      -1,    -1,    -1,    -1,   454,    -1,    -1,    -1,  2931,    -1,
      -1,    -1,    -1,   390,    -1,    -1,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,  2957,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2979,  2980,  2981,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   445,    -1,
      -1,    -1,    -1,    -1,  2997,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3007,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3051,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3064,    -1,    -1,  3067,    -1,    -1,    -1,    -1,    -1,
      -1,  3074,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
    3093,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,  3157,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,  3199,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,   171,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,
      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,   132,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,
      -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
     171,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,   486,    -1,    -1,    -1,    -1,
     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,   171,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    36,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,   171,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,
     501,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
     459,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
      -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,
      -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,
       7,    -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,
      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,
     507,   508,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    37,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,
      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    37,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,   277,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,
      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,
     505,   506,   507,   508,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    37,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,    -1,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,    -1,    -1,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,   277,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   491,   492,     3,    -1,    -1,    -1,    -1,   498,
      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,   172,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   501,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
     288,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,    -1,   486,     3,
       4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,    -1,   273,
     274,   275,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,   287,    -1,   289,   290,   291,    -1,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,   491,   492,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      63,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,   170,    -1,   172,
     173,   174,   175,   176,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,    -1,   231,   232,
     233,   234,    -1,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
     273,   274,   275,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,   408,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,   441,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
      -1,   273,   274,   275,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,   486,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    63,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,   175,   176,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,    -1,   273,   274,   275,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    63,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,   171,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,   406,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,   486,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,   171,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,   406,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,     3,   486,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   500,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   500,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    -1,    -1,     3,     4,     5,    -1,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    15,    -1,   500,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,    -1,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,    -1,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,    -1,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,    -1,   314,   315,    -1,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,   482,   483,    -1,     3,    -1,   487,   488,
     489,     8,   491,   492,   493,   494,   495,   496,    15,    -1,
      -1,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,     8,
      -1,    -1,    11,    -1,    -1,    43,    15,    16,    17,    18,
      19,    20,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,     8,    -1,    75,    11,    -1,
      -1,    50,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,     8,    -1,    75,    11,    -1,    -1,
      43,    15,    16,    17,    18,    19,    20,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      -1,    -1,    75,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,   192,    -1,    -1,    -1,    -1,   197,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
     219,   220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,   234,    -1,    -1,    -1,    -1,
      -1,    -1,   176,    -1,   272,    -1,    -1,   275,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,   192,    -1,
      -1,   289,    -1,   197,   292,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,    -1,
     289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,
     234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,
      -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,   289,    -1,    -1,   292,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,    -1,    -1,    -1,    35,    -1,     8,    -1,
      -1,    11,    -1,    -1,    43,    15,    16,    17,    18,    19,
      20,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,   381,    -1,
      -1,    -1,    -1,    43,    -1,    -1,    75,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    75,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,   484,    -1,    -1,   487,   488,   489,   176,   491,   492,
     493,   494,   495,   496,    35,    -1,    -1,    -1,   501,    -1,
      -1,    -1,    43,   192,    -1,    -1,    -1,    -1,   197,    50,
     484,    -1,    -1,   487,   488,   489,   176,   491,   492,   493,
     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,
     219,   220,   192,    -1,    75,    -1,    -1,   197,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,
     220,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    -1,    -1,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     289,    -1,    11,   292,    -1,    -1,    15,    16,    17,    18,
      19,    20,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,   289,
      -1,    -1,   292,    -1,    43,   176,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   234,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   381,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    43,    -1,   275,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,   289,    -1,
      11,   292,    -1,    -1,    15,    16,    17,    18,    19,    20,
      -1,    -1,    -1,    -1,    75,    -1,    -1,   176,    -1,    -1,
      -1,    -1,    -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,   192,    -1,    -1,    -1,    -1,   197,    50,
      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
     219,   220,   501,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   484,   234,    -1,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,
     381,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   272,    -1,   176,   275,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     289,   192,    -1,   292,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,    -1,   219,   220,
     501,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   381,   234,    -1,    -1,    -1,     8,   289,    -1,
      11,   292,    -1,    -1,    15,    16,    17,    18,    19,    20,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    35,    -1,    -1,    -1,    -1,    -1,
      -1,   272,    43,    -1,   275,    -1,    -1,    35,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    43,     8,    -1,   289,    11,
      -1,   292,    50,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
     381,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,
     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,
      -1,    -1,   501,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,
      -1,    -1,    -1,   484,   192,    -1,   487,   488,   489,   197,
     491,   492,   493,   494,   495,   496,    -1,    -1,   219,   220,
     501,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,
      -1,   219,   220,   234,    -1,    -1,    -1,    -1,    -1,    -1,
     192,    -1,    -1,    -1,    -1,   197,   234,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,    -1,   219,   220,    -1,
     501,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,   272,    -1,    -1,   275,   289,    -1,
      -1,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,   484,    -1,   499,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,
     492,   493,   494,   495,   496,    -1,    -1,   499,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    76,    -1,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    96,    97,    98,    99,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
     170,    -1,   172,   173,   174,   175,   176,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,   232,   233,   234,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,    -1,   273,   274,   275,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,   287,    -1,   289,
     290,   291,    -1,    -1,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,   408,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,     4,     5,    -1,    -1,    -1,
       9,   491,   492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,   175,   176,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,   287,    -1,
     289,   290,   291,    -1,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,     4,     5,    -1,    -1,
      -1,     9,   491,   492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,   287,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,    -1,    -1,     8,    -1,
      -1,    11,    -1,   491,   492,    15,    16,    17,    18,    19,
      20,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    35,    -1,    -1,    -1,    39,
      -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    43,     8,    -1,    -1,
      11,    -1,    -1,    50,    15,    16,    17,    18,    19,    20,
       8,    -1,    -1,    11,    -1,    75,    -1,    15,    16,    17,
      18,    19,    20,    -1,    35,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    43,    -1,    -1,    -1,    -1,    35,    -1,    50,
      38,    -1,    -1,    -1,    -1,    43,     8,    -1,    -1,    11,
      -1,    -1,    50,    15,    16,    17,    18,    19,    20,    -1,
      -1,    -1,    -1,    -1,    75,    -1,   126,    -1,    -1,    -1,
      -1,    -1,    -1,    35,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    75,    -1,    -1,   176,    -1,    35,   166,
      -1,    38,    -1,    -1,   171,    -1,    43,    -1,    -1,   176,
      -1,    -1,   192,    50,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,   165,    -1,    -1,    -1,    75,   219,
     220,    -1,    -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,   234,    -1,    -1,    -1,   176,    -1,
      -1,   192,    -1,    -1,    -1,    -1,   197,   234,    -1,    -1,
      -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,
      -1,    -1,   272,    -1,   176,   275,    -1,    -1,    -1,    -1,
      -1,   219,   220,   234,    -1,   272,    -1,    -1,   275,   289,
     192,    -1,   292,    -1,    -1,   197,   234,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   219,   220,   176,
      -1,   272,    -1,    -1,   275,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   234,    -1,   272,   192,    -1,   275,   289,    -1,
     197,   292,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,   315,    -1,    -1,    -1,    -1,    -1,
     272,    -1,    -1,   275,    -1,    -1,    -1,   234,    -1,    -1,
      -1,   381,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
     292,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   310,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     381,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,   442,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   381,
      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,
      -1,   491,   492,   493,   494,   495,   496,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,
     491,   492,   493,   494,   495,   496,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   484,    -1,    -1,   487,   488,   489,    35,   491,
     492,   493,   494,   495,   496,    -1,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    75,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,    -1,
      38,    -1,    -1,    -1,    -1,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
      -1,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    -1,    -1,    -1,   171,    -1,    -1,    50,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,   219,   220,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    -1,   176,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   192,   272,    -1,    -1,   275,   197,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,   289,   166,    -1,   292,    -1,    -1,    -1,    -1,
      -1,   219,   220,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,   192,
      -1,    -1,    -1,    -1,   197,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    35,    -1,   272,    38,    -1,   275,    -1,    -1,
      43,   234,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,    -1,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,   484,   275,    -1,
     487,   488,   489,   176,   491,   492,   493,   494,   495,   496,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,   381,   192,
      -1,    -1,    -1,    -1,   197,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   219,   220,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   234,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,
     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,
      -1,    -1,   275,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,   292,
      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,    -1,    -1,    -1,   414,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
      -1,     8,    -1,    -1,    11,    -1,    -1,    43,    15,    16,
      17,    18,    19,    20,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,   484,   381,    75,
     487,   488,   489,    50,   491,   492,   493,   494,   495,   496,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     176,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,
     493,   494,   495,   496,    -1,    -1,   192,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   219,   220,   192,    -1,    -1,    -1,    -1,
     197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   219,   220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   234,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   272,    -1,    -1,   275,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   289,    -1,    -1,   292,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,
      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,
     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,    -1,     5,    -1,    -1,   484,    -1,    -1,
     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
     200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    63,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,   175,   176,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,    -1,   273,   274,   275,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    76,
      -1,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    96,
      97,    98,    99,   100,   101,   102,   103,    -1,    -1,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,   170,    -1,   172,   173,   174,   175,   176,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,   232,   233,   234,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,    -1,   273,   274,   275,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
     287,    -1,   289,   290,   291,    -1,    -1,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,   408,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      76,    -1,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      96,    97,    98,    99,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,   170,    -1,   172,   173,   174,   175,
     176,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,   232,   233,   234,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,   408,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
     175,   176,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,    -1,   273,   274,
     275,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    -1,    77,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,   168,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
     434,   435,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,   168,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,   234,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,   434,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,    41,
      -1,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
      52,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    -1,    -1,    76,    -1,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    96,    97,    98,    99,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
      -1,   153,   154,   155,   156,   157,    -1,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,   170,    -1,
     172,   173,   174,   175,   176,   177,    -1,   179,    -1,    -1,
      -1,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
     232,   233,   234,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,    -1,
      -1,   273,   274,   275,   276,    -1,    -1,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,    -1,   296,   297,   298,    -1,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,    -1,   314,   315,    -1,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,    -1,
     402,    -1,   404,   405,    -1,   407,   408,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,   433,    -1,   435,   436,   437,   438,   439,   440,   441,
      -1,   443,   444,   445,   446,   447,    -1,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
     482,   483,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    33,    34,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,   288,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,   288,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    46,    47,    48,    49,    -1,
      51,    52,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    -1,    -1,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    96,    97,    98,    99,   100,
     101,   102,   103,    -1,    -1,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,    -1,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
      -1,   172,   173,   174,    -1,   176,   177,    -1,   179,    -1,
      -1,    -1,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,   232,   233,   234,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
      -1,    -1,   273,   274,   275,   276,    -1,    -1,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,    -1,   296,   297,   298,    -1,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,    -1,   314,   315,    -1,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
      -1,   402,    -1,   404,   405,    -1,   407,   408,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
      -1,   422,    -1,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,   433,    -1,   435,   436,   437,   438,   439,   440,
     441,    -1,   443,   444,   445,   446,   447,    -1,   449,    -1,
     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,   482,   483,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    46,    47,    48,    49,    -1,    51,    52,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    -1,
      -1,    76,    -1,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    96,    97,    98,    99,   100,   101,   102,   103,    -1,
      -1,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,    -1,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,   170,    -1,   172,   173,   174,
      -1,   176,   177,    -1,   179,    -1,    -1,    -1,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,   232,   233,   234,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,    -1,    -1,   273,   274,
     275,   276,    -1,    -1,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
      -1,   296,   297,   298,    -1,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,    -1,   314,
     315,    -1,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,    -1,   402,    -1,   404,
     405,    -1,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,   433,    -1,
     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,
     445,   446,   447,    -1,   449,    -1,   451,   452,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    52,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    96,    97,    98,
      99,   100,   101,   102,   103,    -1,    -1,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,    -1,   153,   154,   155,   156,   157,    -1,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,   170,    -1,   172,   173,   174,    -1,   176,   177,    -1,
     179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,   232,   233,   234,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,    -1,    -1,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,    -1,   296,   297,   298,
      -1,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,    -1,   314,   315,    -1,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,    -1,   402,    -1,   404,   405,    -1,   407,   408,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,   433,    -1,   435,   436,   437,   438,
     439,   440,   441,    -1,   443,   444,   445,   446,   447,    -1,
     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
       3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,   480,   481,   482,   483,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,   406,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    38,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    38,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,   376,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    -1,    47,    48,    49,    50,    51,    -1,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      74,    -1,    -1,    -1,    78,    79,    80,    81,    82,    83,
      -1,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,
     174,   175,    -1,   177,    -1,   179,    -1,   181,   182,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,    -1,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,    -1,   207,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,    -1,   233,
      -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,   271,    -1,   273,
     274,    -1,   276,    -1,   278,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,   295,    -1,   297,    -1,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,   313,
     314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,    -1,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,    -1,   376,   377,   378,   379,   380,    -1,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,    -1,
     404,   405,    -1,   407,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,    -1,    -1,   443,
     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,
      23,    24,    25,    26,    27,    28,    -1,    30,    31,    32,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
      43,    44,    45,    -1,    47,    48,    49,    50,    51,    -1,
      53,    54,    -1,    56,    57,    58,    59,    60,    61,    -1,
      -1,    64,    65,    66,    67,    68,    -1,    70,    71,    72,
      73,    74,    -1,    -1,    -1,    78,    79,    80,    81,    82,
      83,    -1,    85,    86,    87,    -1,    89,    90,    91,    92,
      93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,   127,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,    -1,   162,
     163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,    -1,
     173,   174,   175,    -1,   177,    -1,   179,    -1,   181,   182,
     183,    -1,   185,   186,   187,   188,   189,   190,   191,    -1,
     193,   194,   195,   196,    -1,   198,   199,   200,   201,   202,
     203,    -1,   205,    -1,   207,   208,   209,   210,   211,   212,
     213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,    -1,
     223,   224,   225,   226,   227,   228,    -1,    -1,   231,    -1,
     233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,   271,    -1,
     273,   274,    -1,   276,    -1,   278,   279,   280,   281,   282,
     283,    -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,
      -1,   294,   295,    -1,   297,    -1,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,    -1,   321,   322,
     323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
     333,   334,   335,    -1,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
      -1,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,
     373,   374,    -1,   376,   377,   378,   379,   380,    -1,   382,
     383,   384,   385,    -1,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,    -1,   407,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,    -1,    -1,   419,   420,   421,   422,
     423,    -1,   425,   426,   427,   428,   429,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,   440,    -1,    -1,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,
     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      21,    22,    23,    24,    25,    26,    27,    28,    -1,    30,
      31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,
      41,    -1,    43,    44,    45,    -1,    47,    48,    49,    50,
      51,    -1,    53,    54,    -1,    56,    57,    58,    59,    60,
      61,    -1,    -1,    64,    65,    66,    67,    68,    -1,    70,
      71,    72,    73,    74,    -1,    -1,    -1,    78,    79,    80,
      81,    82,    83,    -1,    85,    86,    87,    -1,    89,    90,
      91,    92,    93,    94,    -1,    -1,    97,    98,    99,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,    -1,   160,
      -1,   162,   163,   164,   165,    -1,   167,    -1,   169,    -1,
      -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,
     181,   182,   183,    -1,   185,   186,   187,   188,   189,   190,
     191,    -1,   193,   194,   195,   196,    -1,   198,   199,   200,
     201,   202,   203,    -1,   205,    -1,   207,   208,   209,   210,
     211,   212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,
     221,    -1,   223,   224,   225,   226,   227,   228,    -1,    -1,
     231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,    -1,   267,   268,   269,   270,
     271,    -1,   273,   274,    -1,   276,    -1,   278,   279,   280,
     281,   282,   283,    -1,   285,   286,    -1,    -1,   289,   290,
     291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,    -1,
     321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
     331,   332,   333,   334,   335,    -1,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
     351,   352,    -1,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,
     371,   372,   373,   374,    -1,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,    -1,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,    -1,   404,   405,    -1,   407,    -1,   409,   410,
     411,   412,   413,    -1,   415,   416,    -1,    -1,   419,   420,
     421,   422,   423,    -1,   425,   426,   427,   428,   429,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
      -1,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,
     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,
      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    21,    22,    23,    24,    25,    26,    27,    28,    -1,
      30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      40,    41,    -1,    43,    44,    45,    -1,    47,    48,    49,
      50,    51,    -1,    53,    54,    -1,    56,    57,    58,    59,
      60,    61,    -1,    -1,    64,    65,    66,    67,    68,    -1,
      70,    71,    72,    73,    74,    -1,    -1,    -1,    78,    79,
      80,    81,    82,    83,    -1,    85,    86,    87,    -1,    89,
      90,    91,    92,    93,    94,    -1,    -1,    97,    98,    99,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,    -1,   162,   163,   164,   165,    -1,   167,    -1,   169,
      -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,   179,
      -1,   181,   182,   183,    -1,   185,   186,   187,   188,   189,
     190,   191,    -1,   193,   194,   195,   196,    -1,   198,   199,
     200,   201,   202,   203,    -1,   205,    -1,   207,   208,   209,
     210,   211,   212,   213,   214,    -1,   216,    -1,   218,    -1,
      -1,   221,    -1,   223,   224,   225,   226,   227,   228,    -1,
      -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,    -1,
      -1,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,    -1,   267,   268,   269,
     270,   271,    -1,   273,   274,    -1,   276,    -1,   278,   279,
     280,   281,   282,   283,    -1,   285,   286,    -1,    -1,   289,
     290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
      -1,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
     330,   331,   332,   333,   334,   335,    -1,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
      -1,   351,   352,    -1,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,    -1,
     370,   371,   372,   373,   374,    -1,   376,   377,   378,   379,
     380,    -1,   382,   383,   384,   385,    -1,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,    -1,   404,   405,    -1,   407,    -1,   409,
     410,   411,   412,   413,    -1,   415,   416,    -1,    -1,   419,
     420,   421,   422,   423,    -1,   425,   426,   427,   428,   429,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,    -1,    -1,   443,   444,   445,   446,   447,   448,   449,
      -1,   451,    -1,   453,   454,   455,   456,   457,    -1,    -1,
     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    21,    22,    23,    24,    25,    26,    27,    28,
      -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    41,    -1,    43,    44,    45,    -1,    47,    48,
      49,    50,    51,    -1,    53,    54,    -1,    56,    57,    58,
      59,    60,    61,    -1,    -1,    64,    65,    66,    67,    68,
      -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,    78,
      79,    80,    81,    82,    83,    -1,    85,    86,    87,    -1,
      89,    90,    91,    92,    93,    94,    -1,    -1,    97,    98,
      99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,   127,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,    -1,   162,   163,   164,   165,    -1,   167,    -1,
     169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,    -1,
     179,    -1,   181,   182,   183,    -1,   185,   186,   187,   188,
     189,   190,   191,    -1,   193,   194,   195,   196,    -1,   198,
     199,   200,   201,   202,   203,    -1,   205,    -1,   207,   208,
     209,   210,   211,   212,   213,   214,    -1,   216,    -1,   218,
      -1,    -1,   221,    -1,   223,   224,   225,   226,   227,   228,
      -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,   238,
      -1,    -1,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,    -1,   273,   274,    -1,   276,    -1,   278,
     279,   280,   281,   282,   283,    -1,   285,   286,    -1,    -1,
     289,   290,   291,    -1,    -1,   294,   295,    -1,   297,    -1,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,    -1,   321,   322,   323,   324,   325,   326,    -1,   328,
     329,   330,   331,   332,   333,   334,   335,    -1,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,    -1,   351,   352,    -1,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
      -1,   370,   371,   372,   373,   374,    -1,   376,   377,   378,
     379,   380,    -1,   382,   383,   384,   385,    -1,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,    -1,   404,   405,    -1,   407,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,    -1,    -1,
     419,   420,   421,   422,   423,    -1,   425,   426,   427,   428,
     429,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,    -1,    -1,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,
      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      38,    -1,    40,    41,    -1,    43,    44,    45,    -1,    47,
      48,    49,    50,    51,    -1,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    74,    -1,    -1,    -1,
      78,    79,    80,    81,    82,    83,    -1,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    -1,    97,
      98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,   177,
      -1,   179,    -1,   181,   182,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,    -1,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,    -1,   207,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,    -1,    -1,   221,    -1,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,    -1,   267,
     268,   269,   270,   271,    -1,   273,   274,    -1,   276,    -1,
     278,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,   297,
      -1,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,    -1,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,    -1,    -1,   377,
     378,   379,   380,    -1,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,    -1,   404,   405,    -1,   407,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,   421,   422,   423,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,    -1,    -1,   443,   444,   445,   446,   447,
     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,    26,
      27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    -1,    53,    54,    -1,    56,
      57,    58,    59,    60,    61,    -1,    -1,    64,    65,    66,
      67,    68,    -1,    70,    71,    72,    73,    74,    -1,    -1,
      -1,    78,    79,    80,    81,    82,    83,    -1,    85,    86,
      87,    -1,    89,    90,    91,    92,    93,    94,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
     127,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,    -1,   160,    -1,   162,   163,   164,   165,    -1,
     167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,    -1,
     177,    -1,   179,    -1,   181,   182,   183,    -1,   185,   186,
     187,   188,   189,   190,   191,    -1,   193,   194,   195,   196,
      -1,   198,   199,   200,   201,   202,   203,    -1,   205,    -1,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,   226,
     227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,   236,
     237,   238,    -1,    -1,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,    -1,
     267,   268,   269,   270,   271,    -1,   273,   274,    -1,   276,
      -1,   278,   279,   280,   281,   282,   283,    -1,   285,   286,
      -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,    -1,
     297,    -1,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,    -1,   321,   322,   323,   324,   325,   326,
      -1,   328,   329,   330,   331,   332,   333,   334,   335,    -1,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,    -1,   351,   352,    -1,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,    -1,   370,   371,   372,   373,   374,    -1,   376,
     377,   378,   379,   380,    -1,   382,   383,   384,   385,    -1,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
     407,    -1,   409,   410,   411,   412,   413,    -1,   415,   416,
      -1,    -1,   419,   420,   421,   422,   423,    -1,   425,   426,
     427,   428,   429,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,   440,    -1,    -1,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,
     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,    25,
      26,    27,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,    45,
      -1,    47,    48,    49,    50,    51,    -1,    53,    54,    -1,
      56,    57,    58,    59,    60,    61,    -1,    -1,    64,    65,
      66,    67,    68,    -1,    70,    71,    72,    73,    74,    -1,
      -1,    -1,    78,    79,    80,    81,    82,    83,    -1,    85,
      86,    87,    -1,    89,    90,    91,    92,    93,    94,    -1,
      -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,   127,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,    -1,   162,   163,   164,   165,
      -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,   175,
      -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,   185,
     186,   187,   188,   189,   190,   191,    -1,   193,   194,   195,
     196,    -1,   198,   199,   200,   201,   202,   203,    -1,   205,
      -1,   207,   208,   209,   210,   211,   212,   213,   214,    -1,
     216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,    -1,
     236,   237,   238,    -1,    -1,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,    -1,   273,   274,    -1,
     276,    -1,   278,   279,   280,   281,   282,   283,    -1,   285,
     286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,   295,
      -1,   297,    -1,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,    -1,   321,   322,   323,   324,   325,
     326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
      -1,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,    -1,   351,   352,    -1,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,    -1,   370,   371,   372,   373,   374,    -1,
     376,   377,   378,   379,   380,    -1,   382,   383,   384,   385,
      -1,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
      -1,   407,    -1,   409,   410,   411,   412,   413,    -1,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,    -1,   425,
     426,   427,   428,   429,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,    -1,    -1,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,
     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,    24,
      25,    26,    27,    28,    -1,    30,    31,    32,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    44,
      45,    -1,    47,    48,    49,    50,    51,    -1,    53,    54,
      -1,    56,    57,    58,    59,    60,    61,    -1,    -1,    64,
      65,    66,    67,    68,    -1,    70,    71,    72,    73,    74,
      -1,    -1,    -1,    78,    79,    80,    81,    82,    83,    -1,
      85,    86,    87,    -1,    89,    90,    91,    92,    93,    94,
      -1,    -1,    97,    98,    99,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,    -1,   162,   163,   164,
     165,    -1,   167,    -1,   169,    -1,    -1,    -1,   173,   174,
     175,    -1,   177,    -1,   179,    -1,   181,   182,   183,    -1,
     185,   186,   187,   188,   189,   190,   191,    -1,   193,   194,
     195,   196,    -1,   198,   199,   200,   201,   202,   203,    -1,
     205,    -1,   207,   208,   209,   210,   211,   212,   213,   214,
      -1,   216,    -1,   218,    -1,    -1,   221,    -1,   223,   224,
     225,   226,   227,   228,    -1,    -1,   231,    -1,   233,    -1,
      -1,   236,   237,   238,    -1,    -1,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,    -1,   273,   274,
      -1,   276,    -1,   278,   279,   280,   281,   282,   283,    -1,
     285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,   294,
     295,    -1,   297,    -1,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,    -1,   321,   322,   323,   324,
     325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
     335,    -1,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,    -1,   351,   352,    -1,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
      -1,   376,   377,   378,   379,   380,    -1,   382,   383,   384,
     385,    -1,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
     405,    -1,   407,    -1,   409,   410,   411,   412,   413,    -1,
     415,   416,    -1,    -1,   419,   420,   421,   422,   423,    -1,
     425,   426,   427,   428,   429,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,   440,    -1,    -1,   443,   444,
     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,
     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    21,    22,    23,
      24,    25,    26,    27,    28,    -1,    30,    31,    32,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
      44,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
      54,    -1,    56,    57,    58,    59,    60,    61,    -1,    -1,
      64,    65,    66,    67,    68,    -1,    70,    71,    72,    73,
      -1,    -1,    76,    -1,    78,    79,    80,    81,    82,    83,
      84,    85,    86,    87,    -1,    89,    90,    91,    92,    93,
      94,    -1,    96,    97,    98,    99,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,    -1,    -1,   160,    -1,   162,   163,
     164,   165,    -1,   167,    -1,   169,   170,    -1,   172,   173,
     174,   175,   176,   177,    -1,   179,    -1,    -1,    -1,   183,
      -1,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,    -1,   198,   199,   200,   201,   202,   203,
      -1,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,    -1,    -1,   231,   232,   233,
     234,    -1,   236,   237,   238,    -1,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,    -1,    -1,   279,   280,   281,   282,   283,
      -1,   285,   286,    -1,    -1,   289,   290,   291,    -1,    -1,
     294,    -1,   296,   297,   298,    -1,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,    -1,   311,   312,    -1,
     314,   315,    -1,   317,   318,   319,    -1,   321,   322,   323,
     324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
     334,   335,    -1,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,    -1,   351,   352,   353,
     354,   355,   356,    -1,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,    -1,   378,   379,   380,   381,   382,   383,
     384,   385,    -1,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,    -1,   402,    -1,
     404,   405,    -1,   407,   408,   409,   410,   411,   412,   413,
      -1,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,    -1,   443,
     444,   445,   446,   447,    -1,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,
     464,   465,   466,   467,   468,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,
      -1,    -1,    -1,    21,    22,    23,    24,    25,    26,    27,
      28,    -1,    30,    31,    32,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    41,    -1,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    52,    53,    54,    -1,    56,    57,
      58,    59,    60,    61,    -1,    -1,    64,    65,    66,    67,
      68,    -1,    70,    71,    72,    73,    -1,    -1,    76,    -1,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      -1,    89,    90,    91,    92,    93,    94,    -1,    96,    97,
      98,    99,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,   127,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,    -1,   153,   154,   155,   156,   157,
      -1,    -1,   160,    -1,   162,   163,   164,   165,    -1,   167,
      -1,   169,   170,    -1,   172,   173,   174,    -1,   176,   177,
      -1,   179,    -1,    -1,    -1,   183,    -1,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,    -1,
     198,   199,   200,   201,   202,   203,    -1,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,    -1,    -1,   231,   232,   233,   234,    -1,   236,   237,
     238,    -1,    -1,   241,   242,   243,   244,   245,    -1,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,    -1,    -1,   273,   274,   275,   276,    -1,
      -1,   279,   280,   281,   282,   283,    -1,   285,   286,    -1,
      -1,   289,   290,   291,    -1,    -1,   294,    -1,   296,   297,
     298,    -1,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,    -1,   311,   312,    -1,   314,   315,    -1,   317,
     318,   319,    -1,   321,   322,   323,   324,   325,   326,    -1,
     328,   329,   330,   331,   332,   333,   334,   335,    -1,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,    -1,   351,   352,   353,   354,   355,   356,    -1,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,    -1,   370,   371,   372,   373,   374,   375,   376,    -1,
     378,   379,   380,   381,   382,   383,   384,   385,    -1,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,    -1,   400,    -1,   402,    -1,   404,   405,    -1,   407,
     408,   409,   410,   411,   412,   413,    -1,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,
      -1,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,
     468,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,   482,   483,    -1,    -1,    -1,    21,
      22,    23,    24,    25,    26,    27,    28,    -1,    30,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    40,    41,
      -1,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      -1,    53,    54,    -1,    56,    57,    58,    59,    60,    61,
      -1,    -1,    64,    65,    66,    67,    68,    -1,    70,    71,
      72,    73,    74,    -1,    -1,    -1,    78,    79,    80,    81,
      82,    83,    -1,    85,    86,    87,    -1,    89,    90,    91,
      92,    93,    94,    -1,    -1,    97,    98,    99,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,    -1,
     162,   163,   164,   165,    -1,   167,    -1,   169,    -1,    -1,
      -1,   173,   174,   175,    -1,   177,    -1,   179,    -1,   181,
     182,   183,    -1,   185,   186,   187,   188,   189,   190,   191,
      -1,   193,   194,   195,   196,    -1,   198,   199,   200,   201,
     202,   203,    -1,   205,    -1,   207,   208,   209,   210,   211,
     212,   213,   214,    -1,   216,    -1,   218,    -1,    -1,   221,
      -1,   223,   224,   225,   226,   227,   228,    -1,    -1,   231,
      -1,   233,    -1,    -1,   236,   237,   238,    -1,    -1,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,   269,   270,   271,
      -1,   273,   274,    -1,   276,    -1,   278,   279,   280,   281,
     282,   283,    -1,   285,   286,    -1,    -1,   289,   290,   291,
      -1,    -1,   294,   295,    -1,   297,    -1,   299,   300,   301,
     302,   303,   304,   305,    -1,   307,   308,   309,    -1,   311,
     312,   313,   314,   315,   316,   317,   318,   319,    -1,   321,
     322,   323,   324,   325,   326,    -1,   328,    -1,   330,   331,
     332,   333,   334,   335,    -1,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,    -1,   351,
     352,    -1,   354,   355,   356,   357,    -1,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,
     372,   373,   374,    -1,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,    -1,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,   405,    -1,   407,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,    -1,    -1,   419,   420,   421,
     422,   423,    -1,   425,   426,   427,   428,   429,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,    -1,
      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,
      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,
      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,    21,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    31,    31,    33,    34,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    70,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    81,    81,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    93,    93,    95,    95,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   113,   113,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   127,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   137,   137,
      -1,    -1,    -1,    -1,   143,   143,    -1,    -1,    -1,    -1,
      -1,    -1,   151,   151,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,   167,
      -1,    -1,   171,   171,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   211,   211,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   314,   314,    -1,   317,   317,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   346,   346,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   355,   355,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     369,   369,    -1,    -1,    -1,    -1,    -1,   376,   376,    -1,
      -1,   380,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   390,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   402,   402,    -1,    -1,   406,   406,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,   425,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   443,   443,    -1,    -1,    -1,   448,
     448,    -1,    -1,   452,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   462,   462,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,   486,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   500,   500
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    21,    31,    33,    34,    44,    49,    58,    70,    81,
      93,    95,   113,   127,   128,   137,   143,   151,   153,   154,
     167,   171,   196,   211,   237,   314,   317,   346,   355,   369,
     376,   380,   390,   402,   406,   425,   440,   443,   448,   462,
     486,   500,   512,   513,   514,   515,   516,   523,   534,   535,
     536,   541,   542,   544,   561,   609,   619,   622,   625,   627,
     630,   631,   635,   642,   644,   651,   655,   656,   657,   664,
     668,   683,   685,   686,   689,   691,   692,   693,   694,   696,
     697,   749,   750,   898,   900,   901,   902,   907,   910,   916,
     917,   920,   419,   465,   899,   200,   362,   370,   406,   454,
     110,   537,   899,     3,    21,    22,    23,    24,    25,    26,
      27,    28,    30,    31,    32,    40,    41,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    56,
      57,    58,    59,    60,    61,    64,    65,    66,    67,    68,
      70,    71,    72,    73,    74,    76,    78,    79,    80,    81,
      82,    83,    84,    85,    86,    87,    89,    90,    91,    92,
      93,    94,    96,    97,    98,    99,   100,   101,   102,   103,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   118,   120,   121,   122,   123,   124,   125,   127,   128,
     129,   130,   131,   134,   135,   136,   137,   138,   140,   141,
     142,   144,   145,   146,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   160,   162,   163,   164,   165,
     167,   169,   170,   172,   173,   174,   175,   176,   177,   179,
     181,   182,   183,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   198,   199,   200,   201,   202,
     203,   205,   206,   207,   208,   209,   210,   211,   212,   213,
     214,   216,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   231,   232,   233,   234,   236,   237,   238,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   273,   274,   275,   276,   278,   279,   280,   281,   282,
     283,   285,   286,   289,   290,   291,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   321,   322,   323,   324,   325,   326,   328,   329,   330,
     331,   332,   333,   334,   335,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   404,   405,
     407,   408,   409,   410,   411,   412,   413,   415,   416,   419,
     420,   421,   422,   423,   425,   426,   427,   428,   429,   430,
     431,   432,   435,   436,   437,   438,   439,   440,   441,   443,
     444,   445,   446,   447,   448,   449,   451,   452,   453,   454,
     455,   456,   457,   460,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   612,   613,   614,   809,   882,
     886,   889,     3,   175,   246,   399,   543,   612,   886,   899,
      52,   500,   556,   177,   238,   292,   362,   410,   412,   428,
     434,   437,   607,   663,     5,    29,   317,   880,   886,   887,
       3,   110,   539,   540,    23,    76,    92,   110,   146,   156,
     168,   173,   200,   245,   249,   312,   326,   359,   362,   370,
     373,   392,   406,   413,   422,   428,   454,   636,   637,   640,
     899,   880,   452,   500,   515,   516,   523,   541,   542,   544,
     561,   609,   619,   622,   625,   627,   630,   631,   635,   642,
     647,   651,   657,   664,   683,   685,   686,   689,   691,   898,
     900,   902,   907,   910,   916,   920,   110,    70,   211,    63,
      74,    76,   100,   101,   102,   103,   104,   105,   106,   158,
     229,   239,   240,   278,   288,   299,   313,   358,   375,   401,
     421,   423,   427,   441,   448,   500,   692,   750,   752,   754,
     755,   762,   763,   809,   811,   812,   877,   886,   887,   110,
       5,   684,   885,   886,   684,   886,   880,    29,   415,   419,
     886,   908,   909,   918,   899,    29,   132,   705,   706,   177,
     238,   362,   374,   415,   911,   912,   918,   899,   691,   697,
     886,   919,   762,   886,   406,   702,   877,   172,   500,   904,
     500,   334,   698,   699,   880,   698,   692,   693,     0,   503,
     452,   645,   122,   210,   439,   147,   215,   293,   433,   708,
     709,   692,   694,   696,   504,    29,   415,   419,   691,   919,
     190,   877,   880,   190,   877,   190,   762,   190,   877,   885,
     500,   498,   502,   861,   863,   691,   877,   410,   412,   410,
     412,   344,   190,   877,   877,   173,   245,   334,   370,   406,
     454,   620,   200,    29,   880,   190,   638,   886,   891,   504,
     251,   422,   109,   406,   406,   454,   365,     3,    46,    51,
      52,    53,    54,    66,    67,    76,    78,    84,    96,   100,
     101,   102,   103,   106,   114,   115,   136,   164,   170,   172,
     176,   190,   192,   206,   213,   214,   216,   219,   220,   222,
     232,   234,   246,   265,   266,   267,   275,   280,   296,   298,
     331,   353,   357,   375,   377,   381,   384,   399,   408,   415,
     416,   427,   433,   441,   449,   452,   612,   615,   641,   773,
     775,   777,   779,   781,   783,   785,   786,   787,   789,   790,
     791,   793,   794,   890,   190,   638,   190,   878,   880,   190,
     880,   500,   643,   647,     3,    46,    50,    51,    52,    53,
      54,    66,    67,    74,    76,    78,    84,    96,   100,   101,
     102,   103,   106,   114,   115,   152,   158,   164,   170,   172,
     175,   176,   181,   182,   192,   206,   207,   213,   214,   216,
     219,   220,   222,   232,   234,   246,   265,   266,   267,   271,
     275,   278,   280,   295,   296,   298,   299,   313,   316,   331,
     353,   357,   375,   377,   381,   384,   399,   401,   408,   415,
     416,   421,   423,   427,   441,   448,   449,   452,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   612,
     616,   648,   650,   651,   653,   654,   645,   885,   886,   543,
     684,   500,   500,   166,   500,   500,   500,   692,   763,   500,
     500,   500,   500,   877,   500,   500,   171,   500,   500,   500,
     500,   692,   750,   754,   755,    38,   756,   757,   886,   756,
     369,   504,   695,    96,   172,   206,   222,   232,   266,   353,
     759,   757,    38,   756,   758,   886,   486,   767,   493,   863,
     885,   489,   500,   500,   687,   483,   221,   502,   287,     4,
       6,     7,     8,     9,    10,    37,    51,    53,    54,    62,
      66,    67,    78,   114,   115,   117,   152,   159,   164,   181,
     182,   213,   214,   216,   265,   267,   272,   277,   280,   289,
     331,   357,   384,   415,   416,   424,   449,   484,   491,   492,
     493,   498,   500,   505,   506,   507,   508,   692,   739,   778,
     781,   784,   785,   786,   788,   789,   790,   793,   794,   805,
     807,   808,   809,   810,   812,   813,   827,   828,   835,   855,
     860,   867,   868,   869,   882,   883,   884,   885,   886,   866,
     868,   911,   911,   885,   911,   483,   171,   417,   489,   502,
     863,   632,   762,     3,   170,   172,   452,   651,   903,   905,
     170,   906,   805,   839,   840,   886,   698,   504,   500,   893,
     501,   501,   514,   877,   171,   217,   632,    29,   132,   703,
     703,    56,   703,   161,   166,   235,   284,   714,   716,   717,
     742,   744,   745,   746,   708,   709,   500,   483,   221,   152,
      25,    31,   137,   291,   342,   346,   376,   445,   528,   531,
     532,   342,   152,    38,    57,   108,   199,   250,   258,   270,
     301,   342,   348,   370,   376,   390,   517,   520,   531,   152,
     342,   376,   531,   152,   342,   376,   531,    38,   538,     3,
      29,    46,    52,    76,    78,    84,    96,   100,   101,   102,
     103,   106,   132,   170,   172,   175,   176,   192,   206,   219,
     220,   222,   232,   234,   246,   266,   275,   296,   298,   353,
     375,   381,   399,   408,   427,   441,   450,   452,   493,   501,
     612,   617,   805,   842,   843,   888,   894,   805,   862,     3,
      29,    33,    34,    35,    36,    37,    38,    39,    42,    55,
      62,    63,    69,    75,    77,    88,    95,   104,   105,   117,
     119,   126,   132,   133,   139,   143,   147,   159,   161,   166,
     168,   171,   178,   180,   184,   197,   204,   215,   217,   229,
     230,   235,   239,   240,   272,   277,   284,   287,   288,   292,
     293,   310,   320,   327,   336,   350,   369,   386,   403,   406,
     414,   417,   418,   424,   433,   434,   442,   448,   450,   458,
     459,   461,   462,   612,   616,   618,   881,   895,   861,   501,
     500,   596,   607,   272,   623,    38,   454,   190,   877,   190,
     611,   877,   190,   877,   190,   877,    84,   660,   152,   504,
     502,   892,   539,   466,    85,   129,   304,   411,   451,   792,
     792,   792,   500,   780,   780,   316,   500,   782,   152,   500,
      66,    67,   792,   780,   777,   464,   486,   500,   795,   500,
     795,   500,    60,   349,   504,   639,   500,    37,   776,   500,
     111,   112,   187,   188,   252,   253,   254,   255,   256,   257,
     260,   261,   366,   367,   480,   481,   500,   796,   797,   798,
     799,   800,   801,   802,   803,   804,   780,   152,   639,   152,
     504,   639,   152,   287,   840,   501,   504,     4,   159,   287,
     424,   491,   492,   519,   522,   646,   648,   649,   652,   884,
     885,   647,   500,   551,   555,   417,   805,   840,   500,   884,
     884,     3,   796,   797,   798,   799,   800,   801,   802,   803,
     845,   846,   885,   757,   758,   884,   884,   805,   877,   805,
     847,   491,   492,   806,   807,   828,   835,   849,   500,   805,
     839,   850,   805,    55,   171,   230,   418,   805,   840,   853,
     805,   501,   887,   408,   722,   723,   500,   723,   705,   706,
     754,   217,   700,   222,   296,   760,   754,   760,   222,   759,
     760,   222,   723,   500,   887,   723,   500,   294,   519,   652,
     913,   915,   842,   775,   844,    38,   233,   886,   500,   498,
     692,   805,   859,   500,   692,   805,   500,   500,   805,   805,
     805,   148,   870,   871,   805,   840,   841,   692,   805,   839,
       9,     3,   897,   829,   830,   831,   887,   863,   500,   885,
     500,   884,   885,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    35,    38,    43,    50,    75,   176,   192,   197,
     219,   220,   234,   272,   275,   289,   292,   381,   484,   487,
     488,   489,   491,   492,   493,   494,   495,   496,   833,   834,
     835,   837,   864,   463,   814,   298,   805,   504,   700,   500,
     885,   864,   502,   863,   700,     3,   117,   238,   519,   794,
     885,   914,    99,   117,   915,   117,   915,   886,    38,   886,
     501,   504,   645,   504,   501,   699,   878,   879,    38,   893,
     632,   666,   877,   376,   694,   694,    29,   493,   710,   711,
     805,    56,   694,   704,   163,   269,   730,   224,   270,   330,
     379,   439,     4,     9,    29,   725,   805,   491,   492,   726,
     727,   805,   807,   742,   743,   717,   716,   714,   715,   166,
     745,   282,   747,   714,   742,   840,   233,   877,    69,    77,
      88,   168,   190,   320,   434,   578,   588,   603,   886,    77,
      88,   690,    88,   690,   500,   417,   500,   576,   244,   437,
     576,    88,   504,   417,   877,   777,   519,    56,   521,   519,
     519,   108,   250,   258,    56,   417,   462,   486,   518,   263,
     362,   518,   520,   762,    88,   417,   690,   362,   877,   417,
     362,   886,   551,   842,   842,   843,   501,   504,   708,   709,
      13,    14,   499,   510,   417,   595,   600,   886,   462,   554,
     334,   406,   454,   620,   152,    95,   561,   624,   625,   657,
     920,   144,   775,   877,   272,   517,   626,   272,    38,   500,
     596,   272,   596,   272,   500,   621,   190,   590,   661,   886,
     638,   891,   881,   502,   500,   841,   884,   641,   844,   792,
     792,    37,   776,   415,   415,   884,   884,   772,   886,   775,
     772,   498,   498,   884,   884,   417,   417,   417,   417,   638,
     878,   880,   880,   891,   501,   647,   653,     4,   884,     4,
     884,   553,   560,   895,    52,    97,   123,   141,   145,   167,
     170,   185,   277,   285,   306,   328,   557,   885,    38,   501,
     805,   501,   501,   501,   171,   501,   501,   504,   501,   310,
     848,   501,   806,   806,    11,    15,    18,    19,    20,   197,
     219,   289,   487,   488,   489,   491,   492,   493,   494,   495,
     496,   835,   806,   501,   764,   765,   811,   166,   171,   851,
     852,   504,   501,    38,   853,   840,   853,   853,   171,   501,
      38,   756,   500,     4,     9,   718,   720,   721,   886,   879,
     868,   866,   177,   238,   406,   410,   412,   437,   701,   877,
     459,   768,   754,   287,   442,   761,   754,   222,   754,   769,
     770,   887,   500,   769,   887,   504,   501,   504,   501,   504,
     631,   664,   688,   691,   900,   840,   841,   458,   856,   857,
     493,   885,     8,    15,    18,    19,    20,   487,   488,   489,
     491,   492,   493,   494,   495,   496,   833,   838,   886,   501,
     840,   500,   886,   344,   875,   166,   499,   501,   504,   504,
     509,   510,   840,   805,   804,   804,   775,   805,   805,   805,
     805,   805,   805,   805,     5,   895,   896,   415,    42,   403,
     865,   891,   805,   805,   500,   692,   854,   132,   159,   272,
     277,   282,   424,   435,   805,   277,   500,   805,   417,    50,
     176,   192,   197,   234,   381,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,    29,    36,   386,   832,   861,
     180,   162,   815,   357,   500,   828,   869,   171,   751,   842,
     493,   751,   500,   885,   886,   877,   903,   534,   877,   805,
     504,   501,   500,   442,   634,   117,   300,   500,   665,   691,
      38,   500,   670,   679,   680,   682,   886,    39,   126,   712,
     712,   504,   442,   712,   263,   694,   357,   358,   491,   492,
     727,   729,   807,   379,   224,   288,   309,   309,   504,   495,
       4,   728,   884,   728,   357,   358,   729,   876,   877,   276,
     383,   748,   743,   715,   501,   342,   531,   500,   190,   588,
     880,   224,   272,   224,   442,   500,   581,   774,   775,   880,
     886,   190,   880,   190,   886,    25,   137,   376,   527,   530,
     572,   586,   895,   880,   580,   599,   895,   880,   528,   880,
     342,   376,   517,   531,   519,   891,   880,   519,   891,   880,
     519,   342,   376,   531,   880,   880,   880,   880,   342,   376,
     531,   880,   880,   708,   708,   708,   450,   843,   191,   347,
     707,   805,   805,   805,   862,   325,   550,   501,   504,   285,
     171,   417,   545,   454,   611,   877,   877,   877,   877,   292,
     607,   500,   692,   500,   152,   152,   151,   691,   234,   578,
     588,   591,   594,   604,   606,   886,   462,   464,   583,   152,
     462,   662,   152,   501,   842,    38,   272,   287,   881,   840,
     501,   501,   639,   501,   498,   483,   483,   501,   501,   501,
     504,   775,   501,   884,   499,   884,   501,   501,   797,   799,
     800,   801,   800,   801,   801,   639,   639,   287,   639,   501,
     504,   493,   500,   519,   552,   652,    38,   549,   885,   549,
     272,   277,   328,   549,    56,   549,   551,   775,   501,   805,
     805,   805,   851,   775,   806,   806,   806,   806,   806,   132,
     272,   282,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   501,   504,    38,   766,   805,   805,   852,   851,
     775,   501,   501,   501,   840,   775,   879,   309,   495,   309,
     358,   495,   500,   500,   501,   700,   410,   412,   410,   412,
     877,   702,   702,   702,   805,   180,   731,   805,   500,   754,
     761,   501,   504,   775,   769,   501,   913,   775,   501,   499,
     805,   139,   857,   858,   871,   501,   501,   502,   501,   879,
     500,   805,   872,   886,   805,   829,   805,   501,   501,   483,
     806,   806,   145,   840,   171,   132,   159,   277,   282,   424,
     435,   500,   145,   838,   805,   403,   865,   805,   854,   805,
     417,   500,   692,   500,   500,   155,   816,   752,   753,   768,
     708,   871,   768,   884,   804,   893,   688,   753,   459,   633,
     448,   405,   441,   674,   669,   678,   886,   287,   671,   886,
     675,   682,   504,   751,   489,   864,   485,   713,   713,   711,
     289,   833,   836,   713,     4,   884,   729,   288,   439,   726,
     504,   243,   417,   805,   272,   603,   500,   152,   500,   581,
     200,   600,   601,   562,    38,   175,   571,   597,   562,    25,
     137,   346,   348,   376,   524,   525,   526,   532,   533,   152,
     639,   152,   639,   572,   586,   572,   501,   504,   565,   885,
     501,   504,   489,   502,   417,   362,    88,   417,   690,   362,
     417,   417,   417,   362,   707,   707,   707,   843,   279,   279,
     501,   499,   393,   394,   559,   885,   595,   550,   877,    38,
     500,   596,   621,   623,   344,   406,   628,   629,   885,   600,
     877,   611,   877,   880,   462,   610,   877,   501,   504,   285,
     576,   285,   287,   575,   877,   576,    38,   877,   501,   406,
     805,   152,   877,   501,   776,   884,   795,   795,   776,   886,
     776,   499,   499,   891,   553,   547,   558,   652,   885,   885,
     277,   600,   493,   600,   885,   493,   600,   885,   501,   501,
     852,   171,   132,   282,   500,   767,   764,   500,   501,   501,
     501,   886,   718,   768,   702,   702,   702,   702,   877,   877,
     877,    56,   184,   740,   879,   770,    75,   771,   501,   414,
     805,   143,   875,   838,   501,   805,   872,   873,   874,    38,
     197,   501,   804,   805,    35,    35,   805,   501,   805,   171,
     500,   844,   805,   501,   145,   806,   806,   145,   145,   805,
     805,   709,   459,   805,   297,   820,   504,   731,   707,   875,
     731,   501,   501,   805,   350,   673,   447,   501,   504,   864,
      86,   673,   501,   504,   670,   633,   805,   163,   228,   500,
     713,   288,   877,   880,   501,   152,   601,   588,   601,   562,
     590,   504,   501,   119,   204,   270,   272,   587,   500,    32,
      56,   608,   597,    69,    75,    88,   117,   119,   204,   272,
     277,   320,   336,   434,   442,   567,   568,   582,   175,   117,
     189,   272,   576,   518,   109,   117,   175,   272,   392,   395,
     520,   576,   376,   526,   428,   880,   886,   530,   599,     3,
      46,    52,    76,    78,    84,    96,   100,   101,   102,   103,
     106,   170,   172,   175,   176,   192,   206,   219,   220,   222,
     232,   234,   246,   266,   271,   275,   289,   296,   298,   353,
     375,   377,   381,   399,   408,   427,   433,   441,   452,   491,
     492,   519,   563,   602,   612,   618,   775,   836,   885,   888,
     895,   880,   880,   880,   880,   880,   880,   880,   880,   880,
     880,   501,   501,   501,   708,   518,   559,   500,   691,   594,
     662,    38,   607,   190,   877,   501,   504,   501,   626,    38,
     500,   643,   109,   270,   585,   583,   591,    81,   596,   691,
     621,   691,   590,   442,   659,   499,   775,   639,   501,   504,
     600,   806,   171,   500,   844,   769,   501,   504,   501,   731,
     877,   877,   877,   877,    29,    98,   181,   356,   493,   500,
     732,   733,   734,   735,   736,   737,   738,   805,   805,   461,
     817,   501,   891,   805,   501,   504,   501,   886,   805,   807,
     805,   805,   805,   844,   501,   805,    35,    35,   805,   805,
     145,   501,   501,   805,   501,   500,   821,   886,   740,   501,
     740,   885,   867,   691,   300,   691,   669,   287,   500,   667,
     489,   682,   673,   838,   562,   588,   501,   501,   462,   593,
     120,   193,   202,   119,   444,   805,   117,    38,   500,   891,
     880,   806,   120,   193,   119,   277,   224,   877,   593,    83,
     608,   190,   277,   519,   805,   608,   277,   491,   492,   522,
     886,   775,   639,   639,   246,   399,   888,   892,   489,   417,
     417,   707,   551,   442,   546,   548,   600,   610,   501,    38,
     406,   805,   406,   272,   500,   885,   662,   151,   691,   594,
     610,   109,   149,   198,   575,   122,   137,   319,   662,   462,
     921,    38,   287,   658,   886,   500,   558,   806,   844,   501,
     501,     9,   343,   724,   740,   500,   378,   500,   501,   504,
     818,   819,   886,   327,   741,   872,   499,   190,   501,   805,
     805,   805,   501,   822,   886,   817,   885,   817,   504,   674,
      88,   500,   672,   681,   811,   886,   133,   805,   501,   336,
     593,   500,   584,   562,   501,   189,   500,   805,   272,   568,
     593,   596,   880,    38,   152,   771,   892,   495,   563,   880,
     880,   501,   518,   124,   501,   583,   691,   691,   877,   152,
      38,   880,   610,   501,    29,    80,    89,   118,   189,   201,
     392,   395,   579,   579,   358,   358,    38,    61,    69,   238,
     406,   805,   877,   681,   501,   501,   500,   817,   840,   500,
     840,   734,   504,    38,   805,   442,   719,   805,   306,   823,
     741,   741,   447,   880,   805,   501,   504,    75,   676,   676,
     273,   439,   877,   562,   589,   592,   895,   396,   456,   569,
     570,   500,   564,   805,   501,   248,   605,   189,   442,   529,
     495,   428,   551,   885,   662,   575,   921,   500,   877,   691,
     643,   583,   691,    69,   290,    69,   691,   659,   501,     9,
     741,   501,   733,   501,   819,   821,   360,   499,    56,   708,
     719,   719,   691,   501,   768,   672,   891,   677,   891,   677,
     376,   596,   501,   504,   489,   517,   501,   270,   577,   172,
     305,   382,   287,   573,   574,   598,   564,   805,   428,    38,
     500,   921,   610,   575,   921,   290,   290,   500,   662,   501,
     719,   501,   721,   839,   329,   358,   824,   676,   712,   712,
     680,   605,   592,   563,   501,   570,   202,   122,   439,   287,
     598,   287,   573,   691,   681,   768,    50,    99,   430,   805,
     825,   826,   825,   501,   677,   713,   713,   768,   574,    60,
     270,   349,   376,   566,   566,   921,   501,   826,   357,   165,
     315,   165,   315,   712,   562,    24,   117,   277,   662,    35,
     713,   768,   826
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   511,   512,   513,   513,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   514,   514,   514,   514,   514,   514,   514,
     514,   514,   514,   523,   523,   523,   523,   523,   523,   523,
     523,   524,   524,   525,   525,   526,   526,   526,   526,   527,
     527,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     528,   528,   528,   528,   528,   528,   528,   528,   528,   528,
     529,   529,   530,   530,   530,   530,   531,   531,   532,   533,
     533,   533,   630,   630,   630,   630,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   690,
     690,   664,   665,   665,   665,   665,   665,   666,   666,   667,
     667,   667,   668,   668,   669,   670,   670,   671,   671,   671,
     672,   672,   672,   673,   673,   674,   674,   675,   675,   676,
     676,   677,   677,   678,   678,   679,   679,   680,   680,   681,
     681,   682,   627,   627,   627,   628,   628,   629,   629,   685,
     685,   685,   625,   625,   626,   626,   642,   642,   642,   643,
     643,   516,   516,   517,   517,   518,   518,   518,   519,   519,
     519,   519,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   521,   521,   522,   522,
     522,   898,   898,   898,   898,   898,   898,   899,   899,   899,
     901,   561,   561,   561,   562,   562,   563,   563,   563,   563,
     563,   563,   564,   564,   565,   566,   566,   566,   566,   566,
     567,   567,   567,   567,   568,   568,   568,   568,   568,   568,
     568,   568,   569,   569,   570,   570,   571,   571,   571,   572,
     573,   574,   574,   574,   574,   574,   575,   575,   575,   575,
     576,   577,   577,   578,   578,   579,   579,   579,   579,   579,
     579,   579,   579,   580,   580,   581,   582,   582,   582,   582,
     583,   583,   583,   583,   584,   585,   585,   585,   586,   587,
     587,   587,   587,   587,   587,   588,   588,   589,   589,   590,
     591,   591,   591,   592,   592,   593,   593,   594,   594,   594,
     595,   596,   596,   597,   597,   598,   599,   599,   599,   599,
     600,   600,   601,   601,   602,   602,   602,   603,   603,   603,
     603,   603,   603,   604,   604,   605,   605,   605,   605,   606,
     607,   607,   607,   607,   607,   607,   607,   607,   608,   608,
     635,   635,   635,   635,   635,   635,   635,   635,   636,   636,
     636,   636,   636,   636,   636,   636,   636,   636,   636,   636,
     636,   636,   636,   636,   636,   636,   637,   637,   637,   637,
     637,   637,   638,   638,   639,   639,   639,   640,   640,   640,
     641,   641,   619,   619,   619,   619,   619,   619,   620,   620,
     621,   621,   900,   544,   544,   545,   545,   546,   546,   547,
     547,   548,   548,   549,   549,   550,   550,   551,   551,   552,
     552,   552,   552,   552,   553,   554,   554,   555,   555,   556,
     556,   557,   557,   557,   557,   557,   557,   557,   557,   557,
     557,   557,   557,   557,   557,   557,   557,   558,   559,   559,
     559,   560,   560,   691,   691,   692,   692,   693,   693,   693,
     693,   693,   693,   693,   693,   694,   694,   695,   695,   696,
     696,   696,   696,   696,   696,   696,   696,   696,   696,   697,
     697,   697,   698,   698,   699,   700,   700,   701,   701,   701,
     701,   701,   701,   701,   701,   701,   702,   702,   703,   703,
     703,   704,   705,   705,   706,   706,   707,   707,   707,   708,
     708,   709,   709,   709,   710,   710,   711,   711,   712,   712,
     712,   713,   713,   713,   714,   714,   714,   714,   715,   715,
     716,   716,   716,   716,   717,   717,   718,   718,   718,   718,
     718,   718,   719,   719,   720,   720,   721,   721,   721,   721,
     722,   723,   723,   724,   724,   725,   725,   725,   725,   725,
     726,   727,   727,   727,   728,   728,   729,   729,   730,   730,
     731,   731,   731,   731,   732,   732,   733,   733,   734,   734,
     734,   734,   734,   735,   736,   737,   738,   739,   739,   740,
     740,   741,   741,   742,   742,   743,   743,   744,   744,   745,
     746,   746,   746,   746,   747,   747,   748,   748,   748,   749,
     749,   750,   750,   751,   751,   752,   752,   753,   753,   754,
     754,   754,   754,   754,   754,   754,   754,   755,   755,   755,
     755,   755,   755,   756,   756,   756,   756,   757,   757,   758,
     758,   758,   758,   758,   759,   759,   759,   759,   760,   760,
     761,   761,   762,   762,   762,   762,   763,   763,   764,   765,
     765,   766,   766,   767,   767,   768,   768,   769,   769,   770,
     771,   771,   772,   772,   773,   773,   774,   774,   775,   775,
     775,   775,   775,   775,   775,   775,   775,   776,   776,   776,
     777,   777,   777,   777,   777,   777,   777,   778,   778,   778,
     778,   779,   780,   780,   781,   781,   781,   781,   781,   781,
     781,   781,   781,   781,   781,   782,   782,   783,   783,   784,
     784,   785,   786,   787,   787,   788,   788,   789,   790,   791,
     791,   791,   791,   791,   791,   792,   792,   793,   793,   793,
     793,   794,   795,   795,   795,   796,   796,   797,   797,   798,
     798,   799,   799,   800,   800,   801,   801,   802,   802,   803,
     803,   804,   804,   804,   804,   804,   804,   804,   804,   804,
     804,   804,   804,   804,   804,   804,   804,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   805,   805,   805,   805,   805,
     805,   805,   805,   805,   805,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   806,
     806,   806,   806,   806,   806,   806,   806,   806,   806,   807,
     807,   807,   807,   807,   807,   807,   807,   807,   807,   807,
     807,   807,   807,   807,   808,   808,   808,   808,   808,   809,
     809,   809,   809,   809,   809,   809,   810,   810,   811,   811,
     812,   812,   812,   812,   812,   812,   812,   812,   812,   812,
     812,   812,   812,   812,   812,   812,   812,   812,   812,   812,
     812,   812,   812,   812,   812,   812,   812,   812,   812,   813,
     813,   814,   814,   815,   815,   815,   816,   816,   817,   817,
     818,   818,   819,   820,   820,   820,   821,   822,   822,   823,
     823,   824,   824,   824,   825,   825,   826,   826,   826,   826,
     826,   827,   827,   828,   828,   829,   830,   830,   831,   831,
     832,   832,   832,   833,   833,   834,   834,   834,   834,   834,
     834,   834,   834,   834,   834,   834,   834,   834,   835,   835,
     836,   836,   837,   837,   837,   837,   837,   837,   837,   837,
     838,   838,   839,   839,   840,   840,   841,   841,   842,   842,
     843,   843,   843,   844,   844,   845,   845,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   847,   847,   848,
     849,   849,   850,   850,   850,   850,   850,   850,   851,   852,
     853,   853,   853,   854,   854,   855,   856,   856,   857,   858,
     858,   859,   859,   860,   860,   861,   861,   861,   862,   862,
     863,   863,   864,   864,   865,   865,   866,   866,   867,   867,
     868,   868,   869,   869,   869,   869,   869,   870,   870,   871,
     871,   872,   873,   873,   874,   874,   875,   875,   875,   876,
     876,   877,   877,   878,   878,   879,   879,   880,   881,   882,
     882,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   884,   885,   886,   886,   886,
     887,   887,   888,   888,   888,   889,   889,   889,   890,   890,
     890,   891,   891,   892,   892,   893,   893,   894,   895,   895,
     895,   895,   896,   896,   897,   686,   687,   687,   688,   688,
     688,   688,   622,   622,   623,   623,   624,   624,   624,   624,
     657,   657,   658,   659,   659,   660,   660,   661,   661,   662,
     662,   663,   663,   515,   515,   515,   515,   515,   515,   542,
     542,   543,   543,   655,   655,   656,   644,   644,   644,   644,
     645,   645,   646,   646,   646,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   648,   648,   648,   649,   649,
     650,   650,   651,   651,   652,   652,   652,   652,   653,   654,
     654,   910,   910,   910,   910,   911,   911,   911,   911,   912,
     912,   912,   912,   913,   913,   914,   914,   914,   914,   914,
     914,   914,   915,   915,   683,   683,   683,   684,   684,   902,
     902,   902,   902,   902,   903,   903,   903,   903,   903,   904,
     904,   905,   905,   906,   906,   631,   631,   632,   632,   632,
     633,   633,   634,   634,   534,   534,   535,   536,   536,   536,
     537,   537,   538,   538,   539,   540,   540,   907,   908,   908,
     909,   909,   909,   916,   916,   916,   916,   916,   916,   916,
     916,   917,   917,   918,   918,   919,   919,   541,   920,   920,
     920,   920,   920,   921,   921,   921,   921,   609,   609,   609,
     610,   610,   610,   611,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   612,   612,   612,   612,   612,   612,   612,   612,   612,
     612,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   613,   613,   613,   613,   613,
     613,   613,   613,   613,   613,   614,   614,   614,   614,   614,
     614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
     614,   614,   614,   614,   614,   614,   614,   614,   614,   614,
     614,   614,   614,   614,   614,   614,   614,   614,   615,   615,
     615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
     615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
     615,   615,   615,   615,   615,   615,   615,   615,   615,   615,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   616,   616,   616,   616,   616,   616,
     616,   616,   616,   616,   617,   617,   617,   617,   617,   617,
     617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
     617,   617,   617,   617,   617,   617,   617,   617,   617,   617,
     617,   617,   617,   617,   617,   617,   617,   617,   617,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618,   618,   618,   618,   618,   618,   618,   618,   618,   618,
     618
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     6,     4,     6,     4,     6,     4,
       6,     1,     2,     3,     2,     1,     3,     2,     3,     1,
       3,     2,     5,     3,     6,     4,     6,     6,     6,     5,
       5,     6,     9,     4,     5,     7,     6,     4,     8,     4,
       2,     4,     3,     6,     4,     2,     2,     2,     2,     1,
       2,     0,     1,     2,     2,     2,     1,     3,     4,     2,
       1,     0,     2,     3,     2,     3,     6,     6,     8,     6,
       8,     6,     8,     6,     8,     8,    10,     8,    10,     1,
       0,     7,     1,     4,     4,     7,     2,     1,     3,     4,
       3,     0,     1,     0,     2,     3,     5,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     6,     8,     5,     1,     0,     1,     3,     2,
       4,     5,     5,     8,     1,     0,     3,     9,    12,     3,
       0,     4,     6,     1,     2,     1,     1,     0,     1,     2,
       2,     1,     2,     2,     1,     2,     3,     2,     2,     2,
       2,     3,     3,     3,     1,     3,     1,     0,     1,     2,
       2,     2,     2,     2,     2,     2,     2,     1,     1,     0,
       2,     9,    12,    11,     0,     2,     1,     1,     1,     1,
       1,     1,     3,     0,     1,     2,     1,     1,     2,     2,
       3,     1,     1,     2,     2,     1,     2,     3,     5,     3,
       2,     5,     1,     1,     1,     0,     5,     7,     5,     2,
       3,     1,     1,     2,     2,     0,     3,     4,     4,     0,
       3,     2,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     2,     2,     2,
       2,     2,     2,     0,     3,     3,     3,     0,     1,     2,
       1,     2,     2,     2,     2,     3,     4,     1,     3,     1,
       1,     1,     1,     3,     1,     2,     0,     1,     2,     0,
       1,     3,     0,     2,     0,     3,     3,     1,     5,     3,
       1,     3,     1,     2,     1,     4,     5,     5,     6,     3,
       7,     4,    11,     1,     3,     2,     2,     2,     0,     3,
       1,     1,     2,     2,     2,     2,     1,     0,     1,     2,
       6,     4,     6,     4,     6,     8,     4,     6,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     1,
       1,     1,     3,     3,     3,     3,     2,     2,     1,     3,
       1,     1,     1,     3,     1,     1,     0,     1,     1,     1,
       1,     3,     8,    11,    10,     7,    10,     9,     1,     1,
       2,     3,     8,    11,     9,     1,     1,     3,     0,     1,
       3,     1,     0,     1,     0,     1,     0,     1,     3,     1,
       1,     1,     3,     0,     2,     2,     0,     2,     0,     1,
       0,     1,     1,     1,     3,     3,     1,     1,     3,     3,
       3,     3,     3,     3,     4,     3,     2,     1,     1,     1,
       1,     1,     3,     1,     1,     3,     3,     1,     2,     4,
       4,     2,     3,     5,     5,     1,     1,     3,     0,    11,
      11,    10,    12,     1,     2,     5,     4,     4,     4,     2,
       2,     3,     1,     3,     6,     2,     0,     3,     3,     4,
       4,     4,     4,     3,     2,     1,     1,     0,     1,     1,
       0,     2,     1,     5,     1,     0,     2,     2,     0,     1,
       0,     3,     5,     5,     1,     3,     4,     3,     1,     1,
       0,     2,     2,     0,     2,     2,     1,     1,     1,     0,
       2,     4,     5,     4,     2,     3,     2,     2,     2,     2,
       1,     2,     3,     0,     1,     0,     5,     1,     4,     6,
       2,     1,     0,     4,     0,     1,     1,     2,     2,     2,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     0,     1,     3,     1,     2,     1,     1,
       1,     1,     1,     2,     4,     4,     5,     1,     1,     2,
       0,     2,     0,     1,     3,     1,     0,     1,     2,     3,
       2,     4,     2,     3,     2,     0,     1,     2,     0,     4,
       5,     1,     2,     2,     0,     1,     3,     1,     2,     3,
       3,     3,     3,     3,     3,     1,     4,     3,     4,     5,
       4,     5,     4,     5,     2,     4,     1,     1,     0,     1,
       4,     5,     4,     0,     2,     2,     2,     1,     1,     0,
       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,
       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,
       2,     0,     2,     4,     1,     1,     1,     0,     2,     3,
       5,     6,     2,     3,     5,     5,     5,     3,     4,     0,
       1,     1,     1,     1,     1,     2,     4,     1,     1,     1,
       1,     2,     3,     0,     1,     1,     1,     1,     1,     2,
       2,     2,     2,     2,     1,     3,     0,     1,     1,     1,
       1,     5,     2,     1,     1,     1,     1,     4,     1,     2,
       2,     1,     3,     3,     2,     1,     0,     5,     2,     5,
       2,     1,     3,     3,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       3,     3,     3,     3,     3,     3,     0,     1,     3,     3,
       5,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     3,
       3,     2,     2,     3,     3,     5,     4,     6,     3,     5,
       4,     6,     4,     6,     5,     7,     3,     2,     4,     3,
       2,     3,     3,     3,     3,     4,     3,     4,     3,     4,
       5,     6,     6,     7,     6,     7,     6,     7,     3,     4,
       4,     6,     1,     6,     4,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     2,     5,     6,     6,     7,     1,
       1,     2,     2,     2,     1,     3,     1,     2,     4,     1,
       1,     2,     2,     4,     1,     1,     3,     3,     1,     3,
       6,     7,     9,     7,     7,     4,     5,     1,     1,     1,
       5,     1,     1,     4,     1,     4,     1,     4,     1,     4,
       1,     1,     1,     1,     1,     1,     6,     6,     4,     4,
       4,     4,     6,     5,     5,     5,     4,     6,     4,     7,
       9,     5,     0,     5,     4,     0,     1,     0,     2,     0,
       1,     3,     3,     2,     2,     0,     6,     1,     0,     3,
       0,     2,     2,     0,     1,     4,     2,     2,     2,     2,
       2,     4,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
       1,     3,     1,     3,     1,     2,     1,     0,     1,     3,
       1,     3,     3,     1,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
       0,     1,     0,     1,     2,     2,     3,     5,     1,     0,
       1,     2,     0,     2,     1,     0,     1,     0,     1,     3,
       1,     2,     3,     2,     1,     3,     5,     4,     2,     1,
       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
       3,     1,     2,     1,     3,     1,     2,     1,     1,     1,
       2,     1,     1,     2,     1,     1,     2,     7,     2,     5,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     5,     3,     0,     1,     1,
       1,     1,     4,     7,     2,     0,     1,     1,     1,     1,
      13,    16,     1,     2,     0,     1,     0,     1,     0,     2,
       0,     1,     0,     6,     8,     6,     8,     6,     8,     3,
       2,     1,     0,     4,     6,     3,     2,     4,     3,     5,
       1,     0,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     2,     3,     3,     3,     1,     3,     3,     2,     3,
       3,     3,     3,     1,     1,     1,     1,     3,     5,     1,
       1,     1,     1,     3,     2,     2,     3,     1,     1,     4,
       5,     5,     4,     6,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     1,     0,     7,     3,     1,     2,     3,
       2,     0,     2,     0,     2,     4,     5,     3,     2,     5,
       1,     0,     2,     0,     1,     1,     3,     2,     1,     1,
       1,     2,     3,     2,     2,     2,     2,     3,     4,     2,
       1,     1,     1,     1,     3,     1,     3,     2,     9,    12,
      11,    12,    14,     3,     4,     4,     0,     7,    10,     9,
       2,     3,     0,     4,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 480 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 16368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 496 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 16384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 508 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 16395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 42: /* stmt: %empty  */
#line 554 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 16401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 16511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 16517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 16537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 16545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 16560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 16568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 16576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 16584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 16678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 16714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 16734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 16814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 16837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 16855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 16866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 16879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 16892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 16912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 16934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 16945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 16951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 16957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 16965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 16974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 16983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 16991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 16997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 17003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 17015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 17021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 17027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 17037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 17047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 17057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 17067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 17256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 17262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* InsertStmt: opt_with_clause INSERT INTO insert_target insert_rest opt_on_conflict returning_clause  */
#line 10 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 17274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* insert_rest: SelectStmt  */
#line 22 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 28 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 35 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 41 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 17316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* insert_rest: DEFAULT VALUES  */
#line 48 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 17326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* insert_target: qualified_name  */
#line 58 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 17334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* insert_target: qualified_name AS ColId  */
#line 62 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 17343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 17355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* opt_conf_expr: ON CONSTRAINT name  */
#line 80 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 17367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* opt_conf_expr: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 17375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* opt_with_clause: with_clause  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 17381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* opt_with_clause: %empty  */
#line 96 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 17387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* insert_column_item: ColId opt_indirection  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 17399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* set_clause: set_target '=' a_expr  */
#line 114 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 17408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 119 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 17433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 144 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 17446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 154 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 17459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* opt_on_conflict: %empty  */
#line 163 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 17467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 170 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 181 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 192 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 17512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* returning_clause: RETURNING target_list  */
#line 206 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* returning_clause: %empty  */
#line 207 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 17524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* override_kind: USER  */
#line 213 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 17530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* override_kind: SYSTEM_P  */
#line 214 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 17536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* set_target_list: set_target  */
#line 219 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* set_target_list: set_target_list ',' set_target  */
#line 220 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 17548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_collate: COLLATE any_name  */
#line 226 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_collate: %empty  */
#line 227 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_class: any_name  */
#line 231 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_class: %empty  */
#line 232 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 17572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* insert_column_list: insert_column_item  */
#line 238 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 17578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 240 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 17584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_clause_list: set_clause  */
#line 245 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 17590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause_list: set_clause_list ',' set_clause  */
#line 246 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 17596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause_list_opt_comma: set_clause_list  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 251 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* index_params: index_elem  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 17614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* index_params: index_params ',' index_elem  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 17620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* set_target: ColId opt_indirection  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 17632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 17645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 17658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 17677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 17683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 17689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 17697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 17705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 17716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 17754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 17768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* OptSeqOptList: SeqOptList  */
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 17774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* OptSeqOptList: %empty  */
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 17780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 17791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 17811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 17831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* execute_param_clause: '(' expr_list_opt_comma ')'  */
#line 51 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 17837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* execute_param_clause: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 17843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 17855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 17873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 17879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 17885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 17891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 17897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 17903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 17909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 17918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 17924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 17932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 17940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 17948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 17956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 17964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 17972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 17980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 17988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 17996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 18004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 18013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 18043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 18049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 18055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 18061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 18067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 18078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 18088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 18098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 18120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 18131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 18137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 18143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 18149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 18159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 18176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 18193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 18210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 18216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 18244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 18250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 18256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 18262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 18268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 18274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 18280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 18292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 18298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 18304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 18310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 18316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 18322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 18328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 18339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 18368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 18404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 18418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 18459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 18484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 18490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 18496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 18502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 18515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 18542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 18556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 18564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 18570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 18576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 18582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 18588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 18594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 18600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 18606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 18612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 18618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 18624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 18636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 18642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 18653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 18665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 18671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 18677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 18683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 18689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 18695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 18701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 18707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 18719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 18736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 18769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 18787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 18793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 18799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 18805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 18811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 18817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 18823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 18829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 18835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 18841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 18847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 18853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 18859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 18882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 18912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 18924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 18956 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 18964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 18970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 18976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 18982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 18994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 19040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 19048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 19071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 19077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 19105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 19116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 19133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 19249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 19261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 19269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 19288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 19300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 19312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 19323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 19334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 19340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 19346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 19352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 19358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 19428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 19442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 19456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 19470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 19476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* drop_type_any_name: DATABASE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* drop_type_any_name: SEQUENCE  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 19488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* drop_type_any_name: FUNCTION  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 19494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* drop_type_any_name: MACRO  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 19500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* drop_type_any_name: MACRO TABLE  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 19506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* drop_type_any_name: VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 19518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* drop_type_any_name: INDEX  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 19524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* drop_type_any_name: FOREIGN TABLE  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 19530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* drop_type_any_name: COLLATION  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 19536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* drop_type_any_name: CONVERSION_P  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 19542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* drop_type_any_name: SCHEMA  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 19548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* drop_type_any_name: STATISTICS  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 19554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 19560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 19566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 19572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 110 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 19578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* drop_type_name: ACCESS METHOD  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 19584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* drop_type_name: EVENT TRIGGER  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 19590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* drop_type_name: EXTENSION  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 19596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 19602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* drop_type_name: PUBLICATION  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 19608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* drop_type_name: SERVER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* any_name_list: any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* any_name_list: any_name_list ',' any_name  */
#line 126 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 19626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* opt_drop_behavior: CASCADE  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 19632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* opt_drop_behavior: RESTRICT  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* opt_drop_behavior: %empty  */
#line 133 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 19644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* drop_type_name_on_any_name: POLICY  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 19650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* drop_type_name_on_any_name: RULE  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 19656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* drop_type_name_on_any_name: TRIGGER  */
#line 140 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 19662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* type_name_list: Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 19668 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* type_name_list: type_name_list ',' Typename  */
#line 144 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 19674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 19689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 19705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 19721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 19736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 19751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 19766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 19774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 19782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 19852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 19858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 19864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 19878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 19900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 19906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 19912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 19918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 19924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 19930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 19942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 19948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 19954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 19960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 19966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* copy_generic_opt_arg: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 19972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 112 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* opt_oids: WITH OIDS  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* opt_oids: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 19994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 128 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* copy_opt_list: %empty  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 20006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_binary: BINARY  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_binary: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 20020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* copy_opt_item: BINARY  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* copy_opt_item: OIDS  */
#line 148 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* copy_opt_item: FREEZE  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 156 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 160 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* copy_opt_item: CSV  */
#line 164 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 20068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* copy_opt_item: HEADER_P  */
#line 168 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 172 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 176 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 20092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* copy_opt_item: FORCE QUOTE columnList  */
#line 180 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* copy_opt_item: FORCE QUOTE '*'  */
#line 184 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* copy_opt_item: PARTITION BY columnList  */
#line 188 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* copy_opt_item: PARTITION BY '*'  */
#line 192 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 20124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 196 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 20132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* copy_opt_item: FORCE NULL_P columnList  */
#line 200 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* copy_opt_item: ENCODING Sconst  */
#line 204 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* copy_file_name: Sconst  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_file_name: STDIN  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_file_name: STDOUT  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 225 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 229 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 20200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 20217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 20229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 20241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 20253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 20265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 20277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 20289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 20309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 20318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 20421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 20429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 20437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 20453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* with_clause: WITH cte_list  */
#line 285 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* with_clause: WITH_LA cte_list  */
#line 292 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* with_clause: WITH RECURSIVE cte_list  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* cte_list: common_table_expr  */
#line 308 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* cte_list: cte_list ',' common_table_expr  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* common_table_expr: name opt_name_list AS '(' PreparableStmt ')'  */
#line 313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* into_clause: INTO OptTempTableName  */
#line 325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* into_clause: %empty  */
#line 335 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 20531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 359 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 364 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 20591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 380 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 20600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* OptTempTableName: TABLE qualified_name  */
#line 385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 20609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* OptTempTableName: qualified_name  */
#line 390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* opt_table: TABLE  */
#line 396 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 20624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* opt_table: %empty  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 20630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* all_or_distinct: ALL  */
#line 401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 20636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* all_or_distinct: DISTINCT  */
#line 402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* all_or_distinct: %empty  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* by_name: BY NAME_P  */
#line 407 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 20654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* distinct_clause: DISTINCT  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 20660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 415 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* opt_all_clause: ALL  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 20672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* opt_all_clause: %empty  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 424 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 20684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 425 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 20690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* opt_ignore_nulls: %empty  */
#line 426 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 20696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* opt_sort_clause: sort_clause  */
#line 430 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 20702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* opt_sort_clause: %empty  */
#line 431 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 20708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* sort_clause: ORDER BY sortby_list  */
#line 435 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 20728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* sort_clause: ORDER BY '*' opt_asc_desc opt_nulls_order  */
#line 447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					sort->node = (PGNode *) makeNode(PGAStar);
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 20742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* sortby_list: sortby  */
#line 459 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 20748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* sortby_list: sortby_list ',' sortby  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 464 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 20767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 473 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 20780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* opt_asc_desc: ASC_P  */
#line 483 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 20786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* opt_asc_desc: DESC_P  */
#line 484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 20792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* opt_asc_desc: %empty  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 20798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 488 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 20804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 489 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 20810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* opt_nulls_order: %empty  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 20816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* select_limit: limit_clause offset_clause  */
#line 494 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 20822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* select_limit: offset_clause limit_clause  */
#line 495 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 20828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* select_limit: limit_clause  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 20834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* select_limit: offset_clause  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* opt_select_limit: select_limit  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* opt_select_limit: %empty  */
#line 502 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 20852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* limit_clause: LIMIT select_limit_value  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 525 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 20877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* offset_clause: OFFSET select_offset_value  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 20889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 20895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* sample_count: FCONST '%'  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 20903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* sample_count: ICONST '%'  */
#line 547 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 20911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* sample_count: FCONST PERCENT  */
#line 551 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* sample_count: ICONST PERCENT  */
#line 555 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 20927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* sample_count: ICONST  */
#line 559 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 20935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* sample_count: ICONST ROWS  */
#line 563 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 20943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 20951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* sample_clause: %empty  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 20957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* opt_sample_func: ColId  */
#line 581 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* opt_sample_func: %empty  */
#line 582 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 20969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 20978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* tablesample_entry: sample_count  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 20986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 600 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 21003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* opt_tablesample_clause: tablesample_clause  */
#line 614 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* opt_tablesample_clause: %empty  */
#line 615 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 21023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 21029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* opt_repeatable_clause: %empty  */
#line 621 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 21035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* select_limit_value: a_expr  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* select_limit_value: ALL  */
#line 627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 21050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* select_limit_value: a_expr '%'  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 21056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* select_limit_value: FCONST PERCENT  */
#line 634 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 21062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* select_limit_value: ICONST PERCENT  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 21068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* select_offset_value: a_expr  */
#line 640 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* select_fetch_first_value: c_expr  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* select_fetch_first_value: '+' I_or_F_const  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 21086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* select_fetch_first_value: '-' I_or_F_const  */
#line 664 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* I_or_F_const: Iconst  */
#line 668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 21098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* I_or_F_const: FCONST  */
#line 669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 21104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* row_or_rows: ROW  */
#line 673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 21110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* row_or_rows: ROWS  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 21116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* first_or_next: FIRST_P  */
#line 677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 21122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* first_or_next: NEXT  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 21128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* group_clause: GROUP_P BY ALL  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* group_clause: GROUP_P BY '*'  */
#line 710 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 21152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* group_clause: %empty  */
#line 714 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* group_by_list: group_by_item  */
#line 718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* group_by_list: group_by_list ',' group_by_item  */
#line 719 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 21170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* group_by_list_opt_comma: group_by_list  */
#line 723 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* group_by_list_opt_comma: group_by_list ','  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* group_by_item: a_expr  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* group_by_item: empty_grouping_set  */
#line 729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* group_by_item: cube_clause  */
#line 730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* group_by_item: rollup_clause  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* group_by_item: grouping_sets_clause  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* empty_grouping_set: '(' ')'  */
#line 737 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 21220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 21236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 21244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* grouping_or_grouping_id: GROUPING  */
#line 770 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 21250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* grouping_or_grouping_id: GROUPING_ID  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 21256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* having_clause: HAVING a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* having_clause: %empty  */
#line 776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* qualify_clause: QUALIFY a_expr  */
#line 780 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* qualify_clause: %empty  */
#line 781 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* for_locking_clause: for_locking_items  */
#line 785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* for_locking_clause: FOR READ_P ONLY  */
#line 786 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_for_locking_clause: for_locking_clause  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* opt_for_locking_clause: %empty  */
#line 791 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* for_locking_items: for_locking_item  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* for_locking_items: for_locking_items for_locking_item  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 21328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* for_locking_strength: FOR UPDATE  */
#line 811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 21334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 21340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* for_locking_strength: FOR SHARE  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 21346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* for_locking_strength: FOR KEY SHARE  */
#line 814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 21352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* locked_rels_list: OF qualified_name_list  */
#line 818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* locked_rels_list: %empty  */
#line 819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* opt_nowait_or_skip: NOWAIT  */
#line 824 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 21370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 825 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 21376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_nowait_or_skip: %empty  */
#line 826 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 21382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 836 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 21392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 21402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* values_clause_opt_comma: values_clause  */
#line 850 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* values_clause_opt_comma: values_clause ','  */
#line 851 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 21414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* from_clause: FROM from_list_opt_comma  */
#line 864 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* from_clause: %empty  */
#line 865 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* from_list: table_ref  */
#line 869 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* from_list: from_list ',' table_ref  */
#line 870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* from_list_opt_comma: from_list  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* from_list_opt_comma: from_list ','  */
#line 875 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 21460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 21485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 21497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* table_ref: joined_table  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 21531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* table_ref: '(' joined_table ')' alias_clause  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* joined_table: '(' joined_table ')'  */
#line 961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 21548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 992 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 21602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1007 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 21618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1019 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 21635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* alias_clause: AS ColIdOrString  */
#line 1041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 21654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 21664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* alias_clause: ColId  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* opt_alias_clause: alias_clause  */
#line 1058 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* opt_alias_clause: %empty  */
#line 1059 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 21685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* func_alias_clause: alias_clause  */
#line 1068 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 21693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 21701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1076 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 21711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1082 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* func_alias_clause: %empty  */
#line 1088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 21729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* join_type: FULL join_outer  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* join_type: LEFT join_outer  */
#line 1094 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 21741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* join_type: RIGHT join_outer  */
#line 1095 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* join_type: INNER_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 21753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* join_outer: OUTER_P  */
#line 1100 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 21759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* join_outer: %empty  */
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 21771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* join_qual: ON a_expr  */
#line 1114 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* relation_expr: qualified_name  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 21788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* relation_expr: qualified_name '*'  */
#line 1127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* relation_expr: ONLY qualified_name  */
#line 1134 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 21810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 21821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* func_table: func_expr_windowless opt_ordinality  */
#line 1173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 21836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1184 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 21851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1197 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 21857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* rowsfrom_list: rowsfrom_item  */
#line 1201 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1202 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1205 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* opt_col_def_list: %empty  */
#line 1206 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 21881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1209 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 21887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* opt_ordinality: %empty  */
#line 1210 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 21893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* where_clause: WHERE a_expr  */
#line 1215 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* where_clause: %empty  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 21905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* TableFuncElementList: TableFuncElement  */
#line 1222 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 21943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* opt_collate_clause: COLLATE any_name  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 21955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* opt_collate_clause: %empty  */
#line 1260 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 21961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* colid_type_list: ColId Typename  */
#line 1273 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 21969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1276 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* opt_Typename: Typename  */
#line 1283 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_Typename: %empty  */
#line 1284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 21989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* Typename: SimpleTypename opt_array_bounds  */
#line 1287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 21998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1292 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 22008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 22017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1304 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 22027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* Typename: SimpleTypename ARRAY  */
#line 1310 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 22046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1320 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 22057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1326 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 22068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1332 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1342 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1344 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* opt_array_bounds: %empty  */
#line 1346 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* SimpleTypename: GenericType  */
#line 1350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* SimpleTypename: Numeric  */
#line 1351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* SimpleTypename: Bit  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* SimpleTypename: Character  */
#line 1353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* SimpleTypename: ConstDatetime  */
#line 1354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* SimpleTypename: ConstInterval opt_interval  */
#line 1356 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 22136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 22146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* ConstTypename: Numeric  */
#line 1380 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* ConstTypename: ConstBit  */
#line 1381 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* ConstTypename: ConstCharacter  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* ConstTypename: ConstDatetime  */
#line 1383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* GenericType: type_name_token opt_type_modifiers  */
#line 1395 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_type_modifiers: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* Numeric: INT_P  */
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* Numeric: INTEGER  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* Numeric: SMALLINT  */
#line 1426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* Numeric: BIGINT  */
#line 1431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* Numeric: REAL  */
#line 1436 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* Numeric: FLOAT_P opt_float  */
#line 1441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* Numeric: DOUBLE_P PRECISION  */
#line 1446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1451 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* Numeric: DEC opt_type_modifiers  */
#line 1457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* Numeric: BOOLEAN_P  */
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* opt_float: '(' Iconst ')'  */
#line 1476 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* opt_float: %empty  */
#line 1497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* Bit: BitWithLength  */
#line 1507 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* Bit: BitWithoutLength  */
#line 1511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* ConstBit: BitWithLength  */
#line 1519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* ConstBit: BitWithoutLength  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 22360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* BitWithoutLength: BIT opt_varying  */
#line 1543 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* Character: CharacterWithLength  */
#line 1564 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* Character: CharacterWithoutLength  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* ConstCharacter: CharacterWithLength  */
#line 1574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 22415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* ConstCharacter: CharacterWithoutLength  */
#line 1578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* CharacterWithoutLength: character  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* character: CHARACTER opt_varying  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 22458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* character: CHAR_P opt_varying  */
#line 1611 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 22464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* character: VARCHAR  */
#line 1613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 22470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* character: NATIONAL CHARACTER opt_varying  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 22476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* character: NATIONAL CHAR_P opt_varying  */
#line 1617 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 22482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* character: NCHAR opt_varying  */
#line 1619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* opt_varying: VARYING  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 22494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_varying: %empty  */
#line 1624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1641 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1649 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 22538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* ConstDatetime: TIME opt_timezone  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 22550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* ConstInterval: INTERVAL  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 22559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 22565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1677 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* opt_timezone: %empty  */
#line 1678 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_interval: year_keyword  */
#line 1707 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 22583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_interval: month_keyword  */
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 22589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* opt_interval: day_keyword  */
#line 1711 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 22595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* opt_interval: hour_keyword  */
#line 1713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* opt_interval: minute_keyword  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 22607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* opt_interval: second_keyword  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 22613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* opt_interval: millisecond_keyword  */
#line 1719 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 22619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_interval: microsecond_keyword  */
#line 1721 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 22625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_interval: year_keyword TO month_keyword  */
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_interval: day_keyword TO hour_keyword  */
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_interval: day_keyword TO minute_keyword  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 22653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* opt_interval: day_keyword TO second_keyword  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_interval: hour_keyword TO minute_keyword  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 22673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_interval: hour_keyword TO second_keyword  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 22683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_interval: minute_keyword TO second_keyword  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 22692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* opt_interval: %empty  */
#line 1762 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 22698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* a_expr: c_expr  */
#line 1793 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* a_expr: a_expr TYPECAST Typename  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 22710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* a_expr: a_expr COLLATE any_name  */
#line 1798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 1806 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 22732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* a_expr: '+' a_expr  */
#line 1821 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* a_expr: '-' a_expr  */
#line 1823 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 22744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* a_expr: a_expr '+' a_expr  */
#line 1825 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* a_expr: a_expr '-' a_expr  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* a_expr: a_expr '*' a_expr  */
#line 1829 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* a_expr: a_expr '/' a_expr  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* a_expr: a_expr '%' a_expr  */
#line 1833 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* a_expr: a_expr '^' a_expr  */
#line 1835 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* a_expr: a_expr POWER_OF a_expr  */
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* a_expr: a_expr '<' a_expr  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* a_expr: a_expr '>' a_expr  */
#line 1841 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* a_expr: a_expr '=' a_expr  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 1845 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 1849 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* a_expr: a_expr qual_Op a_expr  */
#line 1852 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* a_expr: qual_Op a_expr  */
#line 1854 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 22834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* a_expr: a_expr qual_Op  */
#line 1856 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 22840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* a_expr: a_expr AND a_expr  */
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* a_expr: a_expr OR a_expr  */
#line 1861 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 22852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* a_expr: NOT a_expr  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* a_expr: NOT_LA a_expr  */
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 22864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* a_expr: a_expr GLOB a_expr  */
#line 1867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* a_expr: a_expr LIKE a_expr  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 1877 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 1889 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* a_expr: a_expr ILIKE a_expr  */
#line 1896 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 1901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 22933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 1908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 22942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 1913 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 22953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 22965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 22977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 22989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 1945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 23001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* a_expr: a_expr IS NULL_P  */
#line 1963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* a_expr: a_expr ISNULL  */
#line 1971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* a_expr: a_expr IS NOT NULL_P  */
#line 1979 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 23037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* a_expr: a_expr NOT NULL_P  */
#line 1987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* a_expr: a_expr NOTNULL  */
#line 1995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2003 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 23073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 23081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* a_expr: row OVERLAPS row  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 23101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* a_expr: a_expr IS TRUE_P  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* a_expr: a_expr IS FALSE_P  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* a_expr: a_expr IS UNKNOWN  */
#line 2063 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 23161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 23173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 23181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 23189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2087 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2091 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 23205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2095 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 23217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2103 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2111 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* a_expr: a_expr IN_P in_expr  */
#line 2127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 23303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 23318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2180 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 23329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* a_expr: DEFAULT  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* a_expr: COLUMNS '(' '*' opt_except_list opt_replace_list ')'  */
#line 2201 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* a_expr: COLUMNS '(' Sconst ')'  */
#line 2210 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->regex = (yyvsp[-1].str);
					star->columns = true;

					(yyval.node) = (PGNode *) star;
				}
#line 23372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* b_expr: c_expr  */
#line 2229 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* b_expr: b_expr TYPECAST Typename  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 23384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* b_expr: '+' b_expr  */
#line 2233 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* b_expr: '-' b_expr  */
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* b_expr: b_expr '+' b_expr  */
#line 2237 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* b_expr: b_expr '-' b_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* b_expr: b_expr '*' b_expr  */
#line 2241 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* b_expr: b_expr '/' b_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* b_expr: b_expr '%' b_expr  */
#line 2245 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* b_expr: b_expr '^' b_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* b_expr: b_expr POWER_OF b_expr  */
#line 2249 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* b_expr: b_expr '<' b_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* b_expr: b_expr '>' b_expr  */
#line 2253 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* b_expr: b_expr '=' b_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2257 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2261 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* b_expr: b_expr qual_Op b_expr  */
#line 2263 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* b_expr: qual_Op b_expr  */
#line 2265 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* b_expr: b_expr qual_Op  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2269 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 23500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 23508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 23524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* c_expr: columnref  */
#line 2294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* c_expr: AexprConst  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* c_expr: '#' ICONST  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 23547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* c_expr: indirection_expr opt_indirection  */
#line 2304 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 23563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* c_expr: '$' named_param  */
#line 2316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 23571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* c_expr: row  */
#line 2319 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 23580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* c_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2323 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* c_expr: list_comprehension  */
#line 2327 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* c_expr: ARRAY select_with_parens  */
#line 2331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* c_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 23622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* c_expr: case_expr  */
#line 2347 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* c_expr: select_with_parens  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 23643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* c_expr: select_with_parens indirection  */
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 23671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* c_expr: EXISTS select_with_parens  */
#line 2384 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 23686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* c_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2395 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 23697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* indirection_expr: '?'  */
#line 2406 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 23705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* indirection_expr: PARAM  */
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* indirection_expr: '(' a_expr ')'  */
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* indirection_expr: '{' dict_arguments_opt_comma '}'  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 23733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* indirection_expr: func_expr  */
#line 2426 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* func_application: func_name '(' ')'  */
#line 2431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 23760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 23772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2450 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 23784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 23799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* func_application: func_name '(' '*' ')'  */
#line 2477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2505 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 23871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* func_expr: func_expr_common_subexpr  */
#line 2541 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* func_expr_windowless: func_application  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2552 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2560 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 23899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* func_expr_common_subexpr: CURRENT_DATE  */
#line 2566 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 23907 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* func_expr_common_subexpr: CURRENT_TIME  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* func_expr_common_subexpr: CURRENT_TIME '(' Iconst ')'  */
#line 2574 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 23923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* func_expr_common_subexpr: CURRENT_TIMESTAMP  */
#line 2578 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 23931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* func_expr_common_subexpr: CURRENT_TIMESTAMP '(' Iconst ')'  */
#line 2582 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 23939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* func_expr_common_subexpr: LOCALTIME  */
#line 2586 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* func_expr_common_subexpr: LOCALTIME '(' Iconst ')'  */
#line 2590 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 23955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* func_expr_common_subexpr: LOCALTIMESTAMP  */
#line 2594 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 23963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* func_expr_common_subexpr: LOCALTIMESTAMP '(' Iconst ')'  */
#line 2598 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* func_expr_common_subexpr: CURRENT_ROLE  */
#line 2602 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* func_expr_common_subexpr: CURRENT_USER  */
#line 2606 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* func_expr_common_subexpr: SESSION_USER  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 23995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* func_expr_common_subexpr: USER  */
#line 2614 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 24003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* func_expr_common_subexpr: CURRENT_CATALOG  */
#line 2618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 24011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* func_expr_common_subexpr: CURRENT_SCHEMA  */
#line 2622 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 24019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2626 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 24025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2628 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 24031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2630 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 24091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2677 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 24118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 24126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2689 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 24134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 24145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 24158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2712 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 24177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* within_group_clause: %empty  */
#line 2734 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 2738 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* filter_clause: FILTER '(' a_expr ')'  */
#line 2739 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* filter_clause: %empty  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* export_clause: EXPORT_STATE  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 24213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* export_clause: %empty  */
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* window_clause: WINDOW window_definition_list  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* window_clause: %empty  */
#line 2753 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* window_definition_list: window_definition  */
#line 2757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 24237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* window_definition_list: window_definition_list ',' window_definition  */
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 24243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* window_definition: ColId AS window_specification  */
#line 2764 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 24253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* over_clause: OVER window_specification  */
#line 2772 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 24259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* over_clause: OVER ColId  */
#line 2774 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 24276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* over_clause: %empty  */
#line 2787 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 24282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 2792 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 24300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* opt_existing_window_name: ColId  */
#line 2817 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 24306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* opt_existing_window_name: %empty  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 24312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* opt_partition_clause: PARTITION BY expr_list  */
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 24318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* opt_partition_clause: %empty  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* opt_frame_clause: RANGE frame_extent  */
#line 2834 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 24334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* opt_frame_clause: ROWS frame_extent  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 24344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* opt_frame_clause: %empty  */
#line 2846 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* frame_extent: frame_bound  */
#line 2856 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 2873 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 24418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* frame_bound: UNBOUNDED PRECEDING  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 2926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* frame_bound: CURRENT_P ROW  */
#line 2934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* frame_bound: a_expr PRECEDING  */
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* frame_bound: a_expr FOLLOWING  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 24478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 2970 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* qualified_row: ROW '(' ')'  */
#line 2971 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* row: qualified_row  */
#line 2974 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 24496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* row: '(' expr_list ',' a_expr ')'  */
#line 2975 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 24502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* dict_arg: ColIdOrString ':' a_expr  */
#line 2979 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* dict_arguments: dict_arg  */
#line 2989 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* dict_arguments_opt_comma: dict_arguments  */
#line 2994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 2995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* sub_type: ANY  */
#line 2999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 24545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* sub_type: SOME  */
#line 3000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 24551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* sub_type: ALL  */
#line 3001 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 24557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* all_Op: Op  */
#line 3004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* all_Op: MathOp  */
#line 3005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 24569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* MathOp: '+'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 24575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* MathOp: '-'  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 24581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* MathOp: '*'  */
#line 3010 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* MathOp: '/'  */
#line 3011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* MathOp: '%'  */
#line 3012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* MathOp: '^'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 24605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* MathOp: POWER_OF  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 24611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* MathOp: '<'  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 24617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* MathOp: '>'  */
#line 3016 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 24623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* MathOp: '='  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 24629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* MathOp: LESS_EQUALS  */
#line 3018 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 24635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* MathOp: GREATER_EQUALS  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 24641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* MathOp: NOT_EQUALS  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 24647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* qual_Op: Op  */
#line 3024 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* qual_all_Op: all_Op  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3033 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* subquery_Op: all_Op  */
#line 3038 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* subquery_Op: LIKE  */
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 24689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* subquery_Op: NOT_LA LIKE  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 24695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* subquery_Op: GLOB  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 24701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* subquery_Op: NOT_LA GLOB  */
#line 3048 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 24707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* subquery_Op: ILIKE  */
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 24713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* subquery_Op: NOT_LA ILIKE  */
#line 3052 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 24719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* any_operator: all_Op  */
#line 3066 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* any_operator: ColId '.' any_operator  */
#line 3068 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 24731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* expr_list: a_expr  */
#line 3072 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* expr_list: expr_list ',' a_expr  */
#line 3076 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* expr_list_opt_comma: expr_list  */
#line 3083 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 24755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* expr_list_opt_comma: expr_list ','  */
#line 3088 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 24763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3095 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 24771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* opt_expr_list_opt_comma: %empty  */
#line 3099 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 24779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_arg_list: func_arg_expr  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3112 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_arg_expr: a_expr  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 24816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3131 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 24829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* type_list: Typename  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 24835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* type_list: type_list ',' Typename  */
#line 3142 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 24841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* extract_list: extract_arg FROM a_expr  */
#line 3147 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 24849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* extract_list: %empty  */
#line 3150 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* extract_arg: IDENT  */
#line 3157 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* extract_arg: year_keyword  */
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 24867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* extract_arg: month_keyword  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* extract_arg: day_keyword  */
#line 3160 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 24879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* extract_arg: hour_keyword  */
#line 3161 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* extract_arg: minute_keyword  */
#line 3162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* extract_arg: second_keyword  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 24897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* extract_arg: millisecond_keyword  */
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 24903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* extract_arg: microsecond_keyword  */
#line 3165 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* extract_arg: Sconst  */
#line 3166 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 24923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 24931 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* overlay_placing: PLACING a_expr  */
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* position_list: b_expr IN_P b_expr  */
#line 3194 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 24943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* position_list: %empty  */
#line 3195 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* substr_list: a_expr substr_from substr_for  */
#line 3212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 24957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* substr_list: a_expr substr_for substr_from  */
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 24966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* substr_list: a_expr substr_from  */
#line 3221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 24974 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* substr_list: a_expr substr_for  */
#line 3225 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 24993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* substr_list: expr_list  */
#line 3240 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 25001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* substr_list: %empty  */
#line 3244 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* substr_from: FROM a_expr  */
#line 3248 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* substr_for: FOR a_expr  */
#line 3251 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 25025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* trim_list: FROM expr_list_opt_comma  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* trim_list: expr_list_opt_comma  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* in_expr: select_with_parens  */
#line 3260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3277 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 25068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* when_clause_list: when_clause  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* when_clause_list: when_clause_list when_clause  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3296 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 25092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* case_default: ELSE a_expr  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* case_default: %empty  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* case_arg: a_expr  */
#line 3310 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* case_arg: %empty  */
#line 3311 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* columnref: ColId  */
#line 3315 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* columnref: ColId indirection  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 25132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* indirection_el: '.' attr_name  */
#line 3326 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 25140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* indirection_el: '[' a_expr ']'  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 25152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 25164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_slice_bound: a_expr  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* opt_slice_bound: %empty  */
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* indirection: indirection_el  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* indirection: indirection indirection_el  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* opt_indirection: %empty  */
#line 3358 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* opt_indirection: opt_indirection indirection_el  */
#line 3359 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3373 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* opt_target_list_opt_comma: %empty  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* target_list: target_el  */
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 25218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* target_list: target_list ',' target_el  */
#line 3379 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 25224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* target_list_opt_comma: target_list  */
#line 3383 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* target_list_opt_comma: target_list ','  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* target_el: a_expr AS ColLabelOrString  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 25248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* target_el: a_expr IDENT  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 25260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* target_el: a_expr  */
#line 3412 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 25272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* target_el: '*' opt_except_list opt_replace_list  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-2]);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-2]);
				}
#line 25291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* target_el: ColId '.' '*' opt_except_list opt_replace_list  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnRef *n = makeNode(PGColumnRef);
					PGAStar *star = makeNode(PGAStar);
					n->fields = list_make1(star);
					n->location = (yylsp[-4]);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[-4]);
				}
#line 25311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3452 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* except_list: EXCLUDE ColId  */
#line 3453 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* opt_except_list: except_list  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* opt_except_list: %empty  */
#line 3457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 25335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* replace_list_el: a_expr AS ColId  */
#line 3460 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 25341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* replace_list: replace_list_el  */
#line 3464 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* replace_list: replace_list ',' replace_list_el  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 25353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* replace_list_opt_comma: replace_list  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* replace_list_opt_comma: replace_list ','  */
#line 3470 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* opt_replace_list: REPLACE replace_list_el  */
#line 3474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 25377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* opt_replace_list: %empty  */
#line 3475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 25383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* qualified_name_list: qualified_name  */
#line 3485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 25389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 25395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* qualified_name: ColIdOrString  */
#line 3498 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 25403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* qualified_name: ColId indirection  */
#line 3502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 25433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* name_list: name  */
#line 3530 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* name_list: name_list ',' name  */
#line 3532 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* name_list_opt_comma: name_list  */
#line 3537 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* name_list_opt_comma: name_list ','  */
#line 3538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* name: ColIdOrString  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* attr_name: ColLabel  */
#line 3543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* func_name: function_name_token  */
#line 3554 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* func_name: ColId indirection  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 25484 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* AexprConst: Iconst  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 25492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* AexprConst: FCONST  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* AexprConst: Sconst opt_indirection  */
#line 3576 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 25516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* AexprConst: BCONST  */
#line 3588 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* AexprConst: XCONST  */
#line 3592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 25537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* AexprConst: func_name Sconst  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 25590 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* AexprConst: ConstTypename Sconst  */
#line 3646 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 25598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 3650 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 25606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 25614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 25622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* AexprConst: TRUE_P  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 25630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* AexprConst: FALSE_P  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 25638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* AexprConst: NULL_P  */
#line 3670 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* Iconst: ICONST  */
#line 3675 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 25652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* Sconst: SCONST  */
#line 3676 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* ColId: IDENT  */
#line 3692 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* ColId: unreserved_keyword  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* ColId: col_name_keyword  */
#line 3694 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* ColIdOrString: ColId  */
#line 3697 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* ColIdOrString: SCONST  */
#line 3698 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* type_function_name: IDENT  */
#line 3704 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* type_function_name: unreserved_keyword  */
#line 3705 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* type_function_name: type_func_name_keyword  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* function_name_token: IDENT  */
#line 3709 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* function_name_token: unreserved_keyword  */
#line 3710 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* function_name_token: func_name_keyword  */
#line 3711 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25724 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* type_name_token: IDENT  */
#line 3714 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* type_name_token: unreserved_keyword  */
#line 3715 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* type_name_token: type_name_keyword  */
#line 3716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* any_name: ColId  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* any_name: ColId attrs  */
#line 3720 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 25754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* attrs: '.' attr_name  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* attrs: attrs '.' attr_name  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 25766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* opt_name_list: %empty  */
#line 3731 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* ColLabel: IDENT  */
#line 3742 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* ColLabel: other_keyword  */
#line 3743 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* ColLabel: unreserved_keyword  */
#line 3744 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* ColLabel: reserved_keyword  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 25802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* ColLabelOrString: ColLabel  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* ColLabelOrString: SCONST  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* named_param: IDENT  */
#line 3752 "third_party/libpg_query/grammar/statements/select.y"
                   { (yyval.str) = (yyvsp[0].str); }
#line 25820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 25844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 55 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 25905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* OptSchemaEltList: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 25911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 25965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 25977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 25983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 25995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 26007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 26019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 26025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 26031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 26143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 26158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 26173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 26183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 26208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 26219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 26230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 26236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 26242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 26248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 26254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 26260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 26272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 26278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 26298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 26312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 26318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 26324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 26330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 26350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 26362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 26372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 26382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 26392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 26402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 26408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 26434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 26446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 26458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 26470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 26492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 26498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 26504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 26512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 26520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 26539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 26550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 26556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 26562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 26568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 26574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 26580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 26591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* LoadStmt: INSTALL file_name  */
#line 14 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 26602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* LoadStmt: FORCE INSTALL file_name  */
#line 20 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* file_name: Sconst  */
#line 28 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* file_name: ColId  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 26625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 26677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 26689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 26703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 26709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 26715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 26721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 26727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 26741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 26747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 26753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 26759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 26765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 26771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 26777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 26791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 26805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 26813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 26824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 26835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 26847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 26859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 26887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 26899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* DetachStmt: DETACH DATABASE any_name_list  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_DATABASE;
					n->missing_ok = false;
					n->objects = (yyvsp[0].list);
					n->behavior = PG_DROP_RESTRICT;
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* DetachStmt: DETACH ident_list  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_DATABASE;
					n->missing_ok = false;
					n->objects = (yyvsp[0].list);
					n->behavior = PG_DROP_RESTRICT;
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* DetachStmt: DETACH DATABASE IF_P EXISTS any_name_list  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_DATABASE;
					n->missing_ok = true;
					n->objects = (yyvsp[0].list);
					n->behavior = PG_DROP_RESTRICT;
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 26941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* opt_database: DATABASE  */
#line 50 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 26947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* opt_database: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 26953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* opt_database_alias: AS ColId  */
#line 55 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* opt_database_alias: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 26965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* ident_name: IDENT  */
#line 59 "third_party/libpg_query/grammar/statements/attach.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 26971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* ident_list: ident_name  */
#line 62 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* ident_list: ident_list ',' ident_name  */
#line 63 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* VariableResetStmt: RESET reset_rest  */
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 26989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* generic_reset: var_name  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 27001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* generic_reset: ALL  */
#line 16 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.vsetstmt) = n;
				}
#line 27012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* reset_rest: generic_reset  */
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 27018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* reset_rest: TIME ZONE  */
#line 28 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 35 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 27040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 27064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* VariableShowStmt: show_or_describe ALL  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 27130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* var_name: ColId  */
#line 63 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* var_name: var_name '.' ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* table_id: ColId  */
#line 68 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 27148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* table_id: table_id '.' ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 27164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 27180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 27212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 27233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 27254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 27260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 27278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 27329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 27335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 27341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 27347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 27361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 27365 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
