/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

#if YYBISON == 1
// explicitly define stack growing support
// yacc cannot handle stack growing by default YYLTYPE is overriden - which the Postgres parser overrides with an `int`
// so we need to copy these definitions here explicitly
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short int yyss;
  YYSTYPE yyvs;
  YYLTYPE yyls;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))
#endif

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGNode *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 297 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CENTURIES_P = 68,               /* CENTURIES_P  */
  YYSYMBOL_CENTURY_P = 69,                 /* CENTURY_P  */
  YYSYMBOL_CHAIN = 70,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 71,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 72,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 73,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 74,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 75,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 76,                     /* CLASS  */
  YYSYMBOL_CLOSE = 77,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 78,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 79,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 80,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 81,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 82,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 83,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 84,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 85,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 86,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 87,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 88,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 89,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 90,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 91,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 92,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 93,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 94,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 95,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 96,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 97,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 98,                      /* COPY  */
  YYSYMBOL_COST = 99,                      /* COST  */
  YYSYMBOL_CREATE_P = 100,                 /* CREATE_P  */
  YYSYMBOL_CROSS = 101,                    /* CROSS  */
  YYSYMBOL_CSV = 102,                      /* CSV  */
  YYSYMBOL_CUBE = 103,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 104,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 105,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 106,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 107,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 108,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 109,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 110,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 111,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 112,                      /* DEC  */
  YYSYMBOL_DECADE_P = 113,                 /* DECADE_P  */
  YYSYMBOL_DECADES_P = 114,                /* DECADES_P  */
  YYSYMBOL_DECIMAL_P = 115,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 116,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 117,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 118,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 119,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 120,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 121,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 122,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 123,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 124,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 125,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 126,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 127,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 128,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 129,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 130,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 131,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 132,                 /* DISTINCT  */
  YYSYMBOL_DO = 133,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 134,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 135,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 136,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 137,                     /* DROP  */
  YYSYMBOL_EACH = 138,                     /* EACH  */
  YYSYMBOL_ELSE = 139,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 140,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 141,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 142,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 143,                    /* END_P  */
  YYSYMBOL_ENUM_P = 144,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 145,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 146,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 147,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 148,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 149,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 150,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 151,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 152,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 153,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 154,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 155,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 156,                /* EXTENSION  */
  YYSYMBOL_EXTENSIONS = 157,               /* EXTENSIONS  */
  YYSYMBOL_EXTERNAL = 158,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 159,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 160,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 161,                   /* FAMILY  */
  YYSYMBOL_FETCH = 162,                    /* FETCH  */
  YYSYMBOL_FILTER = 163,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 164,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 165,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 166,                /* FOLLOWING  */
  YYSYMBOL_FOR = 167,                      /* FOR  */
  YYSYMBOL_FORCE = 168,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 169,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 170,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 171,                   /* FREEZE  */
  YYSYMBOL_FROM = 172,                     /* FROM  */
  YYSYMBOL_FULL = 173,                     /* FULL  */
  YYSYMBOL_FUNCTION = 174,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 175,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 176,                /* GENERATED  */
  YYSYMBOL_GLOB = 177,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 178,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 179,                    /* GRANT  */
  YYSYMBOL_GRANTED = 180,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 181,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 182,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 183,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 184,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 185,                  /* HANDLER  */
  YYSYMBOL_HAVING = 186,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 187,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 188,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 189,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 190,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 191,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 192,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 193,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 194,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 195,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 196,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 197,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 198,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 199,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 200,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 201,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 202,                /* INCREMENT  */
  YYSYMBOL_INDEX = 203,                    /* INDEX  */
  YYSYMBOL_INDEXES = 204,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 205,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 206,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 207,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 208,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 209,                  /* INNER_P  */
  YYSYMBOL_INOUT = 210,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 211,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 212,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 213,                   /* INSERT  */
  YYSYMBOL_INSTALL = 214,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 215,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 216,                    /* INT_P  */
  YYSYMBOL_INTEGER = 217,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 218,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 219,                 /* INTERVAL  */
  YYSYMBOL_INTO = 220,                     /* INTO  */
  YYSYMBOL_INVOKER = 221,                  /* INVOKER  */
  YYSYMBOL_IS = 222,                       /* IS  */
  YYSYMBOL_ISNULL = 223,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 224,                /* ISOLATION  */
  YYSYMBOL_JOIN = 225,                     /* JOIN  */
  YYSYMBOL_JSON = 226,                     /* JSON  */
  YYSYMBOL_KEY = 227,                      /* KEY  */
  YYSYMBOL_LABEL = 228,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 229,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 230,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 231,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 232,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 233,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 234,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 235,                     /* LEFT  */
  YYSYMBOL_LEVEL = 236,                    /* LEVEL  */
  YYSYMBOL_LIKE = 237,                     /* LIKE  */
  YYSYMBOL_LIMIT = 238,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 239,                   /* LISTEN  */
  YYSYMBOL_LOAD = 240,                     /* LOAD  */
  YYSYMBOL_LOCAL = 241,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 242,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 243,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 244,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 245,                   /* LOGGED  */
  YYSYMBOL_MACRO = 246,                    /* MACRO  */
  YYSYMBOL_MAP = 247,                      /* MAP  */
  YYSYMBOL_MAPPING = 248,                  /* MAPPING  */
  YYSYMBOL_MATCH = 249,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 250,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 251,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 252,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 253,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 254,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLENNIA_P = 255,              /* MILLENNIA_P  */
  YYSYMBOL_MILLENNIUM_P = 256,             /* MILLENNIUM_P  */
  YYSYMBOL_MILLISECOND_P = 257,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 258,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 259,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 260,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 261,                 /* MINVALUE  */
  YYSYMBOL_MODE = 262,                     /* MODE  */
  YYSYMBOL_MONTH_P = 263,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 264,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 265,                     /* MOVE  */
  YYSYMBOL_NAME_P = 266,                   /* NAME_P  */
  YYSYMBOL_NAMES = 267,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 268,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 269,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 270,                    /* NCHAR  */
  YYSYMBOL_NEW = 271,                      /* NEW  */
  YYSYMBOL_NEXT = 272,                     /* NEXT  */
  YYSYMBOL_NO = 273,                       /* NO  */
  YYSYMBOL_NONE = 274,                     /* NONE  */
  YYSYMBOL_NOT = 275,                      /* NOT  */
  YYSYMBOL_NOTHING = 276,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 277,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 278,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 279,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 280,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 281,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 282,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 283,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 284,                 /* OBJECT_P  */
  YYSYMBOL_OF = 285,                       /* OF  */
  YYSYMBOL_OFF = 286,                      /* OFF  */
  YYSYMBOL_OFFSET = 287,                   /* OFFSET  */
  YYSYMBOL_OIDS = 288,                     /* OIDS  */
  YYSYMBOL_OLD = 289,                      /* OLD  */
  YYSYMBOL_ON = 290,                       /* ON  */
  YYSYMBOL_ONLY = 291,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 292,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 293,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 294,                  /* OPTIONS  */
  YYSYMBOL_OR = 295,                       /* OR  */
  YYSYMBOL_ORDER = 296,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 297,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 298,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 299,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 300,                  /* OUTER_P  */
  YYSYMBOL_OVER = 301,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 302,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 303,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 304,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 305,                    /* OWNED  */
  YYSYMBOL_OWNER = 306,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 307,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 308,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 309,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 310,                /* PARTITION  */
  YYSYMBOL_PARTITIONED = 311,              /* PARTITIONED  */
  YYSYMBOL_PASSING = 312,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 313,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 314,                  /* PERCENT  */
  YYSYMBOL_PERSISTENT = 315,               /* PERSISTENT  */
  YYSYMBOL_PIVOT = 316,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 317,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 318,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 319,                  /* PLACING  */
  YYSYMBOL_PLANS = 320,                    /* PLANS  */
  YYSYMBOL_POLICY = 321,                   /* POLICY  */
  YYSYMBOL_POSITION = 322,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 323,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 324,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 325,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 326,                /* PRECISION  */
  YYSYMBOL_PREPARE = 327,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 328,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 329,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 330,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 331,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 332,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 333,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 334,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 335,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 336,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 337,                  /* QUALIFY  */
  YYSYMBOL_QUARTER_P = 338,                /* QUARTER_P  */
  YYSYMBOL_QUARTERS_P = 339,               /* QUARTERS_P  */
  YYSYMBOL_QUOTE = 340,                    /* QUOTE  */
  YYSYMBOL_RANGE = 341,                    /* RANGE  */
  YYSYMBOL_READ_P = 342,                   /* READ_P  */
  YYSYMBOL_REAL = 343,                     /* REAL  */
  YYSYMBOL_REASSIGN = 344,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 345,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 346,                /* RECURSIVE  */
  YYSYMBOL_REF = 347,                      /* REF  */
  YYSYMBOL_REFERENCES = 348,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 349,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 350,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 351,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 352,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 353,                  /* RELEASE  */
  YYSYMBOL_RENAME = 354,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 355,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 356,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 357,                  /* REPLICA  */
  YYSYMBOL_RESET = 358,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 359,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 360,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 361,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 362,                /* RETURNING  */
  YYSYMBOL_RETURNS = 363,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 364,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 365,                    /* RIGHT  */
  YYSYMBOL_ROLE = 366,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 367,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 368,                   /* ROLLUP  */
  YYSYMBOL_ROW = 369,                      /* ROW  */
  YYSYMBOL_ROWS = 370,                     /* ROWS  */
  YYSYMBOL_RULE = 371,                     /* RULE  */
  YYSYMBOL_SAMPLE = 372,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 373,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 374,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 375,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 376,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 377,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 378,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 379,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 380,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 381,                   /* SECRET  */
  YYSYMBOL_SECURITY = 382,                 /* SECURITY  */
  YYSYMBOL_SELECT = 383,                   /* SELECT  */
  YYSYMBOL_SEMI = 384,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 385,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 386,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 387,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 388,                   /* SERVER  */
  YYSYMBOL_SESSION = 389,                  /* SESSION  */
  YYSYMBOL_SET = 390,                      /* SET  */
  YYSYMBOL_SETOF = 391,                    /* SETOF  */
  YYSYMBOL_SETS = 392,                     /* SETS  */
  YYSYMBOL_SHARE = 393,                    /* SHARE  */
  YYSYMBOL_SHOW = 394,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 395,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 396,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 397,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 398,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 399,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 400,                     /* SOME  */
  YYSYMBOL_SORTED = 401,                   /* SORTED  */
  YYSYMBOL_SQL_P = 402,                    /* SQL_P  */
  YYSYMBOL_STABLE = 403,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 404,             /* STANDALONE_P  */
  YYSYMBOL_START = 405,                    /* START  */
  YYSYMBOL_STATEMENT = 406,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 407,               /* STATISTICS  */
  YYSYMBOL_STDIN = 408,                    /* STDIN  */
  YYSYMBOL_STDOUT = 409,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 410,                  /* STORAGE  */
  YYSYMBOL_STORED = 411,                   /* STORED  */
  YYSYMBOL_STRICT_P = 412,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 413,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 414,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 415,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 416,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 417,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 418,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 419,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 420,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 421,                    /* TABLE  */
  YYSYMBOL_TABLES = 422,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 423,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 424,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 425,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 426,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 427,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 428,                   /* TEXT_P  */
  YYSYMBOL_THEN = 429,                     /* THEN  */
  YYSYMBOL_TIES = 430,                     /* TIES  */
  YYSYMBOL_TIME = 431,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 432,                /* TIMESTAMP  */
  YYSYMBOL_TO = 433,                       /* TO  */
  YYSYMBOL_TRAILING = 434,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 435,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 436,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 437,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 438,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 439,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 440,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 441,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 442,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 443,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 444,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 445,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 446,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 447,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 448,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 449,                    /* UNION  */
  YYSYMBOL_UNIQUE = 450,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 451,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 452,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 453,                 /* UNLOGGED  */
  YYSYMBOL_UNPACK = 454,                   /* UNPACK  */
  YYSYMBOL_UNPIVOT = 455,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 456,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 457,                   /* UPDATE  */
  YYSYMBOL_USE_P = 458,                    /* USE_P  */
  YYSYMBOL_USER = 459,                     /* USER  */
  YYSYMBOL_USING = 460,                    /* USING  */
  YYSYMBOL_VACUUM = 461,                   /* VACUUM  */
  YYSYMBOL_VALID = 462,                    /* VALID  */
  YYSYMBOL_VALIDATE = 463,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 464,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 465,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 466,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 467,                  /* VARCHAR  */
  YYSYMBOL_VARIABLE_P = 468,               /* VARIABLE_P  */
  YYSYMBOL_VARIADIC = 469,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 470,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 471,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 472,                /* VERSION_P  */
  YYSYMBOL_VIEW = 473,                     /* VIEW  */
  YYSYMBOL_VIEWS = 474,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 475,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 476,                 /* VOLATILE  */
  YYSYMBOL_WEEK_P = 477,                   /* WEEK_P  */
  YYSYMBOL_WEEKS_P = 478,                  /* WEEKS_P  */
  YYSYMBOL_WHEN = 479,                     /* WHEN  */
  YYSYMBOL_WHERE = 480,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 481,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 482,                   /* WINDOW  */
  YYSYMBOL_WITH = 483,                     /* WITH  */
  YYSYMBOL_WITHIN = 484,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 485,                  /* WITHOUT  */
  YYSYMBOL_WORK = 486,                     /* WORK  */
  YYSYMBOL_WRAPPER = 487,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 488,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 489,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 490,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 491,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 492,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 493,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 494,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 495,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 496,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 497,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 498,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 499,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 500,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 501,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 502,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 503,                    /* YES_P  */
  YYSYMBOL_ZONE = 504,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 505,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 506,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 507,                  /* WITH_LA  */
  YYSYMBOL_508_ = 508,                     /* '<'  */
  YYSYMBOL_509_ = 509,                     /* '>'  */
  YYSYMBOL_510_ = 510,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 511,                /* POSTFIXOP  */
  YYSYMBOL_512_ = 512,                     /* '+'  */
  YYSYMBOL_513_ = 513,                     /* '-'  */
  YYSYMBOL_514_ = 514,                     /* '*'  */
  YYSYMBOL_515_ = 515,                     /* '/'  */
  YYSYMBOL_516_ = 516,                     /* '%'  */
  YYSYMBOL_517_ = 517,                     /* '^'  */
  YYSYMBOL_UMINUS = 518,                   /* UMINUS  */
  YYSYMBOL_519_ = 519,                     /* '['  */
  YYSYMBOL_520_ = 520,                     /* ']'  */
  YYSYMBOL_521_ = 521,                     /* '('  */
  YYSYMBOL_522_ = 522,                     /* ')'  */
  YYSYMBOL_523_ = 523,                     /* '.'  */
  YYSYMBOL_524_ = 524,                     /* ';'  */
  YYSYMBOL_525_ = 525,                     /* ','  */
  YYSYMBOL_526_ = 526,                     /* ':'  */
  YYSYMBOL_527_ = 527,                     /* '?'  */
  YYSYMBOL_528_ = 528,                     /* '$'  */
  YYSYMBOL_529_ = 529,                     /* '#'  */
  YYSYMBOL_530_ = 530,                     /* '{'  */
  YYSYMBOL_531_ = 531,                     /* '}'  */
  YYSYMBOL_YYACCEPT = 532,                 /* $accept  */
  YYSYMBOL_stmtblock = 533,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 534,                /* stmtmulti  */
  YYSYMBOL_stmt = 535,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 536,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 537,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 538,               /* SeqOptList  */
  YYSYMBOL_opt_with = 539,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 540,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 541,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 542,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 543,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 544,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 545, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 546,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 547, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 548, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 549,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 550,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 551, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 552,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 553,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 554,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 555,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 556,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 557,               /* DetachStmt  */
  YYSYMBOL_opt_database = 558,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 559,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 560,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 561,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 562,               /* opt_col_id  */
  YYSYMBOL_CommentOnStmt = 563,            /* CommentOnStmt  */
  YYSYMBOL_comment_value = 564,            /* comment_value  */
  YYSYMBOL_comment_on_type_any_name = 565, /* comment_on_type_any_name  */
  YYSYMBOL_qualified_name = 566,           /* qualified_name  */
  YYSYMBOL_ColId = 567,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 568,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 569,                   /* Sconst  */
  YYSYMBOL_indirection = 570,              /* indirection  */
  YYSYMBOL_indirection_el = 571,           /* indirection_el  */
  YYSYMBOL_attr_name = 572,                /* attr_name  */
  YYSYMBOL_ColLabel = 573,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 574,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 575,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 576,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 577,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 578, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 579,                /* opt_using  */
  YYSYMBOL_opt_as = 580,                   /* opt_as  */
  YYSYMBOL_opt_program = 581,              /* opt_program  */
  YYSYMBOL_copy_options = 582,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 583,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 584,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 585,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 586,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 587,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 588,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 589, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 590,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 591,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 592,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 593,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 594,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 595, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 596,       /* generic_option_arg  */
  YYSYMBOL_key_action = 597,               /* key_action  */
  YYSYMBOL_ColConstraint = 598,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 599,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 600,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 601,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 602,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 603,      /* generic_option_elem  */
  YYSYMBOL_key_update = 604,               /* key_update  */
  YYSYMBOL_key_actions = 605,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 606,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 607,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 608,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 609,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 610,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 611,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 612,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 613,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 614,                  /* OptWith  */
  YYSYMBOL_definition = 615,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 616,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 617,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 618,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 619,                /* columnDef  */
  YYSYMBOL_def_list = 620,                 /* def_list  */
  YYSYMBOL_index_name = 621,               /* index_name  */
  YYSYMBOL_TableElement = 622,             /* TableElement  */
  YYSYMBOL_def_elem = 623,                 /* def_elem  */
  YYSYMBOL_opt_definition = 624,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 625,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 626,               /* columnElem  */
  YYSYMBOL_opt_column_list = 627,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 628,              /* ColQualList  */
  YYSYMBOL_key_delete = 629,               /* key_delete  */
  YYSYMBOL_reloption_elem = 630,           /* reloption_elem  */
  YYSYMBOL_columnList = 631,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 632,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 633,                /* func_type  */
  YYSYMBOL_ConstraintElem = 634,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 635,         /* TableElementList  */
  YYSYMBOL_key_match = 636,                /* key_match  */
  YYSYMBOL_TableLikeClause = 637,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 638,                  /* OptTemp  */
  YYSYMBOL_generated_when = 639,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 640,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 641,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 642,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 643,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 644,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 645,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 646,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 647,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 648,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 649,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 650,       /* CreateFunctionStmt  */
  YYSYMBOL_table_macro_definition = 651,   /* table_macro_definition  */
  YYSYMBOL_table_macro_definition_parens = 652, /* table_macro_definition_parens  */
  YYSYMBOL_table_macro_list_internal = 653, /* table_macro_list_internal  */
  YYSYMBOL_table_macro_list = 654,         /* table_macro_list  */
  YYSYMBOL_macro_definition = 655,         /* macro_definition  */
  YYSYMBOL_macro_definition_list = 656,    /* macro_definition_list  */
  YYSYMBOL_macro_alias = 657,              /* macro_alias  */
  YYSYMBOL_param_list = 658,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 659,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 660,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 661,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 662,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 663,          /* opt_secret_name  */
  YYSYMBOL_opt_persist = 664,              /* opt_persist  */
  YYSYMBOL_opt_storage_specifier = 665,    /* opt_storage_specifier  */
  YYSYMBOL_create_secret_generic_opt_arg = 666, /* create_secret_generic_opt_arg  */
  YYSYMBOL_create_secret_generic_opt_elem = 667, /* create_secret_generic_opt_elem  */
  YYSYMBOL_create_secret_generic_opt_list = 668, /* create_secret_generic_opt_list  */
  YYSYMBOL_CreateSeqStmt = 669,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 670,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 671,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 672,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 673,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 674,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 675,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 676,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 677,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 678,             /* using_clause  */
  YYSYMBOL_DropStmt = 679,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 680,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 681,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 682,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 683,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 684, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 685,           /* DropSecretStmt  */
  YYSYMBOL_opt_storage_drop_specifier = 686, /* opt_storage_drop_specifier  */
  YYSYMBOL_ExecuteStmt = 687,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 688,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 689,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 690,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 691,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 692,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 693,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 694,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 695,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 696, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 697,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 698,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 699,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 700,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 701,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 702,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 703,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 704,                /* IndexStmt  */
  YYSYMBOL_access_method = 705,            /* access_method  */
  YYSYMBOL_access_method_clause = 706,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 707,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 708,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 709,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 710,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 711,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 712,              /* insert_rest  */
  YYSYMBOL_insert_target = 713,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 714,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 715,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 716,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 717,       /* insert_column_item  */
  YYSYMBOL_set_clause = 718,               /* set_clause  */
  YYSYMBOL_opt_or_action = 719,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 720,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 721,               /* index_elem  */
  YYSYMBOL_returning_clause = 722,         /* returning_clause  */
  YYSYMBOL_override_kind = 723,            /* override_kind  */
  YYSYMBOL_set_target_list = 724,          /* set_target_list  */
  YYSYMBOL_opt_collate = 725,              /* opt_collate  */
  YYSYMBOL_opt_class = 726,                /* opt_class  */
  YYSYMBOL_insert_column_list = 727,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 728,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 729, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 730,             /* index_params  */
  YYSYMBOL_set_target = 731,               /* set_target  */
  YYSYMBOL_LoadStmt = 732,                 /* LoadStmt  */
  YYSYMBOL_opt_force = 733,                /* opt_force  */
  YYSYMBOL_file_name = 734,                /* file_name  */
  YYSYMBOL_opt_ext_version = 735,          /* opt_ext_version  */
  YYSYMBOL_PragmaStmt = 736,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 737,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 738,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 739,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 740,               /* RenameStmt  */
  YYSYMBOL_opt_column = 741,               /* opt_column  */
  YYSYMBOL_SelectStmt = 742,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 743,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 744,         /* select_no_parens  */
  YYSYMBOL_select_clause = 745,            /* select_clause  */
  YYSYMBOL_opt_select = 746,               /* opt_select  */
  YYSYMBOL_simple_select = 747,            /* simple_select  */
  YYSYMBOL_value_or_values = 748,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 749,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 750,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 751,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 752, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 753,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 754,              /* with_clause  */
  YYSYMBOL_cte_list = 755,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 756,        /* common_table_expr  */
  YYSYMBOL_opt_on_key = 757,               /* opt_on_key  */
  YYSYMBOL_column_ref_list_opt_comma = 758, /* column_ref_list_opt_comma  */
  YYSYMBOL_column_ref_list = 759,          /* column_ref_list  */
  YYSYMBOL_opt_materialized = 760,         /* opt_materialized  */
  YYSYMBOL_into_clause = 761,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 762,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 763,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 764,          /* all_or_distinct  */
  YYSYMBOL_by_name = 765,                  /* by_name  */
  YYSYMBOL_distinct_clause = 766,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 767,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 768,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 769,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 770,              /* sort_clause  */
  YYSYMBOL_sortby_list = 771,              /* sortby_list  */
  YYSYMBOL_sortby = 772,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 773,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 774,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 775,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 776,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 777,             /* limit_clause  */
  YYSYMBOL_offset_clause = 778,            /* offset_clause  */
  YYSYMBOL_sample_value = 779,             /* sample_value  */
  YYSYMBOL_sample_count = 780,             /* sample_count  */
  YYSYMBOL_sample_clause = 781,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 782,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 783,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 784,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 785,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 786,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 787,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 788,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 789, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 790,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 791,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 792,            /* first_or_next  */
  YYSYMBOL_group_clause = 793,             /* group_clause  */
  YYSYMBOL_group_by_list = 794,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 795,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 796,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 797,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 798,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 799,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 800,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 801,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 802,            /* having_clause  */
  YYSYMBOL_qualify_clause = 803,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 804,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 805,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 806,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 807,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 808,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 809,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 810,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 811,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 812,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 813,              /* from_clause  */
  YYSYMBOL_from_list = 814,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 815,      /* from_list_opt_comma  */
  YYSYMBOL_alias_prefix_colon_clause = 816, /* alias_prefix_colon_clause  */
  YYSYMBOL_table_ref = 817,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 818,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 819,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 820,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 821,             /* pivot_header  */
  YYSYMBOL_pivot_value = 822,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 823,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 824,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 825,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 826,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 827,             /* joined_table  */
  YYSYMBOL_alias_clause = 828,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 829,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 830,        /* func_alias_clause  */
  YYSYMBOL_join_type = 831,                /* join_type  */
  YYSYMBOL_join_outer = 832,               /* join_outer  */
  YYSYMBOL_join_qual = 833,                /* join_qual  */
  YYSYMBOL_relation_expr = 834,            /* relation_expr  */
  YYSYMBOL_func_table = 835,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 836,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 837,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 838,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 839,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 840,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 841,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 842,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 843,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 844,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 845,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 846,             /* opt_Typename  */
  YYSYMBOL_Typename = 847,                 /* Typename  */
  YYSYMBOL_qualified_typename = 848,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 849,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 850,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 851,            /* ConstTypename  */
  YYSYMBOL_GenericType = 852,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 853,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 854,                  /* Numeric  */
  YYSYMBOL_opt_float = 855,                /* opt_float  */
  YYSYMBOL_Bit = 856,                      /* Bit  */
  YYSYMBOL_ConstBit = 857,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 858,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 859,         /* BitWithoutLength  */
  YYSYMBOL_Character = 860,                /* Character  */
  YYSYMBOL_ConstCharacter = 861,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 862,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 863,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 864,                /* character  */
  YYSYMBOL_opt_varying = 865,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 866,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 867,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 868,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 869,             /* year_keyword  */
  YYSYMBOL_month_keyword = 870,            /* month_keyword  */
  YYSYMBOL_day_keyword = 871,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 872,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 873,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 874,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 875,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 876,      /* microsecond_keyword  */
  YYSYMBOL_week_keyword = 877,             /* week_keyword  */
  YYSYMBOL_quarter_keyword = 878,          /* quarter_keyword  */
  YYSYMBOL_decade_keyword = 879,           /* decade_keyword  */
  YYSYMBOL_century_keyword = 880,          /* century_keyword  */
  YYSYMBOL_millennium_keyword = 881,       /* millennium_keyword  */
  YYSYMBOL_opt_interval = 882,             /* opt_interval  */
  YYSYMBOL_a_expr = 883,                   /* a_expr  */
  YYSYMBOL_b_expr = 884,                   /* b_expr  */
  YYSYMBOL_c_expr = 885,                   /* c_expr  */
  YYSYMBOL_d_expr = 886,                   /* d_expr  */
  YYSYMBOL_indirection_expr_or_a_expr = 887, /* indirection_expr_or_a_expr  */
  YYSYMBOL_param_expr = 888,               /* param_expr  */
  YYSYMBOL_indirection_expr = 889,         /* indirection_expr  */
  YYSYMBOL_list_expr = 890,                /* list_expr  */
  YYSYMBOL_struct_expr = 891,              /* struct_expr  */
  YYSYMBOL_map_expr = 892,                 /* map_expr  */
  YYSYMBOL_func_application = 893,         /* func_application  */
  YYSYMBOL_func_expr = 894,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 895,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 896, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension_lhs = 897,   /* list_comprehension_lhs  */
  YYSYMBOL_list_comprehension = 898,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 899,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 900,            /* filter_clause  */
  YYSYMBOL_export_clause = 901,            /* export_clause  */
  YYSYMBOL_window_clause = 902,            /* window_clause  */
  YYSYMBOL_window_definition_list = 903,   /* window_definition_list  */
  YYSYMBOL_window_definition = 904,        /* window_definition  */
  YYSYMBOL_over_clause = 905,              /* over_clause  */
  YYSYMBOL_window_specification = 906,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 907, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 908,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 909,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 910,             /* frame_extent  */
  YYSYMBOL_frame_bound = 911,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 912, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 913,            /* qualified_row  */
  YYSYMBOL_row = 914,                      /* row  */
  YYSYMBOL_dict_arg = 915,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 916,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 917, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 918,                  /* map_arg  */
  YYSYMBOL_map_arguments = 919,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 920,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 921, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 922,                 /* sub_type  */
  YYSYMBOL_all_Op = 923,                   /* all_Op  */
  YYSYMBOL_MathOp = 924,                   /* MathOp  */
  YYSYMBOL_qual_Op = 925,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 926,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 927,              /* subquery_Op  */
  YYSYMBOL_any_operator = 928,             /* any_operator  */
  YYSYMBOL_c_expr_list = 929,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 930,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 931,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 932,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 933,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 934,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 935,            /* func_arg_expr  */
  YYSYMBOL_type_list = 936,                /* type_list  */
  YYSYMBOL_extract_list = 937,             /* extract_list  */
  YYSYMBOL_extract_arg = 938,              /* extract_arg  */
  YYSYMBOL_overlay_list = 939,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 940,          /* overlay_placing  */
  YYSYMBOL_position_list = 941,            /* position_list  */
  YYSYMBOL_substr_list = 942,              /* substr_list  */
  YYSYMBOL_substr_from = 943,              /* substr_from  */
  YYSYMBOL_substr_for = 944,               /* substr_for  */
  YYSYMBOL_trim_list = 945,                /* trim_list  */
  YYSYMBOL_in_expr = 946,                  /* in_expr  */
  YYSYMBOL_case_expr = 947,                /* case_expr  */
  YYSYMBOL_when_clause_list = 948,         /* when_clause_list  */
  YYSYMBOL_when_clause = 949,              /* when_clause  */
  YYSYMBOL_case_default = 950,             /* case_default  */
  YYSYMBOL_case_arg = 951,                 /* case_arg  */
  YYSYMBOL_columnrefList = 952,            /* columnrefList  */
  YYSYMBOL_columnref = 953,                /* columnref  */
  YYSYMBOL_columnref_opt_indirection = 954, /* columnref_opt_indirection  */
  YYSYMBOL_opt_slice_bound = 955,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 956,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 957,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 958,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 959, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 960,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 961, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 962,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 963,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 964,                /* target_el  */
  YYSYMBOL_except_list = 965,              /* except_list  */
  YYSYMBOL_except_name = 966,              /* except_name  */
  YYSYMBOL_except_name_list = 967,         /* except_name_list  */
  YYSYMBOL_except_name_list_opt_comma = 968, /* except_name_list_opt_comma  */
  YYSYMBOL_opt_except_list = 969,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 970,          /* replace_list_el  */
  YYSYMBOL_replace_list = 971,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 972,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 973,         /* opt_replace_list  */
  YYSYMBOL_rename_list_el = 974,           /* rename_list_el  */
  YYSYMBOL_rename_list = 975,              /* rename_list  */
  YYSYMBOL_rename_list_opt_comma = 976,    /* rename_list_opt_comma  */
  YYSYMBOL_opt_rename_list = 977,          /* opt_rename_list  */
  YYSYMBOL_qualified_name_list = 978,      /* qualified_name_list  */
  YYSYMBOL_name_list = 979,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 980,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 981, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 982,                     /* name  */
  YYSYMBOL_func_name = 983,                /* func_name  */
  YYSYMBOL_AexprConst = 984,               /* AexprConst  */
  YYSYMBOL_Iconst = 985,                   /* Iconst  */
  YYSYMBOL_type_function_name = 986,       /* type_function_name  */
  YYSYMBOL_function_name_token = 987,      /* function_name_token  */
  YYSYMBOL_type_name_token = 988,          /* type_name_token  */
  YYSYMBOL_any_name = 989,                 /* any_name  */
  YYSYMBOL_attrs = 990,                    /* attrs  */
  YYSYMBOL_opt_name_list = 991,            /* opt_name_list  */
  YYSYMBOL_param_name = 992,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 993,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 994,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 995,          /* opt_transaction  */
  YYSYMBOL_opt_transaction_type = 996,     /* opt_transaction_type  */
  YYSYMBOL_UpdateStmt = 997,               /* UpdateStmt  */
  YYSYMBOL_UpdateExtensionsStmt = 998,     /* UpdateExtensionsStmt  */
  YYSYMBOL_UseStmt = 999,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 1000,              /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 1001,      /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 1002,                /* opt_full  */
  YYSYMBOL_vacuum_option_list = 1003,      /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 1004,              /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 1005,       /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 1006,           /* generic_reset  */
  YYSYMBOL_reset_rest = 1007,              /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 1008,         /* VariableSetStmt  */
  YYSYMBOL_set_rest = 1009,                /* set_rest  */
  YYSYMBOL_generic_set = 1010,             /* generic_set  */
  YYSYMBOL_var_value = 1011,               /* var_value  */
  YYSYMBOL_zone_value = 1012,              /* zone_value  */
  YYSYMBOL_var_list = 1013,                /* var_list  */
  YYSYMBOL_VariableShowStmt = 1014,        /* VariableShowStmt  */
  YYSYMBOL_describe_or_desc = 1015,        /* describe_or_desc  */
  YYSYMBOL_show_or_describe = 1016,        /* show_or_describe  */
  YYSYMBOL_opt_tables = 1017,              /* opt_tables  */
  YYSYMBOL_var_name = 1018,                /* var_name  */
  YYSYMBOL_ViewStmt = 1019,                /* ViewStmt  */
  YYSYMBOL_opt_check_option = 1020         /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  878
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   75012

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  532
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  489
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2197
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3657

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   764


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   529,   528,   516,     2,     2,
     521,   522,   514,   512,   525,   513,   523,   515,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   526,   524,
     508,   510,   509,   527,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   519,     2,   520,   517,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   530,     2,   531,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   511,   518
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   511,   511,   527,   539,   548,   549,   550,   551,   552,
     553,   554,   555,   556,   557,   558,   559,   560,   561,   562,
     563,   564,   565,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
     583,   584,   585,   586,   587,   588,   590,     9,    18,    27,
      36,    45,    54,    63,    72,    85,    87,    93,    94,    99,
     103,   107,   118,   126,   130,   139,   148,   157,   166,   175,
     183,   191,   199,   207,   216,   224,   232,   241,   250,   259,
     268,   285,   294,   303,   312,   322,   335,   350,   359,   367,
     382,   390,   400,   410,   417,   424,   432,   439,   450,   451,
     456,   460,   465,   470,   478,   479,   484,   488,   489,   490,
       7,    13,    19,    25,     9,    13,    44,    45,    46,    50,
      51,    55,    59,    60,    64,    70,    75,    76,    77,    78,
       6,    15,    25,    35,    45,    55,    65,    75,    85,    95,
     106,   117,   127,   140,   141,     9,    23,    29,    36,    42,
      49,    59,    63,    71,    72,    73,    77,    86,    95,   102,
     103,   108,   120,   125,   150,   155,   160,   166,   176,   186,
     192,   203,   214,   229,   230,   236,   237,   242,   243,   249,
     250,   254,   255,   260,   262,   268,   269,   273,   274,   277,
     278,   283,     7,    16,    25,    46,    47,    50,    54,     7,
      14,    22,     9,    19,    29,    42,    43,     7,    17,    27,
      40,    41,    45,    46,    47,    51,    52,    57,    61,    68,
      72,     7,     7,    14,    31,    51,    55,    65,    69,    75,
      76,     9,    17,    29,    30,    34,    35,    36,    41,    42,
      43,    48,    52,    56,    60,    64,    68,    72,    76,    80,
      84,    88,    92,    97,   101,   105,   112,   113,   117,   118,
     119,     7,    16,    28,    29,     2,    10,    17,    24,    32,
      40,    51,    52,    53,    57,    58,    59,     2,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    95,    96,    97,    98,    99,   100,   105,   106,   111,
     112,   113,   118,   119,   120,     8,    18,    29,    39,    49,
      59,    71,    81,    91,    95,   102,   106,   110,   119,   123,
     130,   131,   135,   139,     7,     1,    30,    49,    61,    62,
      63,    67,    68,    73,    77,    82,    86,    94,    95,    99,
     100,   105,   106,   110,   111,   116,   117,   118,   119,   120,
     121,   122,   123,   128,   136,   140,   145,   146,   151,   155,
     160,   164,   168,   172,   176,   180,   184,   188,   192,   196,
     200,   204,   208,   212,   216,   220,   228,   233,   234,   235,
     236,   237,   243,   247,    47,    48,    52,    53,    54,    72,
      73,    80,    88,    96,   104,   112,   120,   131,   132,   159,
     164,   172,   188,   205,   223,   241,   242,   261,   265,   269,
     273,   277,   287,   298,   308,   317,   328,   339,   351,   366,
     384,   384,   388,   388,   392,   392,   396,   402,   409,   413,
     414,   418,   419,   433,   440,   447,   457,   458,   461,   475,
     476,   480,   481,   485,   486,   490,   491,   492,   496,   507,
     515,   520,   525,   530,   535,   543,   551,   556,   561,   568,
     569,   573,   574,   575,   579,   586,   587,   591,   592,   596,
     597,   598,   602,   603,   607,   608,   624,   625,   628,   637,
     648,   649,   650,   653,   654,   655,   659,   660,   661,   662,
     666,   667,   671,   673,   689,   691,   696,   699,   704,   708,
     712,   719,   723,   727,   731,   738,   743,   750,   751,   755,
     760,   764,   768,   776,   783,   784,   789,   790,   794,   795,
     800,   802,   804,   809,   829,   830,   832,   837,   838,   842,
     843,   846,   847,   872,   873,   878,   882,   883,   887,   888,
     892,   893,   894,   895,   896,   900,   913,   920,   927,   934,
     935,   939,   940,   944,   945,   949,   950,   954,   955,   959,
     960,   964,   975,   976,   977,   978,   982,   983,   988,   989,
     990,   999,  1005,  1014,  1015,  1028,  1029,  1033,  1034,  1038,
    1039,  1043,  1054,  1060,  1066,  1074,  1082,  1092,  1100,  1109,
    1118,  1127,  1131,  1136,  1141,  1152,  1166,  1167,  1170,  1171,
    1172,  1175,  1183,  1193,  1194,  1195,  1198,  1206,  1215,  1219,
    1226,  1227,  1231,  1240,  1244,  1269,  1273,  1286,  1300,  1315,
    1327,  1340,  1354,  1368,  1381,  1396,  1415,  1421,  1426,  1432,
    1439,  1440,  1448,  1452,  1456,  1462,  1469,  1474,  1475,  1476,
    1477,  1478,  1479,  1483,  1484,  1496,  1497,  1502,  1509,  1516,
    1523,  1555,  1566,  1579,  1584,  1585,  1588,  1589,  1592,  1593,
    1598,  1599,  1604,  1608,  1614,  1635,  1643,  1657,  1660,  1664,
    1664,  1667,  1668,  1670,  1675,  1682,  1687,  1693,  1698,  1704,
    1708,  1715,  1722,  1732,  1733,  1737,  1739,  1742,  1746,  1747,
    1748,  1749,  1750,  1751,  1756,  1776,  1777,  1778,  1779,  1790,
    1804,  1805,  1811,  1816,  1821,  1826,  1831,  1836,  1841,  1846,
    1852,  1858,  1864,  1871,  1893,  1902,  1906,  1914,  1918,  1926,
    1938,  1959,  1963,  1969,  1973,  1986,  1994,  2004,  2006,  2008,
    2010,  2012,  2014,  2019,  2020,  2027,  2036,  2044,  2053,  2064,
    2072,  2073,  2074,  2078,  2078,  2081,  2081,  2084,  2084,  2087,
    2087,  2090,  2090,  2093,  2093,  2096,  2096,  2099,  2099,  2102,
    2102,  2105,  2105,  2108,  2108,  2111,  2111,  2114,  2114,  2117,
    2119,  2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,  2137,
    2139,  2141,  2143,  2148,  2153,  2159,  2166,  2171,  2177,  2183,
    2214,  2216,  2218,  2226,  2241,  2243,  2245,  2247,  2249,  2251,
    2253,  2255,  2257,  2259,  2261,  2263,  2265,  2267,  2269,  2271,
    2274,  2276,  2278,  2281,  2283,  2285,  2287,  2289,  2294,  2299,
    2306,  2311,  2318,  2323,  2330,  2335,  2343,  2351,  2359,  2367,
    2385,  2393,  2401,  2409,  2417,  2425,  2433,  2437,  2453,  2461,
    2469,  2477,  2485,  2493,  2501,  2505,  2509,  2513,  2517,  2525,
    2533,  2541,  2549,  2569,  2591,  2602,  2609,  2623,  2631,  2636,
    2646,  2655,  2676,  2678,  2680,  2682,  2684,  2686,  2688,  2690,
    2692,  2694,  2696,  2698,  2700,  2702,  2704,  2706,  2708,  2710,
    2712,  2714,  2716,  2718,  2722,  2726,  2730,  2744,  2745,  2759,
    2760,  2761,  2772,  2796,  2807,  2817,  2821,  2825,  2832,  2836,
    2843,  2850,  2851,  2852,  2853,  2854,  2855,  2856,  2857,  2868,
    2873,  2882,  2888,  2895,  2915,  2919,  2926,  2933,  2941,  2949,
    2960,  2980,  3016,  3027,  3028,  3035,  3041,  3043,  3045,  3049,
    3058,  3063,  3070,  3085,  3092,  3096,  3100,  3104,  3108,  3118,
    3126,  3135,  3157,  3158,  3162,  3163,  3164,  3168,  3169,  3176,
    3177,  3181,  3182,  3187,  3195,  3197,  3211,  3214,  3241,  3242,
    3245,  3246,  3254,  3262,  3270,  3279,  3289,  3307,  3353,  3362,
    3371,  3380,  3389,  3401,  3402,  3403,  3404,  3405,  3419,  3420,
    3423,  3424,  3428,  3438,  3439,  3443,  3444,  3448,  3455,  3456,
    3461,  3462,  3467,  3468,  3471,  3472,  3473,  3476,  3477,  3480,
    3481,  3482,  3483,  3484,  3485,  3486,  3487,  3488,  3489,  3490,
    3491,  3492,  3493,  3496,  3498,  3503,  3505,  3510,  3512,  3514,
    3516,  3518,  3520,  3522,  3524,  3538,  3540,  3545,  3549,  3556,
    3561,  3567,  3571,  3578,  3583,  3590,  3595,  3603,  3607,  3613,
    3617,  3626,  3637,  3638,  3642,  3646,  3653,  3654,  3655,  3656,
    3657,  3658,  3659,  3660,  3661,  3662,  3663,  3664,  3665,  3666,
    3667,  3677,  3681,  3688,  3695,  3696,  3712,  3716,  3721,  3725,
    3740,  3745,  3749,  3752,  3755,  3756,  3757,  3760,  3767,  3768,
    3769,  3779,  3793,  3794,  3798,  3809,  3810,  3813,  3814,  3818,
    3819,  3822,  3828,  3832,  3839,  3847,  3855,  3863,  3873,  3874,
    3879,  3880,  3884,  3885,  3886,  3890,  3899,  3907,  3915,  3924,
    3939,  3940,  3945,  3946,  3956,  3957,  3961,  3962,  3966,  3967,
    3970,  3986,  3994,  4002,  4012,  4013,  4017,  4021,  4027,  4029,
    4034,  4035,  4039,  4040,  4043,  4047,  4048,  4052,  4053,  4056,
    4057,  4058,  4061,  4065,  4066,  4070,  4071,  4073,  4074,  4075,
    4085,  4086,  4090,  4092,  4098,  4099,  4103,  4104,  4107,  4118,
    4121,  4132,  4136,  4140,  4152,  4156,  4165,  4172,  4210,  4214,
    4218,  4222,  4226,  4230,  4234,  4240,  4257,  4258,  4259,  4262,
    4263,  4264,  4267,  4268,  4269,  4272,  4273,  4276,  4278,  4283,
    4284,  4287,  4291,  4292,     7,    18,    19,    23,    24,    25,
      26,    27,    28,     7,    26,    50,    73,    80,    85,    86,
      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,
      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,
      52,     5,    12,    22,    23,     7,    15,    26,    27,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,     7,
      19,    33,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    91,    92,    93,    98,    99,   104,   108,   116,
     117,   122,   123,   124,   130,   135,   143,   144,    10,    16,
      22,    28,    34,    44,    45,    53,    64,    76,    84,    95,
     101,   105,   109,   124,   131,   132,   133,   137,   138,     7,
      17,    26,    35,    46,    47,    49,    50,    53,    54,    55,
       8,    22,    36,    48,    56,    70,    71,    72,    73,    74,
      87,    88,    93,    94,    98,    99,     7,    18,    31,    35,
      42,    53,    54,    60,    61,     9,    19,     7,    16,    25,
      37,    44,    51,    60,    61,    65,    66,     2,     7,    12,
      17,    22,    31,    38,    48,    49,    56,     3,    10,    17,
      24,    31,    38,    45,    52,    61,    61,    63,    63,    65,
      65,    67,    68,     6,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    11,    24,    37,    54,    55,    56,    61,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P",
  "CENTURIES_P", "CENTURY_P", "CHAIN", "CHAR_P", "CHARACTER",
  "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
  "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
  "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURSOR", "CYCLE", "DATA_P",
  "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE", "DEC", "DECADE_P",
  "DECADES_P", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION",
  "EXTENSIONS", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "GROUPING_ID", "GROUPS", "HANDLER", "HAVING", "HEADER_P", "HOLD",
  "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE",
  "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDE_P",
  "INCLUDING", "INCREMENT", "INDEX", "INDEXES", "INHERIT", "INHERITS",
  "INITIALLY", "INLINE_P", "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE",
  "INSERT", "INSTALL", "INSTEAD", "INT_P", "INTEGER", "INTERSECT",
  "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN",
  "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
  "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
  "MICROSECOND_P", "MICROSECONDS_P", "MILLENNIA_P", "MILLENNIUM_P",
  "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE",
  "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL",
  "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING",
  "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC",
  "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY",
  "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS",
  "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED",
  "OWNER", "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PARTITIONED",
  "PASSING", "PASSWORD", "PERCENT", "PERSISTENT", "PIVOT", "PIVOT_LONGER",
  "PIVOT_WIDER", "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL",
  "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE",
  "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUARTER_P", "QUARTERS_P", "QUOTE", "RANGE",
  "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE", "SCROLL", "SEARCH",
  "SECOND_P", "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI",
  "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET",
  "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP",
  "SMALLINT", "SNAPSHOT", "SOME", "SORTED", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPACK", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER",
  "USING", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIABLE_P", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P",
  "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WEEK_P", "WEEKS_P", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "':'", "'?'", "'$'", "'#'",
  "'{'", "'}'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "CommentOnStmt", "comment_value", "comment_on_type_any_name",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "table_macro_definition",
  "table_macro_definition_parens", "table_macro_list_internal",
  "table_macro_list", "macro_definition", "macro_definition_list",
  "macro_alias", "param_list", "CreateSchemaStmt", "OptSchemaEltList",
  "schema_stmt", "CreateSecretStmt", "opt_secret_name", "opt_persist",
  "opt_storage_specifier", "create_secret_generic_opt_arg",
  "create_secret_generic_opt_elem", "create_secret_generic_opt_list",
  "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt", "opt_enum_val_list",
  "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "opt_storage_drop_specifier", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "opt_force", "file_name",
  "opt_ext_version", "PragmaStmt", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "RenameStmt", "opt_column", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause", "opt_select",
  "simple_select", "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_on_key",
  "column_ref_list_opt_comma", "column_ref_list", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_value", "sample_count",
  "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_list_opt_comma", "group_by_item",
  "empty_grouping_set", "rollup_clause", "cube_clause",
  "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
  "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
  "for_locking_items", "for_locking_item", "for_locking_strength",
  "locked_rels_list", "opt_nowait_or_skip", "values_clause",
  "values_clause_opt_comma", "from_clause", "from_list",
  "from_list_opt_comma", "alias_prefix_colon_clause", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "week_keyword",
  "quarter_keyword", "decade_keyword", "century_keyword",
  "millennium_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr_or_a_expr", "param_expr", "indirection_expr",
  "list_expr", "struct_expr", "map_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension_lhs", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnrefList", "columnref",
  "columnref_opt_indirection", "opt_slice_bound", "opt_indirection",
  "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "except_name", "except_name_list",
  "except_name_list_opt_comma", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "rename_list_el", "rename_list", "rename_list_opt_comma",
  "opt_rename_list", "qualified_name_list", "name_list",
  "name_list_opt_comma", "name_list_opt_comma_opt_bracket", "name",
  "func_name", "AexprConst", "Iconst", "type_function_name",
  "function_name_token", "type_name_token", "any_name", "attrs",
  "opt_name_list", "param_name", "ColLabelOrString", "TransactionStmt",
  "opt_transaction", "opt_transaction_type", "UpdateStmt",
  "UpdateExtensionsStmt", "UseStmt", "VacuumStmt", "vacuum_option_elem",
  "opt_full", "vacuum_option_list", "opt_freeze", "VariableResetStmt",
  "generic_reset", "reset_rest", "VariableSetStmt", "set_rest",
  "generic_set", "var_value", "zone_value", "var_list", "VariableShowStmt",
  "describe_or_desc", "show_or_describe", "opt_tables", "var_name",
  "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-3207)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2124)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7238,   457,   863, -3207, -3207,   686,   457, 51987, 67032,   155,
     457,   247,  4008, 53995, -3207, -3207, 48473,  5489,   457, 57494,
   74473,   309,   387, 33051,   719, 57996, -3207, -3207, -3207, 67032,
   57494, 58498,   457,   349, 67534, -3207,   457, 36065, 54497,   451,
   -3207, 57494,    48,   379, 59000, 57494,  2907,   970,   112, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207,   507, -3207, -3207, -3207, -3207,   182, -3207,
     826, -3207, -3207, -3207, -3207,   175, -3207,   990,   189, 33051,
   33051,   869,   553, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, 35562, -3207, -3207, -3207, -3207, 59502, 57494,
   60004, 54999, 60506, -3207,   811,   751,  1093,   789,   194, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207,   196, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207,   619, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207,   199, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207,   596,   209, -3207, -3207, -3207,
     653, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,  2139,
   -3207, -3207,  1084,  3576, 57494,   813,   822,   844, -3207, 61008,
   -3207,   823, 57494, -3207, -3207,   132,   831,  1013, -3207, -3207,
   55501, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, 48975, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207,   981, -3207, -3207,   801,
   -3207,   191, -3207, -3207,   841,   796, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207,   903, -3207, -3207, -3207,   931,
   68036, 61510, 62012, -3207,   819,  2076,  9545, 74491, 32045, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207,   507, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, 57996, 67032,   866,   889,  1105,   892, 34055,   896,
   36568,   901,   906,  1172,   920,   926,   937,   950,   379, 32548,
     890,   596,   966, 62514, 62514,    19, 33553,  2147, -3207, 62514,
   63016, -3207,   992, -3207,  1093, -3207, -3207, -3207, -3207,   528,
    1003, -3207, 63518, 63518, 63518,  1015,  1312, 63518, -3207, -3207,
   -3207,  1022, -3207, -3207,  1274, 20548, 20548, 68538, 68538,  1093,
   68538,  1070, 68538, -3207, -3207,    76,   789, -3207,   596, -3207,
   -3207,   869, -3207, -3207, 54497, -3207, -3207,   293,  1405, 20548,
   57494,  1055, -3207,  1069,  1055,  1085,  1094,  1098, -3207,  7238,
   -3207, 57494,  1420,  1332, 56003, 57996,   447,   447,  1606,   447,
     767,  1133,  3110,  1042, -3207,  1392, -3207,  1164,  1270,  1192,
    1486, -3207, -3207,  1562,  1359,  1381,  1593,  2701,  1595,  1435,
    1602,  1476,  1608,  1656,  1728,    38, -3207, 20548, 49477,   596,
   -3207, 11572, 20548, -3207, -3207, -3207,  1362, -3207, -3207, -3207,
   -3207, -3207, 57494, 67032,  1258,  1277, -3207, -3207, -3207, -3207,
    1374,  1536, -3207,  1775, -3207, -3207,  1353, 64020, 64522, 65024,
   65526, 69040,  1749, -3207, -3207,  1681, -3207, -3207, -3207,  1373,
   -3207, -3207, -3207,   178, 69542,  1696,  1339,    99, -3207,  1713,
     130, -3207,  1723,  1589, 15268, -3207,  1528, -3207, -3207, -3207,
     379, -3207, -3207, -3207,   706, -3207, -3207, 45379, 74491,  1461,
    1379, -3207, 20548, 20548,  1394,  4486, 62514, 63016, 20548, 57494,
   -3207, 20548, 25828,  1397, 20548, 20548, 12628, 20548, 31041, 62514,
    2147,  1380, -3207,   820, -3207, 57494,  1404, -3207,  1490,  1490,
     349, 33051,  1707, 32548,  1490,  1490,  1490, -3207,  1050,  1703,
    1629, -3207, 33051,  1629,  1128,  1409,  1706,  1629, -3207,   657,
    1710,  1490, 37070,  1411, -3207,  1490,  1640, -3207, -3207, 20548,
   15268, 70044,  1898, -3207, -3207, -3207, -3207,  1709, -3207, 67032,
    1421, -3207, -3207, -3207, -3207, -3207, -3207,   795,  1942,   174,
    1950, 20548,   174,   174,  1446,   218,   218, -3207,  1630,  1450,
   -3207,   220,  1456,  1463,  1977,  1981,   215,   141,  1002,   174,
   20548, -3207,   218,  1467,  1986,  1471,  1988,   179,   200, -3207,
    1473,   223, 20548, 20548, 20548,   489, 20548, 10516, -3207, 49477,
    1987, 57494,   613, -3207,   596,  1477,  1093, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207,  1478, -3207,   217,  6662, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207,  1511, -3207, -3207, -3207,
   -3207,  1698, 20548, -3207, -3207,  1480,  1707, -3207,   227, -3207,
   -3207,  1707, -3207, -3207, -3207, -3207, -3207,   234, -3207,  1897,
   20548, 20548, -3207,   596, -3207, 70531, -3207, -3207, -3207, -3207,
   -3207, -3207,   739, -3207,   507,   636, 47083,  1485,  1481,  1055,
   57494, 57494,  1542, -3207, -3207, -3207, -3207,  1069, 54497,   115,
    1798,   156,  1626,   149, -3207, -3207,   869,   869, 15796,  1468,
     257,   941, 16324, 21076,  1852,  1733,   266,   550,  1855, -3207,
    1740,  1967, 25828, 20548, 20548,   767,  1133, 20548, -3207, -3207,
   -3207,  1791, 57494, 52489,  1010,  1034,  1510,  1604,    11,   652,
    1948, -3207,  1517, -3207,  1611, 57494, 74015,   242, -3207,  1991,
     242,   242,   561,  1992,  1612,   267,  1780,   924,   426,  2736,
   -3207,  1517, 54497,   159,  1058,  1517, 57494,  1621,  1238,  1517,
    1656,  1093, 67032,  1379, -3207, -3207, 43209,  1530, -3207, -3207,
   -3207,   193, 15268, -3207,  1208,  1241,  1283,   485,   203,  1313,
    1335, 15268,  1361,  1466,   195,  1591,  1638,  1726,  1744,  1758,
    1760,  1762,  1777,   160,  1781,  1783,  1789,  1792,  1794,  1796,
   -3207,  1800,   198,  1805,   221,  1473, 15268,  1807, -3207,   205,
   -3207,   249, 47083,    43, -3207, -3207,  1810, 47171, -3207,  1840,
    1631,  1643, 67032,  1585, 57494,   888,  1690,  1926,  1979, 71033,
   57494,  1809,  2736,  1811,  1559,  2042,  1812,  1277,  1814,  1564,
    1815, -3207,  1892, -3207, 71520, 49477, -3207, -3207, -3207, -3207,
   -3207,  1945,  1927, 67032, 49477,  1577, -3207, -3207, 67032, -3207,
   57494, 57494, -3207, 57494, 67032, -3207,   851, 47083,  2088,   867,
   74491, 50983, -3207, -3207, -3207, -3207,   923,   940, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207,  1093, 49477, -3207,
    2038, 46005,  1580, 20548, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207,  1581,  1932, -3207, -3207,  6574,
    1583, 46045,  1584, 25828, 25828,   596,  1109, -3207, -3207, 25828,
    1588, 51485, 45917,  1582,  1594, 46399, 16852, 20548, 16852, 16852,
   46487, -3207,  1597, 46564, 62514,  1590, 57494, 30534, -3207, -3207,
   -3207, 20548, 20548,  2147, 56505,  1641,  1598, -3207, -3207, -3207,
   -3207, 33051, -3207,  1899, 33051, -3207, -3207,  4904, -3207, 33051,
    1900, 20548, 33051, -3207,  1841,  1845,  1601, 33051, -3207, 57494,
    1609, 57494, -3207, -3207, 47083, -3207,  1607,   877,  1610, -3207,
   -3207, -3207, -3207, -3207,  1667, -3207,  1667,  1667, -3207, -3207,
   -3207, -3207,  1620,  1620,  1625, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,  1628,  1002,
   -3207,  1667, -3207,  1620, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, 74015, -3207, -3207, -3207, -3207,   -63,   554, -3207,  1632,
   -3207, -3207, -3207, -3207, -3207,  1633, -3207,  1616,  2103, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,  7237,   883,
    1620,  2820, -3207, -3207, 20548, 20548, -3207, -3207,  1634, 47083,
    1668, -3207, -3207, 20548, 20548, -3207, -3207, -3207, -3207,  2148,
   -3207, 20548,  1667,  1667, -3207, 47475, -3207, 42092, 17380,  1727,
    1729,  2148, -3207,  2148, -3207, 20548, 47475,  2151,  2151,  1644,
   37572, -3207,  1803, 46652, -3207,  1651,  1752,  6713,  1645, -3207,
   -3207,  1649, -3207,  1652,  1657, 43873, 20548,   187,   596,   596,
   20548, -3207,  2148, 20548,  8200,  8200, -3207,   232, 70044, 20548,
   20548, 20548, 20548, 20548, 20548, 20548, 20548, 47971,  1745,   204,
   67032, 20548, 20548, 30021,   131, -3207, 20548,  1901, -3207,  1659,
   20548,  1757,   747, 20548, 20548, 20548, 20548, 20548, 20548, 20548,
   20548, 20548, -3207, -3207, 28996,   375,   674,  2010,  2030,    15,
     302, 20548,  2022, 11572, -3207,  2022, -3207, -3207, -3207, -3207,
   -3207,   228, -3207, -3207,  1607,  1607, 67032, -3207, 57494,   293,
   53493, 20548, -3207, -3207,  1671,  1676,  1970,  2163, -3207,  1747,
   -3207, -3207, 57494, -3207, 40584, 57996, 57996, -3207,  1994, -3207,
     331,  1679, -3207, 45878,  1939,  1994,   869, -3207, -3207, 26356,
    1820,  1989,  1923, -3207, -3207,  1903,  1904, -3207,  1694, 47311,
   21604, 21604, -3207,  1459, 47083,  1462, -3207, -3207, -3207, -3207,
   -3207, -3207,   720, -3207, 57494,   146, 38074, -3207,  1695,    97,
   -3207,  1853,  2041,  2003,  1852,   550,  1702, -3207,  1543,  1705,
   72022, 57494,  2002,  1955,  2006,   343, 70044, -3207, -3207, -3207,
   -3207, 57494, 67032, 66028, 72524, 49979, 57494,  2175,  2176, 49477,
   -3207, -3207,  2177,  2178, -3207, -3207, 57494,  1024, 57494,  6042,
   -3207, -3207, -3207, -3207,   242, -3207, -3207, -3207, -3207, -3207,
   67032, 57494, -3207, -3207,   242, 67032, 57494,   242, -3207,  1650,
   57494, 57494, 57494, 57494,  1675, 57494, 57494,  1093,  1728, -3207,
   -3207, -3207, 22132,    45,    45,  1944,  1956,  1960,  1722, 13156,
     249, -3207, 20548, 20548,   210,   315, 67032,  1914, -3207, -3207,
     894,  1962,   127, -3207,  1779, 57494, 57494, 57494, 57494, 67032,
   57494,  1857, -3207, -3207, -3207, -3207, -3207,  1732, -3207,  1735,
    2105,  2736, -3207,  2106, 52991,   912,  3727,  2108,  1778,  2111,
   13684, -3207, -3207,  1741, -3207, -3207,  1751,  2229,  2118,  2269,
    1756,  2005, -3207, -3207,  1993, -3207, 67032,  2275, -3207,    99,
   -3207, 49477, -3207,   130, -3207,  1995,   256, -3207, 15268, 20548,
   -3207, -3207, -3207, -3207, -3207, -3207,  1379, 29509, -3207,   899,
   -3207, -3207,  2241,  1093,  2241,   521, -3207, -3207,  2241, -3207,
    2227,  2241, -3207, 70044, -3207,  7654, -3207, 20548, 20548, -3207,
   20548,  2117, -3207,  2279,  2279, 70044, 25828, 25828, 25828, 25828,
   25828, 25828,   742,  1467, 25828, 25828, 25828, 25828, 25828, 25828,
   25828, 25828, 25828, 26884,   632, -3207, -3207,   921,  2254, 20548,
   20548,  2128,  2117, 20548, -3207, 70044,  1776, -3207,  1784,  1786,
   20548, -3207, 70044, -3207, 57494,  1787, -3207, -3207, -3207,    26,
    1790,  1795, -3207, -3207,  1707, -3207,   984,  1008, 57494,  3776,
    5267,  5969, -3207, -3207, 20548,  2119, -3207,  4904, 33051, -3207,
   20548,  1801, -3207, -3207, 33051,  2132, -3207, -3207, -3207, 38576,
    4904, 70044,   932, -3207, 57494, 70044,   947, 20548, -3207, 15268,
    2298, 70044,  2273, 67032, 67032,  2299,  1804,  1808,  2148,  1882,
   -3207,  1905,  1910,  1912, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, 70044, -3207, -3207, -3207, -3207,   288,
   -3207, -3207, -3207, -3207,  1802,  1813, 20548, 20548,    88, -3207,
    8101,  1825,  1827,  6017, -3207,  1806, -3207,  1799, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207,  1828, -3207,  1831, -3207,  1832,
    1830,  1833,  1836,  1837,  8352, 20548, 57494, -3207,  1854, 22660,
    1978, 67032, -3207, -3207, 20548, 20548, 57494, -3207,  2188, 47083,
   -3207,  1842,  1861,  8487, -3207, -3207, -3207,   167,   825, 47330,
     302,  7962,  7962,  7962, 47475, -3207, -3207, -3207,  1846, -3207,
   25828, 25828, -3207,  7574,  2120, 10516, -3207, -3207, -3207, -3207,
    2204, -3207,   978, -3207,  1858, -3207, -3207,  3193, -3207, 42092,
    7777, 20548,   212, -3207, 20548, 30021, 20548,  1951,  7962,  7962,
    7962,   436,   436,   167,   167,   167,   825,   302, -3207, -3207,
   -3207,  1865, 20548, 49477, -3207,  1871,  1874,  2243,  1471, 20548,
   -3207, -3207, 33051,  1641,    43,  1641,  2148,  8200, -3207,  1069,
   -3207, -3207,  1069, 47083, 57494, -3207,  1875,   667, 33051,  1919,
    2362,  2346, 67032, -3207, -3207,  1881,  2022,  1907,  1935,  1935,
   -3207, -3207, -3207, -3207,  1902, 20548,  3655,  1902, -3207,  1994,
      33,  2122,  1043,  1043,  1459,  2129, -3207, -3207,  1952, -3207,
   -3207, -3207, 20548, 14212,  1474, -3207,  1483, -3207, -3207, -3207,
   -3207, -3207,  1886, -3207,  2179, -3207, 57494, -3207, -3207, 25828,
    2365, 20548, 39078,  2366,  2155, -3207, -3207, -3207,  1996,  1517,
   20548,  2153, -3207,   185,  1909,  2280,   370,  2228, 67032, -3207,
     296,   297, -3207,   216,  2281,   256,  2282,   256, 49477, 49477,
   49477,   948, -3207, -3207, -3207,  1093, -3207, -3207, -3207,   446,
     976, -3207,  1915,  1917, -3207, -3207, -3207,  2007,  1364,  2736,
    1517, -3207, -3207, -3207, -3207, -3207, -3207, -3207,   263,  1613,
    1517,  2008, -3207,  2011, -3207,  2012,  1635,  1517, -3207, -3207,
    1728,  1379, 17908, 47083,   646,   249,   249,   249, -3207, -3207,
   -3207, 15268, -3207,  1924, 47083, 47083,   158, -3207, -3207, -3207,
   -3207,  1928, -3207,   378, -3207, 67032, -3207, -3207, -3207,  1914,
    1979, 57494,  2736,  1931,  2407,  1277,  1564,  1892, -3207,  2092,
      47,  2263, -3207, 67032, 57494, 57494, 57494, 57007, -3207, -3207,
   -3207,  1933,  1929, -3207,     6,  2165,  2166, 57494,  1974, 57494,
    1937,  2419, 57494, -3207,   991,  1564,  1564, 18436, 67032, -3207,
   49477,  2308, 57494,  1927, -3207, -3207, -3207, -3207, 67032, -3207,
   -3207, 47083, -3207,  1934, -3207, 20548, 50481, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, 49477, -3207,  1093, -3207,  1093,  2181,
   67032, 44375,  1093, 44877,  1093,  1940, -3207, 47083,  8933, 47083,
    2128, -3207,   244,  2279,  3401,  3401,  3401,  3591,  2294,   265,
    1947,  3401,  3401,  3401,   268,   268,   244,   244,   244,  2279,
     632,   992, 51485,  1953, -3207, 47083, 47083, -3207, -3207,  1949,
   -3207, -3207, -3207, -3207,  1954,  1958, -3207, -3207, -3207, -3207,
   67032,   177,  1641,   451,   451,   451,   451, -3207, 57494, 57494,
   57494, 47083,  2414,  2289, -3207,  4904, 47083, 57494, -3207, 27940,
   57494, -3207,  2311, -3207,  2401, -3207, 57494,   998, -3207, -3207,
   -3207,  1006,  1963,  1808, 70044,  1025,  1035, -3207,  2148,   171,
    1971,  1618,  1372,   891,  1507, -3207, 54497, -3207, -3207,  1972,
   46756, 20548, -3207,  2341, -3207, -3207, -3207, 20548, 20548, -3207,
   42092, -3207, -3207, -3207, -3207,   -58,   -58, -3207,  9022,  1854,
    1980,  1973, 57494, 10516, 47003, -3207, 39580, -3207, -3207,  2300,
    1982, -3207,  9072, 47083, -3207,  1803, -3207, -3207,  8200, 20548,
    3112,  3249, 20548,  1984, 20548,  2332, -3207, -3207,  1990, -3207,
   -3207, 70044, 20548,  1997,  5713, 25828, 25828,  5759, -3207,  5999,
   20548, 10516, -3207, 43248,  1999,  2000,  1944, 18964, -3207,  2207,
    2013, -3207,  2119,   249,  2119,  2014, -3207, -3207, -3207, 67032,
   -3207,  2264,  2001, -3207, 20548,  2154, 67032,   555,    73,  1041,
   -3207,   596, 40584,  1919, 20548, -3207, -3207,   230, -3207, -3207,
    2009, -3207,  1902, -3207, -3207, -3207,  2237, -3207, -3207, -3207,
   57494, -3207,  2015, -3207, 38074,  2337, 11044, -3207, 38074, 57494,
   57494,  9380,  2380, -3207, 67032, 67032, 67032, -3207, 67032,  2017,
    2024,   957,  2018,   376, -3207,  1108,   957,  2357,   250,  1937,
     267,  4694,    60, -3207, -3207, -3207,  2091, 57494, -3207, 67032,
   -3207, -3207, -3207, -3207, -3207, 49979, -3207, -3207, 41589, 49477,
   -3207, 49477, 20548, 20548, 57494, 57494, 57494, 57494, 57494, 57494,
   57494, 57494, 57494, 57494,  1379, -3207, 20548, -3207, 20548,  2027,
    2028,  2029,  1944, -3207,   173, -3207,  2021, -3207, -3207, -3207,
     426, -3207,   378,  2031, -3207, 52991,  3576,  1778, -3207,  1751,
    2033,  1979,   793, 66530, -3207,  2035,  2034,  1045,  2736,  2037,
    2515, -3207,   912, 52991, -3207, -3207, -3207,  2476, -3207,   819,
     239, -3207,  1277, -3207,  3576,  1564, -3207, -3207,  2523, -3207,
    2524,  3576, 47083,  1892, 20548, -3207,  1081, 67032,  2107, -3207,
     256,  1089, -3207, -3207, -3207, -3207, -3207, 67032,  2043, -3207,
    2043, -3207, -3207,  2043, -3207, -3207, -3207, -3207, 25828,  2394,
    2048, 70044, -3207, -3207, 57494, -3207, -3207, -3207,  1112,  2049,
    2119, 57494, 57494, 57494, 57494, -3207, -3207, -3207, 19492, 20548,
    2094, -3207,  2051, 12100,  2379, -3207, 27412, -3207, -3207,  2064,
   38576, 67032, -3207, -3207, -3207, -3207,  2148, -3207, -3207, 67032,
   -3207,  2067, -3207,  2070, -3207, -3207, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, 20548, 47083, -3207, 47083, -3207, -3207, -3207,
   -3207, -3207, 57494, -3207, -3207,  7524, -3207,  2066,  2074, 67032,
   57494,   137, -3207, 20548, 67032, -3207,  1978, -3207,   407, 20548,
   20548,  7574, -3207,  4611, 20548, 70044,  1113,  7574,   393, 20548,
    3766,  3830, 20548, 20548,  7012,  9462, -3207, 23188, 14740, -3207,
    2075, 20548, 42602, 41086, -3207, 33051,  2289,  2077,  2289,  1093,
    2079,  2078, -3207, -3207,  2820, 47083, 20548, -3207, -3207, -3207,
   -3207,  2126,   453, 35059,  2314, -3207,  2095, 67032, -3207,  2154,
   47083, -3207, -3207, 42092, -3207, -3207, -3207, -3207, -3207,  2547,
    1891,  2085,  2086, -3207,  1425, -3207, -3207, 67032,  2087, -3207,
    2089,   957, -3207, 67032,  2127, -3207,   260,  2408,   145, -3207,
   20548, -3207,  2497,  2575,  1108,  2098, 67032, 57494, 25828, -3207,
     672,   282, -3207,  2393, 57494,  2127,  2533, -3207, -3207, -3207,
     376, -3207,  2430,  2343, -3207,   242, -3207, 20548,   376,  2344,
     286, 67032, -3207, -3207,  2668, -3207, 70044,   256,   256, -3207,
    1610,  2115,  2124,  2125,  2136,  2137,  2138,  2140,  2142,  2143,
    2144, -3207,  2146,  2149,  2150,  2158,  2162,  2164,  2170,  2174,
    1628,  2180, -3207,  2182,  2009,  2184,  2187,  2191,  2192,  2193,
   73026,  2196,  2197,  2199,  2200,  1632,  2201,  2203,   923,   940,
   -3207, -3207, -3207, -3207,  2213, -3207, -3207, -3207,  1339,  2116,
   -3207,  2109,  1139, -3207, -3207,  2195, -3207,  2208, -3207, -3207,
   -3207, -3207, -3207, -3207,  2123,  2130, -3207, -3207, -3207,   249,
    2156,  2215, 67032,  1379,   143, 67032,  2218,  1974,  2589, 49477,
     458,  2370,  2141, -3207,  1093,  1778, -3207, 52991,  4241,   703,
    2166, -3207,   201,  1974, -3207,  2544,  1778,  2157, -3207,  1751,
    2256, 20548,   150, -3207,  2209, -3207, 47083, -3207, 49477,  2409,
   67032,  2221, -3207, -3207, 50481,  2043,  4009, 25828, 70044,  1156,
    1165, -3207,  2689,  2347,  2289, -3207, -3207, -3207, -3207, -3207,
    2222,   -37,  2223,  9988,  2220, -3207, -3207, -3207, -3207, -3207,
   -3207, 47083, 47083, 67032,  2364, -3207, -3207,  2224,  2225, 40082,
    2691,  2230, -3207, -3207,  2552, -3207, 31543, -3207,  1808,  2240,
    1808, 70044,  1808, -3207, -3207, 47083,  1854, 20548, -3207, -3207,
   -3207,  2238,  2247, 67032, 43287,  2570, -3207, -3207,  7574,  7574,
    4611,  1178, -3207,  7574, 20548, 20548,  7574,  7574, 20548, -3207,
   20020,   664, -3207,  1183, -3207, 42641, -3207, 73513, -3207, -3207,
    2094,  1093,  2094, -3207, -3207, 67032,  2250,  2253, -3207, -3207,
   -3207,  2310, -3207, -3207,  1184,  2688,  2154, 20548, -3207, -3207,
    2258, 38074, -3207, -3207, -3207, -3207, 38074,   957, -3207,  2433,
    2127,  2265, -3207, -3207, -3207, -3207, -3207, -3207, 42680, -3207,
      67, 20548, -3207,  1082,  3591, -3207, -3207, -3207, -3207,  2127,
    1277, -3207, 57494,  2745,  2636, -3207, -3207, 47083, -3207, -3207,
    2148,  2148, -3207, -3207,  2401, -3207, -3207, -3207,  2266, -3207,
   -3207,  1339,   -87, 41589, -3207, -3207, 57494, 57494, -3207, -3207,
    2268, -3207, -3207, -3207, -3207, -3207,   426,  2671,  1194,   912,
   -3207,  3576,  1196, 57494,  2640, 52991, -3207,  2757,  2276, 57494,
    1974,   437,   437, -3207,  2429, -3207,  2435, -3207, -3207,  2766,
     294, -3207,  1450, 49477, -3207, 57494, -3207, -3207, 34557, -3207,
    4009,  1200, -3207, -3207,  2286,  2292, -3207,  2094, 20548,  2293,
   20548, -3207, 23716,  2770,  2290, -3207, 20548,  2358, 28468, -3207,
   20548, -3207, 57494, 62514,  2296, 62514, -3207, -3207, -3207, -3207,
   57494, -3207, -3207, -3207, 20548, -3207,  7574,  7574,  7574, 20548,
   -3207, 20548, -3207, -3207, -3207,  2510,  2364, -3207,  2364, -3207,
   -3207, 20548,  3576,   596,  2338, 67032,    13, -3207, 47083, -3207,
   -3207, -3207, 57494, -3207, 49477, -3207,   957,   409,  2301, 20548,
   42727,  2543, -3207, -3207,  2576, -3207,  2633, -3207,  2367,   340,
    2382, -3207, -3207, -3207, -3207,  1379,  1093,  1778,  2166,  2157,
   -3207,  2307, 57494,  3576,   912,   819, -3207, -3207, -3207, -3207,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207, -3207,  3576,
    2755,  2537,  2758, -3207,  1201,  2107, 20548,   254, -3207,  1205,
    2751, -3207, -3207,  2824,  2364,  2312, 23716,  2313, -3207,  2315,
   67032, 47083,  2465, -3207, -3207,  2318, -3207, -3207, 20548, -3207,
   -3207, 43374,  2321,  2323,  2788,  1944,  2358,  2358, -3207,   453,
   -3207, -3207,  2756, 34557,  2715,  1277,   957,  2340,  1206, -3207,
   -3207, -3207, -3207, -3207,  2736, -3207, 42766,  2578,   659,  2562,
    2301, 20548, -3207,  2410, -3207, -3207, -3207,  2813, -3207, -3207,
   52991,  2334,  2157,  2166,  1974,  2157,  2563, -3207,  2564, -3207,
    2339, 43123, 67032, 67032,  1778, 34557, 67032,  2336,  2358, -3207,
    2345, -3207, -3207, -3207, 30534, -3207,  2349, -3207, -3207, -3207,
   20548,   148, -3207, -3207,  2396, 57494,  1211,    40,  2576, 41589,
   -3207, 49477,   241,   409,  2657, -3207, -3207, -3207, -3207,   139,
    2573, -3207,  2579, -3207, 47083, -3207,  3576, 52991, -3207, -3207,
   -3207, -3207, -3207, -3207, 34557,  2751, -3207,   331, -3207,  1641,
   -3207,   331, -3207, -3207, -3207, -3207, -3207,  1582, 24244, 24244,
   24244,  2352,  3576, -3207,  1641, -3207,  2475,  2562, -3207, -3207,
   -3207, -3207, -3207,   762,   762,  2746, -3207,  2418, -3207,  2157,
    1212, 67032,  1902, -3207,  1902, 25300,  2507,   183, 45956,  2731,
   -3207,  2731,  2731, -3207, -3207, -3207, 40584, -3207, -3207,  2855,
   -3207,   213, -3207, -3207, -3207,  1778,   331, -3207, -3207,  2845,
   -3207, -3207, -3207, -3207, -3207,   181, -3207, -3207, -3207,  1641,
     957, -3207, -3207, -3207,  1641,  1902, 24772,  2518, -3207,  2590,
   -3207, -3207, -3207, -3207, -3207, -3207, -3207
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     160,   273,     0,  1450,  1449,  1524,   273,     0,  1384,     0,
     273,   509,   414,     0,  1546,  1545,     0,   212,   273,     0,
     160,     0,  1484,     0,     0,     0,   572,   575,   573,     0,
       0,     0,   273,   618,     0,  1547,   273,     0,     0,   610,
     574,     0,  1501,     0,     0,     0,     0,     0,     2,     4,
       5,     6,     7,     8,     9,    23,    10,    11,    12,    13,
      19,    14,    15,    16,    17,    18,    20,    21,    22,    25,
      24,    26,    27,  1407,    28,    29,    30,    31,     0,    32,
       0,    33,    34,    35,    36,   548,   534,   623,   547,     0,
       0,   159,   723,   555,    37,    39,    38,    40,    41,    42,
      43,    44,  1548,  1544,    45,   272,   271,   265,     0,     0,
       0,     0,     0,  1523,     0,     0,     0,   276,   116,  1570,
    1571,  1572,  1573,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
    1951,  1581,  1582,  1583,  1584,  1585,  1952,  1586,  1587,  1588,
    1897,  1898,  1953,  1899,  1900,  1589,  1590,  1591,  1592,  1593,
    1594,  1595,  1596,  1597,  1598,  1901,  1902,  1599,  1600,  1601,
    1602,  1603,  1903,  1954,  1904,  1604,  1605,  1606,  1607,  1608,
    1955,  1609,  1610,  1611,  1612,  1613,  1614,  1615,  1616,  1617,
    1956,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,
    1627,  1905,  1628,  1629,  1906,  1630,  1631,  1632,  1633,  1634,
    1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,
    1645,  1646,  1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,  1656,  1907,  1657,  1658,  1659,  1660,  1661,  1662,  1908,
    1663,  1664,  1665,  1909,  1666,  1667,  1668,  1957,  1958,  1669,
    1670,  1910,  1960,  1671,  1672,  1673,  1911,  1912,  1674,  1675,
    1676,  1677,  1678,  1679,  1680,  1681,  1682,  1961,  1683,  1684,
    1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,
    1962,  1913,  1695,  1696,  1697,  1698,  1699,  1914,  1915,  1916,
    1700,  1963,  1964,  1701,  1965,  1702,  1703,  1704,  1705,  1706,
    1707,  1708,  1966,  1709,  1967,  1710,  1711,  1712,  1713,  1714,
    1715,  1716,  1717,  1917,  1718,  1719,  1720,  1721,  1722,  1723,
    1724,  1725,  1726,  1727,  1728,  1729,  1730,  1731,  1732,  1733,
    1734,  1735,  1736,  1737,  1918,  1969,  1919,  1738,  1739,  1740,
    1920,  1741,  1742,  1970,  1743,  1921,  1744,  1922,  1745,  1746,
    1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,  1923,  1971,
    1755,  1972,  1924,  1756,  1757,  1758,  1759,  1760,  1761,  1762,
    1763,  1764,  1765,  1766,  1767,  1768,  1769,  1925,  1973,  1770,
    1771,  1926,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,
    1780,  1781,  1782,  1783,  1784,  1785,  1927,  1786,  1787,  1788,
    1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
    1799,  1800,  1801,  1802,  1803,  1804,  1974,  1805,  1806,  1807,
    1928,  1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,
    1817,  1818,  1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,
    1929,  1827,  1828,  1975,  1829,  1830,  1930,  1831,  1832,  1833,
    1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,  1842,  1843,
    1844,  1931,  1845,  1932,  1846,  1847,  1848,  1977,  1849,  1850,
    1851,  1852,  1853,  1854,  1933,  1934,  1855,  1856,  1935,  1857,
    1936,  1858,  1859,  1937,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,  1874,  1875,
    1876,  1938,  1939,  1877,  1878,  1978,  1879,  1880,  1881,  1882,
    1883,  1884,  1885,  1886,  1887,  1888,  1889,  1890,  1891,  1892,
    1940,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,
    1950,  1893,  1894,  1895,  1896,     0,   117,   118,  1331,  1553,
       0,  1309,   116,  1910,  1917,  1931,  1382,  1383,   117,     0,
     268,   508,     0,     0,     0,     0,     0,     0,   214,     0,
     408,   407,     0,  1373,   413,     0,     0,     0,   120,   112,
    1772,   119,  1308,   110,   126,  2124,  2125,  2126,  2127,  2009,
    2128,  2129,  2130,  2131,  2010,  2132,  2011,  2012,  2013,  2014,
    2015,  2016,  2133,  2134,  2135,  2018,  2017,  2136,  2019,  2137,
    2020,  2138,  2021,  2022,  2139,  2140,  2023,  1624,  2024,  2025,
    2141,  2142,  2143,  2144,  2145,  2146,  2147,  2148,  2149,  2026,
    2027,  2150,  2151,  2028,  2152,  2153,  2029,  2154,  2030,  2031,
    2032,  2155,  2033,  2034,  2156,  2035,  2157,  2158,  2036,  2037,
    2040,  2038,  2159,  2039,  2160,  2041,  2042,  2043,  2161,  2162,
    2044,  2045,  2163,  2046,  2047,  2048,  2049,  2050,  2164,  2051,
    2165,  2052,  2053,  2166,  2167,  2168,  2169,  2170,  2055,  2054,
    2056,  2057,  2171,  2172,  2173,  2174,  2058,  2059,  2060,  2175,
    2176,  2061,  2177,  2178,  2062,  2063,  2179,  2064,  2065,  2180,
    2066,  2067,  2181,  2068,  2069,  2182,  2183,  2184,  2070,  2185,
    2071,  2072,  2186,  2187,  2073,  2074,  2188,  2075,  2189,  2190,
    2076,  2191,  2192,  2077,  2078,  2193,  2079,  2194,  2195,  2196,
    2197,  2080,  2081,  2082,  2083,  2084,  2085,  2086,  2087,  2088,
    2089,  2090,  1520,   128,   127,   129,     0,   432,   433,     0,
     443,     0,   425,   430,   426,     0,   452,   445,   453,   434,
     424,   446,   435,   423,   213,     0,   454,   440,   428,     0,
       0,     0,     0,   269,   230,   414,     0,   160,     0,  1411,
    1412,  1413,  1414,  1415,  1416,  1421,  1417,  1418,  1419,  1420,
    1422,  1423,  1424,  1425,  1426,  1402,  1407,  1427,  1428,  1429,
    1430,  1431,  1432,  1433,  1434,  1435,  1436,  1437,  1438,  1439,
    1440,  1441,     0,  1384,     0,  1903,  1954,  1908,     0,  1921,
       0,  1924,  1925,  1808,  1932,  1935,  1936,  1937,  1938,     0,
     797,   119,   114,   781,     0,   550,     0,   727,   741,   781,
     786,  1073,   809,  1074,     0,   121,  1486,  1485,  1479,   199,
    1346,  1533,  1671,  1712,  1825,  1933,  1855,  1877,  1551,  1534,
    1527,  1532,   270,   617,   615,     0,  1265,  1671,  1712,  1812,
    1825,  1933,  1877,  1458,  1463,     0,   276,  1539,   119,   114,
    1538,     0,   556,   609,     0,   277,  1500,     0,  1505,     0,
    1788,   583,   586,  1340,   584,   548,     0,     0,     1,   160,
    1406,  1515,     0,   166,     0,     0,   613,   613,     0,   613,
       0,   540,     0,     0,   548,   543,   547,   724,  1550,  1933,
    1855,  1540,  1537,  1681,     0,     0,  1681,     0,  1681,     0,
    1681,     0,     0,  1524,  1526,     0,   266,  1249,     0,  1310,
     122,     0,     0,  1395,  1391,  1396,  1392,  1397,  1390,  1389,
    1398,  1394,     0,     0,     0,   379,   412,   411,   410,   409,
     414,  1681,  1357,     0,   470,   471,     0,     0,     0,     0,
       0,   210,  1368,   113,   111,  1681,  1521,   441,   442,     0,
     431,   427,   429,     0,     0,  1681,  1335,   451,   447,  1681,
     451,  1302,  1681,     0,     0,   222,     0,   407,  1404,  1442,
    2077,  1443,  1444,  1456,     0,  1457,  1447,  1410,   160,     0,
     507,  1381,     0,     0,     0,  1195,   781,   786,     0,     0,
     799,     0,  1215,     0,  1221,     0,     0,     0,   781,   555,
       0,   741,   798,   115,   731,     0,   779,   780,   665,   665,
     618,     0,   599,     0,   665,   665,   665,   791,     0,     0,
     794,   792,     0,   794,     0,     0,     0,   794,   790,   750,
       0,   665,     0,   779,   782,   665,     0,   801,  1401,     0,
       0,     0,     0,  1530,  1528,  1529,  1535,     0,  1531,     0,
       0,  1312,  1314,  1315,  1163,  1325,  1049,     0,  1898,  1899,
    1900,  1238,  1901,  1902,  1904,  1905,  1906,  1006,  1644,  1907,
    1323,  1909,  1911,  1912,  1914,  1915,  1916,  1917,  1918,  1919,
       0,  1324,  1922,  1750,  1927,  1928,  1930,  1933,  1934,  1322,
       0,  1939,     0,     0,     0,  1283,  1186,     0,  1048,     0,
       0,     0,  1242,  1250,  1041,     0,     0,   845,   846,   867,
     868,   847,   873,   874,   876,   848,     0,  1272,   940,  1037,
    1260,  1051,  1046,  1056,  1052,  1053,  1093,  1054,  1072,  1057,
    1130,  1047,     0,  1055,  1039,  1268,   599,  1266,     0,  1040,
    1311,   599,  1264,  1461,  1459,  1466,  1460,     0,  1462,     0,
       0,     0,   267,   115,  1507,  1508,  1499,  1497,  1498,  1496,
    1495,  1502,     0,  1504,  1407,  1242,  1181,  1183,     0,   585,
       0,     0,   590,   537,   536,   538,     3,  1340,     0,     0,
       0,  1661,     0,  1487,   611,   612,     0,     0,     0,     0,
       0,     0,     0,     0,   708,   638,   639,   641,   705,   709,
     717,     0,     0,     0,     0,     0,   544,     0,  1549,  1543,
    1541,     0,     0,     0,   144,   144,     0,     0,     0,     0,
       0,   104,    49,    97,     0,     0,     0,     0,   244,   257,
       0,     0,     0,     0,     0,   254,     0,     0,   237,   231,
     233,    51,     0,   144,     0,    47,     0,     0,     0,    53,
    1524,     0,     0,   507,   274,   275,  1248,     0,   124,   125,
     123,   116,     0,  2091,  1951,  1952,  1953,  1954,  1904,  1955,
    1956,     0,  1957,  1958,  1910,  1960,  1961,  1962,  1963,  1964,
    1965,  1966,  1967,  1917,  1969,  1970,  1971,  1972,  1973,  1974,
    2117,  1975,  1931,  1977,  1937,  2122,     0,  1978,  1064,   117,
    1328,   621,  1189,   623,  1187,  1341,     0,     0,  1393,     0,
       0,     0,     0,   505,     0,     0,     0,     0,  1353,     0,
       0,  1681,   206,  1681,   379,     0,  1681,   379,  1681,     0,
    1681,   211,   215,  1367,  1370,     0,   444,   439,   437,   436,
     438,  1681,   263,     0,     0,  1336,   449,   450,     0,   418,
       0,     0,   420,     0,     0,   227,     0,   225,     0,   414,
     160,     0,   238,  1452,  1453,  1451,     0,     0,  1409,   241,
    1446,  1455,  1445,  1454,  1408,   258,  1403,     0,     0,  1399,
     493,     0,     0,     0,  1196,   916,   915,   897,   898,   913,
     914,   899,   900,   907,   908,   918,   917,   905,   906,   901,
     902,   895,   896,   911,   912,   903,   904,   909,   910,   893,
     894,  1210,  1197,  1198,  1199,  1200,  1201,  1202,  1203,  1204,
    1205,  1206,  1207,  1208,  1209,     0,     0,   740,   737,     0,
       0,     0,     0,     0,     0,  1242,     0,  1012,  1047,     0,
       0,     0,  1181,  1220,     0,     0,     0,     0,     0,     0,
    1181,  1226,     0,     0,   765,   777,     0,   658,   664,   738,
     736,     0,  1265,   728,     0,   811,   741,   739,   733,   735,
     791,     0,   790,     0,     0,   793,   787,     0,   788,     0,
       0,     0,     0,   789,     0,     0,     0,     0,   732,     0,
     777,     0,   734,   808,  1469,  1477,   200,     0,  1332,  1979,
    1980,  1981,   855,  1982,   884,   862,   884,   884,  1983,  1984,
    1985,  1986,   851,   851,   864,  1987,  1988,  1989,  1990,  1991,
     852,   853,   889,  1992,  1993,  1994,  1995,  1996,     0,     0,
    1997,   884,  1998,   851,  1999,  2000,  2001,   856,  2002,   819,
    2003,     0,  2004,   854,   820,  2005,   892,   892,  2006,     0,
    2007,   879,  2008,  1333,  1334,     0,  1192,   829,   837,   838,
     839,   840,   865,   866,   841,   871,   872,   842,   939,     0,
     851,   160,  1536,  1552,     0,  1186,  1058,   883,   870,  1237,
       0,   878,   877,     0,  1186,   860,   859,   858,  1043,     0,
     857,  1143,   884,   884,   882,   965,   861,     0,     0,     0,
       0,     0,   888,     0,   886,     0,   966,   944,   945,     0,
       0,  1282,  1291,  1181,  1185,     0,  1041,  1181,     0,  1050,
    1060,     0,  1133,  1135,     0,     0,     0,  1243,  1313,  1042,
       0,  1318,     0,     0,   939,   939,  1271,  1163,     0,  1153,
    1156,     0,     0,  1160,  1161,  1162,     0,     0,     0,  1263,
       0,  1171,  1173,     0,     0,   981,  1169,     0,   984,     0,
       0,     0,     0,  1157,  1158,  1159,  1149,  1150,  1151,  1152,
    1154,  1155,  1167,  1148,   962,     0,  1038,     0,  1096,     0,
     961,  1269,   726,     0,  1316,   726,  1471,  1475,  1476,  1474,
    1470,     0,  1465,  1464,  1467,  1468,     0,  1509,  1493,     0,
    1490,  1184,   721,   587,  1304,     0,     0,     0,  1516,  1514,
     165,   164,     0,   221,     0,     0,     0,  1480,   560,   559,
     632,   624,   626,   632,     0,   558,     0,   681,   682,     0,
       0,     0,     0,   714,   712,  1312,  1325,   669,   642,   668,
       0,     0,   646,     0,   673,   940,   707,   542,   636,   637,
     640,   541,     0,   710,     0,   720,     0,   579,   581,   564,
     578,   576,   561,   569,   708,   641,     0,  1542,     0,     0,
       0,     0,     0,  1681,     0,     0,   822,    88,    65,   331,
     143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      96,    93,     0,     0,    94,    95,     0,     0,     0,     0,
    1332,   242,   243,   256,     0,   247,   248,   245,   249,   250,
       0,     0,   235,   236,     0,     0,     0,     0,   234,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1526,  1525,
    1517,  1244,  1249,   623,   623,   623,     0,     0,     0,     0,
     621,   622,     0,     0,     0,     0,     0,   492,   377,   387,
       0,     0,     0,  1357,     0,     0,     0,     0,     0,   210,
       0,   414,  1358,  1356,  1360,  1359,  1361,  1650,   194,     0,
       0,   205,   202,     0,   376,   350,     0,     0,  1372,     0,
       0,   465,   463,   466,   455,   468,   458,     0,     0,     0,
       0,  1681,   366,  1369,     0,  1522,     0,     0,   261,   451,
    1337,     0,   448,   451,  1303,     0,   451,   229,     0,     0,
    1405,  1448,   239,   259,   240,   260,   507,   502,   532,     0,
     510,   515,   490,     0,   490,     0,   512,   516,   490,   511,
       0,   490,   506,     0,  1088,     0,  1078,     0,     0,   800,
       0,     0,  1079,  1014,  1015,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1032,  1031,  1080,   804,     0,   807,     0,
       0,  1218,  1219,     0,  1081,     0,     0,  1225,     0,     0,
       0,  1086,     0,   742,     0,     0,   648,   649,   657,   653,
     660,     0,   663,   650,   599,   549,  1671,  1712,     0,   610,
     610,   610,   608,   598,     0,   685,   743,     0,     0,   766,
       0,     0,   768,   770,     0,     0,   773,   749,   748,     0,
       0,     0,     0,   812,     0,  1308,     0,     0,   201,     0,
       0,     0,   837,     0,     0,     0,   827,   823,     0,   919,
     920,   921,   922,   923,   924,   925,   926,   927,   928,   929,
     930,   931,   843,  1345,     0,   849,  1350,  1351,  1348,     0,
    1344,  1347,  1349,  1352,     0,     0,     0,     0,  1236,  1232,
       0,     0,     0,     0,  1138,  1140,  1142,     0,   881,   880,
    1147,  1153,  1156,  1160,  1161,  1162,  1157,  1158,  1159,  1149,
    1150,  1151,  1152,  1154,  1155,     0,  1175,     0,  1129,     0,
       0,     0,     0,     0,     0,     0,     0,  1276,  1275,     0,
    1299,     0,  1061,  1045,     0,     0,  1136,  1062,  1283,  1273,
    1251,     0,     0,     0,  1321,  1320,   941,   950,   953,   985,
     986,   957,   958,   959,   963,  1343,  1342,  1270,     0,  1262,
       0,     0,   942,   967,   972,     0,  1227,  1230,  1002,  1229,
       0,   990,     0,   980,     0,   988,   992,   968,   983,     0,
     964,     0,  1263,  1172,  1174,     0,  1170,     0,   954,   955,
     956,   946,   947,   948,   949,   951,   952,   960,  1146,  1144,
    1145,     0,  1249,     0,  1261,     0,     0,  1098,     0,     0,
     987,  1267,     0,   811,   623,   811,     0,   939,  1510,  1340,
    1503,  1492,  1340,  1182,  1305,  1339,     0,   597,     0,  1512,
     151,   155,     0,  1250,   185,   187,   726,     0,  1487,  1487,
    1489,  1488,   630,   631,   635,     0,     0,   635,   614,   557,
    1928,  1808,     0,     0,     0,     0,   674,   715,     0,   706,
     671,   672,     0,   670,  1312,   675,  1311,   676,   679,   680,
     647,  1300,   716,   718,     0,   711,     0,  1306,   563,   582,
       0,     0,     0,     0,     0,   546,   545,   722,     0,    50,
       0,  1681,    67,     0,     0,     0,     0,     0,     0,   281,
       0,   381,   281,   109,  1681,   451,  1681,   451,  1574,  1645,
    1826,     0,    63,   355,   100,     0,   137,    70,    72,   384,
       0,   340,     0,     0,    90,   105,   130,     0,     0,   232,
      52,   246,   251,   133,   255,   252,  1377,   253,   144,     0,
      48,     0,   131,     0,  1375,     0,     0,    54,   135,  1379,
    1526,   507,     0,  1248,     0,   621,   621,   621,   619,   620,
    1065,     0,  1188,     0,  1190,  1191,   980,  1386,  1387,  1388,
    1385,   478,   491,     0,   378,     0,   504,   481,   482,   492,
    1355,     0,   206,   379,     0,   379,     0,   215,  1357,     0,
       0,   196,   192,     0,     0,     0,     0,   377,   369,   367,
     400,     0,   374,   368,     0,     0,   326,     0,  1568,     0,
       0,     0,     0,   472,     0,     0,     0,     0,   210,   216,
       0,     0,     0,   263,   264,   417,  1338,   419,     0,   421,
     228,   226,  1400,  2046,   498,  1186,     0,   496,   503,   495,
     497,   500,   501,   494,     0,   489,     0,   525,     0,     0,
       0,     0,     0,     0,     0,     0,  1075,  1194,     0,  1213,
    1212,  1013,  1020,  1023,  1027,  1028,  1029,  1214,     0,     0,
       0,  1024,  1025,  1026,  1016,  1017,  1018,  1019,  1021,  1022,
    1030,   809,     0,     0,   803,  1223,  1222,  1216,  1217,     0,
    1083,  1084,  1085,  1224,     0,     0,   778,   652,   654,   651,
       0,     0,   811,   610,   610,   610,   610,   607,     0,     0,
       0,   810,     0,   702,   772,     0,   796,     0,   769,     0,
       0,   760,     0,   767,   816,   783,     0,     0,   785,  1478,
     833,     0,   828,   824,     0,     0,     0,   834,     0,     0,
       0,     0,     0,     0,     0,  1193,     0,   616,  1059,     0,
       0,     0,  1233,     0,  1007,   850,   863,     0,  1141,  1063,
       0,  1164,  1128,   891,   890,   892,   892,  1008,     0,  1278,
    1280,     0,     0,     0,     0,  1290,     0,  1010,  1241,     0,
    1089,  1239,  1182,  1132,  1134,  1291,  1044,   875,   939,     0,
       0,     0,     0,     0,     0,     0,   991,   982,     0,   989,
     993,     0,     0,     0,   976,     0,     0,   974,  1003,   970,
       0,     0,  1004,  1248,     0,  1252,     0,     0,  1097,  1106,
     729,   725,   685,   621,   685,     0,  1472,  1494,  1491,     0,
     595,     0,     0,  1513,     0,   174,     0,     0,     0,     0,
     177,   191,   188,  1512,     0,  1481,  1482,     0,   625,   627,
       0,  1165,   635,   629,   678,   677,     0,   645,   713,   643,
       0,   719,     0,   580,     0,   566,     0,   752,     0,     0,
       0,     0,     0,   330,     0,     0,     0,   281,     0,   389,
       0,   396,     0,     0,   381,   362,    89,     0,     0,     0,
      59,   108,    81,    73,    55,    87,     0,     0,    92,     0,
      85,   102,   103,   101,   106,     0,   291,   316,     0,     0,
     327,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   507,  1519,  1249,  1245,  1249,     0,
       0,     0,   623,  1066,     0,   477,   531,   528,   529,   527,
     237,   388,     0,     0,   204,   376,     0,  1372,   457,   460,
       0,  1354,   414,     0,   197,     0,   195,     0,   206,   379,
       0,   354,   350,   375,   348,   347,   349,     0,  1569,   230,
       0,  1563,   379,  1371,     0,     0,   473,   464,     0,   469,
       0,     0,   467,   215,     0,   219,     0,     0,  1366,   262,
     451,     0,   485,   526,   533,   513,   518,     0,   524,   520,
     519,   514,   522,   521,   517,  1076,  1087,  1211,     0,     0,
       0,     0,   802,   805,     0,  1082,  1077,   776,     0,     0,
     685,     0,     0,     0,     0,   601,   600,   606,     0,     0,
    1100,   771,     0,     0,     0,   758,   747,   753,   754,     0,
       0,     0,   814,   813,   784,   837,     0,   817,   837,     0,
     837,     0,   835,     0,   844,   932,   933,   934,   935,   936,
     937,   938,   869,     0,  1235,  1231,  1137,  1139,  1176,   887,
     885,  1009,  1281,  1274,  1277,  1181,  1285,  1287,     0,     0,
       0,     0,  1298,     0,     0,  1131,  1299,  1319,   943,     0,
       0,   973,  1228,   994,     0,     0,     0,   969,  1164,     0,
       0,     0,     0,     0,   978,     0,  1256,  1249,     0,  1255,
       0,     0,     0,     0,  1071,   730,   702,     0,   702,     0,
       0,   591,   593,   596,   160,  1511,     0,  1506,   152,   153,
     154,     0,     0,     0,   169,   146,     0,     0,   186,   174,
     162,   633,   634,     0,   628,   644,  1301,  1307,   565,     0,
    1041,     0,     0,   562,     0,   138,   281,     0,     0,    66,
       0,   398,   342,   390,   373,   357,     0,     0,     0,   282,
       0,   415,     0,     0,   363,     0,     0,     0,     0,   343,
       0,     0,   302,     0,     0,   373,     0,   380,   298,   299,
       0,    58,    82,     0,    78,     0,   107,     0,     0,     0,
       0,     0,    61,    77,     0,    56,   822,   451,   451,    64,
    1332,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,
    1988,  2101,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,
    2110,  1997,   288,  1998,  1750,  1999,  2000,  2001,  2002,  2003,
       0,  2004,   820,  2005,  2006,  2189,  2007,  2008,  1149,  1150,
     286,   287,   383,   283,  1333,   284,   391,   285,     0,   386,
     341,     0,     0,   134,  1378,     0,   132,     0,  1376,   141,
     139,   136,  1380,  1518,     0,     0,  1069,  1070,  1067,   621,
       0,     0,     0,   507,   484,     0,     0,  1568,     0,     0,
       0,  1681,     0,   193,     0,  1372,   203,   376,     0,   406,
     326,   401,     0,  1568,  1566,     0,  1372,  1562,   456,   459,
       0,     0,   548,   461,     0,   218,   217,   207,     0,     0,
       0,     0,   422,   499,     0,   523,  1033,     0,     0,     0,
       0,   661,     0,   667,   702,   605,   604,   603,   602,   684,
    1619,  1911,  1807,     0,   688,   683,   686,   691,   693,   692,
     694,   690,   701,     0,   704,   795,  1177,  1179,     0,     0,
       0,     0,   759,   761,     0,   763,     0,   815,   831,     0,
     832,     0,   830,   825,   836,  1234,  1279,  1288,  1289,  1284,
    1293,  1295,     0,     0,     0,   940,  1240,  1011,  1000,   998,
     995,     0,   996,   977,     0,     0,   975,   971,     0,  1005,
       0,     0,  1253,     0,  1092,     0,  1095,  1109,  1105,  1104,
    1100,  1066,  1100,  1473,   589,   592,     0,   173,   150,   176,
     175,     0,  1250,   183,     0,     0,   174,     0,   178,   474,
       0,     0,   577,   751,   570,   571,     0,   394,    68,     0,
     373,     0,   281,   359,   358,   361,   356,   360,     0,   416,
       0,     0,   300,     0,   307,   345,   346,   344,   301,   373,
     379,   303,     0,     0,     0,    74,    60,    57,    62,    75,
       0,     0,    76,    79,   816,   821,    91,    84,  1332,  2110,
    2119,     0,     0,     0,    69,    71,     0,     0,  1247,  1246,
       0,   480,   479,   530,   476,   487,   237,     0,     0,   350,
    1565,     0,     0,     0,     0,   376,   198,     0,     0,     0,
    1568,     0,     0,   278,     0,   323,     0,   223,  1567,     0,
       0,  1554,     0,     0,   220,     0,  1364,  1365,     0,   486,
    1034,     0,  1035,   806,     0,     0,   659,  1100,     0,     0,
       0,   695,   689,     0,  1099,  1101,     0,   656,  1180,   755,
       0,   757,     0,   781,     0,   781,   764,   826,   818,  1286,
    1296,  1297,  1292,  1090,     0,   997,  1001,   999,   979,  1249,
    1257,  1249,  1254,  1094,  1108,  1111,   704,  1317,   704,   594,
     588,     0,     0,   161,     0,     0,   158,   145,   163,  1166,
     567,   568,     0,   281,     0,   372,   395,   312,   290,     0,
       0,     0,   297,   304,   405,   306,     0,    83,    99,     0,
       0,   385,   142,   140,  1068,   507,     0,  1372,   326,  1562,
     209,     0,     0,     0,   350,   230,  1564,   339,   332,   333,
     334,   335,   336,   337,   338,   353,   352,   324,   325,     0,
       0,     0,     0,   462,     0,  1366,     0,   180,   189,     0,
     180,  1036,   662,     0,   704,     0,     0,     0,   687,     0,
       0,   703,     0,   553,  1178,     0,   746,   744,     0,   745,
    1294,     0,     0,     0,     0,   623,   656,   656,   147,     0,
     148,   184,     0,     0,     0,   379,   397,   371,     0,   364,
     310,   309,   311,   315,     0,   313,     0,   329,     0,   322,
     290,     0,    86,     0,   392,   475,   483,     0,   280,  1556,
     376,     0,  1562,   326,  1568,  1562,     0,  1559,     0,   208,
       0,     0,     0,   182,  1372,     0,   182,     0,   656,   697,
       0,   696,  1103,  1102,   658,   756,     0,  1091,  1259,  1258,
       0,  1115,   552,   551,     0,     0,     0,     0,   405,     0,
     351,     0,     0,   312,     0,   305,   402,   403,   404,     0,
     318,   308,   319,    80,    98,   393,     0,   376,  1557,   279,
     224,  1555,  1560,  1561,     0,   180,   179,   632,   181,   811,
     190,   632,   666,   554,   698,   655,   762,  1110,     0,     0,
       0,     0,     0,   157,   811,   168,     0,   322,   370,   365,
     289,   314,   328,     0,     0,     0,   320,     0,   321,  1562,
       0,   182,   635,  1362,   635,  1897,  1620,  1862,     0,  1127,
    1116,  1127,  1127,  1107,   149,   156,     0,   281,   294,     0,
     293,     0,   382,   317,  1558,  1372,   632,   170,   171,     0,
    1120,  1119,  1118,  1122,  1121,     0,  1114,  1112,  1113,   811,
     399,   292,   296,   295,   811,   635,     0,     0,  1124,     0,
    1125,   167,  1363,   172,  1117,  1123,  1126
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -3207, -3207, -3207,  2016,    93,    95,  -889, -1205,  -926, -1213,
   -3207,  -101,    96, -3207, -3207,   211, -3207,  1090, -3207,   197,
    -741,   603, -3207,  1189, -3207, -3207,  -677, -1675,   100,   103,
    2112, -3207,  1046, -3207,   -11,  2645,  3841,    41,  -514,  -881,
   -1245,     5,     1, -3207, -3207, -3207, -3207, -3207,  -681,   531,
   -1223, -3207,   470, -3207, -3207, -3207, -3207,  -208,   176, -3207,
      17, -2221, -2981,  -583, -3207,  -684, -3207,  -332, -3207,  -631,
   -3207,  -838,  -639,  -673, -2905, -1144, -3207,  1697,  -377, -3207,
     640, -3207, -2633, -3207, -3207,   628, -3207, -1170, -3207, -2308,
     180,  -610, -2709, -2617, -2231,  -922,   258,  -616,   235, -2153,
   -1159, -3207,   654, -3207,  -603, -3207,  -895, -2022,   108, -2734,
   -1707,    -7, -3207, -3207, -3207,  -733, -3207, -2594,   110, -3207,
     535, -3207, -2174,   537, -2132,  1619,  -513,   111, -1708, -3207,
   -3207, -1725,    64, -2186, -3207,  -163, -2807,    23, -2175,   113,
   -3207, -3207,   124,     3,  -591,   316, -3207,   128, -3207, -3207,
    1603,  -903, -3207, -3207,   542,   129,  1030, -3207, -2643, -3207,
    -581, -3207,  -636,  -628, -3207, -3207,    32,  -918,  1586, -3207,
   -3207, -3207,    24, -3207,  -477, -3207, -3207, -2648, -3207,     7,
   -3207, -3207, -3207, -3207, -1534,  -416,   328, -3207, -3207,  -550,
   -2664,  -502, -3207, -3065, -3078, -3207, -3207,  -648, -2695, -2116,
     133, -3207,  2084,  -323,   136,   140, -3207,    56,   142, -1168,
       2,  3206,   -40,   -21, -3207,   -16, -3207, -3207, -3207,   702,
   -3207, -3207,     8,    53,  1797, -3207, -3207, -3207, -3207, -1039,
   -3207, -1645,   666, -3207,  1959,  1964, -1782,  -883,   -36,   269,
     740, -1700, -2179,  -640,  1207,  1770,  1785, -3207,   492, -3059,
   -3207,  -539, -3207,   737, -3207, -3207,   734,  1254, -1584, -1571,
   -3207, -2226, -3207,  -452,  -336, -3207, -3207, -3207, -3207, -3207,
   -2575, -2968,  -634,  1224, -3207,  1793, -3207, -3207, -3207, -3207,
      49, -1550,  2976,   782, -3207,    59, -3207, -3207, -3207, -3207,
     184, -3207,   973,  -153, -3207,  -504,  -697,  -800,  2019,  -415,
     245, -1777,    -9,    44,   532, -3207, -3207,   534, -2129, -1445,
     491,  -253,   968, -3207,    18, -1298, -3207, -1922, -1194, -3207,
   -3207,  -783,  -675, -3207, -3207, -3207,   996,  1023, -3207, -3207,
    1236,  1788, -3207,  -901,  2895,  -822, -1052,  2023,  -946,  2025,
    -930,  -933,  -936,  2026,  2040,  2044,  2045,  2047,  2050,  2052,
   -1554,  5360,  1769,  3025, -2199, -3207, -1432, -1590,  1086,  1092,
    1099,    25, -3207, -1401,    37, -3207, -3207, -3207, -3207, -3207,
   -2831, -3207,  -433, -3207,  -424, -3207, -3207, -3207, -1672, -3206,
   -1702, -3207,  3287,   904, -3207, -3207,   481, -3207, -3207, -3207,
   -3207, -1527, -3207,  6454,   800, -3207, -2026, -3207, -3207,  -982,
    -832, -1161,  -995, -1229, -1977, -3207, -3207, -3207, -3207, -3207,
   -3207, -1548, -1787,  -152,   857, -3207, -3207,   960, -3207, -3207,
   -3207, -2482, -1487, -1788, -2135, -3207, -3207, -3207,   871,  1572,
     134,  -840, -1647, -3207, -1557, -3207, -3207,   918, -2432, -3207,
   -3207,   473, -2701, -3207, -3207,   186, -3207,  -629, -1140, -2494,
    4168,    -3, -3207,  -548, -2604, -3207, -3207,  -735, -2723, -1108,
    -896, -3207,   147,  1336,  2210,    10,   151, -3207,   152,  1340,
   -3207, -3207, -3207,   153, -3207,   496,   154,   441, -3207,  1014,
   -3207,   761,    14, -3207, -3207, -3207,   107,    27, -3022
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    47,    48,    49,   759,   760,  1881,  1824,  3040,  1250,
    1814,  1379,   761,  2682,  2683,  2684,  2301,  1231,  3492,  2302,
    1232,  1233,  2686,    53,    54,    55,   116,  1263,   762,   763,
     536,    58,  2357,   932,   810,  1175,   859,  1113,  1637,   920,
    1268,  1269,   764,  2725,  2369,  3286,  2781,  3287,  2436,  2363,
    1389,  2428,  1928,  1862,  1390,   544,  1942,  2782,  2730,  1929,
     765,  2671,  3042,  3485,  2697,  3622,  2977,  2978,  3482,  3483,
    2674,  2304,  3550,  3551,  2758,  1805,  3545,  2388,  3425,  2310,
    2289,  2979,  2396,  3385,  3089,  2305,  2959,  2389,  3478,  1903,
    2390,  3479,  3232,  2391,  1859,  1885,  2675,  3552,  2311,  1860,
    2670,  3043,  1789,  2392,  3489,  2393,   555,  2963,   766,  2761,
    1335,   538,   527,   528,  1564,   724,  1310,   725,   767,  1891,
    1892,  1893,  1894,  1895,  1896,   950,  1897,   768,  1328,  1873,
      64,  1342,   556,  1900,  3105,  2775,  2776,   769,  1882,   770,
    2745,  2746,   771,   772,  1192,  2625,  2219,   773,   750,   751,
     967,  1359,   752,    70,  1908,   774,  1365,  1366,   975,    72,
     881,  1381,   775,  1382,  1383,   984,    73,  2783,   986,   987,
      74,    75,   777,  3317,  3111,  1344,  1904,  2401,   557,   778,
    2924,  2221,  2628,  3474,    78,  3213,  2224,  1190,  3216,  3438,
    2917,  3211,  2629,  3513,  3567,  3214,  2225,  2226,  3439,  2227,
     779,    80,   828,  1727,   780,   781,  1052,  2070,   782,  1792,
     783,  1114,    86,    87,  1022,    88,  3226,    89,    90,  1767,
    1768,  1769,   861,   871,   872,  1717,  2910,  2911,  2622,  1475,
    2013,   864,  1196,  1736,   845,   846,  1848,   890,  1851,  1731,
    1732,  2234,  2638,  1760,  1761,  1205,  1206,  1999,  2000,  3453,
    2001,  2002,  1468,  1469,  3326,  1748,  1752,  1753,  2255,  2245,
    1739,  2503,  3134,  3135,  3136,  3137,  3138,  3139,  3140,  1115,
    2820,  3337,  1756,  1757,  1208,  1209,  1210,  1765,  2265,    92,
      93,  2203,  2610,  2611,   816,   817,  3151,  1496,  1770,  2824,
    2825,  2826,  3154,  3155,  3156,   818,  1017,  1018,  1045,  1040,
    1486,  2022,   819,   820,  1976,  1977,  2474,  1047,  2015,  2032,
    2033,  2832,  2525,  1565,  2290,  1566,  1567,  2047,  1568,  1116,
    1569,  1595,  1117,  1600,  1571,  1118,  1119,  1120,  1574,  1121,
    1122,  1123,  1124,  1588,  1125,  1126,  1612,  2049,  2050,  2051,
    2052,  2053,  2054,  2055,  2056,  2057,  2058,  2059,  2060,  2061,
    2062,  1176,  1771,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
    1135,  1136,  1137,   822,  1138,  2569,  1139,  1688,  2197,  2609,
    3144,  3334,  3335,  2904,  3199,  3365,  3465,  3581,  3609,  3610,
    3636,  1140,  1141,  1632,  1633,  1634,  2084,  2085,  2086,  2087,
    2191,  1682,  1683,  1142,  3047,  1685,  2107,  3147,  3148,  1177,
    1461,  1625,  1313,  1314,  1579,  1435,  1436,  1442,  1951,  1450,
    1454,  1981,  1982,  1462,  2158,  1143,  2078,  2079,  2543,  1590,
    2570,  2571,  1144,  1267,  1638,  2899,  2194,  1686,  2151,  1151,
    1145,  1152,  1147,  1621,  2871,  2560,  2561,  1622,  2565,  2867,
    2868,  2120,  2872,  3171,  3172,  2567,  2262,  1714,  2267,  2268,
     971,  1148,  1149,  1150,  1315,   531,  1580,  3568,  1355,  1182,
    1316,  2147,   784,   107,   916,   785,   786,    97,   787,  1171,
     868,  1172,  1174,   788,   839,   840,   789,   853,   854,  1505,
    1702,  1506,   877,   102,   103,  1219,   841,   791,  3311
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     526,    59,    84,    68,   530,  1146,   876,    77,    91,   723,
      95,   919,  1215,  1323,   101,   968,   526,    60,  1249,  1041,
     530,   722,  1453,    65,    76,   982,   857,   104,    91,   862,
     865,  1878,   529,  2237,   790,  2003,  1828,  1178,  1270,   860,
    1840,  1715,  1811,  1827,  2201,  1325,  1614,  2069,   821,  1423,
    1978,   891,   776,  1788,  2344,  1507,  2036,  1794,  2643,  1427,
     823,  1378,  1426,  2118,  2521,  1425,   827,  1362,  2353,  1384,
     895,  2676,   814,  2157,  2612,   896,  2614,  1845,  1368,  1718,
    2106,   749,   526,   526,  1800,  1832,   530,   530,  2631,  3078,
    2134,  2135,   901,    50,  3048,    51,    52,   904,   874,   907,
      56,   911,   909,    57,  3045,   902,  2630,  1692,    61,  1910,
      62,    63,  1695,    66,   821,   821,  3093,  1019,  3076,  3090,
    2523,   978,   970,  1044,    67,  1628,   823,   823,    69,    71,
     983,  2866,  1270,    79,  2731,  2669,    81,  2912,   814,   814,
      82,   855,    83,  2593,  2377,  2205, -1968,    94,   892,   893,
    -462,    96,    98,    99,   100,  2370,  -379,   914, -1388,  2374,
    2938,  1392,  1356,  2341,  2943, -1968,  1251,  2257,  1255,  3170,
    1259,  1591,  1592, -2110, -2110,  -535,  2159,  3173,  1648,  -884,
    1065,  1996,  2260,  1650,  -892,  3303,  1997,  1066,  1604,  -539,
    2921,  2740, -1310,  1356,  2477,   988,  1437,  2734, -1329, -1329,
   -1959, -1959,  2738, -1976, -1976,  -892, -1326, -1326, -2101, -2101,
   -1330, -2119, -2119,  1658, -1330,   825, -2096, -2096, -1327, -1327,
    -889,   866,   825,  -851,  -889,  -864,  1065,  2541,  -879,  1578,
    2747,  1699,   825,   825, -2121, -2121,  1261,  1696,  1372,   825,
    2504,  1790,  2677,  1065,  2739,    23,  1372,  1660,  1159,  2149,
    1204,  1065,  1830,  2513,   982,  1955,  1207,  2149,  3388,  1779,
    1957,  3593, -1147,  2160,  3236,  3219,  3251,  -488,  1347,  1723,
   -1147,  -237,  3292,  1164,  1624,  -535,  -237,  1843,  2270,  1955,
    3070,  1236,  1270,  1956,  1957,  3647,  1844,  2788,  2790,  -539,
    2793,  2161,  3401,  1596,  2754,  1065,  1166,  1013,   959,  2367,
    1044,  1237,   541,  3472,   882,  1011,   944,  1348,  1720,  1606,
    2827,  1812,  1019,  1648,  1815,  1816,  3585,  1649,  1650,  1356,
     825,  1725,  1797,  3304,  -679,  3272,  1995,     3,     4,  1264,
    3642,  3200,  3578,  3202,  3512,  1701,  2672,  -821,  3305,   888,
    2487,   888,  2160,  3290,  1163,  1790,  3094,  1238,  1658,  3631,
    2136,  1697,  1386,  2678,  1782,  3329,  2706,  2042,  3430,  3307,
    2952,  1995,  3648,  2810,  2498,  2499,  2500,  2981,  3431,  3366,
    2161,  3368,  2232,  1772,  1773,  3516,  1570,  2922,   945,   843,
    3233,  2726,  1660,   825,  2198,  1776,  2906,  3499,  2908,    26,
      27,    28,  3176,   946,  2931,   883,  2488,  2799,  3466,  3629,
    3467,  3247,  1020,  2450,  2604,  2188,  2162,  3532,  3533,  2961,
     882,  2163,  1798,  2189,  1578,  1888,  2164,   792,  1648,   542,
    2680,  1737,  1609, -1168,  2075,  2263,  3271,  1609,  1200,  3400,
    1850, -1168,   947,  2081,  2478,  2962,  1911,  3297,  3571,  1385,
    3654,  2982,  1846,  1239,  1610,   539,  2951,  1648,  3309,  1610,
    2994,  1649,  1650,  1532,  3649,  3234,    33,  2233,  1611,  3573,
    1357,  2932,   793,  2934,  1167,  -535,  1168,  3417,  2743,  3109,
    3298,  1721,  2673,  -821,  1325,  1698,  3518,  1194,   946,  -539,
    3558,   844,  1658,  3561,  -699,  2162,  1349,  1660,  2291,  3579,
    2356,  1357,  1240,  3643,    38,  2164,  3444,  3586, -2095, -2095,
    3601,   883,  1241,  3498,  1202,  1614,  3434,  1578,  3632,  1160,
    1226,  2669,  3095,  2669,  1242,  1784,  1660,   947,  3580,  1476,
     949,  3383,  3418,  3626,  2858,  2983,  1265,  1799,    40,  1738,
    3306,  3419,  1799,   935,  3473,  3432,  2199,  -535,   942,    43,
    3393,   943,  2489,  2264,  1021,   934,  1243,  3071,  3399,  3327,
    2800,  -539,  3377,   948,  1608,  3420,    44,  2271,  3588,  2559,
    2368,  1570,  3248,  2719,  2720,  2721,  3416,  2077,  1849,   867,
    2039,  2165,  1619,  3086,  2679,  1774,  2680,  3624,  1645,  1195,
      45,  1775,  2166,  1837,  3124,  2157,  1161,  3104,  3389,  2517,
     723,  3098,  1831,  1710,  2923,  2359,  3594,  1719,  3559,  1059,
    1639,  1245,   956,  3285,  1350,   949,  2681,  3237,  1847,  1385,
    2282,  3650,   960,  1483,  2886,  1591,  1592,  1357,   968,  1490,
    2352,  1726,  2150,  1912,  1358,  1987,  1246,  2827,  3421,  1916,
    2595,  2004, -1147,  3099,  3115,  1785,   879,  1620,   982,   884,
    1604,  3422,  2106,  1955,  1587,  2445,  1248,  1956,  1957,  3460,
    2165,  2025,   994,  2616,  1570,  1361,  3408,  2451,  -535,  2257,
    2562,  2166, -1968,  2797,  1609,  2714,  2416,  1817,  1828,  3048,
    2741,  1601,  -539,  2646,  -462,  -462,  2633,  1322,  2750,  3045,
    -379, -1968, -1388,  2773,  1681,  1609,  1610,  2479,  2159,  1385,
    1601,  2842,  1385,  1385,  2484,  -884,  2707,  -535,  2204,  -535,
    1611,  2088,  2089,  2422,  1108,  1109,   917,  1610, -1310,  2641,
     918,  -539,  1200,  -539, -1329, -1329, -1959, -1959,   876, -1976,
   -1976,  1613,  2731,  3369,  1593,  3227, -1330,  3380,  2821,  1578,
   -1330,  1913,  3381,  2514,  1920,  3349,  -889,  2514,  1643,  1594,
    1596,  1599,  1007,   983,  -879,  2536,  1376,  1377,  1693,  2206,
    1822,   981,  2074,  1624,  1376,  1377,  1270,  2130,  1270,  3497,
    1606,  1972,  1624,  3590,  1169,    91,  2535,  1993,   543,   876,
    3560,   790,  3504,   917,  1823,  2190,  2109,   918,  3536,  -237,
    -237,  3503,  1969,  1970,  1971,  1972,  2727,  2728,  1202,  1000,
     985,   526,  3245, -1168,   113,   530,  2439,  2065,  3260,  3261,
    2172,  2440,   526,  2287,  1864,  1494,   530,  1025,  2131,   526,
    2352,  3218,  1818,   530,  1676,  1677,  1678,  1679,  1680,  1681,
    3480,  2919,  1819,   821,  3119,  3618,  1578,   824,  1923,  1925,
    2287,  2907,  3546,   990,   821,   823,  1648,  1203,   526,   526,
     895,   821,   997,  1865,  3423,   896,   823,  3424,  2811,  2812,
    2813,  2814,  3301,   823,  2485,  1165,  3493,  1495,  1009,  1216,
    1026,  2441,   526,  1911,  2288,  1048,  3569,  3246,  1010,  3600,
    1187,  1658,   863,  3209,  2458,  1165,  1570,  2920,   114,  3293,
      59,    84,    68,  3076,  3481,  1311,    77,    91,  2321,    95,
    1155,  2666,   105,   101,  2485,  2404,    60,  1801,  2324,  1170,
     869,  2327,    65,    76,  3302,  1660,   104,  3220,  3181,  1822,
     526,   723,  3210,  3158,  1309,   526,  3160,  2620,  3162,  2828,
    2319,  1319,  3288,  1179,  2173,  2152,   827,  1922,  3064,  1200,
    3065,  1867,  1065,  1823,  1201,  3048,  1332,  1334,  1337,  1339,
    3298,  2174,  2621,   106,  1924,  3045,  2175,  1740,  2605,  1065,
    1678,  1679,  1680,  1681,   855,   855,  2698,   855,  3253,   855,
    2345,  2346,  2347,  1802,  1578,  2492,  3258,  1309,  3547,  2699,
     878,   545,    50,  1570,    51,    52,  2380,  3644,   880,    56,
     981,   115,    57,   876,  2176,   526,   526,    61,  1440,    62,
      63,   526,    66,  1741,   526,   526,    91,   526,   526,   526,
     526,  2427,   790,    67,  1326,  1202,  2415,    69,    71,  2429,
    2417,  3386,    79,  2419,   526,    81,   526,  2459,   530,    82,
     530,    83,  1368,  2106,  2877,   526,    94,  2460,  1380,   530,
      96,    98,    99,   100,   546,  3619,  1421,  2279,  1049,  1609,
     885,    23,   526,  1309,  1563,   545,   821,  2644,   821,  1050,
    1223,  2082,  1065,  1803,  1203,  3548,  1224,   821,   823,  2003,
     823,  1610,   944,  2112,   526,  2113,   108,   876,  2320,   823,
     814,  1978,  1009,  1602,  1603,  1613,  2955,  3373,   897,  1027,
    1473,   814,  1010,   526,  1028,  2322,   912,  1480,  2330,  2291,
    2325,  1487,  1790,  2337,  2132,   526,   526,   526,   825,   526,
     526,  2617,   723,  1791,  2618,  1804,  1828,   913,   546,  3191,
    2585,  1570,  1639,  1743,  1629,   917,  1790,  1064,  2715,   918,
    1955,  1578,  2722,  3620,  1956,  1957,  2652,  1793,  1958,  1959,
    1960,   915,   917,  1578,   945,   526,  1635,   886,  2586,  1636,
   -1968,  3321,  2177,  1029,  1967,  1968,  1969,  1970,  1971,  1972,
    1409,  1410,  3621,   526,   526,   917,  2965,  1641,  2483,  1635,
    2708,  1225,  3476,  1578,  2956,  1480,  2717,  1644,  1740,  1801,
    1578,  2641,  2718,  1799,   921,  1728,  1729,  1744,  1735,  1165,
     896,   896,  2965,   896,  3360,    26,    27,    28,  2966,  1694,
    3361,   526,   933,  2192,   982,   526,   526,  2193,  1700,  2968,
     940,  2967,  2256,  2256,  -213,   526,   526,   526,   887,  1578,
     526,  1778,   951,  1578,  1741,  1030,   952,  1628,   550,  1578,
     977, -2092, -2092,  1030,  1809,  2968,  2837,  2969,  1370,  1563,
    2957,  1371,  2958,   957,  1864,  1802,  2828,   109,   936,   958,
     937,  1324,  1578,  1829,  2539,  1834,   554,   938,   110,   939,
    2755,  1031,    33,  2438, -2093, -2093,  2763,  2442,  2587,  1031,
    2444,  1708,   961,  2588,  1709,  1309,  1385,  1032,  1570,   962,
    1415,  1416,   994,  1865,  1309,  1481,  1385,  1033,  1488,  1385,
    1570,   963,  1493,  1742,   111,  1033,   888,  3280,  1153,  1154,
      38,  1156,   550,  1158,   977,  -622, -2094, -2094,  1826,  1309,
    -622,  1030,  1838,  1801,  1986,  3166,  1988,  1989,  1961,  1866,
    1570,  1034,   964,  1863,  1585,  2970,    46,  1570,  1226,  1879,
     554,  2613,  1563,  2583,    40,  1803, -2097, -2097,  1053,  1054,
    1055,  1962,  1214,  1058,  1743,    43,   112,  1031,   723,   917,
     974, -1310,   117,   918,  1003,  1872,   540,   723, -2098, -2098,
    1905,  1874,  1875,  1489,   753,  1876,  1570,  3391,  1035,  3120,
    1570,  1867,  2972,  1033,   981,  1036,  1570,  2822,   842,  1802,
    2829,  -622,   856,  1917, -2099, -2099,  1918,  1804,    91,  1385,
    2069,   723,  1228,  2971,   790,  1223,   526,   992,  2972,  1570,
      46,  1224,  2688,  1927,  2690,  2394,  3640,  2395,  1744,  2038,
    3046,  1963,  2039,   985,  1012,  2063,  2106,  1037,  2064,  2493,
     993,  2494,  2973,   995,  1229,  1037,  2364,   998,  2589,  2365,
    -622,  2433,  1001,  3627,  2434,  3628,  1038,  1002,  1926,  2590,
    2974,  2655,  1833,  2495,  1482,  2496,   526,   526,  2973,   889,
    3603,  1004,   526,  2471,   526,  1799,  2472,  1005,   530,   526,
     526,   526,   526,  2737,  2515,  3615,  2974,  2516,  1006,  1803,
    2691,  1223,  2693,  2012,   526,   526,  3653,  1224,  2992,  2518,
    2694,  1007,  2516,  2695,   526,  2985,   821,   526,   530, -2100,
   -2100,   530,   526,  1801,   526,   526,   530,  1230,   823,   530,
     526,  3063,  1014,  1037,   530,  2949,  1225,  1039,  2700,  1046,
    2530,  2701,  1223,  2859,  2860,  2948,   821,  2950,  1224,   821,
    3651,  1804,  1482,  2766,   821,  3652,  2039,   821,   823,  1056,
    2834,   823,   821,  2516,  1051,  3073,   823,  1734,  2835,   823,
     814,  2064,  2975,   814,   823,  2984,  1057,  2993,   814,   886,
    2017,   814,  2976,  2019,  1563,  1059,   814,  2838,  2023,  1802,
    2839,  2026,   545,  1197,  -623,  1199,  2030,  2840,  2975,  -623,
    2839,  1401,  1402,  2926,  1060,  1578,  2927,  3085,  2976,  1223,
    2365,  3462,  1225,  3463,  1157,  1224,  1173,   526,   526,  1799,
    1180,  1628,  2066,  2071,  2067,  2845,   526,   526,  2068,    91,
    1181,  2072,  1188,  1624,   526,  2073,  2848,  2850,  2851,  2847,
    2849,   526,  2846,  3107, -2102, -2102,  3108,  1183,   526,  1801,
     887,  3113,  1836,  1225,  3114,   546,  1184,  1964,  1965,  1966,
    1185,  1967,  1968,  1969,  1970,  1971,  1972,  1189,   723,   526,
    -623,  1409,  1410,   526,  3121,  3182,   526,  3122,  2064,  1803,
      23,  1563,   526,   526,   526,   526,   526,   526,   526,   526,
     723, -2103, -2103,  1226,   526,   526,   526,  1311,  2615,   526,
     530,  3275,  2146,   526,  2235,  1198,   526,   526,   526,   526,
     526,   526,   526,   526,   526,  1802,  1223,   526,  3322,  -623,
    1225,  2064,  1224,  2780,   526,  1217,  1309,  3323,   888,   548,
    2516,  1804,  1218,   982,  2645,  2645,  1220,  2209,  3265,  2212,
    3355,  1223,  1578,  2064,   526,  3362,  3374,  1224,  2039,  3375,
    1221,  2220,  1570,  1227,  1222,  2239,  3407,  1228,  3410,  2365,
     896,  3108,  3441,  3509,  2201,  2064,  3108,  3514,  3540,  1226,
    3515,  3541,   526,  3584,  3625,  1234,  3515,  3515,  2705, -2104,
   -2104,  1170,  2207,   526,   526,  1235,  2641,  1252,  1324,  1229,
    2130,  1415,  1416,  2261,  1256,  -212,  1470, -2105, -2105,  1799,
    1260,  1477,  1478,  1479,   113,  1803,  2229,  2231,  1262,  1578,
    1226, -2106, -2106, -2107, -2107, -2108, -2108,  3228,  1498,  1563,
    1321,  2992,  1502,  1318,    26,    27,    28,  1225,   723,  1253,
   -2109, -2109,   723,  1228, -2111, -2111, -2112, -2112,  1322,   550,
    2303,   551, -2113, -2113,  2309, -2114, -2114, -2115, -2115, -2116,
   -2116,  1327,  1225, -2118, -2118,  1329,  2942,  1804, -2120, -2120,
   -2123, -2123,  1230,  1852,  1853,  1254,  1330,   554,  2258,  2259,
    1257,  -674,  -674,  1345,  1228,   526,  2042,  1226,  1343,  3069,
    3096,   889,  1309,  -678,  -678,   526,   526,  3080,  1353,  1570,
    3284,    33,  -677,  -677,  2372,  2373,  2375,  2376,  1801,  2378,
    1346,  1064,  1354,  3348,  1955,  1360,  1258,  3602,  1956,  1957,
    3051,  3604,  1958,  1959,  1960,  1363,  1578,  3112,  2340,  1364,
    1801,  1411,  1412,  1309,  1369,  1799,  1415,  1416,  2398,    38,
    3224,  3225,  2768,  2770,  1387,  2358,  2358,  2278,  1230,  -548,
    1388,  1228,  1464,  3193,   723,  2635,  2636,  3611,  3612,  3637,
    3638,  1309,   526,  1467,  -548,  1393,  1570,  3440,  1451,  -548,
     981,  1704,  1705,    40,  1802,  1466,  3645,  1474,  1484,  1485,
    1491,  1492,  1501,  1229,    43,  1497,  1563,  1503,  1581,  1230,
     526,   526,  1584,   526,  1226,  1582,  1802,  -855,  1563,   526,
     526,   526,   526,   526,   526,  -862,  1597,   526,   526,   526,
     526,   526,   526,   526,   526,   526,   526,  1593,  1380,  1226,
    -548,    46,   526,   526,  2437,  3046,   526,  -699,  1563,  1578,
    2841,  2843,  -852,   526,  -700,  1563,  -853,  2709,  1607,    46,
    -548,  -856,  1608,  -854,  1615,  1687,  1630,  2497,  1640,  1642,
    1689,  1703,  1716,  1712,  2328,  1691,  1230,   526,  1228,  2713,
    1711,   526,  2641,   526,  1803,   530,  1724,   526,  1722,  1201,
    1203,   530,  1762,  1570,  1563,  1764,  1766,  1777,  1563,  2335,
     526,  1795,  1309,  1228,  1563,   545,  1803,  1796,  -548,  -548,
    2329,  1806,  1807,   821,  1808,  1821,  1825,  1572,  -548,   821,
    1813,  1820,  2272,  -548,  1835,   823,  1842,  1563,  -548,  3256,
   -1374,   823,  1855,  1578,  1856,  2336,  1804,   814,  1861,   526,
     526,  1869,  3440,   814,  1573,  1962,  1857,  2505,  1870,  1871,
    1884,  3405,  1886,  2508,  1880,  1890,  1883,  1887,  1804,  1889,
    1898,  1899,  2003,  1930,  3266,  3267,  3157,  1906,   546,  1907,
    1911,  1919,  1944,  1946,  1947,  1949,  1952,  1983,   526,  -548,
    1975,  1994,   526,  1230,  3440,   876,  1984,   526,   526,  1991,
    2016,  2014,  2029,  2027,  2018,  2024,  1570,  2028,  1647,  -548,
    2034,  1648,  2037,  2040,  1799,  1649,  1650,  1587,  1230,  2045,
    1931,  1594,  2046,   526,   526,  1963,  1599,  2077,   526,  2041,
    1385,  1628,  2379,  2043,  2044,  2076,  1799,  1065,  2110,  2119,
    2111,  1932,  1648,  3440,   526,  2115,  1658,   526,   526,   526,
    2124,  2122,   530, -2124,  1578,  2125,  2148,  2126,  -548,  1933,
    2169,  2168,  3495,  1934,  1027,   526,   723,  -548,  2127,  1028,
    2171,  2195,   526,  2196,  2202,   526,  2214,  2216,  2215,   530,
    1660,  -548,  3456,  2217,  2235,  2238,  1935,  2218,  1578,  1936,
    1570,   526,   887,  2247,  2249,   530,  2248,  2250,  2251,  2252,
    2269,   922,  2273,  2274,  2277,  1937,  2280,   821,   526,  2284,
    2285,  3242,  1572,  2286,  2307,  2308,  2312,  2313,  2348,   823,
     888,  3046,  2349,   821,  2350,   526,   526,   923,  1029,  2362,
    2366,   814,  2371,  2381,   545,   823,  2383,  2384,  2385,  1573,
    2399,  2400,   526,  2402,   526,  2582,  2405,   814,   825,  2407,
    2408,   917,  2409,   526,  1183,   918,  2406,  2410,  2414, -1374,
    2411,  2435,   550,  2412,   977,  2418,  2443,  1575,  3159,  1980,
    1955,   723,   723,   723,  2473,  1979,  1578, -2124,  2480,  2509,
    2502,  2520,  2527,  2303,  2303,  2303,  2481,   553,  2482,  2486,
     554,  2490,  2522,   924, -2124,  2531,  2491,   546,  1938, -2124,
    1030,  1570,  2507,  2528,  2537,  1572,  1939,  2529,  3394,  1828,
    2549,  2548,  2566,  2538,  2553,   526,  1620,  2554,  2532,  1578,
    -548,   876,   925,  2533,  1309,  2534,  2696,  2545,  1940,  2546,
    2579,  2550,  1573,  2551,  2552,  1570,  1031, -2124,  2555,  2556,
    2733,  1964,  1965,  1966,  2576,  1967,  1968,  1969,  1970,  1971,
    1972,   976,  1032,  2748,  2749,  2751,  2584,  2562,  1941,  2591,
    1563,   982,  1033,  2577,  2600,   926,  2601,  1872,  2762,    14,
      15,  2765,  2606,  1874,  1875,  2607,  2619,  1876,  2608,  2624,
     526,  2778,  2626,   723,  2729,  2627,  2632,  1726,  2637,  2648,
     917,  2650,  1669,  -680,   918,  2774,  1034,  2634,   526,   981,
    2647,  2659,  2744,  2651,  2654,  2658,  1639,   723,  2662,  2660,
    2664,  2668,  2665,  2687,  2689,    23,  2702,  1385,  2703,  1927,
    2704,  2710,  1385,  1570,  2711,  2712,  2723,  2736,  2742,  2724,
     549,  1578,  2735,  2756,  2753,  2752,  2757,  2760,  1799,  2764,
    2777,  2787,  2795,  1035,  1601,   526,  2798,  1380,  2801,   530,
    1036,  2805,  1575,  2818,  2804,  2819,  2806,  2785,  2830,  2786,
    2807,  2831,  2836,  2791,  2855,  2794,  1570,  2815,  2816,  2817,
    1923,  1925,  2130,  2844,  2852,  2863,  3445,   821,  3447,  2873,
    3455,   550,   526,   977,  2884,  2862,  2882,  2874,  2903,   823,
      23,  2885,  1037,   927,  2913, -2124,  2916,  1563,  2939,  2888,
     552,  2898,  2914,   876,   928,  2897,   553,  1165,  2935,   554,
    2933,  1038,  2947,  2980,   526,  2996,  2909,  2937,  2905,  2960,
     526,   526,  2953,  3457,  3072,  3459,  2954,  1572,  3577,  3066,
    3067,  3068,  3075,  3538,  3079,  3088,   526,  3083,  3087,  3084,
     929,   876,  3092,  3100,  3101,  1575,  3117,  3110,  2365,  3118,
    2900,  3123,   526,  3145,  1573,   526,  3143,   526,  3149,    26,
      27,    28,  3531,   930,  1563,   526,  3153,  3163,   526,   526,
    3164,  3167,  3208,   526,   526,  3542,  3168,  3194,  1570,  3201,
     526,  3204,  1039,  3205,  3215,  3217,  3221,  3222,  3223,  3229,
    3231,  3230,   931,  3235,  3239,  3240,  2941,   526,  3526,  3241,
    3249,  3252,  3254,  3255,  3259, -2124,  3273,   526,  3276,  3291,
    2925,  3274,  1676,  1677,  1678,  1679,  1680,  1681, -2091,  2936,
    3310,  3277,  3469,  3278,  1572,  3294,    33, -2092, -2093,   526,
    3279,  3308,   525,   537,    26,    27,    28,    35,   561, -2094,
   -2095, -2096,  3295, -2097,   561, -2098, -2099, -2100,   811, -2102,
     826,  1573, -2103, -2104,   829,   561,   838,  3312,  3281,   838,
      37, -2105,   858,   858,    38, -2106,   858, -2107,   723,   561,
     561,  3044,   723, -2108,   723,   526,   526, -2109,  3324,  3315,
    2303,  3336,  3325, -2111,  3049, -2112,  2309, -2113,  1236,   526,
   -2114,   526,  1923,  1925, -2115, -2116, -2117,  1578,    40, -2118,
   -2119,    33, -2120, -2121, -2122,  1385, -2123,  1223,  1237,    43,
    3313,  3103,  3082,  1224,   811,   811, -1327,  3282,  3077,  3041,
    3289,  1236,  3318,  3328,  3330,  3332,    44,  3339,   858,  3338,
    3342,  3344,  3343,   858,   561,   858,   858,   858,  1872,    38,
    3347,  1237,  3354,  3350,  1874,  1875,  3097,   526,  1876,  3351,
      45,  1446,  3370,  2729,  1238,  3372,  1236,  3566,  3371,  3376,
    3379,  3382,  1572,   876,    46,  3396,  3384,  1575,  3397, -1326,
    3404,   526,  3412,    40,  1563,  3406,  1237,  3413,  3414,  3427,
    3125,  3126,  3127,  3128,    43,  3428,  3429,  1238,  3442,  1573,
    3449,   526,   526,  3443,  3446,  3450,   526,  3458,  3452,   526,
    3464,    44,  3484,  3248,  3490,  3488,  3494,  3491,  3500,  3506,
    3507,  3512,  3508,  3517,  3519,  3521,  3197,  3524,  1225,  1576,
    3525,  3528,  1238,  3529,  2988,    45,   526,  3530,  3537,  3535,
    3539,  3544,  3549,  3556,  3555,  3557,  3562,  3563,  3572,    46,
    3564,  3582,  3592,  3595,  1570,  3616,   526,  3574,  3593,  3597,
    1239,  3576,   526,   526,  3613,  3594,  3630,   526,  1563,  3635,
    3641,  3646,   526,   876,  1575,   526,   526,  3655,  3656,  3262,
     526,  1309,  2999,  2995,   526,  1186,  2685,  2315,   526,  2211,
    2732,  2360,   530,  1239,  2784,   991,  3319,  3553,  3074,   526,
    3623,  3392,  3591,  3598,  3617,  2066,  2071,  2067,    11,  1240,
    1787,  2068,    91,   919,  2072,  3426,  2667,  2692,  2073,  1241,
     821,  3589,  2964,  3091,  3596,  3587,  3050,  2663,  1239,  1572,
    2767,  1242,   823,  2769,  1868,  3314,    14,    15,  2420,  2929,
    3203,  1572,  1240,   526,   814,  2779,  1909,  1921,  3510,  3471,
    2928,   526,  1241,  3250,  1473,  3570,  1573,  3534,  3639,  1193,
    3206,  2653,  3052,  1243,  1242,  2639,  1759,  1713,  1573,  1471,
     526,  1572,  2276,  2809,  1472,  3575,  2649,  1240,  1572,  1563,
    1758,  1385,    23,  2244,  3520,  1226,  3448,  1241,  2275,   815,
    2623,  1763,  2512,  3346,  2803,  2802,  1243,  2833,  1573,  1242,
    3152,  3398,  2526,  2430,  3264,  1573,  1438,  3523,  1422,  2431,
    1424,  1428,  1575,  3044,  1576,  3522,  2432,  1572,  1245,  2857,
    2574,  1572,  2598,    14,    15,  1429,  2642,  1572,  2542,  1430,
    1431,  1243,  1432,  2596,  2005,  1433,  2575,  1434,  2876,  2210,
    3207,  2519,     0,  1246,  1573,  1244,     0,     0,  1573,  1228,
    1572,  1245,  3177,     0,  1573,     0,  1162,     0,     0,     0,
       0,     0,   723,  1248,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,  2774,     0,  1246,  1573,     0,     0,
    3300,  1247,     0,   876,   526,     0,  1245,     0,     0,     0,
       0,   723,     0,     0,     0,     0,  1248,   981,     0,     0,
     526,  1563,     0,  2774,     0,     0,     0,  1576,     0,     0,
    1064,  1246,     0,  1955,     0,  3296,   526,  1956,  1957,     0,
       0,  1958,  1959,  1960,     0,     0,    26,    27,    28,     0,
       0,  1248,     0,     0,     0,     0,     0,  1027,  2879,     0,
       0,     0,  1028,     0,  1563,  1380,     0,     0,     0,     0,
     526,     0,     0,     0,  1230,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   526,   526,  1575,
       0,   526,     0,   526,     0,     0,     0,     0,     0,   858,
       0,  1575,     0,     0,   858,     0,     0,   858,     0,     0,
       0,  1647,     0,    33,  1648,   561,    85,     0,  1649,  1650,
     526,  1029,  1953,  1954,    35,     0,     0,     0,  1974,     0,
       0,  1575,     0,    26,    27,    28,    85,     0,  1575,   813,
       0,     0,     0,     0,   526,     0,     0,    37,     0,  1658,
       0,    38,  3367,    85,     0,     0, -2124,     0,     0,     0,
       0,     0,   875,     0,     0,     0,     0,  1064,     0,     0,
    1955,    39,     0,     0,  1956,  1957,  3044,  1575,  1958,  1959,
    1960,  1575,     0,  1660,     0,    40,     0,  1575,     0,     0,
       0,     0,  3411,  1030,     0,  2880,    43,     0,     0,     0,
      33,  1211,     0,  3409,     0,   813,   813,   894,     0,     0,
    1575,    35,     0,    44,  3435,     0,   723,     0,     0,    85,
       0,   526,     0,     0,  3041,   530,     0,     0,  2774,  1031,
       0,   526,     0,   526,    37,   526,     0,    45,    38,   526,
       0,   526,     0,   526,  1962,  1032,     0,     0,  2592,  1576,
       0,    46,     0,   821,     0,  1033,     0,   526,     0,     0,
       0,     0,   526,     0,   526,   823,     0,     0,     0,     0,
       0,     0,    40,     0,   526,     0,     0,     0,     0,     0,
   -2124,  3475,     0,    43,  3468,     0,  3470,   723,     0,  1034,
       0,     0,   526,  1572,     0,     0,     0, -2124,     0,  3477,
      44,     0, -2124,     0,     0,   966,   561,   561,     0,     0,
    1212,  3501,     0,     0,  1963,     0,     0,     0,     0,  1064,
    1573,     0,  1955,     0,    45,  3502,  1956,  1957,     0,     0,
   -2124, -2124, -2124,     0,     0,     0,  1035,     0,    46,   526,
   -2124,  3505,     0,  1036,     0,     0,  1576,   989,   537,   526,
       0,     0,     0,   525,     0,   858,     0,  3496,     0,     0,
       0,   526,     0,     0,   811,     0,     0,     0,  1016,  1016,
       0,   811,     0,     0,  1016,  1043,   526,     0,     0,     0,
     530,  1962,     0,     0,     0,  1037,     0,   838,   838,   838,
       0,     0,   838,     0,   526,  1669,     0,     0,     0,     0,
    1112,  1112,   838,   838,  1038,   838,     0,   838,   821,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   526,   858,
     823,     0,   530,     0,     0,   561,     0,     0,     0,     0,
    1572,     0,     0,   526,     0,     0,   858,     0,     0,   858,
     826,     0,  3044,     0,   723,     0,     0,     0,     0,     0,
     821,  1963,     0,     0,     0,     0,  3477,  1573,     0,     0,
       0,     0,   823,     0,     0,     0,     0,   526,  3599,     0,
       0,   530,     0,     0,     0,  1039,     0,     0,     0,     0,
    1213,   526,   526,   526,  1576,     0,     0,   858,  1320,     0,
    3041,     0,     0,     0,  3614,     0,     0,  1572, -2124,   821,
       0,     0,   858,   858,   858,   858,  1341,     0,   526,  1064,
       0,   823,  1955,     0,     0,     0,  1956,  1957,     0,  1352,
    1958,  1959,  1960,     0,  1573,     0,     0,     0,     0,     0,
    1964,  1965,  1966,  1575,  1967,  1968,  1969,  1970,  1971,  1972,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   526,
       0,  1016,  1043,     0,   858,     0,     0,  1445,     0,     0,
       0,     0,     0,  1016,  1016,     0,     0,     0,     0,     0,
     561,     0,     0,  2090,     0,     0,   811,     0,   811,     0,
    2091,  2092,     0,     0,  2093,  2094,  2095,   811,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   561,     0,     0,
       0,     0,     0,  1963,  1572,     0,     0,     0, -2124,     0,
       0,     0,     0,     0,  1583,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,     0,  2452,  2453,  2454,  2455,  2456,
    2457,  1576,     0,  2461,  2462,  2463,  2464,  2465,  2466,  2467,
    2468,  2469,  2470,  1576,     0,     0,     0,     0,    23,    85,
       0,     0,     0,     0,     0,     0,   561,  1964,  1965,  1966,
    1575,  1967,  1968,  1969,  1970,  1971,  1972,     0,     0,     0,
       0,     0,     0,  1576,  1064,     0, -1850,  1955,     0,     0,
    1576,  1956,  1957,     0,     0,  1958,  1959,  1960,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1572,     0,     0,
       0,     0,  3184,     0,     0,     0,     0,     0,     0,     0,
    1707,     0,     0,  1962,     0,     0,     0,     0,     0,  1576,
       0,     0,     0,  1576,  1573,   561,   561,  1575,     0,  1576,
       0,     0,     0,   858,     0,     0,     0,     0,  1064,     0,
       0,  1955,     0,     0,     0,  1956,  1957,     0,     0,  1958,
    1959,  1960,  1576,     0,   562,     0,     0,  1445,  1112,  1112,
     562,     0,     0,     0,   812,     0,  3185,   858,  1786,     0,
       0,   562,     0,     0,     0,     0, -1850,     0,  2397,     0,
     858,  1572,     0,  1963,     0,   562,   562,     0,     0,     0,
       0,     0,    26,    27,    28,     0,     0,   858,     0,    23,
       0,   858,     0,     0,     0,     0,     0,  1839,  1573, -2124,
   -2124, -2124,     0,  1967,  1968,  1969,  1970,  1971,  1972,  2580,
    2581,     0,     0, -1850,     0,     0,     0,     0,     0,     0,
     812,   812,     0,     0,  1575,     0,     0,     0, -1850,     0,
       0,     0,     0, -1850,     0,     0,  1577,  2640, -1850,     0,
     562,     0,     0,     0,     0,     0,     0, -1850,     0,    33,
       0,     0, -1850,    85,   875,     0,     0,  1858,     0,   858,
       0,     0,     0,     0,     0,   858,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1962,  1902,
       0,     0,  1572,     0, -1850,     0,     0,    38,   966,     0,
       0,     0,     0,   966,   996,   561,   561,     0,   561,   966,
       0,     0,     0,     0, -1850,  1008,     0,  1064,     0,  1573,
    1955,     0,  1024,     0,  1956,  1957,  1572,  1447,  1958,  1959,
    1960,    40,     0,     0,     0,     0,     0,  1575,     0,     0,
       0,     0,    43,    26,    27,    28,     0,     0,     0,     0,
       0,     0,  1962,  1573,     0,     0,     0,     0,  1963,    44,
       0,     0,     0, -1850,     0,     0, -1850,   894,     0,     0,
       0,     0, -1850,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,    85,     0,     0,  1445,  1445,
       0,     0,     0,     0,  1445,     0,   525,    46,     0,  1964,
    1965,  1966,     0,  1967,  1968,  1969,  1970,  1971,  1972,  1016,
      33,   561,  1998, -1850,  1572,     0,  1112,  1112,     0,   858,
       0,  1575,  1963,     0,     0,     0,   811,     0,     0,   811,
       0,  1577,     0,     0,   811,     0,  1112,   811, -1850,     0,
       0,  1573,   811,     0,   561,     0,   561,     0,    38,     0,
       0,     0,     0,     0,     0,     0,     0,  1572,     0,     0,
       0,     0,     0,  2096,  2097,  2098,     0,  2099,  2100,  2101,
    2102,  2103,  2104,     0,     0,  1576,     0,     0,     0,     0,
       0,   563,    40,     0,  1573,     0,   545,   754,     0,     0,
       0,     0,     0,    43,    85,     0,     0,   863,   830,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44, -1374,   873,   873,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577, -1850,     0,   813,  1755,  1008,
       0, -2124,  1575,     0,    45,     0, -1850,  1447,   813,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    46,   546,
       0,     0,  2105,     0,     0,     0, -1850,     0, -1850, -1850,
       0,     0,     0,     0,     0,   561,  1575,     0,     0,  1572,
       0,     0,     0,  1586,  1964,  1965,  1966,   905,  1967,  1968,
    1969,  1970,  1971,  1972,     0,  1598,     0,     0,     0,  1448,
       0,     0,     0,     0,     0, -1850,  1573,     0, -1850, -1850,
   -1850,  1963,     0,   547,     0,   966,     0,     0,  1445,     0,
       0,     0,  1576,  1626,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   548,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1112,     0,  1964,  1965,
    1966,     0,  1967,  1968,  1969,  1970,  1971,  1972,     0,     0,
       0,  2208,     0,   858,  1575,   858,     0,     0,     0,     0,
       0,     0,     0,     0,  2890,  2891,     0,   858,     0,  2223,
    2228,  2230,     0,     0,     0,     0,     0,     0,     0,  1576,
       0,     0,   549,     0,  1445,     0,     0,     0,     0,  -212,
       0,     0,  3299,     0,     0,     0,     0,  1575,     0,     0,
       0,   562,   894,   894,     0,   894,     0,     0,     0,   858,
       0,   561,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1786,   561,     0,     0,     0,
       0,     0,     0,   550,     0,   551,   561,  2293,   561,  2297,
       0,   561,     0,     0,     0,     0,  1577,     0,     0,     0,
       0,   561,   552,   561,     0,     0,     0,     0,   553,     0,
       0,   554,     0,     0,     0,   966,   561,     0,  1447,  1447,
     966,   561,     0,     0,  1447,   561,   561,   561,   561,     0,
     561,   561,     0,     0,     0,     0,  1576,     0,     0,  1394,
       0,   825,     0,     0,     0,     0,     0,     0,     0,  1448,
       0,  2361,     0,     0,     0,     0,     0,     0,     0,  1575,
     858,   858,   858,   858,  1341,   858,     0,  1964,  1965,  1966,
       0,  1967,  1968,  1969,  1970,  1971,  1972,     0,     0,  2387,
       0,     0,     0,     0,     0,  1572,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,     0,
       0,  2413,     0,     0,  1395,  1396,     0,    26,    27,    28,
       0,     0,  1573,     0,     0,     0,     0,  3116,     0,     0,
       0,     0,     0,     0,     0,     0,    85,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1576,
       0,     0,   562,   562,     0,  1397,  1398,     0,     0,  1399,
    1400,  1445,  1445,  1445,  1445,  1445,  1445,     0,     0,  1445,
    1445,  1445,  1445,  1445,  1445,  1445,  1445,  1445,  1445,  1647,
       0,     0,  1648,     0,    33,     0,  1649,  1650,     0,     0,
    1653,  1654,  1655,     0,     0,     0,     0,     0,     0,   561,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     812,     0,     0,   858,     0,     0,     0,  1658,     0,     0,
       0,     0,    38,   811,  1659,     0,     0,     0,     0,   811,
       0,     0,     0,  1576,   561,  1401,  1402,     0,     0,   561,
       0,  1577,     0,     0,     0,     0,     0,   813,  2524,  2524,
     813,  1660,     0,     0,     0,   813,    40,     0,   813,     0,
       0,     0,     0,   813,     0,     0,     0,    43,     0,     0,
       0,   562,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,   954,     0,
    1448,  1448,     0,     0,  1236,     0,  1448,  3244,     0,  1403,
    1404,  1405,  1406,  1407,  1408,  1409,  1410,     0,    45,  1411,
    1412,     0,     0,     0,  1237,     0,     0,     0,     0,     0,
       0,   561,    46,     0,  2246,     0,  2568,     0,     0,     0,
       0,   561,     0,     0,     0,  1575,     0,     0,     0,     0,
       0,     0,     0,     0,  1576,     0,     0,    85,  1661,     0,
       0,     0,     0,     0,     0,  1445,  1445,     0,     0,     0,
    1238,  2986,     0,     0,     0,  1662,     0,     0,     0,     0,
    1663,  2987,     0,     0,  2105,     0,     0,     0,  1576,     0,
    1445,     0,     0,     0,  1413,  1414,     0,     0,     0,     0,
       0,     0,     0, -2124, -2124,     0,     0,     0,  1577,     0,
       0,     0,     0,     0,     0,     0,     0,   811,  1666,     0,
    1577,     0,     0,     0,     0,     0,  1465,     0,     0,   561,
       0,     0,   812,   811,   812,  1415,  1416,  2223,     0,  2156,
    2988,     0,     0,   812,     0,     0,     0,     0,     0,     0,
    1577,     0,     0,  1500,     0,     0,  3320,  1577,     0, -2124,
       0,     0,     0,     0,     0,     0,  1239,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1576,     0,     0,     0,
       0,   561,     0,     0,  1445,     0,  1112,   561,     0,     0,
     973,     0,     0,     0,     0,     0,  1577,     0,     0,     0,
    1577,     0,     0,  1858,     0,     0,  1577,     0,     0,     0,
       0,  1027,   894,     0,     0,  1240,  1028,     0,     0,  1576,
       0,     0,  1631,     0,     0,  1241,     0,     0,     0,  1577,
       0,     0,     0,  1417,  1418,     0,     0,  1242,     0,  2989,
       0,     0,     0,     0,     0,     0,  2200,     0,     0,     0,
       0,  1447,  1447,  1447,  1447,  1447,  1447,  1419,  1420,  1447,
    1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1447,  1243,
       0,     0,     0,     0,     0,  1029,  1671,     0,     0,     0,
    1858,     0,     0,     0,     0,     0,   858,     0,     0,     0,
       0,   562,   562,     0,     0,     0,  1448,     0,  1858,   858,
     858,   858,     0,     0,     0,     0,     0,     0,   873,     0,
       0,     0,   561,     0,   858,     0,     0,   858,     0,     0,
       0,     0,     0,  1341,  1245,     0,     0,   858,     0,     0,
       0,  1576,     0,   966,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1030,     0,  1246,
       0,     0,     0,  2382,     0,  1858,  1858,     0,  1858,     0,
       0,     0,    85,     0,     0,     0,     0,     0,     0,  1248,
       0,  2990,     0,     0,  2991,     0,     0,     0,     0,     0,
       0,     0,     0,  1031,     0,     0,  1672,   525,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,  1032,
       0,     0,     0,     0,     0,  2808,     0,     0,     0,  1033,
       0,     0,     0,   858,   858,   858,     0,     0,     0,     0,
       0,     0,   561,     0,  1445,   561,     0,     0,     0,     0,
       0,   561,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1034,     0,  1447,  1447,     0,     0,     0,
       0,   858,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2020,  2105,     0,     0,     0,     0,
       0,   562,   562,     0,   562,     0,     0,   561,     0,     0,
       0,   561,     0,     0,     0,  1799,     0,     0,     0,     0,
    1035,     0,     0,     0,   813,     0,     0,  1036,     0,     0,
     813,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1445,  1445,     0,  1448,  1448,  1448,  1448,  1448,  1448,     0,
       0,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,  1448,
    1448,     0,     0,     0,  2568,     0,     0, -1852,     0,  1037,
       0,  2918,     0,     0,     0,     0,     0,  2223,     0,     0,
       0,     0,  1577,     0,     0,     0,     0,     0,  1038,     0,
       0,     0,     0,     0,  1447,   858,     0,     0,     0,   561,
       0,  1112,     0,   561,   561,   561,     0,   562,     0,  1858,
    1786,  1858,     0,  1902,     0,     0,     0,     0,     0,     0,
       0,     0,   812,     0,     0,   812,     0,  1576,     0,     0,
     812,     0,   561,   812,  2998,     0,     0,     0,   812,     0,
    2031,     0,  2035,     0,     0,     0,     0,     0,   873,   561,
     561,   561,   561,   561,   561,   561,   561,   561,   561,  1039,
       0,  1626,     0,     0,  2021,     0,     0, -1852,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2387,  2156,     0,     0,     0,     0,     0,     0,   858,     0,
       0,     0,     0,     0,     0,     0,     0,  2602,  1786,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   813,     0,
       0,     0,     0,     0, -1852,     0,     0,     0,     0,  1577,
       0,     0,  1902,     0,   813,     0,     0,     0,     0, -1852,
       0,     0,  1858,     0, -1852,     0,     0,  1448,  1448, -1852,
       0,     0,     0,  1445,     0,     0,     0,     0, -1852,   561,
       0,     0,     0, -1852,     0,     0,   858,   858,   858,   858,
       0,  2117,     0,     0,     0,     0,     0,     0,  1445,     0,
       0,  1445,     0,     0,     0,   561,   966,     0,     0,     0,
       0,     0,     0,     0,  3161, -1852,  1577,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1852,     0,   561,     0,     0,
       0,     0,     0,   726,  3169,   561,     0,     0,     0,  2568,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1914,
       0,  1915,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3198,     0,
     811,     0,     0,     0, -1852,     0,  1448, -1852,     0,     0,
       0,  1112,     0, -1852,     0,     0,     0,     0,  3212,     0,
     727,     0,  2223,     0,     0,     0,     0,     0,  2105,     0,
       0,     0,     0,     0,     0,     0,   728,   875,     0,     0,
       0,     0,  1786,  1577,     0,     0,     0,     0,  1858,     0,
       0,     0,     0,     0, -1852,     0,     0,   562,     0,     0,
       0,   966,   561,  1445,     0,     0,     0,     0,     0,   858,
    1447,  1447,   562,     0,     0,     0,     0,     0,     0, -1852,
       0,     0,   562,     0,   562,   729,  3263,   562,     0,     0,
       0,     0,     0,     0,     0,   730,     0,   562,     0,   562,
       0,     0,     0,     0,     0,     0,     0,     0,   731,     0,
       0,     0,   562,   732,     0,     0,     0,   562,     0,     0,
       0,   562,   562,   562,   562,     0,   562,   562,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   863,     0,
       0,     0,   733,     0,     0,     0,  1577,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0, -1852,  3283,     0,     0,
    1858,  1647,     0,     0,  1648,     0,     0, -1852,  1649,  1650,
       0,     0,  2387,     0,     0,   734,     0,     0,     0,   735,
       0,     0,     0,     0,     0,     0,     0, -1852,     0, -1852,
   -1852,     0,     0,     0,     0,  3316,     0,     0,     0,  1658,
       0,     0,  1445,     0,     0,     0, -2124,  1647,     0,  1626,
    1648,     0,     0,     0,  1649,  1650,     0,     0,     0,     0,
    1577,     0,     0,     0,     0,     0, -1852,     0,  3333, -1852,
   -1852, -1852,     0,  1660,   561,     0,     0,     0,     0,     0,
       0,   561,     0,     0,   548,  1658,     0,  1626,     0,     0,
     736,     0, -2124,     0,     0,     0,     0,     0,  3352,     0,
       0,     0,     0,  1447,     0,   737,     0,     0,     0,     0,
       0,     0,     0,     0,    85,   562,     0,     0,     0,  1660,
       0,     0,  3364,     0,     0,     0,     0,     0,  3146,     0,
    2568,     0,     0,     0,     0,     0,     0,     0,  2889,   812,
     738,     0,  2940,   739,     0,   812,   561,     0,     0,     0,
    2511,   561,     0,     0,   740,  2035,     0,   741,     0,     0,
       0,     0,  1448,  1448,     0,     0,     0,     0,     0,     0,
   -2124,  1577,     0,     0,     0,     0,   742,   561,  3175,     0,
       0,     0,     0,     0,  2892,     0,     0, -2124,     0,     0,
     743,     0, -2124,     0,     0,     0,   744,   745,     0,     0,
       0,   561,   561,     0,     0,  1577,     0,   746,     0,     0,
       0,     0,     0,   747,     0,     0, -2124,     0,   858,     0,
    1786,     0,    85,     0,   561,     0,     0,     0,     0,  2283,
   -2124,     0,     0, -2124,     0,     0,     0,  2117, -2124,  2292,
     858,  2295,   748,  3437,  2306,     0,     0,  1631,     0, -1867,
      85,     0,     0,     0,  2314,     0,  2316,  3102,     0,     0,
       0,     0,     0,  1445,     0,  1112,     0,   561,  1016,  2323,
    1016,     0,     0,  1447,  2326,   561, -2124,     0,  2331,  2332,
    2333,  2334,     0,  2338,  2339,  1669,     0,  1647,     0,     0,
    1648,     0,     0,  1577,  1649,  1650,  1112,     0,     0,     0,
    3212,     0,     0,     0,     0,  1647,     0,   858,  1648,  1626,
       0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
       0,     0,     0,   812,     0,  1658,     0,     0,     0,     0,
       0,  1669, -2124,  1656,     0,   562,  1577,   858,     0,   812,
       0,     0,     0,  1658,     0,     0,     0,     0,  1223, -1867,
    1659,     0,     0,     0,  1224,     0,     0,     0,     0,  1660,
       0,     0,  1236,     0,     0,  1448,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3333,     0,  1660,     0,     0,
       0,     0,  1237,  1112,     0,     0,     0,   562, -2124,     0,
    1448,   813,     0,  2657,     0,     0, -1867,     0,  3437,     0,
      85,     0,     0,     0,     0,     0,     0,     0,     0,   875,
       0, -1867,     0,     0,     0,     0, -1867,     0,     0,     0,
       0, -1867,  1447,     0,  2893,  1786,     0,     0,  1238,     0,
   -1867,     0,     0,     0, -2124, -1867,     0,   966,   966,     0,
    3437,   966,     0,     0,     0,     0,     0,     0,  1577,  1998,
       0,     0,     0,     0,     0,     0, -2124,     0,     0,  1225,
     561,     0,     0,     0,     0,     0,     0, -1867,     0,     0,
       0,     0,     0, -2124,  1661,     0,     0,     0, -2124,     0,
       0,     0,  1786,     0,     0,  1127,  1127, -1867,     0,  3437,
       0,  1662,     0,     0,     0,     0,  1663,     0, -2124,     0,
       0,     0,     0,     0,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,     0, -2124,     0,   562,  1664,
    1665,     0,     0,     0,  1239,     0,   966,     0,     0,     0,
       0,     0,     0,     0,  1666,  1448, -1867,     0,     0, -1867,
       0,  2223,     0,     0, -2124, -1867,     0,     0,     0,     0,
       0,  1676,  1677,  1678,  1679,  1680,  1681,  1266,     0,     0,
       0,  1312,  1317,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,  1667,  1240,    85,  1668,     0,     0,     0,     0,
       0,     0,     0,  1241,     0,     0, -1867,     0,     0,  1669,
       0,     0,  1670,     0,     0,  1242,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1867,     0,     0,  1367,     0,  1226,     0,     0,  1626,
       0,     0,     0,     0,     0,     0,     0,  1243,   562,     0,
       0,   562,  1391,     0,     0,     0,     0,  2031,  1439,     0,
       0,  1441,     0,  3454,  1452,  1455,  1460,  1463,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1914,     0,     0,     0,     0,     0,     0,     0,
     863,     0,     0,     0, -2124,     0,  2317,     0,     0,     0,
    1228,     0,  1245,  2864,  1448,     0,     0,  2117,     0,  1504,
    1312,     0,  1671,     0,     0,     0,     0,     0, -1867,     0,
       0,     0,     0,     0,     0,     0,     0,  1246,     0, -1867,
       0,  1589,  2318,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1248,     0, -1867,
    1605, -1867, -1867,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1616,  1617,  1618,     0,  1623,  1627,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1867,     0,
       0, -1867, -1867, -1867,     0,   562,     0,    85,     0,   562,
     562,   562,  1690,     0, -2124,  1230,     0,     0,     0,     0,
       0,  1676,  1677,  1678,  1679,  1680,  1681,     0,  3433,     0,
    1504,  1504,  1672,     0,     0,  1673,  1674,  1675,   562,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,     0,     0,     0,
       0,     0,     0,  2547,     0,   562,   562,   562,   562,   562,
     562,   562,   562,   562,   562,     0,     0,     0,  1733,     0,
       0,     0,  1749,  1754,     0,  2759,     0,     0,     0,     0,
       0,     0,     0,  1127,  1127,     0,     0,     0,    85,     0,
      85,     0,  1647,     0,     0,  1648,     0,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1656,     0,     0,     0,     0,     0,     0,     0,     0,    85,
    1658,     0,     0,     0,     0,  1448,     0,  1659,     0,     0,
       0,     0,  1312,     0,     0,    85,     0,     0,     0,     0,
       0,  1312,     0,     0,     0,  2031,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1646,  1312,     0,     0,     0,
    1647,  2511,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,  1657,  2117,     0,     0,     0,     0,  1658,     0,
       0,  2117,     0,     0,     0,  1659,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,   812,     0,     0,  1656,
       0,  1661,     0,  1945,     0,     0,     0,     0,     0,  1658,
       0,     0,    85,     0,     0,     0,  1659,     0,  1662,     0,
       0,     0,     0,  1663,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    85,     0,
       0,     0,     0,  1660,     0,     0,  1664,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   562,     0,
       0,  1666,     0,     0,     0,     0,  1460,     0,  1460,  1460,
       0,     0,     0,     0,     0,     0,     0,  2944,  2945,     0,
       0,  1127,  1127,     0,     0,     0,     0,     0,     0,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1667,
       0,  1127,  1668,     0,     0,  2997,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,  1669,     0,     0,  1670,
       0,     0,  3053,  3054,  3055,  3056,  3057,  3058,  3059,  3060,
    3061,  3062,     0,     0,  1664,  1665,     0,     0,     0,     0,
    1661,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1664,  1665,  1667,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,  2080,  1669,     0,     0,  1670,     0,     0,
       0,  2083,     0,     0,     0,     0,     0,     0,     0,  1671,
       0,     0,     0,     0,     0,  2114,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
    3341,  1668,     0,     0,     0,     0,  2129,  2511,     0,     0,
       0,     0,     0,  2133,     0,  1669,     0,     0,  1670,  2137,
    2138,  2139,  2140,  2141,  2142,  2143,  2144,     0,     0,     0,
    1647,  2153,  2154,  1648,     0,     0,  2167,  1649,  1650,     0,
    2170,     0,     0,  2178,  2179,  2180,  2181,  2182,  2183,  2184,
    2185,  2186,     0,     0,  2187,     0,     0,     0,     0,     0,
       0,  1127,     0,  1312,     0,     0,     0,  1671,  1658,     0,
       0,     0,   562,     0,     0, -2124,     0,   562,     0,     0,
       0,  2213,     0,     0,     0,     0,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,  1660,   562,     0,     0,     0,     0,     0,  1948,
       0,     0,     0,     0,     0,     0,     0,     0,  1671,     0,
    1617,  1618,     0,     0,     0,     0,     0,   562,   562,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3243,     0,     0,     0,     0,
     562,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3188,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,   562,     0,     0,     0,     0,     0, -2124,
       0,  2117,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2343,     0,     0,     0, -2124,     0,     0,  1312,
       0, -2124,  2354,  2355,     0,     0,     0,     0,  1672,     0,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,  2123,     0,     0,   -46,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -2124,
    1312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       1,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       2,     0,     3,     4,     0,     0,     0,     0,  1367,  2421,
       0,     0,     0,     0,     0,     5,     0,     0,     0,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     7,
       0,     0,     0,     0,  1669,  1395,  1396,  2447,  2448,     0,
    2449,     0,     0,     8,     0,     0,     0,     0,     0,     0,
       0,     0,     9,     0,    10,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,     0,    12,  2475,
    2476,     0,     0,  2213,     0,     0,  1397,  1398,     0,    13,
    1399,  1400,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    14,    15,    16,     0,     0,     0,
       0,     0,     0,     0,  2501,    17,   562,     0,     0,     0,
    2506,    18,     0,     0,     0,     0,     0,     0,     0,    19,
       0,    20,    21,     0,     0,     0,     0,  1504,     0,  1312,
       0,     0,     0,     0,     0,     0,    22, -2124,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3395,     0,     0,     0,     0,     0,  1401,  1402,     0,     0,
       0,     0,     0,     0,     0,     0,    24,  2540,     0,     0,
       0,     0,     0,     0,  3402,  3403,     0,     0,     0,     0,
       0,     0, -1483,     0,     0,     0,  1449,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3415,     0,     0,
       0,     0,     0,     0,     0,  2558,     0,     0,    25,  2564,
       0,     0,     0,     0,  2572,  2573,     0,     0,     0,     0,
    1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,     0,     0,
    1411,  1412,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -2124,     0,     0,
       0,     0,     0,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,  2594,  1647,     0,  2597,  1648,  2599,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,
       0,     0,  2603,     0,    26,    27,    28,     0,     0,     0,
    1656,     0,    29,     0,  2869,    30,     0,     0,     0,     0,
    1658,     0,     0,     0,     0,  1413,  1414,  1659,     0,     0,
       0,  1684,  1647,     0,     0,  1648,     0,     0,     0,  1649,
    1650,     0,     0,     0,     0,  1733,    31,     0,     0,     0,
       0,     0,     0,     0,  1660,    32,     0,     0,     0,     0,
       0,     0,  1754,  2185,     0,     0,  1415,  1416,     0,     0,
    1658,    33,     0,     0,     0,     0,     0, -2124,    34,     0,
    1684,  1127,    35,     0,     0,     0,     0,     0,     0,     0,
    2661,     0,     0,    36,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,    37,     0,     0,     0,    38,
       0,     0,  1647,     0,     0,  1648,  1449,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,    39,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1656,     0,     0,    40,     0,     0,    41,     0,     0,    42,
    1658,  1661,  1618,  3583,    43,     0,     0,  1659,     0,     0,
       0,  1312,     0,     0,  1417,  1418,     0,     0,  1662,     0,
    1684,    44,     0,  1663,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,  1419,  1420,
       0,     0,     0,     0,     0,    45,  1664,  1665,     0,     0,
       0, -2124,     0,     0,     0,     0,     0,     0,  2048,    46,
       0,  1666,   -46,     0,     0,     0,  1684,  2772, -2124,     0,
       0,  1684,     0, -2124,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1647,     0,     0,  1648,     0,
       0,     0,  1649,  1650,     0,     0,  1653,  1654,  1655,  1667,
       0,     0,  1668,     0,     0,     0,     0,     0,     0,     0,
       0, -2124,     0,  1656,     0,     0,  1669,     0,     0,  1670,
       0,  1684,     0,  1658,     0,     0,     0,     0,     0,     0,
    1659,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1684,     0,     0,  1662,     0,
       0,     0,     0,  1663,     0,     0,     0,  1660,     0,     0,
       0,     0,     0,     0,     0,     0,  1669,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1664,  1665,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1666,     0,  1684,     0,  1684,     0,  1449,  1449,     0,
    1973,  2854,     0,  1449,     0,     0,  1684,  2856,  2083,  1684,
       0,     0,     0,     0,  1684,     0,     0,  1684,     0,  1671,
       0,     0,     0,  2865,     0,     0,     0,     0,     0,  1667,
       0,     0,  1668,     0,     0,     0,     0,     0,     0,  2878,
       0,     0,  2881,     0,  2883,     0,  1669,     0,     0,  1670,
       0,     0,  2887,     0,  1661,     0,     0,     0,  1684,     0,
    2894,  2895,     0,     0,     0,     0,     0,  2902,     0, -2124,
    1647,  1662,     0,  1648,     0,     0,  1663,  1649,  1650,     0,
       0, -2124, -2124, -2124,  2915,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2930,     0,     0,     0,     0,  1664,
    1665,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,     0,     0,     0,  1666,  1659,  1127,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,  1660,  1684,     0,     0,  2123,     0,     0,  1671,
       0,     0,  1667,     0,     0,  1668,     0,     0,     0,  1684,
       0,     0,     0,  1733,     0,     0,     0,     0,     0,  1669,
    1684,  1684,  1684,     0,     0,     0,  2343,  1684,  2343, -2124,
       0,  1684,     0,     0,     0,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1647,
       0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3106,     0,     0,  1656,     0,  1661,
       0,     0,     0,     0,  1684,     0,     0,  1658,     0,     0,
       0,     0,     0,     0,  1659,     0,  1662,     0,     0,  1672,
       0,  1663,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,  1671,     0,     0,     0,  2446,     0,  3141,  3142,
       0,  1660,     0,     0,     0,     0,     0,  1684,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,  1684,     0,     0,     0,     0,  1684,     0,
       0,     0,     0,  3165,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1973,     0,     0,     0,     0,
       0,     0,     0,  3174,     0,     0,     0,     0,     0,  3178,
    3179,     0,     0,     0,  3180,     0,     0,     0,     0,  3183,
       0,     0,  3186,  3187,  1669,     0,     0,  2343,  1312,     0,
       0,  3195,     0,     0,     0,     0,     0,     0,  1395,  1396,
       0,     0,     0,     0,     0,     0,  1127,     0,  1661,     0,
       0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,  1662,     0,     0,     0,     0,
    1663,     0,     0,     0,     0,     0,     0,     0,     0,  1397,
    1398,     0,     0,  1399,  1400,     0,     0,     0,     0,     0,
    3238,     0,     0,  1664,  1665,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,     0,
       0,     0,     0,     0,     0,     0,     0,  3257,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,  1667,     0,     0,  1668,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,  1401,
    1402,     0,     0,  1669,     0,     0,  1670,     0,  1658,  1684,
       0,     0,     0,     0,     0,  1659,     0,  1973,  1973,     0,
    1449,  1449,  1449,  1449,  1449,  1449,     0,     0,  1449,  1449,
    1449,  1449,  1449,  1449,  1449,  1449,  1449,  1449,  1973,     0,
       0,     0,  1660,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1403,  1404,  1405,  1406,  1407,  1408,  1409,
    1410,  2772,     0,  1411,  1412,     0,     0,  1672,     0,     0,
   -2124, -2124, -2124,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1627,     0,  1647,  1671,     0,  1648,     0,
       0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,     0,     0,  2564,     0,  1661,
       0,     0,     0,  1658,  1684,     0,     0,  1684,  1413,  1414,
    1659,     0,     0,     0,  3356,  3357,  1662,     0,  3358,     0,
    1618,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1660,  1684,     0,
       0,     0,     0,     0,  1664,  1665,     0,  3378,     0,  1415,
    1416,     0,     0,  1684,     0,     0,     0,  1684,     0,  1666,
       0,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,     0,
       0,  3390,     0,     0,  1449,  1449,  1672,  1684,  1684,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,  1684,     0,  2544,  1684,     0,     0,  1667,     0,     0,
    1668,     0,  1684,  1684,  1684,  1684,  1684,  1684,  1684,  1684,
    1684,  1684,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1661,     0,     0,  1684,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1417,  1418,     0,
       0,  1662,     0,     0,     0,     0,  1663,     0,     0,     0,
       0,     0,  3141,     0,     0,     0,  3451,     0,     0,     0,
    1127,  1419,  1420,     0,     0,     0,     0,     0,     0,  1664,
    1665,     0,     0,     0,  3461,     0,     0,     0,     0,  2343,
       0,  2343,     0,  1449,  1666,     0,     0,     0,     0,     0,
       0,  1127,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,  3486,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,  1668,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3511,  1684,     0,     0,
       0,     0,     0,     0,     0,     0,  3141,     0,  1684,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,  1127,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3554,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,  2557,  1684,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1684,  1684,  1684,     0,     0,  1973,  1973,  1973,  1973,
    1973,  1973,     0,     0,     0,  1973,  1973,  1973,  1973,  1973,
    1973,  1973,  1973,  1973,  1973,     0,     0,     0,     0,  1684,
    1684,     0,     0,     0,     0,     0,     0,     0,  3608,  3608,
    3608,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,  1684,     0,     0,     0,     0,
    1684,     0,     0,     0,     0,  3608,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,  1672,     0,  1684,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,  3608,     0,     0,  2578,
       0,     0,  1684,  1660,     0,     0,     0,     0,  1684,     0,
       0,     0,     0,     0,     0,     0,  1684,  1684,     0,     0,
    1647,     0,     0,  1648,  1973,  1973,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,  1684,  1449,
    1449,  1684,     0,  1684,     0,     0,     0,  1684,  1656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,  1659,     0,     0,     0,     0,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,     0,  1656,     0,
    1661,     0,     0,     0,     0,  1684,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,  1659,     0,  1662,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,  1664,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1661,
       0,     0,     0,     0,     0,     0,     0,     0,  1667,     0,
       0,  1668,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,  1669,  1684,     0,  1670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,  1661,
       0,     0,  1449,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,  1667,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,  1684,  1666,
    1684,     0,     0,     0,  1669,     0,     0,  1670,     0,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,  1671,     0,
       0,     0,  1684,     0,     0,  1684,     0,  1684,     0,     0,
       0,  1684,     0,     0,  1973,  1973,     0,  1667,  1684,  1684,
    1668,     0,     0,     0,     0,     0,  1684,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,  1684,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1684,     0,     0,     0,  1647,     0,
       0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,  1671,     0,     0,
       0,     0,  1449,     0,     0,     0,  1658,     0,     0,     0,
       0,     0,     0,  1659,     0,     0,     0,     0,  1672,     0,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,     0,     0,  2796,     0,     0,     0,     0,
    1660,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,  1659,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,  1660,     0,  2861,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
    1684,     0,     0,     0,     0,     0,     0,     0,     0,   726,
    1973,  1449,     0,     0,  1662,     0,     0,  1672,     0,  1663,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,  2875,  1684,  1684,     0,     0,     0,
       0,     0,  1664,  1665,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1666,     0,  1684,
       0,     0,     0,     0,     0,     0,   727,     0,  1684,     0,
       0,     0,  1684,  1684,  1684,     0,     0,  1684,     0,  1661,
    1684,  1684,   728,     0,     0,     0,     0,     0,     0,  1684,
       0,     0,     0,     0,     0,  1667,  1662,     0,  1668,     0,
       0,  1663,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,     0,
       0,   729,  1684,     0,     0,     0,     0,     0,  1973,  1666,
       0,   730,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1684,     0,     0,   731,     0,     0,     0,     0,   732,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
    1668,     0,     0,     0,     0,     0,     0,     0,   733,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1973,  1671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   734,     0,     0,     0,   735,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1684,  1684,  1684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1684,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1684,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
       0,     0,     0,     0,     0,     0,   736,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   737,     0,     0,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
       0,     0,  2946,     0,     0,  1684,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1684,   738,     0,     0,   739,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     740,     0,     0,   741,     0,     0,     0,     0,     0,     0,
    1684,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   742,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1684,   743,  1672,     0,     0,
    1673,  1674,  1675,   745,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,   746,  3189,     0,     0,     0,     0,   747,
       0,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1684,     0,
     119,   120,   121,   122,   123,   124,   125,   126,   748,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,  1684,   158,   159,   160,   161,   795,     0,   796,
       0,  1074,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,    14,    15,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
      23,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,  1090,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    26,    27,    28,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,    33,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    35,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,    37,     0,   454,   455,    38,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1100,    40,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   808,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,    44,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,    45,     0,     0,     0,     0,
    1103,  1104,  1105,     0,     0,     0,     0,  1106,     0,  1107,
    3331,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,    14,    15,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,    23,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,  1090,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,    26,    27,    28,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,    33,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
      35,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,    37,     0,   454,   455,    38,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,    40,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   808,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,    44,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,    45,     0,     0,     0,     0,  1103,  1104,
    1105,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  1061,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,  1074,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,    23,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,  1090,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
      26,    27,    28,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,    33,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,    38,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,  1100,    40,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     808,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,    44,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,    45,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,  1271,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,  1272,   127,   128,   129,     0,     0,     0,  1273,
       0,  1067,     0,     0,  1274,   131,   132,     0,   133,   134,
     135,  1275,   137,   138,   139,   140,  1068,  1276,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,  1277,     0,  1278,   165,   166,   167,   168,
     169,  1279,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,  1280,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,  1281,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,  1282,     0,  1283,   239,   240,  1284,  1285,
     243,   244,   245,     0,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,  1286,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,  1287,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,  1288,  1289,   283,  1290,   285,   286,
     287,   288,   289,   290,     0,     0,   291,  1291,   293,  1292,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1293,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,  1294,  1089,   327,   328,   329,   330,  1090,   331,   332,
    1295,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,   888,   346,
     347,   348,  1296,   350,  1297,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,  1298,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,  1299,   407,   408,
     409,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,  1300,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,  1301,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,  1302,   452,   804,     0,
       0,   454,   455,     0,   456,  1303,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,  1304,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,  1305,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,  1306,   494,  1307,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  1104,  1105,     0,     0,     0,
       0,  1106,     0,  1107,  1308,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,     0,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,    14,    15,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,    23,   238,   239,   240,   241,   242,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,     0,   331,   332,   333,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,    26,    27,    28,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,    33,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,    35,   433,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,    37,     0,   454,
     455,    38,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,    40,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   808,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,    44,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,     0,     0,    45,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1106,
       0,  1107,     0,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,  1456,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,  1074,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
    1457,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,  1458,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,  1090,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,  1459,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1100,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,     0,     0,     0,     0,     0,
    1103,  1104,  1105,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,  1271,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,  1273,     0,  1067,     0,     0,  1274,   131,
     132,     0,   133,   134,   135,  1275,   137,   138,   139,   140,
    1068,  1276,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,  1277,     0,  1278,
     165,   166,   167,   168,   169,  1279,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,  1280,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,  1282,     0,  1283,
     239,   240,  1284,  1285,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    1286,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  1287,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,  1288,  1289,
     283,  1290,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  1291,   293,  1292,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1293,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,  1294,  1089,   327,   328,   329,
     330,  1090,   331,   332,  1295,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,  1296,   350,  1297,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,  1298,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,  1299,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
    1300,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,  1301,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    1302,   452,   804,     0,     0,   454,   455,     0,   456,  1303,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,  1304,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1305,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,  2351,   494,  1307,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1105,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,  1271,  1061,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,  1273,     0,  1067,     0,     0,  1274,   131,   132,     0,
     133,   134,   135,  1275,   137,   138,   139,   140,  1068,  1276,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,  1277,     0,  1278,   165,   166,
     167,   168,   169,  1279,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,  1280,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,  1282,     0,  1283,   239,   240,
    1284,  1285,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,  1286,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,  1287,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,  1288,  1289,   283,  1290,
     285,   286,   287,   288,   289,   290,     0,     0,   291,  1291,
     293,  1292,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1293,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,  1294,  1089,   327,   328,   329,   330,  1090,
     331,   332,  1295,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,  1296,   350,  1297,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,  1298,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,  1299,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,  1300,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,  1301,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,  1302,   452,
     804,     0,     0,   454,   455,     0,   456,  1303,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,  1304,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,  1305,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,  1307,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,     0,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,  2403,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126, -1154,   127,   128,   129,     0,     0,     0,     0,
   -1154,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,  1074,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,  1090,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
     409,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437, -1154,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,  1100,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  1104,  1105,     0,     0,     0,
       0,  1106,     0,  1107,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,  1271,  1061,   825,  1062,  1063,  1064,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,  1273,     0,  1067,
       0,     0,  1274,   131,   132,     0,   133,   134,   135,  1275,
     137,   138,   139,   140,  1068,  1276,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,  1277,     0,  1278,   165,   166,   167,   168,   169,  1279,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,  1280,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,  1077,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,  1282,     0,  1283,   239,   240,  1284,  1285,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,  1286,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,  1287,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,  1288,  1289,   283,  1290,   285,   286,   287,   288,
     289,   290,     0,     0,   291,  1291,   293,  1292,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1293,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,  1294,
    1089,   327,   328,   329,   330,  1090,   331,   332,  1295,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,  1093,   344,   345,     0,     0,   346,   347,   348,
    1296,   350,  1297,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,  1298,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,  1299,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,  1300,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,  1301,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,  1302,   452,   804,     0,     0,   454,
     455,     0,   456,  1303,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,  1304,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,  1305,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,  1307,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,  1102,     0,     0,     0,     0,
       0,     0,  1103,  1104,  1105,     0,     0,     0,     0,  1106,
       0,  1107,  3192,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,  1271,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,  1273,     0,  1067,     0,     0,
    1274,   131,   132,     0,   133,   134,   135,  1275,   137,   138,
     139,   140,  1068,  1276,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,  1277,
       0,  1278,   165,   166,   167,   168,   169,  1279,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,  1280,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,  1282,
       0,  1283,   239,   240,  1284,  1285,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,  1286,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,  1287,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
    1288,  1289,   283,  1290,   285,   286,   287,   288,   289,   290,
       0,     0,   291,  1291,   293,  1292,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1293,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,  1294,  1089,   327,
     328,   329,   330,  1090,   331,   332,  1295,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,  1296,   350,
    1297,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,  1298,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,  1299,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,  1300,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,  1301,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,  1302,   452,   804,     0,     0,   454,   455,     0,
     456,  1303,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,  1304,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1305,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,  1307,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,     0,     0,     0,     0,     0,
    1103,  1104,  1105,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,  1730,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,  1090,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1105,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  1745,   825,
    1062,  1063,  1064,  1746,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,  1747,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,  1074,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,  1090,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,  1100,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,     0,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,  1074,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,  1457,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,  1090,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
     409,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,  1100,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  1104,  1105,     0,     0,     0,
       0,  1106,     0,  1107,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,  1064,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,  1074,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,  1077,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,  1090,   331,   332,   333,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,  1093,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,   433,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,  1100,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,  1102,     0,     0,     0,     0,
       0,     0,  1103,  1104,  1105,     0,     0,     0,     0,  1106,
       0,  1107,  2108,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,  1074,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,  1090,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1100,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,     0,     0,     0,     0,     0,
    1103,  1104,  1105,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,  2716,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,  1090,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,  2771,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1105,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  1061,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,  1074,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,  1090,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,  1100,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,  2901,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,     0,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,  3129,   127,   128,   129,     0,     0,     0,     0,
       0,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,  1074,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,  3130,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  3131,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,  1090,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
    3132,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,  1100,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  1104,  1105,     0,     0,     0,
       0,  1106,     0,  3133,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,  1064,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,  1074,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,  1077,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,  1090,   331,   332,   333,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,  1093,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,   433,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,  1100,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,  1102,     0,     0,     0,     0,
       0,     0,  1103,  1104,  1105,     0,     0,     0,     0,  1106,
       0,  1107,     0,     0,     0,     0,  3359,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,  1074,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,  1090,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1100,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,     0,     0,     0,     0,     0,
    1103,  1104,  1105,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,  1090,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,     0,     0,     0,     0,     0,  1750,  1751,
    1105,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  2254,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,  1074,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,  1090,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,  1100,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,     0,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,  1074,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,  1090,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
     409,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,  1100,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  2342,  1105,     0,     0,     0,
       0,  1106,     0,  1107,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,  1064,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,  1074,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,  1077,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,  1090,   331,   332,   333,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,  1093,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,   433,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,  1100,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,  1102,     0,     0,     0,     0,
       0,     0,  1103,  1104,  1105,     0,     0,     0,     0,  1106,
       0,  2563,     0,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,  1074,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,  1077,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,  1090,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,  1100,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,  1102,     0,     0,     0,     0,     0,     0,
    1103,  3190,  1105,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,  3130,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  3131,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,  1090,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,  3132,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,  1102,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1105,     0,     0,     0,     0,  1106,     0,  3133,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  1061,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,  3605,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,  1074,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,  3606,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,  1077,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,  1090,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
    3607,   477,   478,     0,     0,   479,   480,   481,  1100,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  1102,
       0,     0,     0,     0,     0,     0,  1103,  1104,  1105,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
    1064,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,  1074,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,  3606,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,  1077,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,     0,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,  1090,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,  1093,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
     409,  1095,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,  3607,   477,
     478,     0,     0,   479,   480,   481,  1100,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1102,     0,     0,
       0,     0,     0,     0,  1103,  1104,  1105,     0,     0,     0,
       0,  1106,     0,  1107,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,  1064,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139, -2124,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,  1074,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,  3606,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,  1077,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,     0,   238,   239,   240,   241, -2124,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256, -2124,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,     0,     0,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293, -2124,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,     0,   331,   332,     0,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,  1093,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,  1095,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0, -2124,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,  3607,   477,   478,     0,
       0,   479,   480,   481,  1100,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524, -2124,     0,     0,     0,     0,
       0,     0,  1103,  1104,  1105,     0,     0,     0,     0,  1106,
       0,  1107,     0,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,  1064,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,     0,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
    1093,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,     0,
    1443,  1444,     0,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,     0,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,   140,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,   242,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,   294,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,     0,   331,   332,   333,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  2240,  2241,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,   433,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,     0,  2242,  2243,
       0,     0,     0,     0,     0,  1106,     0,  1107,     0,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,   118,  1061,   825,
    1062,  1063,  1064,  1065,  1066,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,  1067,     0,     0,   130,   131,   132,     0,
     133,   134,   135,   136,   137,   138,   139,   140,  1068,   142,
    1069,  1070,     0,   145,   146,   147,   148,   149,   150,  1071,
     794,   151,   152,   153,   154,  1072,  1073,   157,     0,   158,
     159,   160,   161,   795,     0,   796,     0,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1075,   192,   193,  1076,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,  1079,   223,   224,   225,
     226,   227,   228,   797,  1080,   230,     0,   231,   232,  1081,
     234,     0,   235,     0,   236,   237,     0,   238,   239,   240,
     241,   242,   243,   244,   245,     0,  1082,  1083,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,   270,   271,   272,   273,   274,   275,   276,
    1084,  1085,     0,  1086,     0,   280,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   290,     0,     0,   291,   292,
     293,   294,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1087,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1088,   325,  1089,   327,   328,   329,   330,     0,
     331,   332,   333,   334,  1091,   799,   336,  1092,   338,   339,
     340,     0,   341,   342,     0,     0,  1093,   344,   345,     0,
       0,   346,   347,   348,   349,   350,   351,   801,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   802,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1094,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,   406,
     407,   408,   409,  1095,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,   433,
     434,   435,  1096,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     804,     0,     0,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,     0,   463,  1097,  1098,     0,     0,   466,
     467,   805,   469,   806,  1099,   471,   472,   807,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,  1101,   493,     0,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,     0,     0,  1443,  1444,     0,     0,
       0,     0,     0,  1106,     0,  1107,     0,     0,     0,     0,
       0,  1108,  1109,  1110,  1111,   118,  1061,   825,  1062,  1063,
       0,  1065,  1066,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,  1067,     0,     0,   130,   131,   132,     0,   133,   134,
     135,   136,   137,   138,   139,   140,  1068,   142,  1069,  1070,
       0,   145,   146,   147,   148,   149,   150,  1071,   794,   151,
     152,   153,   154,  1072,  1073,   157,     0,   158,   159,   160,
     161,   795,     0,   796,     0,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,  1075,   192,   193,  1076,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,  1078,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,  1079,   223,   224,   225,   226,   227,
     228,   797,  1080,   230,     0,   231,   232,  1081,   234,     0,
     235,     0,   236,   237,     0,   238,   239,   240,   241,   242,
     243,   244,   245,  3150,  1082,  1083,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,   270,   271,   272,   273,   274,   275,   276,  1084,  1085,
       0,  1086,     0,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,     0,     0,   291,   292,   293,   294,
       0,   295,   296,   297,   298,   299,   300,   301,   302,  1087,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
    1088,   325,  1089,   327,   328,   329,   330,     0,   331,   332,
     333,   334,  1091,   799,   336,  1092,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,   349,   350,   351,   801,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   802,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,  1094,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,   433,   434,   435,
    1096,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   804,     0,
       0,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,     0,   463,  1097,  1098,     0,     0,   466,   467,   805,
     469,   806,  1099,   471,   472,   807,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,  1101,
     493,     0,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1106,     0,  2823,     0,     0,     0,     0,     0,  1108,
    1109,  1110,  1111,   118,  1061,   825,  1062,  1063,     0,  1065,
    1066,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,  1067,
       0,     0,   130,   131,   132,     0,   133,   134,   135,   136,
     137,   138,   139,   140,  1068,   142,  1069,  1070,     0,   145,
     146,   147,   148,   149,   150,  1071,   794,   151,   152,   153,
     154,  1072,  1073,   157,     0,   158,   159,   160,   161,   795,
       0,   796,     0,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,  1075,   192,   193,  1076,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,  1078,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,  1079,   223,   224,   225,   226,   227,   228,   797,
    1080,   230,     0,   231,   232,  1081,   234,     0,   235,     0,
     236,   237,     0,   238,   239,   240,   241,   242,   243,   244,
     245,     0,  1082,  1083,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,   270,
     271,   272,   273,   274,   275,   276,  1084,  1085,     0,  1086,
       0,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,     0,     0,   291,   292,   293,   294,     0,   295,
     296,   297,   298,   299,   300,   301,   302,  1087,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,  1088,   325,
    1089,   327,   328,   329,   330,     0,   331,   332,   333,   334,
    1091,   799,   336,  1092,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
     349,   350,   351,   801,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   802,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,  1094,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,   433,   434,   435,  1096,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   804,     0,     0,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,     0,
     463,  1097,  1098,     0,     0,   466,   467,   805,   469,   806,
    1099,   471,   472,   807,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,  1101,   493,     0,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1106,
       0,  2823,     0,     0,     0,     0,     0,  1108,  1109,  1110,
    1111,   118,  1061,   825,  1062,  1063,     0,  1065,  1066,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,  1067,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,  1068,   142,  1069,  1070,     0,   145,   146,   147,
     148,   149,   150,  1071,   794,   151,   152,   153,   154,  1072,
    1073,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
    1075,   192,   193,  1076,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,  1078,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
    1079,   223,   224,   225,   226,   227,   228,   797,  1080,   230,
       0,   231,   232,  1081,   234,     0,   235,     0,   236,   237,
       0,   238,   239,   240,   241,   242,   243,   244,   245,     0,
    1082,  1083,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,  1084,  1085,     0,  1086,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
       0,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,  1087,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,  1088,   325,  1089,   327,
     328,   329,   330,     0,   331,   332,   333,   334,  1091,   799,
     336,  1092,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,  1094,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,  1095,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,   433,   434,   435,  1096,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,     0,     0,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,     0,   463,  1097,
    1098,     0,     0,   466,   467,   805,   469,   806,  1099,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,  1101,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1106,     0,  1107,
       0,     0,     0,     0,     0,  1108,  1109,  1110,  1111,   118,
    1061,   825,  1062,  1063,  1064,  1065,  1066,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,  1067,     0,     0,   130,   131,
     132,     0,   133,   134,   135,   136,   137,   138,   139,     0,
    1068,   142,  1069,  1070,     0,   145,   146,   147,   148,   149,
     150,  1071,   794,   151,   152,   153,   154,  1072,  1073,   157,
       0,   158,   159,   160,   161,   795,     0,   796,     0,  1074,
     165,   166,   167,   168,   169,   170,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1075,   192,
     193,  1076,   195,  1077,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,     0,   217,     0,   218,   219,   220,   221,  1079,   223,
     224,   225,   226,   227,   228,   797,  1080,   230,     0,   231,
     232,  1081,   234,     0,   235,     0,   236,   237,     0,   238,
     239,   240,   241,     0,   243,   244,   245,     0,  1082,  1083,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,   270,   271,   272,   273,   274,
     275,   276,  1084,  1085,     0,  1086,     0,   280,     0,     0,
     283,   284,   285,   286,   287,   288,   289,   290,     0,     0,
     291,   292,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  1087,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1088,   325,  1089,   327,   328,   329,
     330,     0,   331,   332,     0,   334,  1091,   799,   336,  1092,
     338,   339,   340,     0,   341,   342,     0,     0,  1093,   344,
     345,     0,     0,   346,   347,   348,   349,   350,   351,   801,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   802,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1094,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,   406,   407,   408,   409,  1095,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,  1096,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   804,     0,     0,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,     0,   463,  1097,  1098,     0,
       0,   466,   467,   805,   469,   806,  1099,   471,   472,   807,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    1100,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,  1101,   493,     0,   494,   495,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,     0,     0,     0,     0,     0,     0,     0,  1103,  1104,
    1105,     0,   979,  1372,   825,  1106,     0,  1107,  1065,     0,
       0,     0,     0,  1108,  1109,  1110,  1111,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,   569,     0,     0,     0,
       0,   574,   131,   132,     0,   133,   134,   135,   576,   137,
     138,   139,   577,   578,   579,   580,   581,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     585,   586,   157,     0,   158,   159,   160,   161,   588,     0,
     590,     0,   592,   165,   166,   167,   168,   169,   593,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     596,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   598,   192,   193,   599,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   609,   223,   224,   225,   226,   227,   228,   610,  1373,
     230,     0,   231,   232,   613,   234,     0,   235,     0,   236,
     616,     0,   618,   239,   240,   619,   620,   243,   244,   245,
       0,   622,   623,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   625,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   628,   629,
     272,   273,   274,   275,   276,   630,   631,     0,   633,     0,
     280,   635,   636,   283,   637,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   640,   293,   641,     0,   295,   296,
     297,   298,   299,   300,   301,   302,  2423,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   644,   645,   646,
     327,   328,   329,   647,     0,   331,   332,   649,   334,     0,
     651,   336,   652,   338,   339,   340,     0,   341,   342,  1374,
       0,   343,   344,   345,     0,     0,   346,   347,   658,   659,
     350,   660,   661,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   365,
     366,   666,   667,   369,   370,   668,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   671,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   404,   405,   674,   407,   408,   409,   675,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   677,   424,   425,   426,   427,   428,   429,
     678,   431,   432,     0,   680,   434,   435,   681,   437,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   683,   452,   684,     0,     0,   454,   455,
       0,   456,   688,   458,   459,   460,   461,   462,     0,   463,
     690,   691,     0,     0,   466,   467,   694,   469,   695,  1375,
     471,   472,   697,   474,   475,   476,   477,   478,     0,     0,
     479,   480,   481,   700,     0,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   703,   704,   493,     0,   494,
     706,   496,   497,   498,   499,   500,   501,   502,     0,     0,
     503,     0,     0,   504,   505,   506,   507,   508,   509,   711,
     712,   713,   714,   715,   716,   717,   718,   719,   720,   721,
     521,   522,   523,   524,     0,     0,     0,     0,     0,     0,
       0,  1376,  1377,  2424,   118,     0,     0,     0,  2425,     0,
    2426,  1066,     0,     0,     0,     0,     0,     0,     0,  1111,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
    1067,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,  1071,   794,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     795,     0,   796,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     797,     0,   230,     0,   231,   232,   233,   234,     0,   235,
       0,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   292,   293,   294,     0,
     295,   296,   297,   298,   299,   300,   301,   302,  1087,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,   333,
     334,     0,   799,   336,   337,   338,   339,   340,     0,   341,
     342,     0,     0,   343,   344,   345,     0,     0,   346,   347,
     348,   349,   350,   351,   801,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   802,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   804,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   805,   469,
     806,     0,   471,   472,   807,   474,   475,   476,   477,   478,
       0,     0,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   532,  1996,     0,
    1106,     0,  2155,  1997,  1066,     0,     0,     0,  1108,  1109,
    1110,  1111,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,     0,
       0,     0,     0,     0,   532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1108,  1109,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,  1015,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,  -548,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,     0,   230,  -548,   231,   232,   233,   234,  -548,   235,
       0,   236,     0,     0,     0,   239,   240,   533,     0,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,  -548,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,  -548,
     295,   296,   297,   298,   299,   300,   301,   302,   534,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
       0,   326,   327,   328,   329,   330,     0,   331,   332,     0,
     334,     0,   335,   336,   337,   338,   339,   340,  -548,   341,
     342,     0,     0,   343,   344,   345,     0,  -548,   346,   347,
     348,     0,   350,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   367,     0,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   535,   452,   453,     0,     0,
     454,   455,     0,   456,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,   478,
    -548,     0,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,   494,     0,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   532,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1183,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,     0,   239,   240,   533,
       0,   243,   244,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     534,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,     0,   326,   327,   328,   329,   330,     0,   331,
     332,     0,   334,     0,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,     0,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   350,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   367,     0,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   535,   452,   453,
       0,     0,   454,   455,     0,   456,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,     0,     0,   466,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,   494,     0,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   979,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2510,  3345,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     3,
       4,     0,   569,     0,     0,     0,     0,   574,   131,   132,
       0,   133,   134,   135,   576,   137,   138,   139,   577,   578,
     579,   580,   581,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   585,   586,   157,     0,
     158,   159,   160,   161,   588,     0,   590,     0,   592,   165,
     166,   167,   168,   169,   593,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   596,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   598,   192,   193,
     599,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,    14,    15,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   609,   223,   224,
     225,   226,   227,   228,   610,     0,   230,     0,   231,   232,
     613,   234,     0,   235,     0,   236,   616,    23,   618,   239,
     240,   619,   620,   243,   244,   245,     0,   622,   623,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   625,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   628,   629,   272,   273,   274,   275,
     276,   630,   631,     0,   633,     0,   280,   635,   636,   283,
     637,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     640,   293,   641,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   643,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   644,   645,   646,   327,   328,   329,   647,
       0,   331,   332,   649,   334,     0,   651,   336,   652,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   658,   659,   350,   660,   661,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    26,    27,    28,     0,   365,   366,   666,   667,   369,
     370,   668,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   671,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
     674,   407,   408,   409,   675,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    33,   677,
     424,   425,   426,   427,   428,   429,   678,   431,   432,    35,
     680,   434,   435,   681,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   683,
     452,   684,    37,     0,   454,   455,    38,   456,   688,   458,
     459,   460,   461,   462,     0,   463,   690,   691,     0,     0,
     466,   467,   694,   469,   695,     0,   471,   472,   697,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,   700,
      40,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   980,   704,   493,     0,   494,   706,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,    44,   504,
     505,   506,   507,   508,   509,   711,   712,   713,   714,   715,
     716,   717,   718,   719,   720,   721,   521,   522,   523,   524,
       0,   118,    45,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
     130,   131,   132,     0,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,   794,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   795,     0,   796,
       0,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,    14,    15,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   797,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,   237,
      23,   238,   239,   240,   241,   242,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     798,     0,   291,   292,   293,   294,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,     0,   331,   332,   333,   334,     0,   799,
     336,   337,   338,   339,   340,     0,   341,   342,     0,   800,
     343,   344,   345,     0,     0,   346,   347,   348,   349,   350,
     351,   801,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,    26,    27,    28,     0,   365,   366,
     802,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,   803,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,    33,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,    35,   433,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   804,    37,     0,   454,   455,    38,
     456,   457,   458,   459,   460,   461,   462,     0,   463,   464,
     465,     0,     0,   466,   467,   805,   469,   806,     0,   471,
     472,   807,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,    40,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   808,   492,   493,     0,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,    44,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,     0,   118,    45,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   809,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,   130,   131,   132,     0,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,   794,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     795,     0,   796,     0,   164,   165,   166,   167,   168,   169,
     170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     797,     0,   230,     0,   231,   232,   233,   234,     0,   235,
       0,   236,   237,     0,   238,   239,   240,   241,   242,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   798,     0,   291,   292,   293,   294,     0,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,     0,   331,   332,   333,
     334,     0,   799,   336,   337,   338,   339,   340,     0,   341,
     342,     0,   800,   343,   344,   345,     0,     0,   346,   347,
     348,   349,   350,   351,   801,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   802,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,   803,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,   433,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   451,   452,   804,     0,     0,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   805,   469,
     806,     0,   471,   472,   807,   474,   475,   476,   477,   478,
       0,     0,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   808,   492,   493,
       0,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   118,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   809,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,   130,   131,   132,     0,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,   794,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   795,     0,   796,     0,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   180,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   797,     0,   230,     0,   231,   232,   233,   234,
       0,   235,     0,   236,   237,     0,   238,   239,   240,   241,
     242,   243,   244,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,   281,   282,   283,   284,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   292,   293,
     294,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,     0,   331,
     332,   333,   334,     0,   799,   336,   337,   338,   339,   340,
       0,   341,   342,     0,   800,   343,   344,   345,     0,     0,
     346,   347,   348,   349,   350,   351,   801,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   802,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,   406,   407,
     408,   409,   410,   803,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,   433,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   804,
       0,     0,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,     0,   463,   464,   465,     0,     0,   466,   467,
     805,   469,   806,     0,   471,   472,   807,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,   494,   495,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   118,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1023,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   794,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   795,     0,   796,     0,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   797,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,     0,   799,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,   349,   350,   351,   801,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,   802,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
     406,   407,   408,   409,   410,   803,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   804,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   805,   469,   806,     0,   471,   472,   807,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,   794,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   795,     0,   796,     0,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   797,     0,   230,     0,
     231,   232,   233,   234,     0,   235,     0,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   331,   332,   333,   334,     0,   799,   336,
     337,   338,   339,   340,     0,   341,   342,     0,     0,   343,
     344,   345,     0,     0,   346,   347,   348,   349,   350,   351,
     801,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,     0,     0,   365,   366,   802,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,     0,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   804,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,     0,   463,   464,   465,
       0,     0,   466,   467,   805,   469,   806,     0,   471,   472,
     807,   474,   475,   476,   477,   478,     0,     0,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,   500,   501,   502,     0,     0,   503,     0,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3436,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,    14,    15,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   231,   232,   233,   234,     0,   235,     0,   236,
       0,    23,     0,   239,   240,   533,     0,   243,   244,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   534,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,     0,   326,
     327,   328,   329,   330,     0,   331,   332,     0,   334,     0,
     335,   336,   337,   338,   339,   340,     0,   341,   342,     0,
       0,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     350,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,    26,    27,    28,     0,   365,
     366,   367,     0,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,    33,     0,   424,   425,   426,   427,   428,   429,
     430,   431,   432,    35,     0,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   535,   452,   453,    37,     0,   454,   455,
      38,   456,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,     0,     0,   466,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,   480,   481,     0,    40,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   808,   492,   493,     0,   494,
       0,   496,   497,   498,   499,   500,   501,   502,     0,     0,
     503,     0,    44,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,     0,   532,    45,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      46,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,   898,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,    23,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,    26,    27,
      28,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,    33,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,    38,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   899,   465,     0,     0,   900,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,    40,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   808,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,    44,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,     0,   532,    45,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    46,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,     0,    23,     0,   239,
     240,   533,     0,   243,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   534,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,     0,   326,   327,   328,   329,   330,
       0,   331,   332,     0,   334,     0,   335,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   350,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,    26,    27,    28,     0,   365,   366,   367,     0,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,    33,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   535,
     452,   453,     0,     0,   454,   455,    38,   456,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,     0,
      40,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   808,   492,   493,     0,   494,     0,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,    44,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
       0,   532,    45,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    46,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   464,
     465,     0,     0,   466,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   999,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1499,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2116,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2266,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2510,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   464,
     465,     0,     0,   466,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2656,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2870,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3340,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2222,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,     0,  3000,  1372,   825,     0,     0,  2090,  1065,     0,
       0,     0,     0,     0,  2091,  2092,     0,  3197,  2093,  2094,
    2095,   119,   120,   121,   122,   123,   124,   125,   126,   565,
     127,   128,   129,   566,   567,   568,  3001,   570,   571,   572,
     573,  3002,   131,   132,   575,   133,   134,   135,  3003,   137,
     138,   139,     0,  1512,  3004,  1514,  1515,   582,   145,   146,
     147,   148,   149,   150,   583,   584,   151,   152,   153,   154,
    1516,  1517,   157,   587,   158,   159,   160,   161,     0,   589,
    3005,   591,  3006,   165,   166,   167,   168,   169,  3007,   171,
     172,   173,   594,   174,   175,   176,   177,   178,   179,   595,
    3008,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,  1522,   192,   193,  1523,   195,   600,   196,   601,   197,
     198,   199,   200,   201,   202,   602,   603,   203,   204,   205,
     206,   604,   605,   207,   208,  1078,   210,   211,   606,   212,
     213,   214,   607,   215,   216,   217,   608,   218,   219,   220,
     221,     0,   223,   224,   225,   226,   227,   228,     0,   611,
     230,   612,   231,   232,  1524,   234,   614,   235,   615,   236,
    3009,   617,  3010,   239,   240,  3011,  3012,   243,   244,   245,
     621,     0,     0,   248,   249,   624,   250,   251,   252,   253,
     254,   255,   256,  3013,   258,   259,   260,   261,   626,   262,
     263,   264,   265,   266,   267,   268,   627,   269,  3014,     0,
     272,   273,   274,   275,   276,  1530,  1531,   632,  1532,   634,
     280,  3015,  3016,   283,  3017,   285,   286,   287,   288,   289,
     290,   638,   639,   291,  3018,   293,  3019,   642,   295,   296,
     297,   298,   299,   300,   301,   302,  3020,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,  1539,  3021,  1541,
     327,   328,   329,  3022,   648,   331,   332,  3023,   334,   650,
       0,   336,  1543,   338,   339,   340,   653,   341,   342,   654,
     655,  3024,   344,   345,   656,   657,   346,   347,     0,  3025,
     350,  3026,     0,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   662,   663,   664,   665,   365,
     366,     0,  3027,   369,   370,     0,   372,   373,   374,   669,
     375,   376,   377,   378,   379,   380,   670,   381,   382,   383,
     384,   385,  1547,   387,   388,   389,   390,   672,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   673,   404,   405,  3028,   407,   408,   409,  1549,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   676,  3029,   424,   425,   426,   427,   428,   429,
    3030,   431,   432,   679,  3031,   434,   435,  1553,   437,   682,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,  3032,   452,     0,   685,   686,   454,   455,
     687,   456,  3033,   458,   459,   460,   461,   462,   689,   463,
    1556,  1557,   692,   693,   466,   467,     0,   469,     0,   696,
     471,   472,  3034,   474,   475,   476,   477,   478,  3035,   699,
     479,   480,   481,  3036,   701,   482,   483,   484,   485,   702,
     486,   487,   488,   489,   490,     0,  1561,   493,   705,   494,
    3037,   496,   497,   498,   499,   500,   501,   502,   707,   708,
     503,   709,   710,   504,   505,   506,   507,   508,   509,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     521,   522,   523,   524,     0,   532,     0,  2096,  2097,  2098,
    2090,  3038,  3039,  2101,  2102,  2103,  2104,  2091,  2092,     0,
       0,  2093,  2094,  2095,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,     0,     0,     0,
    2096,  2097,  2098,     0,  2099,  2100,  2101,  2102,  2103,  2104,
    1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1656,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1658,  1647,
       0,     0,  1648,     0,     0,  1659,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1656,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,  1658,  1647,     0,
       0,  1648,     0,     0,  1659,  1649,  1650,  1651,  1652,  1653,
    1654,  1655,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,     0,     0,
       0,  1660,     0,     0,     0,     0,  1658,     0,     0,     0,
       0,     0,     0,  1659,     0,  1647,     0,     0,  1648,     0,
       0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1660,     0,     0,  1656,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1658,  1647,     0,     0,  1648,     0,  1661,
    1659,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,  1656,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,  1658,     0,     0,     0,     0,     0,  1661,  1659,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1662,     0,     0,     0,  1666,
    1663,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1661,     0,     0,
       0,     0,     0,  1664,  1665,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1662,     0,     0,  1667,  1666,  1663,
    1668,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
       0,     0,  1664,  1665,  1661,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1667,  1666,     0,  1668,
       0,  1662,     0,     0,     0,     0,  1663,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,     0,  1664,
    1665,     0,     0,     0,     0,  1667,     0,     0,  1668,     0,
    1662,     0,     0,     0,  1666,  1663,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,  1665,
       0,     0,     0,     0,     0,     0,     0,  1671,     0,     0,
       0,     0,  1667,  1666,     0,  1668,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1669,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,  1667,     0,     0,  1668,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1669,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,  1671,     0,  3196,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,  1656,
       0,  1671,     0,  3363,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
       0,     0,  3387,  1660,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1647,     0,     0,
    1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,  1656,     0,     0,     0,  3487,
       0,     0,     0,     0,     0,  1658,  1647,     0,     0,  1648,
       0,     0,  1659,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
       0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,  1656,     0,     0,     0,  3543,  1660,
       0,     0,     0,     0,  1658,  1647,     0,     0,  1648,     0,
    1661,  1659,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,  1663,  1656,     0,     0,     0,     0,  1660,     0,
       0,     0,     0,  1658,     0,     0,     0,     0,     0,     0,
    1659,     0,     0,     0,     0,  1664,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1647,     0,     0,  1648,  1661,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,  1667,     0,
       0,  1668,     0,  1662,     0,     0,     0,     0,  1663,     0,
    1656,     0,     0,     0,     0,  1669,     0,     0,  1670,     0,
    1658,     0,     0,     0,     0,  1661,     0,  1659,     0,     0,
       0,  1664,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1662,     0,     0,     0,  1666,  1663,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1661,     0,     0,     0,     0,     0,
    1664,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,  1667,  1666,  1663,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1669,     0,     0,  1670,     0,     0,     0,     0,  1664,
    1665,     0,     0,     0,     0,     0,     0,     0,  1671,     0,
       0,     0,     0,  1667,  1666,     0,  1668,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,     0,     0,  1668,     0,     0,  1662,     0,
       0,     0,     0,  1663,     0,     0,     0,     0,     0,  1669,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1664,  1665,     0,     0,
       0,     0,     0,     0,  1671,     0,     0,     0,     0,     0,
       0,  1666,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1672,     0,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,  1671,     0,  3565,     0,     0,     0,  1667,
       0,     0,  1668,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1669,     0,     0,  1670,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,
       0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,  1841,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,
    1676,  1677,  1678,  1679,  1680,  1681,     0,     0,  2896,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,  3353,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   564,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,     0,  3527,   119,   120,   121,   122,   123,
     124,   125,   126,   565,   127,   128,   129,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   131,   132,   575,   133,
     134,   135,   576,   137,   138,   139,   577,   578,   579,   580,
     581,   582,   145,   146,   147,   148,   149,   150,   583,   584,
     151,   152,   153,   154,   585,   586,   157,   587,   158,   159,
     160,   161,   588,   589,   590,   591,   592,   165,   166,   167,
     168,   169,   593,   171,   172,   173,   594,   174,   175,   176,
     177,   178,   179,   595,   596,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   598,   192,   193,   599,   195,
     600,   196,   601,   197,   198,   199,   200,   201,   202,   602,
     603,   203,   204,   205,   206,   604,   605,   207,   208,   209,
     210,   211,   606,   212,   213,   214,   607,   215,   216,   217,
     608,   218,   219,   220,   221,   609,   223,   224,   225,   226,
     227,   228,   610,   611,   230,   612,   231,   232,   613,   234,
     614,   235,   615,   236,   616,   617,   618,   239,   240,   619,
     620,   243,   244,   245,   621,   622,   623,   248,   249,   624,
     250,   251,   252,   253,   254,   255,   256,   625,   258,   259,
     260,   261,   626,   262,   263,   264,   265,   266,   267,   268,
     627,   269,   628,   629,   272,   273,   274,   275,   276,   630,
     631,   632,   633,   634,   280,   635,   636,   283,   637,   285,
     286,   287,   288,   289,   290,   638,   639,   291,   640,   293,
     641,   642,   295,   296,   297,   298,   299,   300,   301,   302,
     643,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   644,   645,   646,   327,   328,   329,   647,   648,   331,
     332,   649,   334,   650,   651,   336,   652,   338,   339,   340,
     653,   341,   342,   654,   655,   343,   344,   345,   656,   657,
     346,   347,   658,   659,   350,   660,   661,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   662,
     663,   664,   665,   365,   366,   666,   667,   369,   370,   668,
     372,   373,   374,   669,   375,   376,   377,   378,   379,   380,
     670,   381,   382,   383,   384,   385,   671,   387,   388,   389,
     390,   672,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   673,   404,   405,   674,   407,
     408,   409,   675,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   676,   677,   424,   425,
     426,   427,   428,   429,   678,   431,   432,   679,   680,   434,
     435,   681,   437,   682,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   683,   452,   684,
     685,   686,   454,   455,   687,   456,   688,   458,   459,   460,
     461,   462,   689,   463,   690,   691,   692,   693,   466,   467,
     694,   469,   695,   696,   471,   472,   697,   474,   475,   476,
     477,   478,   698,   699,   479,   480,   481,   700,   701,   482,
     483,   484,   485,   702,   486,   487,   488,   489,   490,   703,
     704,   493,   705,   494,   706,   496,   497,   498,   499,   500,
     501,   502,   707,   708,   503,   709,   710,   504,   505,   506,
     507,   508,   509,   711,   712,   713,   714,   715,   716,   717,
     718,   719,   720,   721,   521,   522,   523,   524,   532,     0,
       0,     0,     0,     0,     0,     0,     0,  2128,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,     0,   239,
     240,   533,     0,   243,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   534,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,     0,   326,   327,   328,   329,   330,
       0,   331,   332,     0,   334,     0,   335,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   350,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,   367,     0,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   535,
     452,   453,     0,     0,   454,   455,     0,   456,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,   494,     0,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     532,     0,     0,     0,     0,     0,     0,     0,     0,  2789,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
       0,   239,   240,   533,     0,   243,   244,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,   296,   297,   298,
     299,   300,   301,   302,   534,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,     0,   326,   327,   328,
     329,   330,     0,   331,   332,     0,   334,     0,   335,   336,
     337,   338,   339,   340,     0,   341,   342,     0,     0,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   350,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,     0,     0,   365,   366,   367,
       0,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,     0,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   535,   452,   453,     0,     0,   454,   455,     0,   456,
       0,   458,   459,   460,   461,   462,     0,   463,   464,   465,
       0,     0,   466,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,   494,     0,   496,
     497,   498,   499,   500,   501,   502,     0,     0,   503,     0,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   979,  1372,   825,     0,     0,     0,  1065,     0,
       0,  2792,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,   569,     0,     0,     0,
       0,   574,   131,   132,     0,   133,   134,   135,   576,   137,
     138,   139,   577,   578,   579,   580,   581,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     585,   586,   157,     0,   158,   159,   160,   161,   588,     0,
     590,     0,   592,   165,   166,   167,   168,   169,   593,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
     596,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   598,   192,   193,   599,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   609,   223,   224,   225,   226,   227,   228,   610,  1373,
     230,     0,   231,   232,   613,   234,     0,   235,     0,   236,
     616,     0,   618,   239,   240,   619,   620,   243,   244,   245,
       0,   622,   623,   248,   249,     0,   250,   251,   252,   253,
     254,   255,   256,   625,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,   628,   629,
     272,   273,   274,   275,   276,   630,   631,     0,   633,     0,
     280,   635,   636,   283,   637,   285,   286,   287,   288,   289,
     290,     0,     0,   291,   640,   293,   641,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   643,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   644,   645,   646,
     327,   328,   329,   647,     0,   331,   332,   649,   334,     0,
     651,   336,   652,   338,   339,   340,     0,   341,   342,  1374,
       0,   343,   344,   345,     0,     0,   346,   347,   658,   659,
     350,   660,   661,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   365,
     366,   666,   667,   369,   370,   668,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   671,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   404,   405,   674,   407,   408,   409,   675,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,   677,   424,   425,   426,   427,   428,   429,
     678,   431,   432,     0,   680,   434,   435,   681,   437,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   683,   452,   684,     0,     0,   454,   455,
       0,   456,   688,   458,   459,   460,   461,   462,     0,   463,
     690,   691,     0,     0,   466,   467,   694,   469,   695,  1375,
     471,   472,   697,   474,   475,   476,   477,   478,     0,     0,
     479,   480,   481,   700,     0,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   703,   704,   493,     0,   494,
     706,   496,   497,   498,   499,   500,   501,   502,     0,     0,
     503,     0,     0,   504,   505,   506,   507,   508,   509,   711,
     712,   713,   714,   715,   716,   717,   718,   719,   720,   721,
     521,   522,   523,   524,     0,     0,  1647,     0,     0,  1648,
       0,  1376,  1377,  1649,  1650,  1651,  1652,  1653,  1654,  1655,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1656,     0,     0,     0,     0,  2232,
       0,     0,     0,     0,  1658,  1647,     0,     0,  1648,     0,
       0,  1659,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1656,     0,     0,     0,     0,  1660,     0,
       0,     0,     0,  1658,  1647,     0,     0,  1648,     0,     0,
    1659,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1656,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,  1658,     0,  2233,     0,     0,     0,     0,  1659,
       0,     0,     0,  1647,     0,     0,  1648,     0,     0,     0,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1660,     0,     0,     0,
       0,  1656,     0,     0,     0,  1943,     0,     0,     0,     0,
       0,  1658,     0,  1647,     0,  1661,  1648,     0,  1659,     0,
    1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,
       0,     0,  1662,     0,     0,     0,     0,  1663,     0,     0,
       0,  1656,     0,     0,  1979,  1660,     0,     0,     0,  1980,
       0,  1658,     0,     0,  1661,     0,     0,     0,  1659,     0,
    1664,  1665,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1662,     0,     0,     0,  1666,  1663,     0,     0,     0,
       0,     0,  3633,     0,     0,  1660,     0,     0,     0,     0,
       0,     0,     0,  1661,     0,     0,     0,     0,     0,  1664,
    1665,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1662,     0,     0,  1667,  1666,  1663,  1668,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1669,     0,     0,  1670,     0,     0,     0,     0,  1664,  1665,
       0,     0,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1667,  1666,     0,  1668,     0,     0,     0,  1662,
       0,     0,     0,     0,  1663,     0,     0,     0,     0,  1669,
       0,     0,  1670,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,  1664,  1665,     0,
       0,  1667,     0,     0,  1668,     0,     0,     0,     0,  1662,
       0,     0,  1666,     0,  1663,     0,     0,     0,  1669,     0,
       0,  1670,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1664,  1665,     0,
       0,     0,     0,  1671,     0,     0,     0,     0,     0,     0,
    1667,  3634,  1666,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,  2236,     0,
    1670,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1671,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1950,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,     0,
    1676,  1677,  1678,  1679,  1680,  1681,     0,     0,     0,     0,
    1671,     0,     0,     0,     0,     0,     0,  1647,     0,     0,
    1648,     0,     0,     0,  1649,  1650,  1651,  1652,  1653,  1654,
    1655,     0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,  1656,     0,     0,     0,  1985,
    1671,     0,     0,     0,     0,  1658,     0,     0,     0,     0,
       0,     0,  1659,     0,     0,     0,     0,     0,     0,     0,
       0,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,     0,     0,     0,     0,     0,  1660,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1647,     0,     0,  1648,     0,
       0,     0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,
    1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,
    1679,  1680,  1681,  1656,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1658,     0,     0,     0,     0,     0,     0,
    1659,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,
    1679,  1680,  1681,     0,     0,     0,     0,  1660,     0,     0,
       0,     0,  1647,     0,     0,  1648,  1661,     0,     0,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,
       0,     0,     0,  1662,     0,     0,     0,     0,  1663,     0,
    1656,     0,     0,     0,  1992,     0,     0,     0,     0,     0,
    1658,     0,     0,     0,     0,     0,     0,  1659,     0,     0,
       0,  1664,  1665,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1666,     0,     0,     0,
       0,     0,     0,     0,  1660,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1990,
    1647,     0,     0,  1648,  1661,     0,     0,  1649,  1650,  1651,
    1652,  1653,  1654,  1655,  1667,     0,     0,  1668,     0,     0,
       0,  1662,     0,     0,     0,     0,  1663,     0,  1656,     0,
       0,  1669,     0,     0,  1670,     0,     0,     0,  1658,     0,
       0,     0,     0,     0,     0,  1659,     0,     0,     0,  1664,
    1665,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1666,     0,     0,     0,     0,     0,
       0,     0,  1660,     0,     0,     0,     0,     0,     0,     0,
       0,  1661,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1662,     0,
       0,     0,  1667,  1663,  1647,  1668,     0,  1648,     0,     0,
       0,  1649,  1650,  1651,  1652,  1653,  1654,  1655,     0,  1669,
       0,     0,  1670,     0,     0,     0,  1664,  1665,     0,     0,
       0,     0,  1656,     0,  1671,     0,     0,     0,     0,     0,
       0,  1666,  1658,     0,     0,     0,     0,     0,     0,  1659,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1661,
       0,     0,     0,     0,     0,     0,  1660,     0,     0,  1667,
       0,     0,  1668,     0,     0,     0,  1662,     0,     0,     0,
       0,  1663,     0,     0,     0,     0,  1669,     0,     0,  1670,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1664,  1665,     0,     0,     0,     0,
       0,     0,  1671,     0,     0,     0,     0,     0,     0,  1666,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1672,     0,     0,  1673,  1674,  1675,
       0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1667,     0,     0,
    1668,     0,     0,  1661,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1669,     0,     0,  1670,     0,     0,
    1662,     0,     0,     0,     0,  1663,     0,     0,     0,  1671,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1664,  1665,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1672,  1666,     0,  1673,  1674,  1675,     0,  1676,
    1677,  1678,  1679,  1680,  1681,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,  1667,     0,     0,  1668,     0,     0,     0,     0,  1656,
       0,     0,     0,  2869,     0,     0,     0,  1671,  1669,  1658,
       0,  1670,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1672,
       0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,
    1680,  1681,     0,  1660,     0,     0,     0,     0,     0,     0,
       0,  1647,     0,     0,  1648,     0,     0,     0,  1649,  1650,
    1651,  1652,  1653,  1654,  1655,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1656,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1658,
       0,     0,     0,     0,     0,     0,  1659,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1671,     0,     0,     0,     0,     0,  1672,     0,     0,
    1673,  1674,  1675,  1660,  1676,  1677,  1678,  1679,  1680,  1681,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1647,
    1661,     0,  1648,     0,     0,  2853,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,     0,     0,     0,     0,  1662,     0,     0,
       0,     0,  1663,     0,     0,     0,     0,  1656,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1658,     0,     0,
       0,     0,     0,     0,  1659,  1664,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1666,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1660,     0,     0,     0,     0,     0,     0,     0,     0,
    1661,  1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,
    1678,  1679,  1680,  1681,     0,     0,     0,  1662,  1667,     0,
       0,  1668,  1663,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1669,     0,     0,  1670,     0,
       0,     0,     0,     0,     0,  1664,  1665,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1647,
    1666,     0,  1648,     0,     0,     0,  1649,  1650,  1651,  1652,
    1653,  1654,  1655,     0,     0,     0,     0,     0,  1647,     0,
       0,  1648,     0,     0,     0,  1649,  1650,  1656,  1661,  1653,
    1654,  1655,     0,     0,     0,     0,     0,  1658,  1667,     0,
       0,  1668,     0,     0,  1659,  1662,  1656,     0,     0,     0,
    1663,     0,     0,     0,     0,  1669,  1658,     0,  1670,     0,
       0,     0,     0,  1659,     0,     0,     0,     0,     0,     0,
       0,  1660,     0,  1854,  1665,     0,     0,     0,  1671,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,     0,
    1660,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1667,     0,     0,  1668,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1669,     0,     0,  1670,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1671,     0,
       0,     0,     0,  1647,     0,     0,  1648,     0,  1661,     0,
    1649,  1650,     0,     0,  1653,  1654,  1655,     0,     0,     0,
       0,     0,     0,     0,     0,  1662,     0,  1661,  1672,     0,
    1663,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,  1658,     0,     0,  1662,     0,     0,     0,  1659,  1663,
       0,     0,     0,  1664,  1665,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1666,     0,
       0,     0,  1664,  1665,     0,  1660,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1671,  1666,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1667,     0,  1672,  1668,
       0,  1673,  1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,
    1681,     0,     0,  1669,     0,  1667,  1670,     0,  1668,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1669,     0,     0,  1670,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1661,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1662,
       0,     0,     0,     0,  1663,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,
       0,     0,     0,     0,     0,     0,     0,  1664,  1665,     0,
       0,     0,     0,     0,     0,     0,  1671,     0,     0,     0,
       0,     0,  1666,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1671,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1667,     0,     0,  1668,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1669,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1672,     0,     0,  1673,
    1674,  1675,     0,  1676,  1677,  1678,  1679,  2253,  1681,     0,
       0,     0,     0,     0,     0,  1672,     0,     0,  1673,  1674,
    1675,     0,  1676,  1677,  1678,  1679,  1680,  1681,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   564,     0,  2145,     0,     0,     0,
    1672,     0,     0,  1673,  1674,  1675,     0,  1676,  1677,  1678,
    1679,  1680,  1681,   119,   120,   121,   122,   123,   124,   125,
     126,   565,   127,   128,   129,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   131,   132,   575,   133,   134,   135,
     576,   137,   138,   139,   577,   578,   579,   580,   581,   582,
     145,   146,   147,   148,   149,   150,   583,   584,   151,   152,
     153,   154,   585,   586,   157,   587,   158,   159,   160,   161,
     588,   589,   590,   591,   592,   165,   166,   167,   168,   169,
     593,   171,   172,   173,   594,   174,   175,   176,   177,   178,
     179,   595,   596,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   598,   192,   193,   599,   195,   600,   196,
     601,   197,   198,   199,   200,   201,   202,   602,   603,   203,
     204,   205,   206,   604,   605,   207,   208,   209,   210,   211,
     606,   212,   213,   214,   607,   215,   216,   217,   608,   218,
     219,   220,   221,   609,   223,   224,   225,   226,   227,   228,
     610,   611,   230,   612,   231,   232,   613,   234,   614,   235,
     615,   236,   616,   617,   618,   239,   240,   619,   620,   243,
     244,   245,   621,   622,   623,   248,   249,   624,   250,   251,
     252,   253,   254,   255,   256,   625,   258,   259,   260,   261,
     626,   262,   263,   264,   265,   266,   267,   268,   627,   269,
     628,   629,   272,   273,   274,   275,   276,   630,   631,   632,
     633,   634,   280,   635,   636,   283,   637,   285,   286,   287,
     288,   289,   290,   638,   639,   291,   640,   293,   641,   642,
     295,   296,   297,   298,   299,   300,   301,   302,   643,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   644,
     645,   646,   327,   328,   329,   647,   648,   331,   332,   649,
     334,   650,   651,   336,   652,   338,   339,   340,   653,   341,
     342,   654,   655,   343,   344,   345,   656,   657,   346,   347,
     658,   659,   350,   660,   661,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   662,   663,   664,
     665,   365,   366,   666,   667,   369,   370,   668,   372,   373,
     374,   669,   375,   376,   377,   378,   379,   380,   670,   381,
     382,   383,   384,   385,   671,   387,   388,   389,   390,   672,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   673,   404,   405,   674,   407,   408,   409,
     675,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,   676,   677,   424,   425,   426,   427,
     428,   429,   678,   431,   432,   679,   680,   434,   435,   681,
     437,   682,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   683,   452,   684,   685,   686,
     454,   455,   687,   456,   688,   458,   459,   460,   461,   462,
     689,   463,   690,   691,   692,   693,   466,   467,   694,   469,
     695,   696,   471,   472,   697,   474,   475,   476,   477,   478,
     698,   699,   479,   480,   481,   700,   701,   482,   483,   484,
     485,   702,   486,   487,   488,   489,   490,   703,   704,   493,
     705,   494,   706,   496,   497,   498,   499,   500,   501,   502,
     707,   708,   503,   709,   710,   504,   505,   506,   507,   508,
     509,   711,   712,   713,   714,   715,   716,   717,   718,   719,
     720,   721,   521,   522,   523,   524,   564,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,   565,   127,   128,   129,   566,   567,   568,
     569,   570,   571,   572,   573,   574,   131,   132,   575,   133,
     134,   135,   576,   137,   138,   139,   577,   578,   579,   580,
     581,   582,   145,   146,   147,   148,   149,   150,   583,   584,
     151,   152,   153,   154,   585,   586,   157,   587,   158,   159,
     160,   161,   588,   589,   590,   591,   592,   165,   166,   167,
     168,   169,   593,   171,   172,   173,   594,   174,   175,   176,
     177,   178,   179,   595,   596,   181,   182,   183,   184,   185,
     186,   597,   188,   189,   190,   598,   192,   193,   599,   195,
     600,   196,   601,   197,   198,   199,   200,   201,   202,   602,
     603,   203,   204,   205,   206,   604,   605,   207,   208,   209,
     210,   211,   606,   212,   213,   214,   607,   215,   216,   217,
     608,   218,   219,   220,   221,   609,   223,   224,   225,   226,
     227,   228,   610,   611,   230,   612,   231,   232,   613,   234,
     614,   235,   615,   236,   616,   617,   618,   239,   240,   619,
     620,   243,   244,   245,   621,   622,   623,   248,   249,   624,
     250,   251,   252,   253,   254,   255,   256,   625,   258,   259,
     260,   261,   626,   262,   263,   264,   265,   266,   267,   268,
     627,   269,   628,   629,   272,   273,   274,   275,   276,   630,
     631,   632,   633,   634,   280,   635,   636,   283,   637,   285,
     286,   287,   288,   289,   290,   638,   639,   291,   640,   293,
     641,   642,   295,   296,   297,   298,   299,   300,   301,   302,
     643,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   644,   645,   646,   327,   328,   329,   647,   648,   331,
     332,   649,   334,   650,   651,   336,   652,   338,   339,   340,
     653,   341,   342,   654,   655,   343,   344,   345,   656,   657,
     346,   347,   658,   659,   350,   660,   661,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   662,
     663,   664,   665,   365,   366,   666,   667,   369,   370,   668,
     372,   373,   374,   669,   375,   376,   377,   378,   379,   380,
     670,   381,   382,   383,   384,   385,   671,   387,   388,   389,
     390,   672,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   673,   404,   405,   674,   407,
     408,   409,   675,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   676,   677,   424,   425,
     426,   427,   428,   429,   678,   431,   432,   679,   680,   434,
     435,   681,   437,   682,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   683,   452,   684,
     685,   686,   454,   455,   687,   456,   688,   458,   459,   460,
     461,   462,   689,   463,   690,   691,   692,   693,   466,   467,
     694,   469,   695,   696,   471,   472,   697,   474,   475,   476,
     477,   478,   698,   699,   479,   480,   481,   700,   701,   482,
     483,   484,   485,   702,   486,   487,   488,   489,   490,   703,
     704,   493,   705,   494,   706,   496,   497,   498,   499,   500,
     501,   502,   707,   708,   503,   709,   710,   504,   505,   506,
     507,   508,   509,   711,   712,   713,   714,   715,   716,   717,
     718,   719,   720,   721,   521,   522,   523,   524,   564,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,   565,   127,   128,   129,   566,
     567,   568,   569,   570,   571,   572,   573,   574,   131,   132,
     575,   133,   134,   135,   576,   137,   138,   139,   577,   578,
     579,   580,   581,   582,   145,   146,   147,   148,   149,   150,
     583,   584,   151,   152,   153,   154,   585,   586,   157,   587,
     158,   159,   160,   161,   588,   589,   590,   591,   592,   165,
     166,   167,   168,   169,   593,   171,   172,   173,   594,   174,
     175,   176,   177,   178,   179,   595,   596,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   598,   192,   193,
     599,   195,   600,   196,   601,   197,   198,   199,   200,   201,
     202,   602,   603,   203,   204,   205,   206,   604,   605,   207,
     208,   209,   210,   211,   606,   212,   213,   214,   607,   215,
     216,   217,   608,   218,   219,   220,   221,   609,   223,   224,
     225,   226,   227,   228,   610,   611,   230,   612,   231,   232,
     613,   234,   614,   235,   615,   236,   616,   617,   618,   239,
     240,   619,   620,   243,   244,   245,   621,   622,   623,   248,
     249,   624,   250,   251,   252,   253,   254,   955,   256,   625,
     258,   259,   260,   261,   626,   262,   263,   264,   265,   266,
     267,   268,   627,   269,   628,   629,   272,   273,   274,   275,
     276,   630,   631,   632,   633,   634,   280,   635,   636,   283,
     637,   285,   286,   287,   288,   289,   290,   638,   639,   291,
     640,   293,   641,   642,   295,   296,   297,   298,   299,   300,
     301,   302,   643,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   644,   645,   646,   327,   328,   329,   647,
     648,   331,   332,   649,   334,   650,   651,   336,   652,   338,
     339,   340,   653,   341,   342,   654,   655,   343,   344,   345,
     656,   657,   346,   347,   658,   659,   350,   660,   661,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   662,   663,   664,   665,   365,   366,   666,   667,   369,
     370,   668,   372,   373,   374,   669,   375,   376,   377,   378,
     379,   380,   670,   381,   382,   383,   384,   385,   671,   387,
     388,   389,   390,   672,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   673,   404,   405,
     674,   407,   408,   409,   675,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,   676,   677,
     424,   425,   426,   427,   428,   429,   678,   431,   432,   679,
     680,   434,   435,   681,   437,   682,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   683,
     452,   684,   685,   686,   454,   455,   687,   456,   688,   458,
     459,   460,   461,   462,   689,   463,   690,   691,   692,   693,
     466,   467,   694,   469,   695,   696,   471,   472,   697,   474,
     475,   476,   477,   478,   698,   699,   479,   480,   481,   700,
     701,   482,   483,   484,   485,   702,   486,   487,   488,   489,
     490,   703,   704,   493,   705,   494,   706,   496,   497,   498,
     499,   500,   501,   502,   707,   708,   503,   709,   710,   504,
     505,   506,   507,   508,   509,   711,   712,   713,   714,   715,
     716,   717,   718,   719,   720,   721,   521,   522,   523,   524,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,   565,   127,   128,
     129,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     131,   132,   575,   133,   134,   135,   576,   137,   138,   139,
     577,   578,   579,   580,   581,   582,   145,   146,   147,   148,
     149,   150,   583,   584,   151,   152,   153,   154,   585,   586,
     157,   587,   158,   159,   160,   161,   588,   589,   590,   591,
     592,   165,   166,   167,   168,   169,   593,   171,   172,   173,
     594,   174,   175,   176,   177,   178,   179,   595,   596,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   598,
     192,   193,   599,   195,   600,   196,   601,   197,   198,   199,
     200,   201,   202,   602,   603,   203,   204,   205,   206,   604,
     605,   207,   208,   209,   210,   211,   606,   212,   213,   214,
     607,   215,   216,   217,   608,   218,   219,   220,   221,   609,
     223,   224,   225,   226,   227,   228,   610,   611,   230,   612,
     231,   232,   613,   234,   614,   235,   615,   236,   616,   617,
     618,   239,   240,   619,   620,   243,   244,   245,   621,   622,
     623,   248,   249,   624,   250,   251,   252,   253,   254,   255,
     256,   625,   258,   259,   260,   261,   626,   262,   263,   264,
     265,   266,   267,   268,   627,   269,   628,   629,   272,   273,
     274,   275,   276,   630,   631,   632,   633,   634,   280,   635,
     636,   283,   637,   285,   286,   287,   288,   289,   290,   638,
     639,   291,   640,   293,   641,   642,   295,   296,   297,   298,
     299,   300,   301,   302,   643,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   644,   645,   646,   327,   328,
     329,   647,   648,   331,   332,   649,   334,   650,   651,   336,
     652,   338,   339,   340,   653,   341,   342,   654,   655,   343,
     344,   345,   656,   657,   346,   347,   658,   659,   350,   660,
     661,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   662,   663,   664,   665,   365,   366,   666,
     667,   369,   370,   668,   372,   373,   374,   669,   375,   376,
     377,   378,   379,   380,   670,   381,   382,   383,   384,   385,
     671,   387,   388,   389,   390,   672,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   673,
     404,   405,   674,   407,   408,   409,   675,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     676,   677,   424,   425,   426,   427,   428,   429,   678,   431,
     432,   679,   680,   434,   435,   681,   437,   682,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   683,   452,   684,   685,   686,   454,   455,   687,   456,
     688,   458,   459,   460,   461,   462,   689,   463,   690,   691,
     692,   693,   466,   467,   694,   469,   695,   696,   471,   472,
     697,   474,   475,   476,   477,   478,   698,   699,   479,   480,
     481,   700,   701,   482,   483,   484,   485,   702,   486,   487,
     488,   489,   490,   703,   704,   493,   705,   494,   706,   496,
     497,   498,   499,   500,   501,   502,   707,   708,   503,   709,
     710,   504,   505,   506,   507,   508,   509,   711,   712,   713,
     714,   715,   716,   717,   718,   719,   720,   721,   521,   522,
     523,   524,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,  2298,   124,   125,   126,   565,
     127,   128,   129,   566,   567,   568,   569,   570,   571,   572,
     573,   574,   131,   132,   575,   133,   134,   135,   576,   137,
     138,   139,   577,   578,   579,   580,   581,   582,   145,   146,
     147,   148,   149,   150,   583,   584,   151,   152,   153,   154,
     585,   586,   157,   587,   158,   159,   160,   161,   588,   589,
     590,   591,   592,   165,   166,   167,   168,   169,   593,   171,
     172,   173,   594,   174,   175,   176,   177,   178,   179,   595,
     596,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   598,   192,   193,   599,   195,   600,   196,   601,   197,
     198,   199,   200,   201,   202,   602,   603,   203,   204,   205,
     206,   604,   605,   207,   208,   209,  2299,   211,   606,   212,
     213,   214,   607,   215,   216,   217,   608,   218,   219,   220,
     221,   609,   223,   224,   225,   226,   227,   228,   610,   611,
     230,   612,   231,   232,   613,   234,   614,   235,   615,   236,
     616,   617,   618,   239,   240,   619,   620,   243,   244,   245,
     621,   622,   623,   248,   249,   624,   250,   251,   252,   253,
     254,   255,   256,   625,   258,   259,   260,   261,   626,   262,
     263,   264,   265,   266,   267,   268,   627,   269,   628,   629,
     272,   273,   274,   275,   276,   630,   631,   632,   633,   634,
     280,   635,   636,   283,   637,   285,   286,   287,   288,   289,
     290,   638,   639,   291,   640,   293,   641,   642,   295,   296,
     297,   298,   299,   300,   301,   302,   643,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   644,   645,   646,
     327,   328,   329,   647,   648,   331,   332,   649,   334,   650,
     651,   336,   652,   338,   339,   340,   653,   341,   342,   654,
     655,   343,   344,   345,   656,   657,   346,   347,   658,   659,
     350,   660,   661,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   662,   663,   664,   665,   365,
     366,   666,   667,   369,   370,   668,   372,   373,   374,   669,
     375,   376,   377,   378,   379,   380,   670,   381,   382,   383,
     384,   385,   671,   387,   388,   389,   390,   672,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   673,   404,   405,   674,   407,   408,   409,   675,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,   676,   677,   424,   425,   426,   427,   428,  2300,
     678,   431,   432,   679,   680,   434,   435,   681,   437,   682,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   683,   452,   684,   685,   686,   454,   455,
     687,   456,   688,   458,   459,   460,   461,   462,   689,   463,
     690,   691,   692,   693,   466,   467,   694,   469,   695,   696,
     471,   472,   697,   474,   475,   476,   477,   478,   698,   699,
     479,   480,   481,   700,   701,   482,   483,   484,   485,   702,
     486,   487,   488,   489,   490,   703,   704,   493,   705,   494,
     706,   496,   497,   498,   499,   500,   501,   502,   707,   708,
     503,   709,   710,   504,   505,   506,   507,   508,   509,   711,
     712,   713,   714,   715,   716,   717,   718,   719,   720,   721,
     521,   522,   523,   524,   979,     0,   825,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,   569,     0,
       0,     0,     0,   574,   131,   132,     0,   133,   134,   135,
     576,   137,   138,   139,   577,   578,   579,   580,   581,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   585,   586,   157,     0,   158,   159,   160,   161,
     588,     0,   590,     0,   592,   165,   166,   167,   168,   169,
     593,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,   596,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   598,   192,   193,   599,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   609,   223,   224,   225,   226,   227,   228,
     610,  1373,   230,     0,   231,   232,   613,   234,     0,   235,
       0,   236,   616,     0,   618,   239,   240,   619,   620,   243,
     244,   245,     0,   622,   623,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,   625,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
     628,   629,   272,   273,   274,   275,   276,   630,   631,     0,
     633,     0,   280,   635,   636,   283,   637,   285,   286,   287,
     288,   289,   290,     0,     0,   291,   640,   293,   641,     0,
     295,   296,   297,   298,   299,   300,   301,   302,   643,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   644,
     645,   646,   327,   328,   329,   647,     0,   331,   332,   649,
     334,     0,   651,   336,   652,   338,   339,   340,     0,   341,
     342,  1374,     0,   343,   344,   345,     0,     0,   346,   347,
     658,   659,   350,   660,   661,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   666,   667,   369,   370,   668,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   671,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,   674,   407,   408,   409,
     675,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,   677,   424,   425,   426,   427,
     428,   429,   678,   431,   432,     0,   680,   434,   435,   681,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   683,   452,   684,     0,     0,
     454,   455,     0,   456,   688,   458,   459,   460,   461,   462,
       0,   463,   690,   691,     0,     0,   466,   467,   694,   469,
     695,  1375,   471,   472,   697,   474,   475,   476,   477,   478,
       0,     0,   479,   480,   481,   700,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   703,   704,   493,
       0,   494,   706,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   711,   712,   713,   714,   715,   716,   717,   718,   719,
     720,   721,   521,   522,   523,   524,   979,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     3,     4,     0,
     569,     0,     0,     0,     0,   574,   131,   132,     0,   133,
     134,   135,   576,   137,   138,   139,   577,   578,   579,   580,
     581,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   585,   586,   157,     0,   158,   159,
     160,   161,   588,     0,   590,     0,   592,   165,   166,   167,
     168,   169,   593,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,   596,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   598,   192,   193,   599,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   609,   223,   224,   225,   226,
     227,   228,   610,     0,   230,     0,   231,   232,   613,   234,
       0,   235,     0,   236,   616,     0,   618,   239,   240,   619,
     620,   243,   244,   245,     0,   622,   623,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,   625,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,   628,   629,   272,   273,   274,   275,   276,   630,
     631,     0,   633,     0,   280,   635,   636,   283,   637,   285,
     286,   287,   288,   289,   290,     0,     0,   291,   640,   293,
     641,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     643,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   644,   645,   646,   327,   328,   329,   647,     0,   331,
     332,   649,   334,     0,   651,   336,   652,   338,   339,   340,
       0,   341,   342,     0,     0,   343,   344,   345,     0,     0,
     346,   347,   658,   659,   350,   660,   661,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   666,   667,   369,   370,   668,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   671,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,   674,   407,
     408,   409,   675,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,   677,   424,   425,
     426,   427,   428,   429,   678,   431,   432,     0,   680,   434,
     435,   681,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   683,   452,   684,
       0,     0,   454,   455,     0,   456,   688,   458,   459,   460,
     461,   462,     0,   463,   690,   691,     0,     0,   466,   467,
     694,   469,   695,     0,   471,   472,   697,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,   700,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   703,
     704,   493,     0,   494,   706,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   711,   712,   713,   714,   715,   716,   717,
     718,   719,   720,   721,   521,   522,   523,   524,   118,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,   130,   131,   132,
       0,   133,   134,   135,   136,   137,   138,   139,   140,   141,
     142,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,   794,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   795,     0,   796,     0,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,   180,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   797,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,   237,     0,   238,   239,
     240,   241,   242,   243,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,   290,     0,     0,   291,
     292,   293,   294,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
       0,   331,   332,   333,   334,     0,   799,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,   349,   350,   351,   801,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,   802,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
     433,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
     452,   804,     0,     0,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   805,   469,   806,     0,   471,   472,   807,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,   494,   495,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     118,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,   130,
     131,   132,     0,   133,   134,   135,   136,   137,   138,   139,
     140,   141,   142,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,   163,     0,
     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,   180,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     231,   232,   233,   234,     0,   235,     0,   236,   237,     0,
     238,   239,   240,   241,   242,   243,   244,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,   281,
     282,   283,   284,   285,   286,   287,   288,   289,   290,     0,
       0,   291,   292,   293,   294,     0,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,     0,   331,   332,   333,   334,     0,   335,   336,
     337,   338,   339,   340,     0,   341,   342,     0,     0,   343,
     344,   345,     0,     0,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,     0,     0,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,     0,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,   433,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   451,   452,   453,     0,     0,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,     0,   463,   464,   465,
       0,     0,   466,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,   494,   495,   496,
     497,   498,   499,   500,   501,   502,     0,     0,   503,     0,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   532,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,  1779,   158,   159,   160,   161,   162,     0,
       0,  1780,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,  1781,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   231,   232,   233,   234,     0,   235,  1782,   236,
       0,     0,     0,   239,   240,   533,     0,   243,   244,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,  1783,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   534,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,     0,   326,
     327,   328,   329,   330,     0,   331,   332,     0,   334,     0,
     335,   336,   337,   338,   339,   340,     0,   341,   342,     0,
       0,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     350,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   365,
     366,   367,     0,   369,   370,   371,   372,   373,   374,  1784,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,     0,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   535,   452,   453,     0,     0,   454,   455,
       0,   456,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,     0,     0,   466,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,   478,     0,  1785,
     479,   480,   481,     0,     0,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,   494,
       0,   496,   497,   498,   499,   500,   501,   502,     0,     0,
     503,     0,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,  1779,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,  1781,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   231,   232,   233,   234,     0,   235,
    1782,   236,     0,     0,     0,   239,   240,   533,     0,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,  2386,     0,
     295,   296,   297,   298,   299,   300,   301,   302,   534,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
       0,   326,   327,   328,   329,   330,     0,   331,   332,     0,
     334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
     342,     0,     0,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   350,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   367,     0,   369,   370,   371,   372,   373,
     374,  1784,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   535,   452,   453,     0,     0,
     454,   455,     0,   456,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,   478,
       0,  1785,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,   494,     0,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   532,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     3,     4,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,     0,   239,   240,   533,
       0,   243,   244,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     534,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,     0,   326,   327,   328,   329,   330,     0,   331,
     332,     0,   334,     0,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,     0,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   350,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   367,     0,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   535,   452,   453,
       0,     0,   454,   455,     0,   456,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,     0,     0,   466,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,   494,     0,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   532,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,   559,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,     0,   239,
     240,   533,     0,   243,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,   296,   297,   298,   299,   300,
     301,   302,   534,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,     0,   326,   327,   328,   329,   330,
       0,   331,   332,     0,   334,     0,   335,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   350,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,   367,     0,   369,
     370,   371,   560,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   535,
     452,   453,     0,     0,   454,   455,     0,   456,     0,   458,
     459,   460,   461,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,     0,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,   494,     0,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     532,     0,   558,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     131,   132,     0,   133,   134,   135,     0,   137,   138,   139,
     140,   141,     0,   143,   144,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,   155,   156,
     157,     0,   158,   159,   160,   161,   162,     0,     0,     0,
     164,   165,   166,   167,   168,   169,     0,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,     0,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,   194,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,   209,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,     0,   230,     0,
     231,   232,   233,   234,     0,   235,     0,   236,     0,     0,
       0,   239,   240,   533,     0,   243,   244,   245,     0,   246,
     247,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,     0,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,     0,   271,   272,   273,
     274,   275,   276,   277,   278,     0,   279,     0,   280,     0,
       0,   283,     0,   285,   286,   287,   288,   289,   290,     0,
       0,   291,     0,   293,     0,     0,   295,   296,   297,   298,
     299,   300,   301,   302,   534,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,     0,   326,   327,   328,
     329,   330,     0,   331,   332,     0,   334,     0,   335,   336,
     337,   338,   339,   340,     0,   341,   342,     0,   800,   343,
     344,   345,     0,     0,   346,   347,   348,     0,   350,     0,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,     0,     0,   365,   366,   367,
       0,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
     404,   405,     0,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,     0,   424,   425,   426,   427,   428,   429,   430,   431,
     432,     0,     0,   434,   435,   436,   437,     0,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,   535,   452,   453,     0,     0,   454,   455,     0,   456,
       0,   458,   459,   460,   461,   462,     0,   463,   464,   465,
       0,     0,   466,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,   478,     0,     0,   479,   480,
     481,     0,     0,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,   491,   492,   493,     0,   494,     0,   496,
     497,   498,   499,   500,   501,   502,     0,     0,   503,     0,
       0,   504,   505,   506,   507,   508,   509,   510,   511,   512,
     513,   514,   515,   516,   517,   518,   519,   520,   521,   522,
     523,   524,   532,     0,   558,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   119,   120,   121,   122,   123,   124,   125,   126,     0,
     127,   128,   129,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   131,   132,     0,   133,   134,   135,     0,   137,
     138,   139,   140,   141,     0,   143,   144,     0,   145,   146,
     147,   148,   149,   150,     0,     0,   151,   152,   153,   154,
     155,   156,   157,     0,   158,   159,   160,   161,   162,     0,
       0,     0,   164,   165,   166,   167,   168,   169,     0,   171,
     172,   173,     0,   174,   175,   176,   177,   178,   179,     0,
       0,   181,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,   194,   195,     0,   196,     0,   197,
     198,   199,   200,   201,   202,     0,     0,   203,   204,   205,
     206,     0,     0,   207,   208,   209,   210,   211,     0,   212,
     213,   214,     0,   215,   216,   217,     0,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,     0,
     230,     0,   231,   232,   233,   234,     0,   235,     0,   236,
       0,     0,     0,   239,   240,   533,     0,   243,   244,   245,
       0,   246,   247,   248,   249,     0,   250,   251,   252,   253,
     254,   908,   256,     0,   258,   259,   260,   261,     0,   262,
     263,   264,   265,   266,   267,   268,     0,   269,     0,   271,
     272,   273,   274,   275,   276,   277,   278,     0,   279,     0,
     280,     0,     0,   283,     0,   285,   286,   287,   288,   289,
     290,     0,     0,   291,     0,   293,     0,     0,   295,   296,
     297,   298,   299,   300,   301,   302,   534,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,     0,   326,
     327,   328,   329,   330,     0,   331,   332,     0,   334,     0,
     335,   336,   337,   338,   339,   340,     0,   341,   342,     0,
     800,   343,   344,   345,     0,     0,   346,   347,   348,     0,
     350,     0,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,     0,     0,     0,     0,   365,
     366,   367,     0,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   404,   405,     0,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,   423,     0,     0,   424,   425,   426,   427,   428,   429,
     430,   431,   432,     0,     0,   434,   435,   436,   437,     0,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   535,   452,   453,     0,     0,   454,   455,
       0,   456,     0,   458,   459,   460,   461,   462,     0,   463,
     464,   465,     0,     0,   466,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,   478,     0,     0,
     479,   480,   481,     0,     0,   482,   483,   484,   485,     0,
     486,   487,   488,   489,   490,   491,   492,   493,     0,   494,
       0,   496,   497,   498,   499,   500,   501,   502,     0,     0,
     503,     0,     0,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   532,     0,   558,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,   953,   127,   128,   129,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,     0,   239,   240,   533,     0,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,   296,   297,   298,   299,   300,   301,   302,   534,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
       0,   326,   327,   328,   329,   330,     0,   331,   332,     0,
     334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
     342,     0,     0,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   350,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   367,     0,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,   429,   430,   431,   432,     0,     0,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   535,   452,   453,     0,     0,
     454,   455,     0,   456,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,   494,     0,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,   532,     0,   558,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
    1191,   228,   229,     0,   230,     0,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,     0,   239,   240,   533,
       0,   243,   244,   245,     0,   246,   247,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     534,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,     0,   326,   327,   328,   329,   330,     0,   331,
     332,     0,   334,     0,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,   800,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   350,     0,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   367,     0,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   535,   452,   453,
       0,     0,   454,   455,     0,   456,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,     0,     0,   466,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,   494,     0,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,   532,     0,
     558,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   131,   132,
       0,   133,   134,   135,     0,   137,   138,   139,   140,   141,
       0,   143,   144,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,   155,   156,   157,     0,
     158,   159,   160,   161,   162,     0,     0,     0,   164,   165,
     166,   167,   168,   169,     0,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,     0,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
     194,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,   209,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,     0,   230,     0,   231,   232,
     233,   234,     0,   235,     0,   236,     0,     0,     0,   239,
     240,   533,     0,  2006,   244,   245,     0,   246,   247,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,     0,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,     0,   271,   272,   273,   274,   275,
     276,   277,   278,     0,   279,     0,   280,     0,     0,   283,
       0,   285,   286,   287,   288,   289,   290,     0,     0,   291,
       0,   293,     0,     0,   295,   296,  2007,   298,   299,   300,
     301,   302,   534,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,     0,   326,   327,   328,   329,   330,
       0,   331,   332,     0,   334,     0,   335,   336,   337,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,   348,     0,   350,     0,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,   367,     0,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
       0,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,     0,
     424,   425,   426,   427,   428,   429,   430,   431,   432,     0,
       0,   434,   435,   436,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,   535,
     452,   453,     0,     0,   454,   455,  2008,   456,     0,   458,
    2009,   460,  2010,   462,     0,   463,   464,   465,     0,     0,
     466,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,   478,     0,     0,   479,   480,  2011,     0,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,   491,   492,   493,     0,   494,     0,   496,   497,   498,
     499,   500,   501,   502,     0,     0,   503,     0,     0,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
    1508,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   119,
     120,   121,   122,   123,   124,   125,   126,     0,   127,   128,
     129,     0,     0,     0,  1509,     0,     0,  -822,     0,  1510,
     131,   132,     0,   133,   134,   135,  1511,   137,   138,   139,
       0,  1512,  1513,  1514,  1515,     0,   145,   146,   147,   148,
     149,   150,     0,     0,   151,   152,   153,   154,  1516,  1517,
     157,     0,   158,   159,   160,   161,     0,     0,  1518,     0,
    1519,   165,   166,   167,   168,   169,  1520,   171,   172,   173,
       0,   174,   175,   176,   177,   178,   179,     0,  1521,   181,
     182,   183,   184,   185,   186,   187,   188,   189,   190,  1522,
     192,   193,  1523,   195,     0,   196,     0,   197,   198,   199,
     200,   201,   202,     0,     0,   203,   204,   205,   206,     0,
       0,   207,   208,  1078,   210,   211,     0,   212,   213,   214,
       0,   215,   216,   217,     0,   218,   219,   220,   221,     0,
     223,   224,   225,   226,   227,   228,     0,     0,   230,     0,
     231,   232,  1524,   234,     0,   235,     0,   236,  1525,     0,
    1526,   239,   240,  -822,  1527,   243,   244,   245,     0,     0,
       0,   248,   249,     0,   250,   251,   252,   253,   254,   255,
     256,  1528,   258,   259,   260,   261,     0,   262,   263,   264,
     265,   266,   267,   268,     0,   269,  1529,     0,   272,   273,
     274,   275,   276,  1530,  1531,     0,  1532,     0,   280,  1533,
    1534,   283,  1535,   285,   286,   287,   288,   289,   290,     0,
       0,   291,  1536,   293,  1537,     0,   295,   296,   297,   298,
     299,   300,   301,   302,  1538,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,  1539,  1540,  1541,   327,   328,
     329,     0,     0,   331,   332,  1542,   334,     0,     0,   336,
    1543,   338,   339,   340,     0,   341,   342,     0,     0,   343,
     344,   345,     0,     0,   346,   347,     0,  1544,   350,  1545,
       0,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,     0,     0,     0,     0,   365,   366,     0,
    1546,   369,   370,     0,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
    1547,   387,   388,   389,   390,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
     404,   405,  1548,   407,   408,   409,  1549,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
       0,  1550,   424,   425,   426,   427,   428,   429,  1551,   431,
     432,     0,  1552,   434,   435,  1553,   437,     0,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
     450,  1554,   452,     0,     0,     0,   454,   455,     0,   456,
    1555,   458,   459,   460,   461,   462,     0,   463,  1556,  1557,
       0,     0,   466,   467,     0,   469,     0,     0,   471,   472,
    1558,   474,   475,   476,   477,   478,  1559,     0,   479,   480,
     481,  1560,     0,   482,   483,   484,   485,     0,   486,   487,
     488,   489,   490,     0,  1561,   493,     0,   494,  1562,   496,
     497,   498,   499,   500,   501,   502,     0,     0,   503,     0,
       0,   504,   505,   506,   507,   508,   509,   532,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,   521,   522,
     523,   524,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,   825,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,   831,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   832,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   833,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   834,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   835,
     465,     0,     0,   836,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   837,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   255,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   870,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   903,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   906,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   910,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     941,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   464,
     465,     0,     0,   466,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,   969,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   972,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,  1015,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,  1042,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,   831,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   835,
     465,     0,     0,   836,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  1331,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,   558,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,  1333,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,   558,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,  1336,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,   558,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,  1338,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,   558,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
    2294,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   464,
     465,     0,     0,   466,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,   558,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  3081,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,   255,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   847,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   848,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   849,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   850,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   851,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   852,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,   532,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
     132,     0,   133,   134,   135,     0,   137,   138,   139,   140,
     141,     0,   143,   144,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,   155,   156,   157,
       0,   158,   159,   160,   161,   162,     0,     0,     0,   164,
     165,   166,   167,   168,   169,     0,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,     0,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,   209,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,   222,   223,
     224,   225,   226,   227,   228,   229,     0,   230,     0,   231,
     232,   233,   234,     0,   235,     0,   236,     0,     0,     0,
     239,   240,   533,     0,   243,   244,   245,     0,   246,   247,
     248,   249,     0,   250,   251,   252,   253,   254,   965,   256,
       0,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,     0,   271,   272,   273,   274,
     275,   276,   277,   278,     0,   279,     0,   280,     0,     0,
     283,     0,   285,   286,   287,   288,   289,   290,     0,     0,
     291,     0,   293,     0,     0,   295,   296,   297,   298,   299,
     300,   301,   302,   534,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,     0,   326,   327,   328,   329,
     330,     0,   331,   332,     0,   334,     0,   335,   336,   337,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,   348,     0,   350,     0,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,   367,     0,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,     0,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
       0,   424,   425,   426,   427,   428,   429,   430,   431,   432,
       0,     0,   434,   435,   436,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     535,   452,   453,     0,     0,   454,   455,     0,   456,     0,
     458,   459,   460,   461,   462,     0,   463,   464,   465,     0,
       0,   466,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
       0,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,   491,   492,   493,     0,   494,     0,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   510,   511,   512,   513,
     514,   515,   516,   517,   518,   519,   520,   521,   522,   523,
     524,   532,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     119,   120,   121,   122,   123,   124,   125,   126,     0,   127,
     128,   129,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   131,   132,     0,   133,   134,   135,     0,   137,   138,
     139,   140,   141,     0,   143,   144,     0,   145,   146,   147,
     148,   149,   150,     0,     0,   151,   152,   153,   154,   155,
     156,   157,     0,   158,   159,   160,   161,   162,     0,     0,
       0,   164,   165,   166,   167,   168,   169,     0,   171,   172,
     173,     0,   174,   175,   176,   177,   178,   179,     0,     0,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,     0,   196,     0,   197,   198,
     199,   200,   201,   202,     0,     0,   203,   204,   205,   206,
       0,     0,   207,   208,   209,   210,   211,     0,   212,   213,
     214,     0,   215,   216,   217,     0,   218,   219,   220,   221,
     222,   223,   224,   225,   226,   227,   228,   229,     0,   230,
       0,   231,   232,   233,   234,     0,   235,     0,   236,     0,
       0,     0,   239,   240,   533,     0,   243,   244,   245,     0,
     246,   247,   248,   249,     0,   250,   251,   252,   253,   254,
     255,   256,     0,   258,   259,   260,   261,     0,   262,   263,
     264,   265,   266,   267,   268,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,     0,   279,     0,   280,
       0,     0,   283,     0,   285,   286,   287,   288,   289,   290,
       0,     0,   291,     0,   293,     0,     0,   295,   296,   297,
     298,   299,   300,   301,   302,   534,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,     0,   326,   327,
     328,   329,   330,     0,   331,   332,     0,   334,     0,   335,
     336,   337,   338,   339,   340,     0,   341,   342,     0,     0,
     343,   344,   345,     0,     0,   346,   347,   348,     0,   350,
       0,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,     0,     0,     0,     0,   365,   366,
     367,     0,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   404,   405,     0,   407,   408,   409,   410,   411,   412,
     413,   414,   849,   416,   417,   418,   419,   420,   421,   422,
     423,     0,     0,   424,   425,   426,   427,   428,   429,   430,
     431,   432,     0,     0,   434,   435,   436,   437,     0,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   535,   452,   453,     0,     0,   454,   455,     0,
     456,     0,   458,   459,   460,   461,   462,     0,   463,   851,
     465,     0,     0,   466,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,   478,     0,     0,   479,
     480,   481,     0,     0,   482,   483,   484,   485,     0,   486,
     487,   488,   489,   490,   491,   492,   493,     0,   494,     0,
     496,   497,   498,   499,   500,   501,   502,     0,     0,   503,
       0,     0,   504,   505,   506,   507,   508,   509,   510,   511,
     512,   513,   514,   515,   516,   517,   518,   519,   520,   521,
     522,   523,   524,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  1340,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,  1351,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,  1508,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,  1509,     0,     0,     0,     0,  1510,   131,   132,     0,
     133,   134,   135,  1511,   137,   138,   139,     0,  1512,  1513,
    1514,  1515,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,  1516,  1517,   157,     0,   158,
     159,   160,   161,     0,     0,  1518,     0,  1519,   165,   166,
     167,   168,   169,  1520,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,  1521,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,  1522,   192,   193,  1523,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
    1078,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,     0,   223,   224,   225,
     226,   227,   228,     0,     0,   230,     0,   231,   232,  1524,
     234,     0,   235,     0,   236,  1525,     0,  1526,   239,   240,
       0,  1527,   243,   244,   245,     0,     0,     0,   248,   249,
       0,   250,   251,   252,   253,   254,   255,   256,  1528,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,  1529,     0,   272,   273,   274,   275,   276,
    1530,  1531,     0,  1532,     0,   280,  1533,  1534,   283,  1535,
     285,   286,   287,   288,   289,   290,     0,     0,   291,  1536,
     293,  1537,     0,   295,   296,   297,   298,   299,   300,   301,
     302,  1538,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,  1539,  1540,  1541,   327,   328,   329,     0,     0,
     331,   332,  1542,   334,     0,     0,   336,  1543,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,     0,  1544,   350,  1545,     0,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,     0,  1546,   369,   370,
       0,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,  1547,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,  1548,
     407,   408,   409,  1549,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,  1550,   424,
     425,   426,   427,   428,   429,  1551,   431,   432,     0,  1552,
     434,   435,  1553,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,  1554,   452,
       0,     0,     0,   454,   455,     0,   456,  1555,   458,   459,
     460,   461,   462,     0,   463,  1556,  1557,     0,     0,   466,
     467,     0,   469,     0,     0,   471,   472,  1558,   474,   475,
     476,   477,   478,  1559,     0,   479,   480,   481,  1560,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
       0,  1561,   493,     0,   494,  1562,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   532,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   521,   522,   523,   524,     0,
       0,     0,     0,   119,   120,   121,   122,   123,   124,   125,
     126,     0,   127,   128,   129,     0,     0,     0,     0,     0,
       0,  1706,     0,     0,   131,   132,     0,   133,   134,   135,
       0,   137,   138,   139,   140,   141,     0,   143,   144,     0,
     145,   146,   147,   148,   149,   150,     0,     0,   151,   152,
     153,   154,   155,   156,   157,     0,   158,   159,   160,   161,
     162,     0,     0,     0,   164,   165,   166,   167,   168,   169,
       0,   171,   172,   173,     0,   174,   175,   176,   177,   178,
     179,     0,     0,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,     0,   196,
       0,   197,   198,   199,   200,   201,   202,     0,     0,   203,
     204,   205,   206,     0,     0,   207,   208,   209,   210,   211,
       0,   212,   213,   214,     0,   215,   216,   217,     0,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,     0,   230,     0,   231,   232,   233,   234,     0,   235,
       0,   236,     0,     0,     0,   239,   240,   533,     0,   243,
     244,   245,     0,   246,   247,   248,   249,     0,   250,   251,
     252,   253,   254,   255,   256,     0,   258,   259,   260,   261,
       0,   262,   263,   264,   265,   266,   267,   268,     0,   269,
       0,   271,   272,   273,   274,   275,   276,   277,   278,     0,
     279,     0,   280,     0,     0,   283,     0,   285,   286,   287,
     288,   289,   290,     0,     0,   291,     0,   293,     0,     0,
     295,   296,   297,   298,   299,   300,   301,   302,   534,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
       0,   326,   327,   328,   329,   330,     0,   331,   332,     0,
     334,     0,   335,   336,   337,   338,   339,   340,     0,   341,
     342,     0,     0,   343,   344,   345,     0,     0,   346,   347,
     348,     0,   350,     0,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,     0,     0,     0,
       0,   365,   366,   367,     0,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,     0,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   404,   405,     0,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,   423,     0,     0,   424,   425,   426,   427,
     428,     0,   430,   431,   432,     0,     0,   434,   435,   436,
     437,     0,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,   449,   450,   535,   452,   453,     0,     0,
     454,   455,     0,   456,     0,   458,   459,   460,   461,   462,
       0,   463,   464,   465,     0,     0,   466,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,   478,
       0,     0,   479,   480,   481,     0,     0,   482,   483,   484,
     485,     0,   486,   487,   488,   489,   490,   491,   492,   493,
       0,   494,     0,   496,   497,   498,   499,   500,   501,   502,
       0,     0,   503,     0,     0,   504,   505,   506,   507,   508,
     509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
     519,   520,   521,   522,   523,   524,  1508,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
    1509,     0,     0,     0,     0,  1510,   131,   132,     0,   133,
     134,   135,  1511,   137,   138,   139,     0,  1512,  1513,  1514,
    1515,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,  1516,  1517,   157,     0,   158,   159,
     160,   161,     0,     0,  1518,     0,  1519,   165,   166,   167,
     168,   169,  1520,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,  1521,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,  1522,   192,   193,  1523,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,  1078,
     210,   211,     0,   212,   213,   214,     0,  1877,   216,   217,
       0,   218,   219,   220,   221,     0,   223,   224,   225,   226,
     227,   228,     0,     0,   230,     0,   231,   232,  1524,   234,
       0,   235,     0,   236,  1525,     0,  1526,   239,   240,     0,
    1527,   243,   244,   245,     0,     0,     0,   248,   249,     0,
     250,   251,   252,   253,   254,   255,   256,  1528,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,  1529,     0,   272,   273,   274,   275,   276,  1530,
    1531,     0,  1532,     0,   280,  1533,  1534,   283,  1535,   285,
     286,   287,   288,   289,   290,     0,     0,   291,  1536,   293,
    1537,     0,   295,   296,   297,   298,   299,   300,   301,   302,
    1538,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,  1539,  1540,  1541,   327,   328,   329,     0,     0,   331,
     332,  1542,   334,     0,     0,   336,  1543,   338,   339,   340,
       0,   341,   342,     0,     0,   343,   344,   345,     0,     0,
     346,   347,     0,  1544,   350,  1545,     0,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,     0,  1546,   369,   370,     0,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,   384,   385,  1547,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,  1548,   407,
     408,   409,  1549,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,  1550,   424,   425,
     426,   427,   428,   429,  1551,   431,   432,     0,  1552,   434,
     435,  1553,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,  1554,   452,     0,
       0,     0,   454,   455,     0,   456,  1555,   458,   459,   460,
     461,   462,     0,   463,  1556,  1557,     0,     0,   466,   467,
       0,   469,     0,     0,   471,   472,  1558,   474,   475,   476,
     477,   478,  1559,     0,   479,   480,   481,  1560,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,     0,
    1561,   493,     0,   494,  1562,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   532,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   521,   522,   523,   524,     0,     0,
       0,     0,   119,   120,   121,   122,   123,   124,   125,   126,
       0,   127,   128,   129,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   131,   132,     0,   133,   134,   135,     0,
     137,   138,   139,   140,   141,     0,   143,   144,     0,   145,
     146,   147,   148,   149,   150,     0,     0,   151,   152,   153,
     154,   155,   156,   157,     0,   158,   159,   160,   161,   162,
       0,     0,     0,   164,   165,   166,   167,   168,   169,     0,
     171,   172,   173,     0,   174,   175,   176,   177,   178,   179,
       0,     0,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,     0,   196,     0,
     197,   198,   199,   200,   201,   202,     0,     0,   203,   204,
     205,   206,     0,     0,   207,   208,   209,   210,   211,     0,
     212,   213,   214,     0,   215,   216,   217,     0,   218,   219,
     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
       0,   230,     0,   231,   232,   233,   234,     0,   235,     0,
     236,     0,     0,     0,   239,   240,   533,     0,   243,   244,
     245,     0,   246,   247,   248,   249,     0,   250,   251,   252,
     253,   254,  1901,   256,     0,   258,   259,   260,   261,     0,
     262,   263,   264,   265,   266,   267,   268,     0,   269,     0,
     271,   272,   273,   274,   275,   276,   277,   278,     0,   279,
       0,   280,     0,     0,   283,     0,   285,   286,   287,   288,
     289,   290,     0,     0,   291,     0,   293,     0,     0,   295,
     296,   297,   298,   299,   300,   301,   302,   534,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,     0,
     326,   327,   328,   329,   330,     0,   331,   332,     0,   334,
       0,   335,   336,   337,   338,   339,   340,     0,   341,   342,
       0,     0,   343,   344,   345,     0,     0,   346,   347,   348,
       0,   350,     0,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,     0,     0,     0,     0,
     365,   366,   367,     0,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,     0,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,   404,   405,     0,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,     0,     0,   424,   425,   426,   427,   428,
     429,   430,   431,   432,     0,     0,   434,   435,   436,   437,
       0,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   535,   452,   453,     0,     0,   454,
     455,     0,   456,     0,   458,   459,   460,   461,   462,     0,
     463,   464,   465,     0,     0,   466,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,   478,     0,
       0,   479,   480,   481,     0,     0,   482,   483,   484,   485,
       0,   486,   487,   488,   489,   490,   491,   492,   493,     0,
     494,     0,   496,   497,   498,   499,   500,   501,   502,     0,
       0,   503,     0,     0,   504,   505,   506,   507,   508,   509,
     510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
     520,   521,   522,   523,   524,   532,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   119,   120,   121,   122,   123,   124,
     125,   126,     0,   127,   128,   129,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   131,   132,     0,   133,   134,
     135,     0,   137,   138,   139,   140,   141,     0,   143,   144,
       0,   145,   146,   147,   148,   149,   150,     0,     0,   151,
     152,   153,   154,   155,   156,   157,     0,   158,   159,   160,
     161,   162,     0,     0,     0,   164,   165,   166,   167,   168,
     169,     0,   171,   172,   173,     0,   174,   175,   176,   177,
     178,   179,     0,     0,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,     0,
     196,     0,   197,   198,   199,   200,   201,   202,     0,     0,
     203,   204,   205,   206,     0,     0,   207,   208,   209,   210,
     211,     0,   212,   213,   214,     0,   215,   216,   217,     0,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,     0,   230,     0,   231,   232,   233,   234,     0,
     235,     0,   236,     0,     0,     0,   239,   240,   533,     0,
     243,   244,   245,     0,   246,   247,   248,   249,     0,   250,
     251,   252,   253,   254,  2281,   256,     0,   258,   259,   260,
     261,     0,   262,   263,   264,   265,   266,   267,   268,     0,
     269,     0,   271,   272,   273,   274,   275,   276,   277,   278,
       0,   279,     0,   280,     0,     0,   283,     0,   285,   286,
     287,   288,   289,   290,     0,     0,   291,     0,   293,     0,
       0,   295,   296,   297,   298,   299,   300,   301,   302,   534,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,     0,   326,   327,   328,   329,   330,     0,   331,   332,
       0,   334,     0,   335,   336,   337,   338,   339,   340,     0,
     341,   342,     0,     0,   343,   344,   345,     0,     0,   346,
     347,   348,     0,   350,     0,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,     0,     0,
       0,     0,   365,   366,   367,     0,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,     0,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,   404,   405,     0,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,     0,     0,   424,   425,   426,
     427,   428,   429,   430,   431,   432,     0,     0,   434,   435,
     436,   437,     0,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   535,   452,   453,     0,
       0,   454,   455,     0,   456,     0,   458,   459,   460,   461,
     462,     0,   463,   464,   465,     0,     0,   466,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
     478,     0,     0,   479,   480,   481,     0,     0,   482,   483,
     484,   485,     0,   486,   487,   488,   489,   490,   491,   492,
     493,     0,   494,     0,   496,   497,   498,   499,   500,   501,
     502,     0,     0,   503,     0,     0,   504,   505,   506,   507,
     508,   509,   510,   511,   512,   513,   514,   515,   516,   517,
     518,   519,   520,   521,   522,   523,   524,   532,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   119,   120,   121,   122,
     123,   124,   125,   126,     0,   127,   128,   129,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   131,   132,     0,
     133,   134,   135,     0,   137,   138,   139,   140,   141,     0,
     143,   144,     0,   145,   146,   147,   148,   149,   150,     0,
       0,   151,   152,   153,   154,   155,   156,   157,     0,   158,
     159,   160,   161,   162,     0,     0,     0,   164,   165,   166,
     167,   168,   169,     0,   171,   172,   173,     0,   174,   175,
     176,   177,   178,   179,     0,     0,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,     0,   196,     0,   197,   198,   199,   200,   201,   202,
       0,     0,   203,   204,   205,   206,     0,     0,   207,   208,
     209,   210,   211,     0,   212,   213,   214,     0,   215,   216,
     217,     0,   218,   219,   220,   221,   222,   223,   224,   225,
     226,   227,   228,   229,     0,   230,     0,   231,   232,   233,
     234,     0,   235,     0,   236,     0,     0,     0,   239,   240,
     533,     0,   243,   244,   245,     0,   246,   247,   248,   249,
       0,   250,   251,   252,   253,   254,  2296,   256,     0,   258,
     259,   260,   261,     0,   262,   263,   264,   265,   266,   267,
     268,     0,   269,     0,   271,   272,   273,   274,   275,   276,
     277,   278,     0,   279,     0,   280,     0,     0,   283,     0,
     285,   286,   287,   288,   289,   290,     0,     0,   291,     0,
     293,     0,     0,   295,   296,   297,   298,   299,   300,   301,
     302,   534,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,     0,   326,   327,   328,   329,   330,     0,
     331,   332,     0,   334,     0,   335,   336,   337,   338,   339,
     340,     0,   341,   342,     0,     0,   343,   344,   345,     0,
       0,   346,   347,   348,     0,   350,     0,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
       0,     0,     0,     0,   365,   366,   367,     0,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,     0,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   404,   405,     0,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,     0,     0,   424,
     425,   426,   427,   428,   429,   430,   431,   432,     0,     0,
     434,   435,   436,   437,     0,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   535,   452,
     453,     0,     0,   454,   455,     0,   456,     0,   458,   459,
     460,   461,   462,     0,   463,   464,   465,     0,     0,   466,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,   478,     0,     0,   479,   480,   481,     0,     0,
     482,   483,   484,   485,     0,   486,   487,   488,   489,   490,
     491,   492,   493,     0,   494,     0,   496,   497,   498,   499,
     500,   501,   502,     0,     0,   503,     0,     0,   504,   505,
     506,   507,   508,   509,   510,   511,   512,   513,   514,   515,
     516,   517,   518,   519,   520,   521,   522,   523,   524,  3268,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   119,   120,
     121,   122,   123,   124,   125,   126,     0,   127,   128,   129,
       0,     0,     0,  3001,     0,     0,     0,     0,  3002,   131,
     132,     0,   133,   134,   135,  3003,   137,   138,   139,     0,
    1512,  3004,  1514,  1515,     0,   145,   146,   147,   148,   149,
     150,     0,     0,   151,   152,   153,   154,  1516,  1517,   157,
       0,   158,   159,   160,   161,     0,     0,  3005,     0,  3006,
     165,   166,   167,   168,   169,  3007,   171,   172,   173,     0,
     174,   175,   176,   177,   178,   179,     0,  3008,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,  1522,   192,
     193,  1523,   195,     0,   196,     0,   197,   198,   199,   200,
     201,   202,     0,     0,   203,   204,   205,   206,     0,     0,
     207,   208,  1078,   210,   211,     0,   212,   213,   214,     0,
     215,   216,   217,     0,   218,   219,   220,   221,     0,   223,
     224,   225,   226,   227,   228,     0,     0,   230,     0,   231,
     232,  1524,   234,     0,   235,     0,   236,  3009,     0,  3010,
     239,   240,  3011,  3012,   243,   244,   245,     0,     0,     0,
     248,   249,     0,   250,   251,   252,   253,   254,   255,   256,
    3013,   258,   259,   260,   261,     0,   262,   263,   264,   265,
     266,   267,   268,     0,   269,  3014,     0,   272,   273,   274,
     275,   276,  1530,  1531,     0,  1532,     0,   280,  3015,  3016,
     283,  3017,   285,   286,   287,   288,   289,   290,     0,     0,
     291,  3018,   293,  3019,     0,   295,   296,   297,   298,   299,
     300,   301,   302,  3269,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,  1539,  3021,  1541,   327,   328,   329,
       0,     0,   331,   332,  3023,   334,     0,     0,   336,  1543,
     338,   339,   340,     0,   341,   342,     0,     0,   343,   344,
     345,     0,     0,   346,   347,     0,  3025,   350,  3026,     0,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,     0,     0,     0,     0,   365,   366,     0,  3027,
     369,   370,     0,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,     0,   381,   382,   383,   384,   385,  1547,
     387,   388,   389,   390,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   404,
     405,  3028,   407,   408,   409,     0,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,     0,
    3029,   424,   425,   426,   427,   428,   429,     0,   431,   432,
       0,  3031,   434,   435,  1553,   437,     0,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
    3270,   452,     0,     0,     0,   454,   455,     0,   456,  3033,
     458,   459,   460,   461,   462,     0,   463,  1556,  1557,     0,
       0,   466,   467,     0,   469,     0,     0,   471,   472,  3034,
     474,   475,   476,   477,   478,     0,     0,   479,   480,   481,
    3036,     0,   482,   483,   484,   485,     0,   486,   487,   488,
     489,   490,     0,  1561,   493,     0,   494,  3037,   496,   497,
     498,   499,   500,   501,   502,     0,     0,   503,     0,     0,
     504,   505,   506,   507,   508,   509,   532,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   521,   522,   523,
     524,     0,     0,     0,     0,   119,   120,   121,   122,   123,
     124,   125,   126,     0,   127,   128,   129,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   131,   132,     0,   133,
     134,   135,     0,   137,   138,   139,   140,   141,     0,   143,
     144,     0,   145,   146,   147,   148,   149,   150,     0,     0,
     151,   152,   153,   154,   155,   156,   157,     0,   158,   159,
     160,   161,   162,     0,     0,     0,   164,   165,   166,   167,
     168,   169,     0,   171,   172,   173,     0,   174,   175,   176,
     177,   178,   179,     0,     0,   181,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,   194,   195,
       0,   196,     0,   197,   198,   199,   200,   201,   202,     0,
       0,   203,   204,   205,   206,     0,     0,   207,   208,   209,
     210,   211,     0,   212,   213,   214,     0,   215,   216,   217,
       0,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,     0,   230,     0,   231,   232,   233,   234,
       0,   235,     0,   236,     0,     0,     0,   239,   240,   533,
       0,   243,   244,   245,     0,   246,   247,     0,   249,     0,
     250,   251,   252,   253,   254,   255,   256,     0,   258,   259,
     260,   261,     0,   262,   263,   264,   265,   266,   267,   268,
       0,   269,     0,   271,   272,   273,   274,   275,   276,   277,
     278,     0,   279,     0,   280,     0,     0,   283,     0,   285,
     286,   287,   288,   289,   290,     0,     0,   291,     0,   293,
       0,     0,   295,   296,   297,   298,   299,   300,   301,   302,
     534,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,     0,   326,   327,   328,   329,   330,     0,   331,
     332,     0,   334,     0,   335,   336,   337,   338,   339,   340,
       0,   341,   342,     0,     0,   343,   344,   345,     0,     0,
     346,   347,   348,     0,   350,     0,   352,   353,   354,   355,
     356,   357,   358,     0,   360,   361,   362,   363,   364,     0,
       0,     0,     0,   365,   366,   367,     0,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
       0,   381,   382,   383,     0,   385,   386,   387,   388,   389,
     390,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,   404,   405,     0,   407,
     408,   409,   410,     0,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,     0,     0,   424,   425,
     426,   427,   428,   429,   430,   431,   432,     0,     0,   434,
     435,   436,   437,     0,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   535,   452,   453,
       0,     0,   454,   455,     0,   456,     0,   458,   459,   460,
     461,   462,     0,   463,   464,   465,     0,     0,   466,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,   478,     0,     0,   479,   480,   481,     0,     0,   482,
     483,   484,   485,     0,   486,   487,   488,   489,   490,   491,
     492,   493,     0,   494,     0,   496,   497,   498,   499,   500,
     501,   502,     0,     0,   503,     0,     0,   504,   505,   506,
     507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
     517,   518,   519,   520,   521,   522,   523,   524,  1810,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   119,   120,   121,
     122,   123,   124,   125,   126,     0,   127,   128,   129,     0,
       0,     0,  1509,     0,     0,     0,     0,  1510,   131,   132,
       0,   133,   134,   135,  1511,   137,   138,   139,     0,  1512,
    1513,  1514,  1515,     0,   145,   146,   147,   148,   149,   150,
       0,     0,   151,   152,   153,   154,  1516,  1517,   157,     0,
     158,   159,   160,   161,     0,     0,  1518,     0,  1519,   165,
     166,   167,   168,   169,  1520,   171,   172,   173,     0,   174,
     175,   176,   177,   178,   179,     0,  1521,   181,   182,   183,
     184,   185,   186,   187,   188,   189,   190,  1522,   192,   193,
    1523,   195,     0,   196,     0,   197,   198,   199,   200,   201,
     202,     0,     0,   203,   204,   205,   206,     0,     0,   207,
     208,  1078,   210,   211,     0,   212,   213,   214,     0,   215,
     216,   217,     0,   218,   219,   220,   221,     0,   223,   224,
     225,   226,   227,   228,     0,     0,   230,     0,   231,   232,
    1524,   234,     0,   235,     0,   236,  1525,     0,  1526,   239,
     240,     0,  1527,   243,   244,   245,     0,     0,     0,   248,
     249,     0,   250,   251,   252,   253,   254,   255,   256,  1528,
     258,   259,   260,   261,     0,   262,   263,   264,   265,   266,
     267,   268,     0,   269,  1529,     0,   272,   273,   274,   275,
     276,  1530,  1531,     0,  1532,     0,   280,  1533,  1534,   283,
    1535,   285,   286,   287,   288,   289,   290,     0,     0,   291,
    1536,   293,  1537,     0,   295,   296,   297,   298,   299,   300,
     301,   302,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,  1539,  1540,  1541,   327,   328,   329,     0,
       0,   331,   332,  1542,   334,     0,     0,   336,  1543,   338,
     339,   340,     0,   341,   342,     0,     0,   343,   344,   345,
       0,     0,   346,   347,     0,  1544,   350,  1545,     0,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,     0,     0,     0,     0,   365,   366,     0,  1546,   369,
     370,     0,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,     0,   381,   382,   383,   384,   385,  1547,   387,
     388,   389,   390,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,   404,   405,
    1548,   407,   408,   409,     0,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,   423,     0,  1550,
     424,   425,   426,   427,   428,   429,     0,   431,   432,     0,
    1552,   434,   435,  1553,   437,     0,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,   449,   450,     0,
     452,     0,     0,     0,   454,   455,     0,   456,  1555,   458,
     459,   460,   461,   462,     0,   463,  1556,  1557,     0,     0,
     466,   467,     0,   469,     0,     0,   471,   472,  1558,   474,
     475,   476,   477,   478,     0,     0,   479,   480,   481,  1560,
       0,   482,   483,   484,   485,     0,   486,   487,   488,   489,
     490,     0,  1561,   493,     0,   494,  1562,   496,   497,   498,
     499,   500,   501,   502,     0,     1,   503,     0,     0,   504,
     505,   506,   507,   508,   509,     2,     0,     3,     4,     0,
       0,     0,     0,     1,     0,     0,   521,   522,   523,   524,
       0,     0,     0,     2,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     0,     6,     0,     0,     0,     0,     8,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,    10,
       0,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,    11,     0,   755,     0,     0,     0,    10,     0,     0,
       0,     0,     0,     0,    13,     0,     0,     0,     0,    11,
       0,   755,     0,     0,     0,     0,     0,     0,     0,    14,
      15,     0,    13,     0,     0,     0,     0,     0,     0,     0,
     756,     0,     0,     0,     0,     0,    18,    14,    15,     0,
       0,     0,     0,     0,    19,     0,     0,     0,   756,     0,
       0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
       0,    22,    19,     0,     0,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
       0,     0,     0,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1483,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1483,     0,     0,     0,     0,
       0,     0,     0,    25,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
      27,    28,     0,     0,     0,     0,     0,    29,     0,     0,
      30,     0,     0,     0,     0,     0,     0,    26,    27,    28,
       0,     0,     0,     0,     0,    29,     0,     0,    30,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    31,     0,     0,     0,     0,     0,     0,     0,     0,
      32,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,    33,     0,    32,     0,
       0,     0,     0,    34,     0,     0,     0,    35,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,    36,     0,
       0,    34,     0,     0,     0,    35,     0,     0,     0,     0,
      37,     0,     0,     0,    38,     0,    36,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    37,     0,
       0,     0,    38,     0,    39,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    40,     0,
       0,     0,    39,     0,    42,     0,     0,     0,     0,    43,
       0,     0,     0,     0,   757,     0,    40,     0,     0,     0,
       0,     0,    42,     0,     0,     0,    44,    43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    44,     0,     0,     0,     0,     0,
      45,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   758,     0,     0,     0,    45,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    46
};

static const yytype_int16 yycheck[] =
{
       7,     0,     0,     0,     7,   845,    46,     0,     0,    16,
       0,   525,   895,   935,     0,   750,    23,     0,   907,   819,
      23,    16,  1004,     0,     0,   758,    37,     0,    20,    38,
      41,  1329,     7,  1733,    20,  1467,  1249,   869,   919,    37,
    1263,  1181,  1236,  1248,  1691,   940,  1098,  1581,    23,   995,
    1451,    87,    20,  1223,  1842,  1050,  1501,  1225,  2237,   995,
      23,   987,   995,  1620,  2041,   995,    25,   970,  1850,   987,
      91,  2292,    23,  1663,  2203,    91,  2205,  1306,   974,  1187,
    1607,    17,    89,    90,  1228,  1253,    89,    90,  2223,  2737,
    1644,  1645,   103,     0,  2698,     0,     0,   108,    45,   110,
       0,   112,   111,     0,  2698,   103,  2222,  1146,     0,  1354,
       0,     0,  1151,     0,    89,    90,  2759,   814,  2735,  2752,
    2042,   757,   751,   820,     0,  1107,    89,    90,     0,     0,
     758,  2563,  1013,     0,  2365,  2288,     0,  2619,    89,    90,
       0,    34,     0,  2169,  1869,  1695,     5,     0,    89,    90,
       0,     0,     0,     0,     0,  1863,     0,   116,     0,  1866,
    2654,   993,    63,  1838,  2658,     5,   907,  1751,   909,  2870,
     911,  1072,  1073,    13,    14,     0,  1663,    40,    11,     5,
       9,     4,  1753,    16,     5,  3090,     9,    10,  1089,     0,
     117,  2377,     5,    63,  1981,   776,   996,  2372,     5,     5,
       5,     5,  2376,     5,     5,     5,    13,    14,    13,    14,
       5,    13,    14,    46,     5,     5,    13,    14,    13,    14,
       5,   173,     5,     5,     9,     5,     9,   139,     5,  1051,
    2383,  1157,     5,     5,    13,    14,   913,     3,     4,     5,
    2017,    82,    26,     9,  2376,   172,     4,    80,   172,    45,
     890,     9,    93,  2030,   987,    11,   890,    45,   191,    74,
      16,   122,    30,   132,   119,  2929,  2975,   124,    90,  1191,
      38,     4,  3079,   864,  1106,   100,     9,  1272,   181,    11,
     107,    40,  1163,    15,    16,   104,  1281,  2440,  2441,   100,
    2443,   160,  3273,  1076,   288,     9,     3,   811,   107,   172,
     997,    60,    55,   290,   122,   809,   174,   129,   193,  1092,
    2509,  1237,  1009,    11,  1240,  1241,   276,    15,    16,    63,
       5,   172,   311,   122,   291,  3048,  1466,    34,    35,   291,
     117,  2906,   184,  2908,    80,  1157,    40,    40,   137,   296,
     314,   296,   132,  3077,   858,    82,   107,   106,    46,   166,
    1648,   117,   988,   137,   169,   392,    93,  1551,    64,  3093,
    2668,  1501,   181,  2492,  2009,  2010,  2011,   117,    74,  3200,
     160,  3202,    41,  1213,  1214,  3440,  1051,   304,   246,    30,
     120,     3,    80,     5,   369,  1217,  2612,  3409,  2614,   316,
     317,   318,  2874,   346,   164,   213,   370,   132,  3366,  3605,
    3368,   119,   383,  1951,  2192,    30,   275,  3466,  3467,    33,
     122,   280,   401,    38,  1236,  1337,   285,   108,    11,   172,
     360,   164,   485,    30,  1585,   279,  3030,   485,   162,   516,
    1313,    38,   385,  1594,  1982,    59,   523,  3085,  3516,   987,
    3646,   191,   193,   202,   507,   290,  2667,    11,  3096,   507,
     390,    15,    16,   219,   273,   195,   383,   126,   521,  3518,
     361,   231,    75,  2642,   171,   290,   173,    30,   421,  2777,
    3087,   356,   176,   176,  1369,   241,  3444,    30,   346,   290,
    3502,   132,    46,  3505,   521,   275,   308,    80,  1786,   341,
     280,   361,   251,   280,   421,   285,  3327,   457,    13,    14,
    3565,   213,   261,  3408,   238,  1557,  3313,  1329,   325,   433,
     294,  2664,   273,  2666,   273,   330,    80,   385,   370,  1023,
     473,  3230,    85,  3601,  2550,   275,   488,   521,   455,   272,
     329,    94,   521,   544,   521,   241,   521,   362,   549,   466,
    3249,   552,   516,   397,   525,   543,   305,   374,  3271,  3124,
     285,   362,  3216,   421,   521,   118,   483,   460,  3539,  2116,
     433,  1236,   280,  2345,  2346,  2347,  3300,   479,   525,   521,
     525,   440,    83,  2748,   358,  1215,   360,  3599,  1126,   132,
     507,  1215,   451,  1260,  2810,  2175,   510,  2773,   521,  2034,
     597,  2765,   433,  1174,   521,   280,   457,  1188,  3503,   523,
    1114,   360,   597,   460,   426,   473,   390,   462,   359,  1157,
    1780,   430,   421,  1028,  2591,  1516,  1517,   361,  1353,  1034,
    1849,   472,   418,  1358,   525,  1457,   385,  2826,   191,  1364,
     418,  1471,   400,  2765,  2787,   450,   524,   148,  1371,   457,
    1541,   204,  2169,    11,   470,  1943,   405,    15,    16,  3350,
     440,  1491,   167,  2207,  1329,   525,  3289,  1955,   483,  2243,
     523,   451,   521,  2450,   485,  2340,  1911,   106,  1881,  3273,
    2378,   530,   483,  2244,   524,   525,  2226,   521,  2385,  3273,
     524,   521,   524,  2408,   517,   485,   507,  1985,  2175,  1237,
     530,   520,  1240,  1241,  1992,   521,   433,   522,  1693,   524,
     521,  1602,  1603,  1926,   527,   528,   519,   507,   521,  2236,
     523,   522,   162,   524,   521,   521,   521,   521,   758,   521,
     521,   521,  2953,  3205,   521,  2946,   521,  3221,  2505,  1551,
     521,  1360,  3226,  2031,  1370,  3167,   521,  2035,   521,   521,
    1523,   521,   521,  1371,   521,   457,   512,   513,   521,   521,
     483,   758,  1584,  1585,   512,   513,  1637,  1638,  1639,  3407,
    1543,   517,  1594,   522,   471,   757,  2064,  1464,   521,   809,
    3504,   757,  3415,   519,   507,   400,  1608,   523,  3473,   512,
     513,  3414,   514,   515,   516,   517,   408,   409,   238,   800,
     758,   798,   120,   400,   108,   798,   275,  1580,   512,   513,
      53,   280,   809,   460,   346,   148,   809,   816,  1640,   816,
    2039,  2927,   251,   816,   512,   513,   514,   515,   516,   517,
     411,   266,   261,   798,  2801,    63,  1648,   108,  1376,  1377,
     460,  2613,   173,   792,   809,   798,    11,   287,   845,   846,
     861,   816,   798,   385,   407,   861,   809,   410,  2493,  2494,
    2495,  2496,   149,   816,  1994,   864,   516,   200,   809,   895,
     816,   340,   869,   523,   521,   824,  3514,   195,   809,  3564,
     881,    46,   421,   420,   132,   884,  1551,   322,   192,   421,
     879,   879,   879,  3500,   475,   921,   879,   879,  1814,   879,
     849,   521,   435,   879,  2034,  1890,   879,   245,  1824,   867,
     521,  1827,   879,   879,   201,    80,   879,  2933,  2885,   483,
     917,   918,   459,  2835,   921,   922,  2838,   250,  2840,  2509,
    1809,   932,  3075,   870,   177,  1660,   885,     4,  2716,   162,
    2718,   473,     9,   507,   167,  3539,   947,   948,   949,   950,
    3557,   194,   275,   486,     4,  3539,   199,   227,  2193,     9,
     514,   515,   516,   517,   847,   848,   510,   850,  2980,   852,
    1843,  1844,  1845,   311,  1786,  2004,  2988,   974,   309,   523,
       0,   178,   879,  1648,   879,   879,  1871,  3625,   471,   879,
     987,   295,   879,  1023,   237,   992,   993,   879,   999,   879,
     879,   998,   879,   273,  1001,  1002,   988,  1004,  1005,  1006,
    1007,  1927,   988,   879,   940,   238,  1909,   879,   879,  1927,
    1913,  3232,   879,  1916,  1021,   879,  1023,   275,  1021,   879,
    1023,   879,  1918,  2550,  2578,  1032,   879,   285,   987,  1032,
     879,   879,   879,   879,   241,   273,   995,  1778,   510,   485,
     214,   172,  1049,  1050,  1051,   178,  1021,     4,  1023,   521,
      26,  1599,     9,   401,   287,   396,    32,  1032,  1021,  2491,
    1023,   507,   174,  1611,  1071,  1613,   203,  1107,  1809,  1032,
    1021,  2472,  1023,    71,    72,   521,   119,  3212,   525,    37,
    1021,  1032,  1023,  1090,    42,  1820,   275,    37,  1829,  2387,
    1825,  1032,    82,  1834,  1642,  1102,  1103,  1104,     5,  1106,
    1107,  2209,  1109,    93,  2212,   453,  2319,   356,   241,  2897,
     132,  1786,  1626,   393,  1109,   519,    82,     8,  2341,   523,
      11,  1943,  2351,   361,    15,    16,  2266,    93,    19,    20,
      21,   342,   519,  1955,   246,  1142,   523,   147,   160,   526,
     521,  3118,   395,   101,   512,   513,   514,   515,   516,   517,
     259,   260,   390,  1160,  1161,   519,    74,  1116,  1990,   523,
    2328,   137,  3383,  1985,   207,    37,   520,  1126,   227,   245,
    1992,  2698,   526,   521,   521,  1196,  1197,   457,  1199,  1188,
    1196,  1197,    74,  1199,   520,   316,   317,   318,    80,  1148,
     526,  1198,   108,   519,  1927,  1202,  1203,   523,  1157,   117,
     356,    93,  1750,  1751,   381,  1212,  1213,  1214,   218,  2031,
    1217,  1222,   381,  2035,   273,   173,   203,  2199,   425,  2041,
     427,    13,    14,   173,  1235,   117,  2524,   119,   522,  1236,
     273,   525,   275,   252,   346,   311,  2826,   374,   425,   438,
     427,   374,  2064,  1252,  2076,  1256,   453,   425,   385,   427,
    2394,   209,   383,  1934,    13,    14,  2400,  1938,   280,   209,
    1941,   522,   421,   285,   525,  1272,  1814,   225,  1943,   473,
     379,   380,   167,   385,  1281,   225,  1824,   235,  1033,  1827,
    1955,   378,  1037,   342,   421,   235,   296,  3069,   847,   848,
     421,   850,   425,   852,   427,   162,    13,    14,   374,  1306,
     167,   173,  1261,   245,  1456,  2862,  1458,  1459,   199,   421,
    1985,   269,   381,  1324,   519,   207,   521,  1992,   294,  1330,
     453,  2204,  1329,  2155,   455,   401,    13,    14,   832,   833,
     834,   222,   290,   837,   393,   466,   473,   209,  1345,   519,
     521,   521,     6,   523,   172,  1328,    10,  1354,    13,    14,
    1345,  1328,  1328,   225,    18,  1328,  2031,   275,   316,  2804,
    2035,   473,   280,   235,  1371,   323,  2041,  2507,    32,   311,
    2510,   238,    36,   522,    13,    14,   525,   453,  1370,  1927,
    2914,  1388,   358,   275,  1370,    26,  1393,   521,   280,  2064,
     521,    32,  2295,  1388,  2297,   483,  3617,   485,   457,   522,
    2698,   292,   525,  1371,   514,   522,  2933,   365,   525,   425,
     521,   427,   330,   521,   390,   365,   522,   521,   440,   525,
     287,   522,   521,  3602,   525,  3604,   384,   521,  1387,   451,
     348,  2271,   374,   425,   384,   427,  1443,  1444,   330,   449,
    3569,   521,  1449,   522,  1451,   521,   525,   521,  1451,  1456,
    1457,  1458,  1459,  2375,   522,  3584,   348,   525,   521,   401,
    2298,    26,  2300,  1474,  1471,  1472,  3645,    32,  2681,   522,
     522,   521,   525,   525,  1481,  2680,  1451,  1484,  1481,    13,
      14,  1484,  1489,   245,  1491,  1492,  1489,   463,  1451,  1492,
    1497,  2714,   526,   365,  1497,  2665,   137,   455,   522,   507,
    2048,   525,    26,  2555,  2556,  2664,  1481,  2666,    32,  1484,
    3639,   453,   384,   522,  1489,  3644,   525,  1492,  1481,   504,
     522,  1484,  1497,   525,   521,  2730,  1489,    59,   522,  1492,
    1481,   525,   450,  1484,  1497,  2679,   224,  2681,  1489,   147,
    1481,  1492,   460,  1484,  1551,   523,  1497,   522,  1489,   311,
     525,  1492,   178,   887,   162,   889,  1497,   522,   450,   167,
     525,   189,   190,   522,   290,  2387,   525,   522,   460,    26,
     525,  3359,   137,  3361,   504,    32,   171,  1584,  1585,   521,
     525,  2563,  1581,  1581,  1581,  2531,  1593,  1594,  1581,  1581,
     521,  1581,   172,  2425,  1601,  1581,  2532,  2533,  2534,  2532,
    2533,  1608,  2532,   522,    13,    14,   525,   522,  1615,   245,
     218,   522,   374,   137,   525,   241,   522,   508,   509,   510,
     522,   512,   513,   514,   515,   516,   517,   295,  1635,  1636,
     238,   259,   260,  1640,   522,   522,  1643,   525,   525,   401,
     172,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,    13,    14,   294,  1661,  1662,  1663,  1693,  2206,  1666,
    1663,   522,  1657,  1670,   525,    59,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,   311,    26,  1684,   522,   287,
     137,   525,    32,  2418,  1691,   521,  1693,   522,   296,   315,
     525,   453,   422,  2426,  2242,  2243,   504,  1708,  2996,  1710,
     522,    26,  2524,   525,  1711,   522,   522,    32,   525,   525,
     224,  1722,  2387,   354,   152,  1736,   522,   358,   522,   525,
    1736,   525,   522,   522,  3371,   525,   525,   522,   522,   294,
     525,   525,  1739,   522,   522,   354,   525,   525,   374,    13,
      14,  1709,  1701,  1750,  1751,   152,  3273,   152,   374,   390,
    2631,   379,   380,  1764,   152,   381,  1019,    13,    14,   521,
     152,  1024,  1025,  1026,   108,   401,  1725,  1726,    40,  2591,
     294,    13,    14,    13,    14,    13,    14,  2947,  1041,  1786,
     522,  2994,  1045,   421,   316,   317,   318,   137,  1795,   354,
      13,    14,  1799,   358,    13,    14,    13,    14,   521,   425,
    1795,   427,    13,    14,  1799,    13,    14,    13,    14,    13,
      14,   275,   137,    13,    14,    40,  2656,   453,    13,    14,
      13,    14,   463,    13,    14,   390,   473,   453,   369,   370,
     354,   369,   370,   152,   358,  1842,  3030,   294,    89,  2722,
    2762,   449,  1849,   369,   370,  1852,  1853,  2742,   152,  2524,
    3073,   383,   369,   370,  1865,  1866,  1867,  1868,   245,  1870,
     487,     8,   523,  3161,    11,   152,   390,  3567,    15,    16,
    2702,  3571,    19,    20,    21,   152,  2698,  2780,  1837,   290,
     245,   263,   264,  1890,   356,   521,   379,   380,  1886,   421,
     465,   466,  2405,  2406,   433,  1854,  1855,   354,   463,   147,
     521,   358,   522,  2898,  1911,  2228,  2229,  3579,  3580,  3611,
    3612,  1918,  1919,   423,   162,   521,  2591,  3318,   521,   167,
    1927,  1160,  1161,   455,   311,   521,  3626,   220,   225,   300,
     521,   225,   521,   390,   466,   225,  1943,   297,    40,   463,
    1947,  1948,   521,  1950,   294,   236,   311,     5,  1955,  1956,
    1957,  1958,  1959,  1960,  1961,     5,   326,  1964,  1965,  1966,
    1967,  1968,  1969,  1970,  1971,  1972,  1973,   521,  1927,   294,
     218,   521,  1979,  1980,  1933,  3273,  1983,   521,  1985,  2801,
    2528,  2529,     5,  1990,   521,  1992,     5,   374,   521,   521,
     238,     5,   521,     5,   521,   484,     9,  2008,   521,   521,
     302,   104,   460,   522,   354,   525,   463,  2014,   358,   374,
     525,  2018,  3539,  2020,   401,  2018,   390,  2024,   220,   167,
     287,  2024,   167,  2698,  2031,   285,    59,   236,  2035,   354,
    2037,   521,  2039,   358,  2041,   178,   401,   433,   147,   287,
     390,    93,   525,  2018,   433,   433,   266,  1051,   296,  2024,
      59,    59,   199,   162,   433,  2018,   526,  2064,   167,  2985,
     203,  2024,   222,  2885,   433,   390,   453,  2018,   483,  2076,
    2077,   381,  3473,  2024,  1051,   222,   433,  2018,   152,   100,
     521,  3286,    40,  2024,   275,   521,   275,   275,   453,   275,
     275,   199,  3524,    55,  2997,  2998,  2831,   152,   241,   172,
     523,    13,   522,   522,   172,   522,   522,   525,  2115,   218,
     522,   521,  2119,   463,  3515,  2155,   522,  2124,  2125,   522,
     522,   480,   521,   282,   225,   225,  2801,   282,     8,   238,
     521,    11,   525,   523,   521,    15,    16,   470,   463,   523,
     102,   521,    39,  2150,  2151,   292,   521,   479,  2155,   521,
    2698,  3133,   295,   521,   521,   521,   521,     9,   431,   356,
     431,   123,    11,  3564,  2171,   521,    46,  2174,  2175,  2176,
     525,   520,  2175,    53,  2996,   526,   431,   525,   287,   141,
     521,   280,  3405,   145,    37,  2192,  2193,   296,   531,    42,
     433,   181,  2199,   163,   172,  2202,   525,   227,   522,  2202,
      80,   449,  3342,    40,   525,   266,   168,   460,  3030,   171,
    2885,  2218,   218,   393,   291,  2218,   227,   314,   314,   525,
     525,    82,   181,   220,   522,   187,   521,  2202,  2235,   227,
     275,  2966,  1236,   227,    59,    59,    59,    59,   282,  2202,
     296,  3539,   282,  2218,   522,  2252,  2253,   108,   101,   335,
     288,  2202,   473,   521,   178,  2218,   521,   152,   152,  1236,
     152,   483,  2269,   152,  2271,   145,   525,  2218,     5,    40,
     152,   519,     3,  2280,   522,   523,   525,   521,     3,   203,
     275,    40,   425,   290,   427,   290,    59,  1051,  2836,   172,
      11,  2298,  2299,  2300,    40,   167,  3118,   177,   522,   167,
     181,     3,     3,  2298,  2299,  2300,   522,   450,   522,   522,
     453,   521,    39,   174,   194,   433,   521,   241,   280,   199,
     173,  2996,   521,   519,   522,  1329,   288,   519,  3250,  3542,
     531,   525,   354,   520,   504,  2342,   148,   504,   433,  3161,
     449,  2381,   203,   433,  2351,   433,  2305,   522,   310,   522,
     504,   523,  1329,   522,   522,  3030,   209,   237,   522,   522,
    2371,   508,   509,   510,   522,   512,   513,   514,   515,   516,
     517,   295,   225,  2384,  2385,  2386,   172,   523,   340,   521,
    2387,  3114,   235,   522,   433,   246,   521,  2370,  2399,   126,
     127,  2402,   521,  2370,  2370,   521,   521,  2370,   155,   480,
    2407,  2412,    40,  2410,  2363,    59,   525,   472,   506,   457,
     519,   525,   292,   291,   523,  2410,   269,   510,  2425,  2426,
     291,   266,  2381,   244,    59,    59,  2940,  2434,   275,   433,
     521,   203,   152,   152,   152,   172,   521,  2985,   521,  2434,
     433,   433,  2990,  3118,   433,   433,   522,    40,   356,   521,
     374,  3273,   521,   288,   525,   522,   290,   483,   521,    40,
     152,   280,   522,   316,   530,  2472,   172,  2426,   521,  2472,
     323,   522,  1236,    59,   521,   186,   522,  2436,   167,  2438,
     522,    80,   519,  2442,   143,  2444,  3161,  2498,  2499,  2500,
    3038,  3039,  3373,   522,   522,   522,  3328,  2472,  3330,   199,
    3340,   425,  2509,   427,   172,   525,   522,   525,   301,  2472,
     172,   521,   365,   374,   250,   395,   362,  2524,   181,   522,
     444,   521,   521,  2563,   385,   526,   450,  2536,   291,   453,
     521,   384,   152,   176,  2541,   444,   522,   522,   525,   521,
    2547,  2548,   525,  3343,   523,  3345,   522,  1551,  3530,   522,
     522,   522,   521,  3475,   521,    40,  2563,   522,   521,   525,
     421,  2601,    86,    40,    40,  1329,   172,   460,   525,   521,
    2606,   522,  2579,   522,  1551,  2582,   482,  2584,   199,   316,
     317,   318,  3465,   444,  2591,  2592,   522,   520,  2595,  2596,
     520,   525,   466,  2600,  2601,  3484,   522,   522,  3273,   522,
    2607,   522,   455,   525,   290,   510,    59,   522,   522,   522,
     483,   522,   473,   205,   117,    40,  2656,  2624,  3458,   521,
     227,    88,   192,   280,   280,   505,   510,  2634,   433,    40,
    2628,   522,   512,   513,   514,   515,   516,   517,   523,  2650,
     483,   433,   304,   520,  1648,   275,   383,   523,   523,  2656,
     520,   107,     7,     8,   316,   317,   318,   394,    13,   523,
     523,   523,   521,   523,    19,   523,   523,   523,    23,   523,
      25,  1648,   523,   523,    29,    30,    31,   421,   522,    34,
     417,   523,    37,    38,   421,   523,    41,   523,  2695,    44,
      45,  2698,  2699,   523,  2701,  2702,  2703,   523,     9,   290,
    2695,   337,   355,   523,  2699,   523,  2701,   523,    40,  2716,
     523,  2718,  3260,  3261,   523,   523,   523,  3539,   455,   523,
     523,   383,   523,   523,   523,  3273,   523,    26,    60,   466,
     521,  2771,  2743,    32,    89,    90,   523,   522,  2736,  2698,
     522,    40,   521,   521,   521,   525,   483,   522,   103,   525,
      59,   199,   522,   108,   109,   110,   111,   112,  2741,   421,
     520,    60,   192,   525,  2741,  2741,  2764,  2774,  2741,   522,
     507,  1002,   522,  2732,   106,   465,    40,  3512,   525,    91,
     522,   348,  1786,  2823,   521,    40,   521,  1551,   152,   523,
     522,  2798,   152,   455,  2801,   124,    60,    40,   522,   370,
    2811,  2812,  2813,  2814,   466,   370,    40,   106,   522,  1786,
      40,  2818,  2819,   521,   521,   525,  2823,   521,   460,  2826,
     310,   483,   521,   280,   191,   249,   444,   460,   521,    74,
     293,    80,    74,     9,   522,   522,   521,   372,   137,  1051,
     522,   520,   106,   520,   176,   507,  2853,    59,   133,    93,
     510,   273,   290,    40,   444,   521,   293,   293,   522,   521,
     521,   465,   205,   290,  3539,   390,  2873,   522,   122,   290,
     202,   522,  2879,  2880,   522,   457,   369,  2884,  2885,   148,
      25,    36,  2889,  2923,  1648,  2892,  2893,   369,   298,  2990,
    2897,  2898,  2695,  2682,  2901,   879,  2293,  1807,  2905,  1710,
    2369,  1855,  2905,   202,  2434,   793,  3114,  3490,  2732,  2916,
    3594,  3243,  3543,  3552,  3587,  2914,  2914,  2914,    98,   251,
    1223,  2914,  2914,  3437,  2914,  3302,  2286,  2299,  2914,   261,
    2905,  3541,  2674,  2753,  3550,  3538,  2701,  2283,   202,  1943,
    2405,   273,  2905,  2406,  1325,  3108,   126,   127,  1918,  2633,
    2909,  1955,   251,  2960,  2905,  2413,  1353,  1371,  3435,  3375,
    2632,  2968,   261,  2974,  2905,  3515,  1943,  3469,  3616,   885,
    2914,  2269,  2703,   305,   273,  2235,  1206,  1180,  1955,  1020,
    2987,  1985,  1775,  2491,  1020,  3524,  2252,   251,  1992,  2996,
    1205,  3539,   172,  1739,  3446,   294,  3332,   261,  1774,    23,
    2218,  1208,  2029,  3156,  2472,  2471,   305,  2516,  1985,   273,
    2826,  3264,  2044,  1927,  2996,  1992,   997,  3450,   995,  1927,
     995,   995,  1786,  3030,  1236,  3449,  1927,  2031,   360,  2548,
    2126,  2035,  2175,   126,   127,   995,  2236,  2041,  2078,   995,
     995,   305,   995,  2172,  1472,   995,  2128,   995,  2575,  1709,
    2916,  2037,    -1,   385,  2031,   354,    -1,    -1,  2035,   358,
    2064,   360,  2876,    -1,  2041,    -1,   856,    -1,    -1,    -1,
      -1,    -1,  3079,   405,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,  3079,    -1,   385,  2064,    -1,    -1,
    3088,   390,    -1,  3133,  3101,    -1,   360,    -1,    -1,    -1,
      -1,  3108,    -1,    -1,    -1,    -1,   405,  3114,    -1,    -1,
    3117,  3118,    -1,  3108,    -1,    -1,    -1,  1329,    -1,    -1,
       8,   385,    -1,    11,    -1,  3084,  3133,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,   316,   317,   318,    -1,
      -1,   405,    -1,    -1,    -1,    -1,    -1,    37,    36,    -1,
      -1,    -1,    42,    -1,  3161,  3114,    -1,    -1,    -1,    -1,
    3167,    -1,    -1,    -1,   463,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3184,  3185,  1943,
      -1,  3188,    -1,  3190,    -1,    -1,    -1,    -1,    -1,   544,
      -1,  1955,    -1,    -1,   549,    -1,    -1,   552,    -1,    -1,
      -1,     8,    -1,   383,    11,   560,     0,    -1,    15,    16,
    3217,   101,  1443,  1444,   394,    -1,    -1,    -1,  1449,    -1,
      -1,  1985,    -1,   316,   317,   318,    20,    -1,  1992,    23,
      -1,    -1,    -1,    -1,  3241,    -1,    -1,   417,    -1,    46,
      -1,   421,  3201,    37,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,   441,    -1,    -1,    15,    16,  3273,  2031,    19,    20,
      21,  2035,    -1,    80,    -1,   455,    -1,  2041,    -1,    -1,
      -1,    -1,  3293,   173,    -1,    36,   466,    -1,    -1,    -1,
     383,   181,    -1,  3291,    -1,    89,    90,    91,    -1,    -1,
    2064,   394,    -1,   483,  3315,    -1,  3313,    -1,    -1,   103,
      -1,  3318,    -1,    -1,  3273,  3318,    -1,    -1,  3313,   209,
      -1,  3328,    -1,  3330,   417,  3332,    -1,   507,   421,  3336,
      -1,  3338,    -1,  3340,   222,   225,    -1,    -1,   145,  1551,
      -1,   521,    -1,  3318,    -1,   235,    -1,  3354,    -1,    -1,
      -1,    -1,  3359,    -1,  3361,  3318,    -1,    -1,    -1,    -1,
      -1,    -1,   455,    -1,  3371,    -1,    -1,    -1,    -1,    -1,
     177,  3382,    -1,   466,  3372,    -1,  3374,  3384,    -1,   269,
      -1,    -1,  3389,  2387,    -1,    -1,    -1,   194,    -1,  3384,
     483,    -1,   199,    -1,    -1,   750,   751,   752,    -1,    -1,
     290,  3412,    -1,    -1,   292,    -1,    -1,    -1,    -1,     8,
    2387,    -1,    11,    -1,   507,  3413,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,   316,    -1,   521,  3436,
     237,  3429,    -1,   323,    -1,    -1,  1648,   792,   793,  3446,
      -1,    -1,    -1,   798,    -1,   800,    -1,  3406,    -1,    -1,
      -1,  3458,    -1,    -1,   809,    -1,    -1,    -1,   813,   814,
      -1,   816,    -1,    -1,   819,   820,  3473,    -1,    -1,    -1,
    3473,   222,    -1,    -1,    -1,   365,    -1,   832,   833,   834,
      -1,    -1,   837,    -1,  3491,   292,    -1,    -1,    -1,    -1,
     845,   846,   847,   848,   384,   850,    -1,   852,  3473,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3515,   864,
    3473,    -1,  3515,    -1,    -1,   870,    -1,    -1,    -1,    -1,
    2524,    -1,    -1,  3530,    -1,    -1,   881,    -1,    -1,   884,
     885,    -1,  3539,    -1,  3541,    -1,    -1,    -1,    -1,    -1,
    3515,   292,    -1,    -1,    -1,    -1,  3541,  2524,    -1,    -1,
      -1,    -1,  3515,    -1,    -1,    -1,    -1,  3564,  3556,    -1,
      -1,  3564,    -1,    -1,    -1,   455,    -1,    -1,    -1,    -1,
     460,  3578,  3579,  3580,  1786,    -1,    -1,   932,   933,    -1,
    3539,    -1,    -1,    -1,  3582,    -1,    -1,  2591,   395,  3564,
      -1,    -1,   947,   948,   949,   950,   951,    -1,  3605,     8,
      -1,  3564,    11,    -1,    -1,    -1,    15,    16,    -1,   964,
      19,    20,    21,    -1,  2591,    -1,    -1,    -1,    -1,    -1,
     508,   509,   510,  2387,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3646,
      -1,   996,   997,    -1,   999,    -1,    -1,  1002,    -1,    -1,
      -1,    -1,    -1,  1008,  1009,    -1,    -1,    -1,    -1,    -1,
    1015,    -1,    -1,     8,    -1,    -1,  1021,    -1,  1023,    -1,
      15,    16,    -1,    -1,    19,    20,    21,  1032,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1042,    -1,    -1,
      -1,    -1,    -1,   292,  2698,    -1,    -1,    -1,   505,    -1,
      -1,    -1,    -1,    -1,  1059,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2698,    -1,    -1,    -1,  1956,  1957,  1958,  1959,  1960,
    1961,  1943,    -1,  1964,  1965,  1966,  1967,  1968,  1969,  1970,
    1971,  1972,  1973,  1955,    -1,    -1,    -1,    -1,   172,   543,
      -1,    -1,    -1,    -1,    -1,    -1,  1111,   508,   509,   510,
    2524,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,  1985,     8,    -1,     0,    11,    -1,    -1,
    1992,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2801,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1165,    -1,    -1,   222,    -1,    -1,    -1,    -1,    -1,  2031,
      -1,    -1,    -1,  2035,  2801,  1180,  1181,  2591,    -1,  2041,
      -1,    -1,    -1,  1188,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,    19,
      20,    21,  2064,    -1,    13,    -1,    -1,  1212,  1213,  1214,
      19,    -1,    -1,    -1,    23,    -1,    36,  1222,  1223,    -1,
      -1,    30,    -1,    -1,    -1,    -1,   100,    -1,   151,    -1,
    1235,  2885,    -1,   292,    -1,    44,    45,    -1,    -1,    -1,
      -1,    -1,   316,   317,   318,    -1,    -1,  1252,    -1,   172,
      -1,  1256,    -1,    -1,    -1,    -1,    -1,  1262,  2885,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,  2150,
    2151,    -1,    -1,   147,    -1,    -1,    -1,    -1,    -1,    -1,
      89,    90,    -1,    -1,  2698,    -1,    -1,    -1,   162,    -1,
      -1,    -1,    -1,   167,    -1,    -1,  1051,   292,   172,    -1,
     109,    -1,    -1,    -1,    -1,    -1,    -1,   181,    -1,   383,
      -1,    -1,   186,   757,   758,    -1,    -1,  1322,    -1,  1324,
      -1,    -1,    -1,    -1,    -1,  1330,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,  1344,
      -1,    -1,  2996,    -1,   218,    -1,    -1,   421,  1353,    -1,
      -1,    -1,    -1,  1358,   798,  1360,  1361,    -1,  1363,  1364,
      -1,    -1,    -1,    -1,   238,   809,    -1,     8,    -1,  2996,
      11,    -1,   816,    -1,    15,    16,  3030,  1002,    19,    20,
      21,   455,    -1,    -1,    -1,    -1,    -1,  2801,    -1,    -1,
      -1,    -1,   466,   316,   317,   318,    -1,    -1,    -1,    -1,
      -1,    -1,   222,  3030,    -1,    -1,    -1,    -1,   292,   483,
      -1,    -1,    -1,   287,    -1,    -1,   290,   861,    -1,    -1,
      -1,    -1,   296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   507,    -1,   879,    -1,    -1,  1443,  1444,
      -1,    -1,    -1,    -1,  1449,    -1,  1451,   521,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,  1464,
     383,  1466,  1467,   337,  3118,    -1,  1471,  1472,    -1,  1474,
      -1,  2885,   292,    -1,    -1,    -1,  1481,    -1,    -1,  1484,
      -1,  1236,    -1,    -1,  1489,    -1,  1491,  1492,   362,    -1,
      -1,  3118,  1497,    -1,  1499,    -1,  1501,    -1,   421,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3161,    -1,    -1,
      -1,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,  2387,    -1,    -1,    -1,    -1,
      -1,    13,   455,    -1,  3161,    -1,   178,    19,    -1,    -1,
      -1,    -1,    -1,   466,   988,    -1,    -1,   421,    30,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     483,   203,    44,    45,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1329,   449,    -1,  1021,  1203,  1023,
      -1,   222,  2996,    -1,   507,    -1,   460,  1212,  1032,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,   241,
      -1,    -1,  1607,    -1,    -1,    -1,   480,    -1,   482,   483,
      -1,    -1,    -1,    -1,    -1,  1620,  3030,    -1,    -1,  3273,
      -1,    -1,    -1,  1067,   508,   509,   510,   109,   512,   513,
     514,   515,   516,   517,    -1,  1079,    -1,    -1,    -1,  1002,
      -1,    -1,    -1,    -1,    -1,   519,  3273,    -1,   522,   523,
     524,   292,    -1,   295,    -1,  1660,    -1,    -1,  1663,    -1,
      -1,    -1,  2524,  1107,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   315,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1691,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,  1706,    -1,  1708,  3118,  1710,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2595,  2596,    -1,  1722,    -1,  1724,
    1725,  1726,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2591,
      -1,    -1,   374,    -1,  1739,    -1,    -1,    -1,    -1,   381,
      -1,    -1,   151,    -1,    -1,    -1,    -1,  3161,    -1,    -1,
      -1,   560,  1196,  1197,    -1,  1199,    -1,    -1,    -1,  1764,
      -1,  1766,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1780,  1781,    -1,    -1,    -1,
      -1,    -1,    -1,   425,    -1,   427,  1791,  1792,  1793,  1794,
      -1,  1796,    -1,    -1,    -1,    -1,  1551,    -1,    -1,    -1,
      -1,  1806,   444,  1808,    -1,    -1,    -1,    -1,   450,    -1,
      -1,   453,    -1,    -1,    -1,  1820,  1821,    -1,  1443,  1444,
    1825,  1826,    -1,    -1,  1449,  1830,  1831,  1832,  1833,    -1,
    1835,  1836,    -1,    -1,    -1,    -1,  2698,    -1,    -1,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1212,
      -1,  1856,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3273,
    1865,  1866,  1867,  1868,  1869,  1870,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,  1884,
      -1,    -1,    -1,    -1,    -1,  3539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1648,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1906,    -1,    -1,    68,    69,    -1,   316,   317,   318,
      -1,    -1,  3539,    -1,    -1,    -1,    -1,  2798,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1370,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2801,
      -1,    -1,   751,   752,    -1,   109,   110,    -1,    -1,   113,
     114,  1956,  1957,  1958,  1959,  1960,  1961,    -1,    -1,  1964,
    1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,     8,
      -1,    -1,    11,    -1,   383,    -1,    15,    16,    -1,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,  1994,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     809,    -1,    -1,  2008,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,   421,  2018,    53,    -1,    -1,    -1,    -1,  2024,
      -1,    -1,    -1,  2885,  2029,   189,   190,    -1,    -1,  2034,
      -1,  1786,    -1,    -1,    -1,    -1,    -1,  1481,  2043,  2044,
    1484,    80,    -1,    -1,    -1,  1489,   455,    -1,  1492,    -1,
      -1,    -1,    -1,  1497,    -1,    -1,    -1,   466,    -1,    -1,
      -1,   870,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,   560,    -1,
    1443,  1444,    -1,    -1,    40,    -1,  1449,  2968,    -1,   253,
     254,   255,   256,   257,   258,   259,   260,    -1,   507,   263,
     264,    -1,    -1,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      -1,  2116,   521,    -1,  1739,    -1,  2121,    -1,    -1,    -1,
      -1,  2126,    -1,    -1,    -1,  3539,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2996,    -1,    -1,  1581,   177,    -1,
      -1,    -1,    -1,    -1,    -1,  2150,  2151,    -1,    -1,    -1,
     106,   107,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
     199,   117,    -1,    -1,  2169,    -1,    -1,    -1,  3030,    -1,
    2175,    -1,    -1,    -1,   338,   339,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,  1943,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2202,   237,    -1,
    1955,    -1,    -1,    -1,    -1,    -1,  1015,    -1,    -1,  2214,
      -1,    -1,  1021,  2218,  1023,   379,   380,  2222,    -1,  1663,
     176,    -1,    -1,  1032,    -1,    -1,    -1,    -1,    -1,    -1,
    1985,    -1,    -1,  1042,    -1,    -1,  3117,  1992,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,   202,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,  3118,    -1,    -1,    -1,
      -1,  2266,    -1,    -1,  2269,    -1,  2271,  2272,    -1,    -1,
     752,    -1,    -1,    -1,    -1,    -1,  2031,    -1,    -1,    -1,
    2035,    -1,    -1,  2288,    -1,    -1,  2041,    -1,    -1,    -1,
      -1,    37,  1736,    -1,    -1,   251,    42,    -1,    -1,  3161,
      -1,    -1,  1111,    -1,    -1,   261,    -1,    -1,    -1,  2064,
      -1,    -1,    -1,   477,   478,    -1,    -1,   273,    -1,   275,
      -1,    -1,    -1,    -1,    -1,    -1,  1689,    -1,    -1,    -1,
      -1,  1956,  1957,  1958,  1959,  1960,  1961,   501,   502,  1964,
    1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,   305,
      -1,    -1,    -1,    -1,    -1,   101,   395,    -1,    -1,    -1,
    2365,    -1,    -1,    -1,    -1,    -1,  2371,    -1,    -1,    -1,
      -1,  1180,  1181,    -1,    -1,    -1,  1739,    -1,  2383,  2384,
    2385,  2386,    -1,    -1,    -1,    -1,    -1,    -1,   870,    -1,
      -1,    -1,  2397,    -1,  2399,    -1,    -1,  2402,    -1,    -1,
      -1,    -1,    -1,  2408,   360,    -1,    -1,  2412,    -1,    -1,
      -1,  3273,    -1,  2418,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   173,    -1,   385,
      -1,    -1,    -1,  1877,    -1,  2440,  2441,    -1,  2443,    -1,
      -1,    -1,  1886,    -1,    -1,    -1,    -1,    -1,    -1,   405,
      -1,   407,    -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   209,    -1,    -1,   505,  2472,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,   225,
      -1,    -1,    -1,    -1,    -1,  2490,    -1,    -1,    -1,   235,
      -1,    -1,    -1,  2498,  2499,  2500,    -1,    -1,    -1,    -1,
      -1,    -1,  2507,    -1,  2509,  2510,    -1,    -1,    -1,    -1,
      -1,  2516,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   269,    -1,  2150,  2151,    -1,    -1,    -1,
      -1,  2536,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   290,  2550,    -1,    -1,    -1,    -1,
      -1,  1360,  1361,    -1,  1363,    -1,    -1,  2562,    -1,    -1,
      -1,  2566,    -1,    -1,    -1,   521,    -1,    -1,    -1,    -1,
     316,    -1,    -1,    -1,  2018,    -1,    -1,   323,    -1,    -1,
    2024,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2595,  2596,    -1,  1956,  1957,  1958,  1959,  1960,  1961,    -1,
      -1,  1964,  1965,  1966,  1967,  1968,  1969,  1970,  1971,  1972,
    1973,    -1,    -1,    -1,  2619,    -1,    -1,     0,    -1,   365,
      -1,  2626,    -1,    -1,    -1,    -1,    -1,  2632,    -1,    -1,
      -1,    -1,  2387,    -1,    -1,    -1,    -1,    -1,   384,    -1,
      -1,    -1,    -1,    -1,  2269,  2650,    -1,    -1,    -1,  2654,
      -1,  2656,    -1,  2658,  2659,  2660,    -1,  1466,    -1,  2664,
    2665,  2666,    -1,  2668,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1481,    -1,    -1,  1484,    -1,  3539,    -1,    -1,
    1489,    -1,  2687,  1492,  2689,    -1,    -1,    -1,  1497,    -1,
    1499,    -1,  1501,    -1,    -1,    -1,    -1,    -1,  1180,  2704,
    2705,  2706,  2707,  2708,  2709,  2710,  2711,  2712,  2713,   455,
      -1,  2155,    -1,    -1,   460,    -1,    -1,   100,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2735,  2175,    -1,    -1,    -1,    -1,    -1,    -1,  2743,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2191,  2753,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2202,    -1,
      -1,    -1,    -1,    -1,   147,    -1,    -1,    -1,    -1,  2524,
      -1,    -1,  2777,    -1,  2218,    -1,    -1,    -1,    -1,   162,
      -1,    -1,  2787,    -1,   167,    -1,    -1,  2150,  2151,   172,
      -1,    -1,    -1,  2798,    -1,    -1,    -1,    -1,   181,  2804,
      -1,    -1,    -1,   186,    -1,    -1,  2811,  2812,  2813,  2814,
      -1,  1620,    -1,    -1,    -1,    -1,    -1,    -1,  2823,    -1,
      -1,  2826,    -1,    -1,    -1,  2830,  2831,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2839,   218,  2591,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   238,    -1,  2862,    -1,    -1,
      -1,    -1,    -1,    24,  2869,  2870,    -1,    -1,    -1,  2874,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1361,
      -1,  1363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2903,    -1,
    2905,    -1,    -1,    -1,   287,    -1,  2269,   290,    -1,    -1,
      -1,  2916,    -1,   296,    -1,    -1,    -1,    -1,  2923,    -1,
      81,    -1,  2927,    -1,    -1,    -1,    -1,    -1,  2933,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    97,  2381,    -1,    -1,
      -1,    -1,  2947,  2698,    -1,    -1,    -1,    -1,  2953,    -1,
      -1,    -1,    -1,    -1,   337,    -1,    -1,  1766,    -1,    -1,
      -1,  2966,  2967,  2968,    -1,    -1,    -1,    -1,    -1,  2974,
    2595,  2596,  1781,    -1,    -1,    -1,    -1,    -1,    -1,   362,
      -1,    -1,  1791,    -1,  1793,   146,  2991,  1796,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   156,    -1,  1806,    -1,  1808,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   169,    -1,
      -1,    -1,  1821,   174,    -1,    -1,    -1,  1826,    -1,    -1,
      -1,  1830,  1831,  1832,  1833,    -1,  1835,  1836,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   421,    -1,
      -1,    -1,   203,    -1,    -1,    -1,  2801,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   449,  3072,    -1,    -1,
    3075,     8,    -1,    -1,    11,    -1,    -1,   460,    15,    16,
      -1,    -1,  3087,    -1,    -1,   246,    -1,    -1,    -1,   250,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,    -1,   482,
     483,    -1,    -1,    -1,    -1,  3110,    -1,    -1,    -1,    46,
      -1,    -1,  3117,    -1,    -1,    -1,    53,     8,    -1,  2563,
      11,    -1,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,
    2885,    -1,    -1,    -1,    -1,    -1,   519,    -1,  3143,   522,
     523,   524,    -1,    80,  3149,    -1,    -1,    -1,    -1,    -1,
      -1,  3156,    -1,    -1,   315,    46,    -1,  2601,    -1,    -1,
     321,    -1,    53,    -1,    -1,    -1,    -1,    -1,  3173,    -1,
      -1,    -1,    -1,  2798,    -1,   336,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2628,  1994,    -1,    -1,    -1,    80,
      -1,    -1,  3197,    -1,    -1,    -1,    -1,    -1,  2823,    -1,
    3205,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,  2018,
     371,    -1,  2656,   374,    -1,  2024,  3221,    -1,    -1,    -1,
    2029,  3226,    -1,    -1,   385,  2034,    -1,   388,    -1,    -1,
      -1,    -1,  2595,  2596,    -1,    -1,    -1,    -1,    -1,    -1,
     177,  2996,    -1,    -1,    -1,    -1,   407,  3252,  2873,    -1,
      -1,    -1,    -1,    -1,   145,    -1,    -1,   194,    -1,    -1,
     421,    -1,   199,    -1,    -1,    -1,   427,   428,    -1,    -1,
      -1,  3276,  3277,    -1,    -1,  3030,    -1,   438,    -1,    -1,
      -1,    -1,    -1,   444,    -1,    -1,   177,    -1,  3293,    -1,
    3295,    -1,  2736,    -1,  3299,    -1,    -1,    -1,    -1,  1781,
     237,    -1,    -1,   194,    -1,    -1,    -1,  2116,   199,  1791,
    3315,  1793,   473,  3318,  1796,    -1,    -1,  2126,    -1,     0,
    2764,    -1,    -1,    -1,  1806,    -1,  1808,  2771,    -1,    -1,
      -1,    -1,    -1,  3338,    -1,  3340,    -1,  3342,  3343,  1821,
    3345,    -1,    -1,  2968,  1826,  3350,   237,    -1,  1830,  1831,
    1832,  1833,    -1,  1835,  1836,   292,    -1,     8,    -1,    -1,
      11,    -1,    -1,  3118,    15,    16,  3371,    -1,    -1,    -1,
    3375,    -1,    -1,    -1,    -1,     8,    -1,  3382,    11,  2823,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,  2202,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   292,    53,    36,    -1,  2214,  3161,  3412,    -1,  2218,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    26,   100,
      53,    -1,    -1,    -1,    32,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    40,    -1,    -1,  2798,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3450,    -1,    80,    -1,    -1,
      -1,    -1,    60,  3458,    -1,    -1,    -1,  2266,   395,    -1,
    2823,  2905,    -1,  2272,    -1,    -1,   147,    -1,  3473,    -1,
    2914,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2923,
      -1,   162,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      -1,   172,  3117,    -1,   145,  3500,    -1,    -1,   106,    -1,
     181,    -1,    -1,    -1,   395,   186,    -1,  3512,  3513,    -1,
    3515,  3516,    -1,    -1,    -1,    -1,    -1,    -1,  3273,  3524,
      -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,   137,
    3535,    -1,    -1,    -1,    -1,    -1,    -1,   218,    -1,    -1,
      -1,    -1,    -1,   194,   177,    -1,    -1,    -1,   199,    -1,
      -1,    -1,  3557,    -1,    -1,   845,   846,   238,    -1,  3564,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,   505,    -1,
      -1,    -1,    -1,    -1,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,    -1,   237,    -1,  2397,   222,
     223,    -1,    -1,    -1,   202,    -1,  3601,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   237,  2968,   287,    -1,    -1,   290,
      -1,  3616,    -1,    -1,   505,   296,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,   515,   516,   517,   917,    -1,    -1,
      -1,   921,   922,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,   275,   251,  3088,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   261,    -1,    -1,   337,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,   273,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   362,    -1,    -1,   974,    -1,   294,    -1,    -1,  3133,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   305,  2507,    -1,
      -1,  2510,   992,    -1,    -1,    -1,    -1,  2516,   998,    -1,
      -1,  1001,    -1,  3338,  1004,  1005,  1006,  1007,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2214,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     421,    -1,    -1,    -1,   395,    -1,   354,    -1,    -1,    -1,
     358,    -1,   360,  2562,  3117,    -1,    -1,  2566,    -1,  1049,
    1050,    -1,   395,    -1,    -1,    -1,    -1,    -1,   449,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,   460,
      -1,  1071,   390,    -1,  3539,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,    -1,   480,
    1090,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1102,  1103,  1104,    -1,  1106,  1107,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,    -1,
      -1,   522,   523,   524,    -1,  2654,    -1,  3291,    -1,  2658,
    2659,  2660,  1142,    -1,   505,   463,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,   515,   516,   517,    -1,  3312,    -1,
    1160,  1161,   505,    -1,    -1,   508,   509,   510,  2687,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   526,    -1,  2704,  2705,  2706,  2707,  2708,
    2709,  2710,  2711,  2712,  2713,    -1,    -1,    -1,  1198,    -1,
      -1,    -1,  1202,  1203,    -1,  2397,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1213,  1214,    -1,    -1,    -1,  3372,    -1,
    3374,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3413,
      46,    -1,    -1,    -1,    -1,  3338,    -1,    53,    -1,    -1,
      -1,    -1,  1272,    -1,    -1,  3429,    -1,    -1,    -1,    -1,
      -1,  1281,    -1,    -1,    -1,  2804,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     3,  1306,    -1,    -1,    -1,
       8,  2830,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    40,  2862,    -1,    -1,    -1,    -1,    46,    -1,
      -1,  2870,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,  2905,    -1,    -1,    36,
      -1,   177,    -1,  1393,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,  3556,    -1,    -1,    -1,    53,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3582,    -1,
      -1,    -1,    -1,    80,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2967,    -1,
      -1,   237,    -1,    -1,    -1,    -1,  1456,    -1,  1458,  1459,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2659,  2660,    -1,
      -1,  1471,  1472,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,
      -1,  1491,   278,    -1,    -1,  2687,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,  2704,  2705,  2706,  2707,  2708,  2709,  2710,  2711,
    2712,  2713,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
     177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,  1593,   292,    -1,    -1,   295,    -1,    -1,
      -1,  1601,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,  1615,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
    3149,   278,    -1,    -1,    -1,    -1,  1636,  3156,    -1,    -1,
      -1,    -1,    -1,  1643,    -1,   292,    -1,    -1,   295,  1649,
    1650,  1651,  1652,  1653,  1654,  1655,  1656,    -1,    -1,    -1,
       8,  1661,  1662,    11,    -1,    -1,  1666,    15,    16,    -1,
    1670,    -1,    -1,  1673,  1674,  1675,  1676,  1677,  1678,  1679,
    1680,  1681,    -1,    -1,  1684,    -1,    -1,    -1,    -1,    -1,
      -1,  1691,    -1,  1693,    -1,    -1,    -1,   395,    46,    -1,
      -1,    -1,  3221,    -1,    -1,    53,    -1,  3226,    -1,    -1,
      -1,  1711,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    80,  3252,    -1,    -1,    -1,    -1,    -1,   525,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,
    1750,  1751,    -1,    -1,    -1,    -1,    -1,  3276,  3277,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2967,    -1,    -1,    -1,    -1,
    3299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,  3342,    -1,    -1,    -1,    -1,    -1,   177,
      -1,  3350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1842,    -1,    -1,    -1,   194,    -1,    -1,  1849,
      -1,   199,  1852,  1853,    -1,    -1,    -1,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,   522,    -1,    -1,     0,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
    1890,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      32,    -1,    34,    35,    -1,    -1,    -1,    -1,  1918,  1919,
      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,   292,    68,    69,  1947,  1948,    -1,
    1950,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    84,    -1,    86,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    98,    -1,   100,  1979,
    1980,    -1,    -1,  1983,    -1,    -1,   109,   110,    -1,   111,
     113,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   126,   127,   128,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2014,   137,  3535,    -1,    -1,    -1,
    2020,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   151,
      -1,   153,   154,    -1,    -1,    -1,    -1,  2037,    -1,  2039,
      -1,    -1,    -1,    -1,    -1,    -1,   168,   395,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3252,    -1,    -1,    -1,    -1,    -1,   189,   190,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   198,  2077,    -1,    -1,
      -1,    -1,    -1,    -1,  3276,  3277,    -1,    -1,    -1,    -1,
      -1,    -1,   214,    -1,    -1,    -1,  1002,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3299,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2115,    -1,    -1,   240,  2119,
      -1,    -1,    -1,    -1,  2124,  2125,    -1,    -1,    -1,    -1,
     253,   254,   255,   256,   257,   258,   259,   260,    -1,    -1,
     263,   264,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,   515,   516,   517,
      -1,  2171,     8,    -1,  2174,    11,  2176,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,  2192,    -1,   316,   317,   318,    -1,    -1,    -1,
      36,    -1,   324,    -1,    40,   327,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,   338,   339,    53,    -1,    -1,
      -1,  1127,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,    -1,    -1,  2235,   358,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,   367,    -1,    -1,    -1,    -1,
      -1,    -1,  2252,  2253,    -1,    -1,   379,   380,    -1,    -1,
      46,   383,    -1,    -1,    -1,    -1,    -1,    53,   390,    -1,
    1176,  2271,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2280,    -1,    -1,   405,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,   417,    -1,    -1,    -1,   421,
      -1,    -1,     8,    -1,    -1,    11,  1212,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,   441,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,   455,    -1,    -1,   458,    -1,    -1,   461,
      46,   177,  2342,  3535,   466,    -1,    -1,    53,    -1,    -1,
      -1,  2351,    -1,    -1,   477,   478,    -1,    -1,   194,    -1,
    1266,   483,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,   501,   502,
      -1,    -1,    -1,    -1,    -1,   507,   222,   223,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,   521,   521,
      -1,   237,   524,    -1,    -1,    -1,  1312,  2407,   194,    -1,
      -1,  1317,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    36,    -1,    -1,   292,    -1,    -1,   295,
      -1,  1367,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1391,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,  1439,    -1,  1441,    -1,  1443,  1444,    -1,
    1446,  2541,    -1,  1449,    -1,    -1,  1452,  2547,  2548,  1455,
      -1,    -1,    -1,    -1,  1460,    -1,    -1,  1463,    -1,   395,
      -1,    -1,    -1,  2563,    -1,    -1,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,  2579,
      -1,    -1,  2582,    -1,  2584,    -1,   292,    -1,    -1,   295,
      -1,    -1,  2592,    -1,   177,    -1,    -1,    -1,  1504,    -1,
    2600,  2601,    -1,    -1,    -1,    -1,    -1,  2607,    -1,   395,
       8,   194,    -1,    11,    -1,    -1,   199,    15,    16,    -1,
      -1,    19,    20,    21,  2624,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2634,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   237,    53,  2656,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    80,  1589,    -1,    -1,   522,    -1,    -1,   395,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,  1605,
      -1,    -1,    -1,  2703,    -1,    -1,    -1,    -1,    -1,   292,
    1616,  1617,  1618,    -1,    -1,    -1,  2716,  1623,  2718,   505,
      -1,  1627,    -1,    -1,    -1,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2774,    -1,    -1,    36,    -1,   177,
      -1,    -1,    -1,    -1,  1690,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,   194,    -1,    -1,   505,
      -1,   199,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,   395,    -1,    -1,    -1,   522,    -1,  2818,  2819,
      -1,    80,    -1,    -1,    -1,    -1,    -1,  1733,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,  1749,    -1,    -1,    -1,    -1,  1754,    -1,
      -1,    -1,    -1,  2853,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1771,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2873,    -1,    -1,    -1,    -1,    -1,  2879,
    2880,    -1,    -1,    -1,  2884,    -1,    -1,    -1,    -1,  2889,
      -1,    -1,  2892,  2893,   292,    -1,    -1,  2897,  2898,    -1,
      -1,  2901,    -1,    -1,    -1,    -1,    -1,    -1,    68,    69,
      -1,    -1,    -1,    -1,    -1,    -1,  2916,    -1,   177,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,   194,    -1,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
     110,    -1,    -1,   113,   114,    -1,    -1,    -1,    -1,    -1,
    2960,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2987,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,   189,
     190,    -1,    -1,   292,    -1,    -1,   295,    -1,    46,  1945,
      -1,    -1,    -1,    -1,    -1,    53,    -1,  1953,  1954,    -1,
    1956,  1957,  1958,  1959,  1960,  1961,    -1,    -1,  1964,  1965,
    1966,  1967,  1968,  1969,  1970,  1971,  1972,  1973,  1974,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   253,   254,   255,   256,   257,   258,   259,
     260,  3101,    -1,   263,   264,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3133,    -1,     8,   395,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,  3167,    -1,   177,
      -1,    -1,    -1,    46,  2080,    -1,    -1,  2083,   338,   339,
      53,    -1,    -1,    -1,  3184,  3185,   194,    -1,  3188,    -1,
    3190,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,  2114,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,  3217,    -1,   379,
     380,    -1,    -1,  2129,    -1,    -1,    -1,  2133,    -1,   237,
      -1,  2137,  2138,  2139,  2140,  2141,  2142,  2143,  2144,    -1,
      -1,  3241,    -1,    -1,  2150,  2151,   505,  2153,  2154,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,  2167,    -1,   522,  2170,    -1,    -1,   275,    -1,    -1,
     278,    -1,  2178,  2179,  2180,  2181,  2182,  2183,  2184,  2185,
    2186,  2187,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,  2213,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   477,   478,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,  3332,    -1,    -1,    -1,  3336,    -1,    -1,    -1,
    3340,   501,   502,    -1,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,  3354,    -1,    -1,    -1,    -1,  3359,
      -1,  3361,    -1,  2269,   237,    -1,    -1,    -1,    -1,    -1,
      -1,  3371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,  3389,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3436,  2343,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3446,    -1,  2354,  2355,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3458,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3491,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,   522,  2421,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2447,  2448,  2449,    -1,    -1,  2452,  2453,  2454,  2455,
    2456,  2457,    -1,    -1,    -1,  2461,  2462,  2463,  2464,  2465,
    2466,  2467,  2468,  2469,  2470,    -1,    -1,    -1,    -1,  2475,
    2476,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3578,  3579,
    3580,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,  2501,    -1,    -1,    -1,    -1,
    2506,    -1,    -1,    -1,    -1,  3605,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,   505,    -1,  2540,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,  3646,    -1,    -1,   522,
      -1,    -1,  2558,    80,    -1,    -1,    -1,    -1,  2564,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2572,  2573,    -1,    -1,
       8,    -1,    -1,    11,  2580,  2581,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,  2594,  2595,
    2596,  2597,    -1,  2599,    -1,    -1,    -1,  2603,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    36,    -1,
     177,    -1,    -1,    -1,    -1,  2661,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,
      -1,   278,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,   292,  2772,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   177,
      -1,    -1,  2798,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2854,   237,
    2856,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,  2865,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,
      -1,    -1,  2878,    -1,    -1,  2881,    -1,  2883,    -1,    -1,
      -1,  2887,    -1,    -1,  2890,  2891,    -1,   275,  2894,  2895,
     278,    -1,    -1,    -1,    -1,    -1,  2902,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,  2915,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2930,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,   395,    -1,    -1,
      -1,    -1,  2968,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,    -1,    -1,   522,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    80,    -1,   522,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
    3106,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    24,
    3116,  3117,    -1,    -1,   194,    -1,    -1,   505,    -1,   199,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,   522,  3141,  3142,    -1,    -1,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,  3165,
      -1,    -1,    -1,    -1,    -1,    -1,    81,    -1,  3174,    -1,
      -1,    -1,  3178,  3179,  3180,    -1,    -1,  3183,    -1,   177,
    3186,  3187,    97,    -1,    -1,    -1,    -1,    -1,    -1,  3195,
      -1,    -1,    -1,    -1,    -1,   275,   194,    -1,   278,    -1,
      -1,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,   146,  3238,    -1,    -1,    -1,    -1,    -1,  3244,   237,
      -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3257,    -1,    -1,   169,    -1,    -1,    -1,    -1,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3320,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   246,    -1,    -1,    -1,   250,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3356,  3357,  3358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3390,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   321,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   336,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    -1,    -1,  3451,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3461,   371,    -1,    -1,   374,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,   388,    -1,    -1,    -1,    -1,    -1,    -1,
    3486,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   407,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3511,   421,   505,    -1,    -1,
     508,   509,   510,   428,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,   438,   522,    -1,    -1,    -1,    -1,   444,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3554,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,   473,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,  3608,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,   507,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
     522,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,   507,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,   455,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,   507,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,   132,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,   522,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,   507,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,   233,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,   434,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,   522,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      38,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,   522,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,   526,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,   480,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,   526,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,   454,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,   514,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,   514,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,   454,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,    -1,    -1,
      -1,    -1,    -1,    -1,   512,   513,   514,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,   454,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,    -1,    -1,    -1,    -1,
      -1,    -1,   512,   513,   514,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     512,   513,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
      -1,    -1,    -1,    -1,    -1,   519,    -1,   521,    -1,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
     176,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,    -1,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   512,   513,    -1,    -1,
      -1,    -1,    -1,   519,    -1,   521,    -1,    -1,    -1,    -1,
      -1,   527,   528,   529,   530,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    81,    -1,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,   171,    -1,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,    -1,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,   395,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,   423,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   519,    -1,   521,    -1,    -1,    -1,    -1,    -1,   527,
     528,   529,   530,     3,     4,     5,     6,     7,    -1,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    81,    -1,    83,    84,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,   194,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,   237,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,    -1,   276,   277,   278,   279,
     280,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,   395,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,   423,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
     440,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,
      -1,   521,    -1,    -1,    -1,    -1,    -1,   527,   528,   529,
     530,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
      -1,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,   280,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,   440,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   519,    -1,   521,
      -1,    -1,    -1,    -1,    -1,   527,   528,   529,   530,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,    -1,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,   280,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,   440,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   512,   513,
     514,    -1,     3,     4,     5,   519,    -1,   521,     9,    -1,
      -1,    -1,    -1,   527,   528,   529,   530,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   512,   513,   514,     3,    -1,    -1,    -1,   519,    -1,
     521,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   530,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,    -1,
     519,    -1,   521,     9,    10,    -1,    -1,    -1,   527,   528,
     529,   530,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   527,   528,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,   162,   163,   164,   165,   166,   167,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,    -1,   292,   293,   294,    -1,   296,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
     449,    -1,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   522,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,   522,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    34,
      35,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
     455,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,     3,   507,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    81,
      -1,    83,    84,    85,    86,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,    -1,   276,   277,   278,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,   291,
     292,   293,   294,    -1,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,
     322,   323,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,   455,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,    -1,     3,   507,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,   291,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,   291,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,   448,    -1,    -1,   451,   452,
     453,    -1,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,   172,    -1,   174,   175,   176,    -1,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,    -1,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,   422,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,    -1,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,     3,   507,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     521,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,   172,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,   421,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,     3,   507,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,   172,    -1,   174,
     175,   176,    -1,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,    -1,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
      -1,     3,   507,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   521,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   521,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   521,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   521,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    15,    16,    -1,   521,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    -1,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,    -1,   153,   154,   155,   156,   157,   158,    -1,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,    -1,    -1,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
      -1,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,    -1,   300,
     301,   302,    -1,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,    -1,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,    -1,   438,    -1,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     501,   502,   503,   504,    -1,     3,    -1,   508,   509,   510,
       8,   512,   513,   514,   515,   516,   517,    15,    16,    -1,
      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,    -1,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,     8,
      -1,    -1,    11,    -1,    -1,    53,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    46,     8,    -1,
      -1,    11,    -1,    -1,    53,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      80,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,   177,
      53,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    36,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   177,    53,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,   237,
     199,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,    -1,    -1,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   194,    -1,    -1,   275,   237,   199,
     278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
      -1,    -1,   222,   223,   177,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,   237,    -1,   278,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,    -1,
     194,    -1,    -1,    -1,   237,   199,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,
      -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    -1,   512,   513,   514,   515,   516,   517,
      -1,    -1,   395,    -1,   522,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    36,
      -1,   395,    -1,   522,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,   522,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    36,    -1,    -1,    -1,   522,
      -1,    -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,
      -1,    -1,    53,    15,    16,    17,    18,    19,    20,    21,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    36,    -1,    -1,    -1,   522,    80,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
     177,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,   177,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,   275,    -1,
      -1,   278,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      36,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      46,    -1,    -1,    -1,    -1,   177,    -1,    53,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,   275,   237,   199,   278,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,
      -1,    -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,    -1,    -1,   278,    -1,    -1,   194,    -1,
      -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,   395,    -1,   522,    -1,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,   520,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,   520,   395,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,   520,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    -1,   520,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   514,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,   448,    -1,    -1,   451,   452,
     453,    -1,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,     4,     5,    -1,    -1,    -1,     9,    -1,
      -1,   514,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
     171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,   237,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,    -1,   276,   277,   278,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,   290,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,   395,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
      -1,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,    -1,
     451,   452,   453,   454,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,    -1,    -1,     8,    -1,    -1,    11,
      -1,   512,   513,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,
      -1,    -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,
      -1,    53,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,
      -1,    -1,    -1,    46,     8,    -1,    -1,    11,    -1,    -1,
      53,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,    46,    -1,   126,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,    46,    -1,     8,    -1,   177,    11,    -1,    53,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    -1,
      -1,    36,    -1,    -1,   167,    80,    -1,    -1,    -1,   172,
      -1,    46,    -1,    -1,   177,    -1,    -1,    -1,    53,    -1,
     222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,   237,   199,    -1,    -1,    -1,
      -1,    -1,   166,    -1,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     194,    -1,    -1,   275,   237,   199,   278,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     292,    -1,    -1,   295,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   275,   237,    -1,   278,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,   194,
      -1,    -1,   237,    -1,   199,    -1,    -1,    -1,   292,    -1,
      -1,   295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,
     275,   325,   237,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,   460,    -1,
     295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   319,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,    -1,
     512,   513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    36,    -1,    -1,    -1,    40,
     395,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,    80,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    -1,    -1,    -1,    -1,    80,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,   177,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,   199,    -1,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
       8,    -1,    -1,    11,   177,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,   275,    -1,    -1,   278,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   199,    -1,    36,    -1,
      -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,   275,   199,     8,   278,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   292,
      -1,    -1,   295,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,    -1,    36,    -1,   395,    -1,    -1,    -1,    -1,    -1,
      -1,   237,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   177,
      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,   275,
      -1,    -1,   278,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,   199,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,
      -1,    -1,   395,    -1,    -1,    -1,    -1,    -1,    -1,   237,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,   510,
      -1,   512,   513,   514,   515,   516,   517,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,
     278,    -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,
     194,    -1,    -1,    -1,    -1,   199,    -1,    -1,    -1,   395,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   505,   237,    -1,   508,   509,   510,    -1,   512,
     513,   514,   515,   516,   517,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,   275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    -1,   395,   292,    46,
      -1,   295,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,
      -1,    -1,   508,   509,   510,    -1,   512,   513,   514,   515,
     516,   517,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   395,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,
     508,   509,   510,    80,   512,   513,   514,   515,   516,   517,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     177,    -1,    11,    -1,    -1,   429,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,   199,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     177,   505,    -1,    -1,   508,   509,   510,    -1,   512,   513,
     514,   515,   516,   517,    -1,    -1,    -1,   194,   275,    -1,
      -1,   278,   199,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,   295,    -1,
      -1,    -1,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     237,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    36,   177,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    46,   275,    -1,
      -1,   278,    -1,    -1,    53,   194,    36,    -1,    -1,    -1,
     199,    -1,    -1,    -1,    -1,   292,    46,    -1,   295,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    80,    -1,   222,   223,    -1,    -1,    -1,   395,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,    -1,   278,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   177,    -1,
      15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,   177,   505,    -1,
     199,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    46,    -1,    -1,   194,    -1,    -1,    -1,    53,   199,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,
      -1,    -1,   222,   223,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,   237,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   275,    -1,   505,   278,
      -1,   508,   509,   510,    -1,   512,   513,   514,   515,   516,
     517,    -1,    -1,   292,    -1,   275,   295,    -1,   278,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   292,    -1,    -1,   295,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   177,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,   199,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,
      -1,    -1,   237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   395,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     275,    -1,    -1,   278,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   292,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,
     509,   510,    -1,   512,   513,   514,   515,   516,   517,    -1,
      -1,    -1,    -1,    -1,    -1,   505,    -1,    -1,   508,   509,
     510,    -1,   512,   513,   514,   515,   516,   517,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     395,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,
     505,    -1,    -1,   508,   509,   510,    -1,   512,   513,   514,
     515,   516,   517,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
      77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
     137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   199,   200,   201,   202,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,   232,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,   438,   439,   440,   441,   442,   443,   444,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,   171,    -1,   173,   174,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,    -1,   276,   277,   278,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,   290,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,   395,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,   423,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,    -1,   451,   452,   453,   454,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,   176,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,    -1,   276,
     277,   278,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
      -1,   276,   277,   278,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,    -1,   276,   277,   278,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,   448,    -1,    -1,   451,   452,
     453,    -1,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    -1,
      -1,    82,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,   169,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
      -1,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
      -1,   422,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,   450,
     451,   452,   453,    -1,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
     169,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,   237,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,   450,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,
      83,    84,    85,    86,    87,    88,    -1,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,    -1,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,
      -1,   174,   175,   176,    -1,   178,   179,   180,    -1,   182,
     183,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,    -1,   210,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,    -1,
      -1,   224,    -1,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
     273,   274,    -1,   276,   277,    -1,   279,    -1,   281,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,   291,   292,
     293,   294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,
      -1,   324,   325,   326,   327,   328,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,    -1,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,    -1,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,    -1,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,    -1,    -1,   419,   420,    -1,   422,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
      -1,    -1,   435,   436,   437,   438,   439,    -1,   441,   442,
     443,   444,   445,   446,   447,   448,    -1,    -1,   451,   452,
     453,    -1,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,   466,   467,   468,    -1,   470,    -1,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    72,    73,    -1,    75,    76,    77,    78,    79,    -1,
      -1,    -1,    83,    84,    85,    86,    87,    88,    -1,    90,
      91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
      -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,    -1,   118,    -1,   120,
     121,   122,   123,   124,   125,    -1,    -1,   128,   129,   130,
     131,    -1,    -1,   134,   135,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,    -1,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,    -1,
     161,    -1,   163,   164,   165,   166,    -1,   168,    -1,   170,
      -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,   180,
      -1,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,    -1,   200,
     201,   202,   203,   204,   205,   206,    -1,   208,    -1,   210,
     211,   212,   213,   214,   215,   216,   217,    -1,   219,    -1,
     221,    -1,    -1,   224,    -1,   226,   227,   228,   229,   230,
     231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
     271,   272,   273,   274,    -1,   276,   277,    -1,   279,    -1,
     281,   282,   283,   284,   285,   286,    -1,   288,   289,    -1,
     291,   292,   293,   294,    -1,    -1,   297,   298,   299,    -1,
     301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,
     321,   322,    -1,   324,   325,   326,   327,   328,   329,    -1,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    -1,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,    -1,   363,   364,    -1,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,    -1,    -1,   385,   386,   387,   388,   389,   390,
     391,   392,   393,    -1,    -1,   396,   397,   398,   399,    -1,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,    -1,    -1,   419,   420,
      -1,   422,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,    -1,    -1,   435,   436,   437,   438,   439,    -1,
     441,   442,   443,   444,   445,   446,   447,   448,    -1,    -1,
     451,   452,   453,    -1,    -1,   456,   457,   458,   459,    -1,
     461,   462,   463,   464,   465,   466,   467,   468,    -1,   470,
      -1,   472,   473,   474,   475,   476,   477,   478,    -1,    -1,
     481,    -1,    -1,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,   390,   391,   392,   393,    -1,    -1,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,   179,   180,    -1,   182,   183,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,   291,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,    -1,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    79,    -1,    -1,    -1,    83,    84,
      85,    86,    87,    88,    -1,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,    -1,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,
     175,   176,    -1,   178,   179,   180,    -1,   182,   183,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,    -1,   210,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,
      -1,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
      -1,   236,    -1,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,    -1,   270,   271,   272,   273,   274,
      -1,   276,   277,    -1,   279,    -1,   281,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,
     325,   326,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
      -1,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,    -1,
     385,   386,   387,   388,   389,   390,   391,   392,   393,    -1,
      -1,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,    -1,    -1,   419,   420,   421,   422,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,   437,   438,   439,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,    -1,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,   466,   467,   468,    -1,   470,    -1,   472,   473,   474,
     475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,    -1,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,    -1,   120,   121,   122,
     123,   124,   125,    -1,    -1,   128,   129,   130,   131,    -1,
      -1,   134,   135,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,    -1,   148,   149,   150,   151,    -1,
     153,   154,   155,   156,   157,   158,    -1,    -1,   161,    -1,
     163,   164,   165,   166,    -1,   168,    -1,   170,   171,    -1,
     173,   174,   175,   176,   177,   178,   179,   180,    -1,    -1,
      -1,   184,   185,    -1,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,    -1,   200,   201,   202,
     203,   204,   205,   206,    -1,   208,   209,    -1,   211,   212,
     213,   214,   215,   216,   217,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,
     283,   284,   285,   286,    -1,   288,   289,    -1,    -1,   292,
     293,   294,    -1,    -1,   297,   298,    -1,   300,   301,   302,
      -1,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,    -1,
     323,   324,   325,    -1,   327,   328,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,    -1,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,    -1,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,    -1,   395,   396,   397,   398,   399,    -1,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,    -1,    -1,    -1,   419,   420,    -1,   422,
     423,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
      -1,    -1,   435,   436,    -1,   438,    -1,    -1,   441,   442,
     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,
     453,   454,    -1,   456,   457,   458,   459,    -1,   461,   462,
     463,   464,   465,    -1,   467,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,   477,   478,    -1,    -1,   481,    -1,
      -1,   484,   485,   486,   487,   488,   489,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
     503,   504,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    79,    -1,    -1,    -1,    83,
      84,    85,    86,    87,    88,    -1,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,    -1,    -1,    -1,
     174,   175,   176,    -1,   178,   179,   180,    -1,   182,   183,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,    -1,   210,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,    -1,    -1,
     224,    -1,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,    -1,   236,    -1,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,    -1,   276,   277,    -1,   279,    -1,   281,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,   299,    -1,   301,    -1,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,   322,    -1,
     324,   325,   326,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,    -1,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
      -1,   385,   386,   387,   388,   389,   390,   391,   392,   393,
      -1,    -1,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,    -1,    -1,   419,   420,    -1,   422,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
      -1,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,   466,   467,   468,    -1,   470,    -1,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      72,    73,    -1,    75,    76,    77,    78,    79,    -1,    -1,
      -1,    83,    84,    85,    86,    87,    88,    -1,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,    -1,    -1,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,    -1,   120,   121,
     122,   123,   124,   125,    -1,    -1,   128,   129,   130,   131,
      -1,    -1,   134,   135,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,    -1,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,   159,    -1,   161,
      -1,   163,   164,   165,   166,    -1,   168,    -1,   170,    -1,
      -1,    -1,   174,   175,   176,    -1,   178,   179,   180,    -1,
     182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,    -1,   200,   201,
     202,   203,   204,   205,   206,    -1,   208,    -1,   210,   211,
     212,   213,   214,   215,   216,   217,    -1,   219,    -1,   221,
      -1,    -1,   224,    -1,   226,   227,   228,   229,   230,   231,
      -1,    -1,   234,    -1,   236,    -1,    -1,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
     272,   273,   274,    -1,   276,   277,    -1,   279,    -1,   281,
     282,   283,   284,   285,   286,    -1,   288,   289,    -1,    -1,
     292,   293,   294,    -1,    -1,   297,   298,   299,    -1,   301,
      -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,    -1,    -1,    -1,    -1,   320,   321,
     322,    -1,   324,   325,   326,   327,   328,   329,    -1,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    -1,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
      -1,   363,   364,    -1,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,    -1,   385,   386,   387,   388,   389,   390,   391,
     392,   393,    -1,    -1,   396,   397,   398,   399,    -1,   401,
     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,    -1,    -1,   419,   420,    -1,
     422,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,    -1,    -1,   435,   436,   437,   438,   439,    -1,   441,
     442,   443,   444,   445,   446,   447,   448,    -1,    -1,   451,
     452,   453,    -1,    -1,   456,   457,   458,   459,    -1,   461,
     462,   463,   464,   465,   466,   467,   468,    -1,   470,    -1,
     472,   473,   474,   475,   476,   477,   478,    -1,    -1,   481,
      -1,    -1,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    -1,    -1,    81,    -1,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,    -1,   153,   154,   155,
     156,   157,   158,    -1,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,   171,    -1,   173,   174,   175,
      -1,   177,   178,   179,   180,    -1,    -1,    -1,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,   194,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,   209,    -1,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,    -1,    -1,
     276,   277,   278,   279,    -1,    -1,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,    -1,   300,   301,   302,    -1,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,    -1,   323,   324,   325,
      -1,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,   395,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
      -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,    -1,   438,    -1,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,   449,    -1,   451,   452,   453,   454,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
      -1,   467,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    -1,    75,    76,    77,    78,
      79,    -1,    -1,    -1,    83,    84,    85,    86,    87,    88,
      -1,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,    -1,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
      -1,   120,   121,   122,   123,   124,   125,    -1,    -1,   128,
     129,   130,   131,    -1,    -1,   134,   135,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,    -1,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,    -1,   161,    -1,   163,   164,   165,   166,    -1,   168,
      -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,
     179,   180,    -1,   182,   183,   184,   185,    -1,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
      -1,   200,   201,   202,   203,   204,   205,   206,    -1,   208,
      -1,   210,   211,   212,   213,   214,   215,   216,   217,    -1,
     219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,
     229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,    -1,   276,   277,    -1,
     279,    -1,   281,   282,   283,   284,   285,   286,    -1,   288,
     289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,
     299,    -1,   301,    -1,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,    -1,    -1,    -1,
      -1,   320,   321,   322,    -1,   324,   325,   326,   327,   328,
     329,    -1,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,    -1,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,    -1,   363,   364,    -1,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,    -1,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,    -1,    -1,   396,   397,   398,
     399,    -1,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,    -1,    -1,
     419,   420,    -1,   422,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,    -1,    -1,   435,   436,   437,   438,
     439,    -1,   441,   442,   443,   444,   445,   446,   447,   448,
      -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,   458,
     459,    -1,   461,   462,   463,   464,   465,   466,   467,   468,
      -1,   470,    -1,   472,   473,   474,   475,   476,   477,   478,
      -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    -1,    -1,    81,    -1,    83,    84,    85,    86,
      87,    88,    89,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,    -1,   153,   154,   155,   156,
     157,   158,    -1,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,   171,    -1,   173,   174,   175,    -1,
     177,   178,   179,   180,    -1,    -1,    -1,   184,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,   209,    -1,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,    -1,    -1,   276,
     277,   278,   279,    -1,    -1,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,    -1,   300,   301,   302,    -1,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,    -1,   323,   324,   325,    -1,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,   395,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,    -1,
      -1,    -1,   419,   420,    -1,   422,   423,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
      -1,   438,    -1,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,   449,    -1,   451,   452,   453,   454,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,    -1,
     467,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   501,   502,   503,   504,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
      -1,    -1,    -1,    83,    84,    85,    86,    87,    88,    -1,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
      -1,    -1,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,    -1,
     120,   121,   122,   123,   124,   125,    -1,    -1,   128,   129,
     130,   131,    -1,    -1,   134,   135,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,    -1,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
      -1,   161,    -1,   163,   164,   165,   166,    -1,   168,    -1,
     170,    -1,    -1,    -1,   174,   175,   176,    -1,   178,   179,
     180,    -1,   182,   183,   184,   185,    -1,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,    -1,
     200,   201,   202,   203,   204,   205,   206,    -1,   208,    -1,
     210,   211,   212,   213,   214,   215,   216,   217,    -1,   219,
      -1,   221,    -1,    -1,   224,    -1,   226,   227,   228,   229,
     230,   231,    -1,    -1,   234,    -1,   236,    -1,    -1,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
     270,   271,   272,   273,   274,    -1,   276,   277,    -1,   279,
      -1,   281,   282,   283,   284,   285,   286,    -1,   288,   289,
      -1,    -1,   292,   293,   294,    -1,    -1,   297,   298,   299,
      -1,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,    -1,    -1,    -1,    -1,
     320,   321,   322,    -1,   324,   325,   326,   327,   328,   329,
      -1,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    -1,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,    -1,   363,   364,    -1,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,    -1,   385,   386,   387,   388,   389,
     390,   391,   392,   393,    -1,    -1,   396,   397,   398,   399,
      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,    -1,    -1,   419,
     420,    -1,   422,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,    -1,    -1,   435,   436,   437,   438,   439,
      -1,   441,   442,   443,   444,   445,   446,   447,   448,    -1,
      -1,   451,   452,   453,    -1,    -1,   456,   457,   458,   459,
      -1,   461,   462,   463,   464,   465,   466,   467,   468,    -1,
     470,    -1,   472,   473,   474,   475,   476,   477,   478,    -1,
      -1,   481,    -1,    -1,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    -1,    75,    76,    77,
      78,    79,    -1,    -1,    -1,    83,    84,    85,    86,    87,
      88,    -1,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,    -1,    -1,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,    -1,   120,   121,   122,   123,   124,   125,    -1,    -1,
     128,   129,   130,   131,    -1,    -1,   134,   135,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,    -1,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,    -1,   161,    -1,   163,   164,   165,   166,    -1,
     168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,    -1,
     178,   179,   180,    -1,   182,   183,   184,   185,    -1,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,    -1,   200,   201,   202,   203,   204,   205,   206,    -1,
     208,    -1,   210,   211,   212,   213,   214,   215,   216,   217,
      -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,   227,
     228,   229,   230,   231,    -1,    -1,   234,    -1,   236,    -1,
      -1,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,    -1,   270,   271,   272,   273,   274,    -1,   276,   277,
      -1,   279,    -1,   281,   282,   283,   284,   285,   286,    -1,
     288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,   297,
     298,   299,    -1,   301,    -1,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,    -1,    -1,
      -1,    -1,   320,   321,   322,    -1,   324,   325,   326,   327,
     328,   329,    -1,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      -1,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,    -1,   363,   364,    -1,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,    -1,   385,   386,   387,
     388,   389,   390,   391,   392,   393,    -1,    -1,   396,   397,
     398,   399,    -1,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,    -1,
      -1,   419,   420,    -1,   422,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,    -1,    -1,   435,   436,   437,
     438,   439,    -1,   441,   442,   443,   444,   445,   446,   447,
     448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,   457,
     458,   459,    -1,   461,   462,   463,   464,   465,   466,   467,
     468,    -1,   470,    -1,   472,   473,   474,   475,   476,   477,
     478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
      76,    77,    78,    79,    -1,    -1,    -1,    83,    84,    85,
      86,    87,    88,    -1,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,    -1,    -1,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,    -1,   120,   121,   122,   123,   124,   125,
      -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,   135,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,    -1,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,    -1,   161,    -1,   163,   164,   165,
     166,    -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,
     176,    -1,   178,   179,   180,    -1,   182,   183,   184,   185,
      -1,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,    -1,   200,   201,   202,   203,   204,   205,
     206,    -1,   208,    -1,   210,   211,   212,   213,   214,   215,
     216,   217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,
     226,   227,   228,   229,   230,   231,    -1,    -1,   234,    -1,
     236,    -1,    -1,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,    -1,   270,   271,   272,   273,   274,    -1,
     276,   277,    -1,   279,    -1,   281,   282,   283,   284,   285,
     286,    -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,
      -1,   297,   298,   299,    -1,   301,    -1,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
      -1,    -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,
     326,   327,   328,   329,    -1,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    -1,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,    -1,   363,   364,    -1,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,    -1,    -1,   385,
     386,   387,   388,   389,   390,   391,   392,   393,    -1,    -1,
     396,   397,   398,   399,    -1,   401,   402,   403,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,    -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,    -1,    -1,   435,
     436,   437,   438,   439,    -1,   441,   442,   443,   444,   445,
     446,   447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,
     456,   457,   458,   459,    -1,   461,   462,   463,   464,   465,
     466,   467,   468,    -1,   470,    -1,   472,   473,   474,   475,
     476,   477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    -1,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    72,    73,
      -1,    75,    76,    77,    78,    -1,    -1,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,    -1,   120,   121,   122,   123,
     124,   125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,
     134,   135,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,    -1,   148,   149,   150,   151,    -1,   153,
     154,   155,   156,   157,   158,    -1,    -1,   161,    -1,   163,
     164,   165,   166,    -1,   168,    -1,   170,   171,    -1,   173,
     174,   175,   176,   177,   178,   179,   180,    -1,    -1,    -1,
     184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,    -1,   200,   201,   202,   203,
     204,   205,   206,    -1,   208,   209,    -1,   211,   212,   213,
     214,   215,   216,   217,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,   237,    -1,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
      -1,    -1,   276,   277,   278,   279,    -1,    -1,   282,   283,
     284,   285,   286,    -1,   288,   289,    -1,    -1,   292,   293,
     294,    -1,    -1,   297,   298,    -1,   300,   301,   302,    -1,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,    -1,    -1,    -1,    -1,   320,   321,    -1,   323,
     324,   325,    -1,   327,   328,   329,    -1,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,   366,   367,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,   388,   389,   390,    -1,   392,   393,
      -1,   395,   396,   397,   398,   399,    -1,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,    -1,
      -1,   435,   436,    -1,   438,    -1,    -1,   441,   442,   443,
     444,   445,   446,   447,   448,    -1,    -1,   451,   452,   453,
     454,    -1,   456,   457,   458,   459,    -1,   461,   462,   463,
     464,   465,    -1,   467,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,   477,   478,    -1,    -1,   481,    -1,    -1,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,   503,
     504,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    72,    73,    -1,    75,    76,
      77,    78,    79,    -1,    -1,    -1,    83,    84,    85,    86,
      87,    88,    -1,    90,    91,    92,    -1,    94,    95,    96,
      97,    98,    99,    -1,    -1,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
      -1,   118,    -1,   120,   121,   122,   123,   124,   125,    -1,
      -1,   128,   129,   130,   131,    -1,    -1,   134,   135,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
      -1,   148,   149,   150,   151,   152,   153,   154,   155,   156,
     157,   158,   159,    -1,   161,    -1,   163,   164,   165,   166,
      -1,   168,    -1,   170,    -1,    -1,    -1,   174,   175,   176,
      -1,   178,   179,   180,    -1,   182,   183,    -1,   185,    -1,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,    -1,   200,   201,   202,   203,   204,   205,   206,
      -1,   208,    -1,   210,   211,   212,   213,   214,   215,   216,
     217,    -1,   219,    -1,   221,    -1,    -1,   224,    -1,   226,
     227,   228,   229,   230,   231,    -1,    -1,   234,    -1,   236,
      -1,    -1,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,    -1,   270,   271,   272,   273,   274,    -1,   276,
     277,    -1,   279,    -1,   281,   282,   283,   284,   285,   286,
      -1,   288,   289,    -1,    -1,   292,   293,   294,    -1,    -1,
     297,   298,   299,    -1,   301,    -1,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,    -1,
      -1,    -1,    -1,   320,   321,   322,    -1,   324,   325,   326,
     327,   328,   329,    -1,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,    -1,   342,   343,   344,   345,   346,
     347,    -1,   349,   350,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,    -1,   363,   364,    -1,   366,
     367,   368,   369,    -1,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,    -1,   385,   386,
     387,   388,   389,   390,   391,   392,   393,    -1,    -1,   396,
     397,   398,   399,    -1,   401,   402,   403,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
      -1,    -1,   419,   420,    -1,   422,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,    -1,    -1,   435,   436,
     437,   438,   439,    -1,   441,   442,   443,   444,   445,   446,
     447,   448,    -1,    -1,   451,   452,   453,    -1,    -1,   456,
     457,   458,   459,    -1,   461,   462,   463,   464,   465,   466,
     467,   468,    -1,   470,    -1,   472,   473,   474,   475,   476,
     477,   478,    -1,    -1,   481,    -1,    -1,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    72,    73,    -1,
      75,    76,    77,    78,    -1,    -1,    81,    -1,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,    -1,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,    -1,   118,    -1,   120,   121,   122,   123,   124,
     125,    -1,    -1,   128,   129,   130,   131,    -1,    -1,   134,
     135,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,    -1,   148,   149,   150,   151,    -1,   153,   154,
     155,   156,   157,   158,    -1,    -1,   161,    -1,   163,   164,
     165,   166,    -1,   168,    -1,   170,   171,    -1,   173,   174,
     175,    -1,   177,   178,   179,   180,    -1,    -1,    -1,   184,
     185,    -1,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,    -1,   200,   201,   202,   203,   204,
     205,   206,    -1,   208,   209,    -1,   211,   212,   213,   214,
     215,   216,   217,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,    -1,   239,   240,   241,   242,   243,   244,
     245,   246,    -1,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,    -1,
      -1,   276,   277,   278,   279,    -1,    -1,   282,   283,   284,
     285,   286,    -1,   288,   289,    -1,    -1,   292,   293,   294,
      -1,    -1,   297,   298,    -1,   300,   301,   302,    -1,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,    -1,    -1,    -1,    -1,   320,   321,    -1,   323,   324,
     325,    -1,   327,   328,   329,    -1,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,    -1,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,    -1,   363,   364,
     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,   388,   389,   390,    -1,   392,   393,    -1,
     395,   396,   397,   398,   399,    -1,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,    -1,
     415,    -1,    -1,    -1,   419,   420,    -1,   422,   423,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,    -1,    -1,
     435,   436,    -1,   438,    -1,    -1,   441,   442,   443,   444,
     445,   446,   447,   448,    -1,    -1,   451,   452,   453,   454,
      -1,   456,   457,   458,   459,    -1,   461,   462,   463,   464,
     465,    -1,   467,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,   477,   478,    -1,    22,   481,    -1,    -1,   484,
     485,   486,   487,   488,   489,    32,    -1,    34,    35,    -1,
      -1,    -1,    -1,    22,    -1,    -1,   501,   502,   503,   504,
      -1,    -1,    -1,    32,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    52,    -1,    -1,    -1,    -1,    75,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    86,
      -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
      -1,    98,    -1,   100,    -1,    -1,    -1,    86,    -1,    -1,
      -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,    -1,    98,
      -1,   100,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   126,
     127,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     137,    -1,    -1,    -1,    -1,    -1,   143,   126,   127,    -1,
      -1,    -1,    -1,    -1,   151,    -1,    -1,    -1,   137,    -1,
      -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,   168,   151,    -1,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   168,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   214,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   316,
     317,   318,    -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,
     327,    -1,    -1,    -1,    -1,    -1,    -1,   316,   317,   318,
      -1,    -1,    -1,    -1,    -1,   324,    -1,    -1,   327,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   358,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     367,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   358,
      -1,    -1,    -1,    -1,    -1,    -1,   383,    -1,   367,    -1,
      -1,    -1,    -1,   390,    -1,    -1,    -1,   394,    -1,    -1,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,   405,    -1,
      -1,   390,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
     417,    -1,    -1,    -1,   421,    -1,   405,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   417,    -1,
      -1,    -1,   421,    -1,   441,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   455,    -1,
      -1,    -1,   441,    -1,   461,    -1,    -1,    -1,    -1,   466,
      -1,    -1,    -1,    -1,   471,    -1,   455,    -1,    -1,    -1,
      -1,    -1,   461,    -1,    -1,    -1,   483,   466,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,    -1,    -1,
     507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   521,    -1,    -1,    -1,   507,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   521
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    75,    84,
      86,    98,   100,   111,   126,   127,   128,   137,   143,   151,
     153,   154,   168,   172,   198,   240,   316,   317,   318,   324,
     327,   358,   367,   383,   390,   394,   405,   417,   421,   441,
     455,   458,   461,   466,   483,   507,   521,   533,   534,   535,
     536,   537,   544,   555,   556,   557,   560,   561,   563,   574,
     592,   640,   650,   659,   662,   669,   671,   674,   675,   679,
     685,   687,   691,   698,   702,   703,   704,   711,   716,   732,
     733,   736,   737,   740,   742,   743,   744,   745,   747,   749,
     750,   754,   811,   812,   994,   997,   998,   999,  1000,  1005,
    1008,  1014,  1015,  1016,  1019,   435,   486,   995,   203,   374,
     385,   421,   473,   108,   192,   295,   558,   995,     3,    22,
      23,    24,    25,    26,    27,    28,    29,    31,    32,    33,
      42,    43,    44,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    59,    60,    61,    62,    63,
      64,    67,    68,    69,    70,    71,    72,    73,    75,    76,
      77,    78,    79,    81,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    94,    95,    96,    97,    98,    99,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   118,   120,   121,   122,
     123,   124,   125,   128,   129,   130,   131,   134,   135,   136,
     137,   138,   140,   141,   142,   144,   145,   146,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     161,   163,   164,   165,   166,   168,   170,   171,   173,   174,
     175,   176,   177,   178,   179,   180,   182,   183,   184,   185,
     187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
     197,   198,   200,   201,   202,   203,   204,   205,   206,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   219,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   234,   235,   236,   237,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   276,   277,   278,   279,   281,   282,   283,   284,   285,
     286,   288,   289,   292,   293,   294,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   331,   332,   333,   334,   335,
     336,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   395,   396,   397,   398,   399,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   419,   420,   422,   423,   424,   425,
     426,   427,   428,   430,   431,   432,   435,   436,   437,   438,
     439,   441,   442,   443,   444,   445,   446,   447,   448,   451,
     452,   453,   456,   457,   458,   459,   461,   462,   463,   464,
     465,   466,   467,   468,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   481,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   567,   643,   644,   645,   893,
     983,   987,     3,   176,   247,   414,   562,   567,   643,   290,
     995,    55,   172,   521,   587,   178,   241,   295,   315,   374,
     425,   427,   444,   450,   453,   638,   664,   710,     5,    30,
     327,   567,   568,   982,     3,    30,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    45,    49,    53,    54,    55,
      56,    57,    58,    65,    66,    71,    72,    74,    79,    80,
      81,    82,    83,    89,    93,   100,   101,   108,   112,   115,
     117,   119,   126,   127,   132,   133,   139,   143,   147,   152,
     159,   160,   162,   165,   167,   169,   171,   172,   173,   176,
     177,   181,   182,   183,   186,   194,   199,   207,   209,   210,
     216,   217,   218,   219,   220,   222,   223,   225,   232,   233,
     235,   237,   238,   247,   268,   269,   270,   274,   275,   278,
     280,   281,   283,   287,   290,   291,   295,   296,   299,   300,
     302,   303,   316,   317,   318,   319,   322,   323,   326,   330,
     337,   343,   348,   362,   365,   369,   383,   384,   391,   394,
     395,   398,   400,   414,   416,   417,   418,   421,   423,   429,
     431,   432,   433,   434,   437,   439,   440,   443,   449,   450,
     454,   455,   460,   466,   467,   469,   471,   479,   480,   482,
     483,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   573,   643,   647,   649,    24,    81,    97,   146,
     156,   169,   174,   203,   246,   250,   321,   336,   371,   374,
     385,   388,   407,   421,   427,   428,   438,   444,   473,   664,
     680,   681,   684,   995,   982,   100,   137,   471,   521,   536,
     537,   544,   560,   561,   574,   592,   640,   650,   659,   669,
     671,   674,   675,   679,   687,   694,   698,   704,   711,   732,
     736,   737,   740,   742,   994,   997,   998,  1000,  1005,  1008,
    1014,  1019,   108,    75,    66,    79,    81,   159,   232,   281,
     291,   303,   322,   370,   416,   437,   439,   443,   466,   521,
     566,   567,   568,   743,   812,   814,   816,   817,   827,   834,
     835,   893,   895,   896,   108,     5,   567,   569,   734,   567,
     982,    30,   178,   241,   389,   431,   435,   468,   567,  1006,
    1007,  1018,   995,    30,   132,   766,   767,   178,   241,   374,
     389,   431,   468,  1009,  1010,  1018,   995,   566,   567,   568,
     742,   754,   834,   421,   763,   566,   173,   521,  1002,   521,
     346,   755,   756,   982,   755,   743,   744,  1014,     0,   524,
     471,   692,   122,   213,   457,   214,   147,   218,   296,   449,
     769,   770,   817,   817,   743,   745,   747,   525,    30,   431,
     435,   566,   742,   192,   566,   982,   192,   566,   192,   834,
     192,   566,   275,   356,   569,   342,   996,   519,   523,   570,
     571,   521,    82,   108,   174,   203,   246,   374,   385,   421,
     444,   473,   565,   108,   742,   566,   425,   427,   425,   427,
     356,   192,   566,   566,   174,   246,   346,   385,   421,   473,
     657,   381,   203,    30,   982,   192,   573,   252,   438,   107,
     421,   421,   473,   378,   381,   192,   567,   682,   989,   192,
     979,   982,   192,   982,   521,   690,   295,   427,   694,     3,
     466,   643,   647,   695,   697,   698,   700,   701,   692,   567,
     569,   562,   521,   521,   167,   521,   743,   835,   521,   521,
     566,   521,   521,   172,   521,   521,   521,   521,   743,   812,
     817,   827,   514,   570,   526,    40,   567,   828,   829,   828,
     383,   525,   746,   521,   743,   834,   835,    37,    42,   101,
     173,   209,   225,   235,   269,   316,   323,   365,   384,   455,
     831,   829,    40,   567,   828,   830,   507,   839,   569,   510,
     521,   521,   738,  1007,  1007,  1007,   504,   224,  1007,   523,
     290,     4,     6,     7,     8,     9,    10,    39,    54,    56,
      57,    65,    71,    72,    83,   112,   115,   117,   136,   152,
     160,   165,   182,   183,   216,   217,   219,   247,   268,   270,
     275,   280,   283,   292,   343,   369,   398,   431,   432,   440,
     454,   467,   505,   512,   513,   514,   519,   521,   527,   528,
     529,   530,   567,   569,   743,   801,   851,   854,   857,   858,
     859,   861,   862,   863,   864,   866,   867,   883,   885,   886,
     887,   888,   889,   890,   891,   892,   893,   894,   896,   898,
     913,   914,   925,   947,   954,   962,   963,   964,   983,   984,
     985,   961,   963,  1009,  1009,   569,  1009,   504,  1009,   172,
     433,   510,   996,   570,   676,   834,     3,   171,   173,   471,
     698,  1001,  1003,   171,  1004,   567,   883,   931,   932,   755,
     525,   521,   991,   522,   522,   522,   535,   566,   172,   295,
     719,   157,   676,   734,    30,   132,   764,   764,    59,   764,
     162,   167,   238,   287,   775,   777,   778,   804,   806,   807,
     808,   181,   290,   460,   290,   769,   770,   521,   422,  1017,
     504,   224,   152,    26,    32,   137,   294,   354,   358,   390,
     463,   549,   552,   553,   354,   152,    40,    60,   106,   202,
     251,   261,   273,   305,   354,   360,   385,   390,   405,   538,
     541,   552,   152,   354,   390,   552,   152,   354,   390,   552,
     152,   558,    40,   559,   291,   488,   883,   955,   572,   573,
     571,     3,    30,    37,    42,    49,    55,    81,    83,    89,
     101,   132,   171,   173,   176,   177,   194,   209,   222,   223,
     225,   235,   237,   247,   269,   278,   300,   302,   323,   365,
     384,   395,   414,   423,   443,   454,   469,   471,   522,   643,
     648,   770,   883,   934,   935,   986,   992,   883,   421,   566,
     567,   522,   521,   627,   374,   638,   664,   275,   660,    40,
     473,   192,   566,   192,   566,   642,   192,   566,   192,   566,
     192,   567,   663,    89,   707,   152,   487,    90,   129,   308,
     426,   192,   567,   152,   523,   990,    63,   361,   525,   683,
     152,   525,   683,   152,   290,   688,   689,   883,   992,   356,
     522,   525,     4,   160,   290,   440,   512,   513,   540,   543,
     569,   693,   695,   696,   699,   985,   694,   433,   521,   582,
     586,   883,   932,   521,     3,    68,    69,   109,   110,   113,
     114,   189,   190,   253,   254,   255,   256,   257,   258,   259,
     260,   263,   264,   338,   339,   379,   380,   477,   478,   501,
     502,   569,   869,   870,   871,   872,   873,   874,   875,   876,
     877,   878,   879,   880,   881,   937,   938,   829,   830,   883,
     566,   883,   939,   512,   513,   567,   884,   885,   914,   925,
     941,   521,   883,   931,   942,   883,    58,   172,   233,   434,
     883,   932,   945,   883,   522,   568,   521,   423,   784,   785,
     785,   766,   767,   817,   220,   761,   827,   785,   785,   785,
      37,   225,   384,   831,   225,   300,   832,   817,   832,   225,
     831,   521,   225,   832,   148,   200,   819,   225,   785,   521,
     568,   521,   785,   297,   883,  1011,  1013,   934,     3,    37,
      42,    49,    54,    55,    56,    57,    71,    72,    81,    83,
      89,   101,   112,   115,   165,   171,   173,   177,   194,   209,
     216,   217,   219,   222,   223,   225,   235,   237,   247,   268,
     269,   270,   278,   283,   300,   302,   323,   343,   365,   369,
     384,   391,   395,   398,   414,   423,   431,   432,   443,   449,
     454,   467,   471,   643,   646,   845,   847,   848,   850,   852,
     854,   856,   858,   859,   860,   862,   863,   866,   867,   936,
     988,    40,   236,   567,   521,   519,   743,   470,   865,   883,
     951,   865,   865,   521,   521,   853,   853,   326,   743,   521,
     855,   530,    71,    72,   865,   883,   853,   521,   521,   485,
     507,   521,   868,   521,   868,   521,   883,   883,   883,    83,
     148,   965,   969,   883,   932,   933,   743,   883,   931,   573,
       9,   568,   915,   916,   917,   523,   526,   570,   956,   570,
     521,   569,   521,   521,   569,   985,     3,     8,    11,    15,
      16,    17,    18,    19,    20,    21,    36,    40,    46,    53,
      80,   177,   194,   199,   222,   223,   237,   275,   278,   292,
     295,   395,   505,   508,   509,   510,   512,   513,   514,   515,
     516,   517,   923,   924,   925,   927,   959,   484,   899,   302,
     883,   525,   761,   521,   569,   761,     3,   117,   241,   540,
     569,   867,  1012,   104,  1013,  1013,    40,   567,   522,   525,
     692,   525,   522,   756,   979,   980,   460,   757,   991,   676,
     193,   356,   220,   627,   390,   172,   472,   735,   745,   745,
      30,   771,   772,   883,    59,   745,   765,   164,   272,   792,
     227,   273,   342,   393,   457,     4,     9,    30,   787,   883,
     512,   513,   788,   789,   883,   885,   804,   805,   778,   777,
     775,   776,   167,   807,   285,   809,    59,   751,   752,   753,
     820,   884,   963,   963,   775,   804,   932,   236,   566,    74,
      82,    93,   169,   192,   330,   450,   567,   609,   619,   634,
      82,    93,   741,    93,   741,   521,   433,   311,   401,   521,
     607,   245,   311,   401,   453,   607,    93,   525,   433,   566,
       3,   850,   540,    59,   542,   540,   540,   106,   251,   261,
      59,   433,   483,   507,   539,   266,   374,   539,   541,   834,
      93,   433,   741,   374,   566,   433,   374,   558,   569,   567,
     582,   520,   526,   934,   934,   935,   193,   359,   768,   525,
     769,   770,    13,    14,   222,   222,   433,   433,   567,   626,
     631,   483,   585,   566,   346,   385,   421,   473,   657,   381,
     152,   100,   592,   661,   669,   704,  1019,   144,   847,   566,
     275,   538,   670,   275,   521,   627,    40,   275,   627,   275,
     521,   651,   652,   653,   654,   655,   656,   658,   275,   199,
     665,   192,   567,   621,   708,   573,   152,   172,   686,   682,
     572,   523,   989,   979,   982,   982,   989,   522,   525,    13,
     694,   700,     4,   985,     4,   985,   569,   573,   584,   591,
      55,   102,   123,   141,   145,   168,   171,   187,   280,   288,
     310,   340,   588,    40,   522,   883,   522,   172,   525,   522,
     319,   940,   522,   884,   884,    11,    15,    16,    19,    20,
      21,   199,   222,   292,   508,   509,   510,   512,   513,   514,
     515,   516,   517,   925,   884,   522,   836,   837,   895,   167,
     172,   943,   944,   525,   522,    40,   945,   932,   945,   945,
     172,   522,    40,   828,   521,   980,     4,     9,   567,   779,
     780,   782,   783,   888,   963,   961,   178,   241,   421,   425,
     427,   453,   566,   762,   480,   840,   522,   817,   225,   817,
     290,   460,   833,   817,   225,   963,   817,   282,   282,   521,
     817,   568,   841,   842,   521,   568,   841,   525,   522,   525,
     523,   521,   850,   521,   521,   523,    39,   849,   521,   869,
     870,   871,   872,   873,   874,   875,   876,   877,   878,   879,
     880,   881,   882,   522,   525,   853,   574,   675,   711,   716,
     739,   742,   997,  1014,   932,   933,   521,   479,   948,   949,
     883,   933,   985,   883,   918,   919,   920,   921,   865,   865,
       8,    15,    16,    19,    20,    21,   508,   509,   510,   512,
     513,   514,   515,   516,   517,   567,   923,   928,   522,   932,
     431,   431,   985,   985,   883,   521,   521,   568,   966,   356,
     973,   167,   520,   522,   525,   526,   525,   531,   514,   883,
     571,   932,   985,   883,   882,   882,   847,   883,   883,   883,
     883,   883,   883,   883,   883,     5,   573,   993,   431,    45,
     418,   960,   989,   883,   883,   521,   743,   889,   946,   954,
     132,   160,   275,   280,   285,   440,   451,   883,   280,   521,
     883,   433,    53,   177,   194,   199,   237,   395,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,    30,    38,
     400,   922,   519,   523,   958,   181,   163,   900,   369,   521,
     914,   964,   172,   813,   934,   813,   521,   569,   567,   566,
    1001,   555,   566,   883,   525,   522,   227,    40,   460,   678,
     566,   713,   521,   567,   718,   728,   729,   731,   567,   569,
     567,   569,    41,   126,   773,   525,   460,   773,   266,   745,
     369,   370,   512,   513,   789,   791,   885,   393,   227,   291,
     314,   314,   525,   516,     4,   790,   985,   790,   369,   370,
     791,   566,   978,   279,   397,   810,   521,   980,   981,   525,
     181,   460,   199,   181,   220,   805,   776,   522,   354,   552,
     521,   192,   619,   982,   227,   275,   227,   460,   521,   612,
     846,   847,   982,   567,   192,   982,   192,   567,    26,   137,
     390,   548,   551,   573,   603,   617,   982,    59,    59,   573,
     611,   630,    59,    59,   982,   549,   982,   354,   390,   538,
     552,   540,   989,   982,   540,   989,   982,   540,   354,   390,
     552,   982,   982,   982,   982,   354,   390,   552,   982,   982,
     569,   559,   513,   883,   955,   769,   769,   769,   282,   282,
     522,   469,   935,   768,   883,   883,   280,   564,   569,   280,
     564,   567,   335,   581,   522,   525,   288,   172,   433,   576,
     660,   473,   566,   566,   642,   566,   566,   663,   566,   295,
     638,   521,   743,   521,   152,   152,   237,   567,   609,   619,
     622,   625,   635,   637,   483,   485,   614,   151,   742,   152,
     483,   709,   152,   522,   934,   525,   525,    40,   152,     3,
     521,   275,   290,   567,     3,   683,   572,   683,   290,   683,
     688,   883,   582,   247,   514,   519,   521,   540,   583,   699,
     890,   891,   892,   522,   525,    40,   580,   569,   580,   275,
     280,   340,   580,    59,   580,   847,   522,   883,   883,   883,
     943,   847,   884,   884,   884,   884,   884,   884,   132,   275,
     285,   884,   884,   884,   884,   884,   884,   884,   884,   884,
     884,   522,   525,    40,   838,   883,   883,   944,   943,   847,
     522,   522,   522,   932,   847,   980,   522,   314,   370,   516,
     521,   521,   761,   425,   427,   425,   427,   566,   763,   763,
     763,   883,   181,   793,   833,   817,   883,   521,   817,   167,
     521,   568,   824,   833,   847,   522,   525,   841,   522,  1011,
       3,   936,    39,   849,   567,   844,   844,     3,   519,   519,
     985,   433,   433,   433,   433,   847,   457,   522,   520,   932,
     883,   139,   949,   950,   522,   522,   522,   526,   525,   531,
     523,   522,   522,   504,   504,   522,   522,   522,   883,   966,
     967,   968,   523,   521,   883,   970,   354,   977,   567,   897,
     952,   953,   883,   883,   915,   969,   522,   522,   522,   504,
     884,   884,   145,   932,   172,   132,   160,   280,   285,   440,
     451,   521,   145,   928,   883,   418,   960,   883,   946,   883,
     433,   521,   743,   883,   955,   572,   521,   521,   155,   901,
     814,   815,   840,   769,   840,   985,   882,   991,   991,   521,
     250,   275,   760,   815,   480,   677,    40,    59,   714,   724,
     731,   956,   525,   813,   510,   735,   735,   506,   774,   772,
     292,   923,   926,   774,     4,   985,   791,   291,   457,   788,
     525,   244,   980,   751,    59,   963,   521,   568,    59,   266,
     433,   883,   275,   634,   521,   152,   521,   612,   203,   631,
     632,   593,    40,   176,   602,   628,   593,    26,   137,   358,
     360,   390,   545,   546,   547,   553,   554,   152,   683,   152,
     683,   603,   617,   603,   522,   525,   569,   596,   510,   523,
     522,   525,   521,   521,   433,   374,    93,   433,   741,   374,
     433,   433,   433,   374,   559,   582,   526,   520,   526,   768,
     768,   768,   935,   522,   521,   575,     3,   408,   409,   569,
     590,   626,   581,   566,   670,   521,    40,   627,   654,   656,
     665,   660,   356,   421,   569,   672,   673,   631,   566,   566,
     642,   566,   522,   525,   288,   607,   288,   290,   606,   982,
     483,   641,   566,   607,    40,   566,   522,   652,   658,   655,
     658,   421,   883,   663,   573,   667,   668,   152,   566,   686,
     989,   578,   589,   699,   584,   569,   569,   280,   631,   514,
     631,   569,   514,   631,   569,   522,   522,   944,   172,   132,
     285,   521,   839,   836,   521,   522,   522,   522,   567,   780,
     840,   763,   763,   763,   763,   566,   566,   566,    59,   186,
     802,   833,   980,   521,   821,   822,   823,   886,   889,   980,
     167,    80,   843,   842,   522,   522,   519,   847,   522,   525,
     522,   985,   520,   985,   522,   870,   872,   873,   874,   873,
     874,   874,   522,   429,   883,   143,   883,   918,   928,   868,
     868,   522,   525,   522,   568,   883,   970,   971,   972,    40,
     521,   966,   974,   199,   525,   522,   973,   882,   883,    36,
      36,   883,   522,   883,   172,   521,   936,   883,   522,   145,
     884,   884,   145,   145,   883,   883,   520,   526,   521,   957,
     770,   480,   883,   301,   905,   525,   793,   768,   793,   522,
     758,   759,   953,   250,   521,   883,   362,   722,   567,   266,
     322,   117,   304,   521,   712,   742,   522,   525,   718,   677,
     883,   164,   231,   521,   774,   291,   566,   522,   981,   181,
     743,   744,   963,   981,   982,   982,   522,   152,   632,   619,
     632,   593,   621,   525,   522,   119,   207,   273,   275,   618,
     521,    33,    59,   639,   628,    74,    80,    93,   117,   119,
     207,   275,   280,   330,   348,   450,   460,   598,   599,   613,
     176,   117,   191,   275,   607,   539,   107,   117,   176,   275,
     407,   410,   541,   607,   390,   547,   444,   982,   567,   551,
       3,    37,    42,    49,    55,    81,    83,    89,   101,   171,
     173,   176,   177,   194,   209,   222,   223,   225,   235,   237,
     247,   269,   274,   278,   292,   300,   302,   323,   365,   384,
     391,   395,   414,   423,   443,   449,   454,   471,   512,   513,
     540,   569,   594,   633,   643,   649,   847,   926,   986,   573,
     630,   932,   771,   982,   982,   982,   982,   982,   982,   982,
     982,   982,   982,   582,   955,   955,   522,   522,   522,   769,
     107,   374,   523,   539,   590,   521,   625,   742,   709,   521,
     638,   192,   566,   522,   525,   522,   670,   521,    40,   616,
     614,   622,    86,   690,   107,   273,   627,   742,   654,   656,
      40,    40,   743,   744,   665,   666,   883,   522,   525,   621,
     460,   706,   683,   522,   525,   631,   884,   172,   521,   936,
     841,   522,   525,   522,   793,   566,   566,   566,   566,    30,
     103,   182,   368,   521,   794,   795,   796,   797,   798,   799,
     800,   883,   883,   482,   902,   522,   885,   929,   930,   199,
     181,   818,   822,   522,   824,   825,   826,   989,   849,   985,
     849,   567,   849,   520,   520,   883,   966,   525,   522,   567,
     974,   975,   976,    40,   883,   885,   953,   977,   883,   883,
     883,   936,   522,   883,    36,    36,   883,   883,   145,   522,
     513,   955,   522,   934,   522,   883,   522,   521,   567,   906,
     802,   522,   802,   569,   522,   525,   739,   962,   466,   420,
     459,   723,   567,   717,   727,   290,   720,   510,   731,   722,
     928,    59,   522,   522,   465,   466,   748,   593,   619,   522,
     522,   483,   624,   120,   195,   205,   119,   462,   883,   117,
      40,   521,   989,   982,   884,   120,   195,   119,   280,   227,
     566,   624,    88,   639,   192,   280,   540,   883,   639,   280,
     512,   513,   543,   567,   846,   847,   683,   683,     3,   247,
     414,   986,   990,   510,   522,   522,   433,   433,   520,   520,
     768,   522,   522,   567,   582,   460,   577,   579,   631,   522,
     641,    40,   668,   421,   275,   521,   569,   709,   625,   151,
     742,   149,   201,   606,   122,   137,   329,   641,   107,   709,
     483,  1020,   421,   521,   667,   290,   567,   705,   521,   589,
     884,   936,   522,   522,     9,   355,   786,   802,   521,   392,
     521,   522,   525,   567,   903,   904,   337,   803,   525,   522,
     521,   568,    59,   522,   199,   522,   825,   520,   847,   970,
     525,   522,   567,   520,   192,   522,   883,   883,   883,   526,
     520,   526,   522,   522,   567,   907,   902,   569,   902,   953,
     522,   525,   465,   956,   522,   525,    91,   722,   883,   522,
     981,   981,   348,   624,   521,   615,   593,   522,   191,   521,
     883,   275,   599,   624,   627,   982,    40,   152,   843,   990,
     516,   594,   982,   982,   522,   539,   124,   522,   614,   742,
     522,   566,   152,    40,   522,   982,   641,    30,    85,    94,
     118,   191,   204,   407,   410,   610,   610,   370,   370,    40,
      64,    74,   241,   743,   668,   566,   521,   567,   721,   730,
     895,   522,   522,   521,   902,   932,   521,   932,   796,    40,
     525,   883,   460,   781,   885,   963,   980,   829,   521,   829,
     974,   883,   955,   955,   310,   908,   803,   803,   742,   304,
     742,   717,   290,   521,   715,   566,   593,   573,   620,   623,
     411,   475,   600,   601,   521,   595,   883,   522,   249,   636,
     191,   460,   550,   516,   444,   582,   569,   709,   606,  1020,
     521,   566,   742,   614,   690,   742,    74,   293,    74,   522,
     706,   883,    80,   725,   522,   525,   725,     9,   803,   522,
     795,   522,   906,   904,   372,   522,   963,   520,   520,   520,
      59,   769,   781,   781,   723,    93,   730,   133,   627,   510,
     522,   525,   538,   522,   273,   608,   173,   309,   396,   290,
     604,   605,   629,   595,   883,   444,    40,   521,  1020,   606,
     641,  1020,   293,   293,   521,   522,   989,   726,   989,   709,
     721,   726,   522,   781,   522,   783,   522,   931,   184,   341,
     370,   909,   465,   982,   522,   276,   457,   636,   594,   623,
     522,   601,   205,   122,   457,   290,   629,   290,   604,   742,
     730,   725,   773,   840,   773,    53,   104,   446,   883,   910,
     911,   910,   910,   522,   742,   840,   390,   605,    63,   273,
     361,   390,   597,   597,  1020,   522,   726,   774,   774,   911,
     369,   166,   325,   166,   325,   148,   912,   912,   912,   729,
     593,    25,   117,   280,   709,   773,    36,   104,   181,   273,
     430,   840,   840,   774,   911,   369,   298
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   532,   533,   534,   534,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   535,   535,   535,
     535,   535,   535,   535,   535,   535,   535,   544,   544,   544,
     544,   544,   544,   544,   544,   545,   545,   546,   546,   547,
     547,   547,   547,   548,   548,   549,   549,   549,   549,   549,
     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
     549,   549,   549,   549,   549,   549,   549,   549,   549,   549,
     549,   549,   549,   549,   549,   549,   549,   549,   550,   550,
     551,   551,   551,   551,   552,   552,   553,   554,   554,   554,
     674,   674,   674,   674,   566,   566,   567,   567,   567,   568,
     568,   569,   570,   570,   571,   572,   573,   573,   573,   573,
     740,   740,   740,   740,   740,   740,   740,   740,   740,   740,
     740,   740,   740,   741,   741,   711,   712,   712,   712,   712,
     712,   713,   713,   714,   714,   714,   715,   715,   715,   716,
     716,   717,   718,   718,   719,   719,   719,   720,   720,   720,
     721,   721,   721,   722,   722,   723,   723,   724,   724,   725,
     725,   726,   726,   727,   727,   728,   728,   729,   729,   730,
     730,   731,   671,   671,   671,   672,   672,   673,   673,   736,
     736,   736,   669,   669,   669,   670,   670,   662,   662,   662,
     663,   663,   664,   664,   664,   665,   665,   666,   667,   668,
     668,   998,   687,   687,   687,   688,   688,   689,   689,   690,
     690,   537,   537,   538,   538,   539,   539,   539,   540,   540,
     540,   540,   541,   541,   541,   541,   541,   541,   541,   541,
     541,   541,   541,   541,   541,   541,   542,   542,   543,   543,
     543,   685,   685,   686,   686,   994,   994,   994,   994,   994,
     994,   995,   995,   995,   996,   996,   996,   999,   592,   592,
     592,   593,   593,   594,   594,   594,   594,   594,   594,   595,
     595,   596,   597,   597,   597,   597,   597,   598,   598,   598,
     598,   599,   599,   599,   599,   599,   599,   599,   599,   600,
     600,   601,   601,   602,   602,   602,   603,   604,   605,   605,
     605,   605,   605,   606,   606,   606,   606,   607,   608,   608,
     609,   609,   610,   610,   610,   610,   610,   610,   610,   610,
     611,   611,   612,   613,   613,   613,   613,   614,   614,   614,
     614,   615,   616,   616,   616,   617,   618,   618,   618,   618,
     618,   618,   619,   619,   620,   620,   621,   622,   622,   622,
     623,   623,   624,   624,   625,   625,   625,   626,   627,   627,
     628,   628,   629,   630,   630,   630,   630,   631,   631,   632,
     632,   633,   633,   633,   634,   634,   634,   634,   634,   634,
     635,   635,   636,   636,   636,   636,   637,   638,   638,   638,
     638,   638,   638,   638,   638,   639,   639,   679,   679,   679,
     679,   679,   679,   680,   680,   680,   680,   680,   680,   680,
     680,   680,   680,   680,   680,   680,   680,   680,   680,   680,
     680,   681,   681,   681,   681,   681,   681,   682,   682,   683,
     683,   683,   684,   684,   684,   650,   650,   650,   650,   650,
     650,   651,   652,   653,   653,   654,   654,   655,   656,   656,
     657,   657,   658,   658,   997,   574,   574,   574,   575,   575,
     575,   576,   576,   577,   577,   578,   578,   579,   579,   580,
     580,   581,   581,   582,   582,   583,   583,   583,   583,   583,
     583,   583,   583,   584,   585,   585,   586,   586,   587,   587,
     588,   588,   588,   588,   588,   588,   588,   588,   588,   588,
     588,   588,   588,   588,   588,   588,   589,   590,   590,   590,
     590,   590,   591,   591,   742,   742,   743,   743,   743,   744,
     744,   744,   744,   744,   744,   744,   744,   745,   745,   746,
     746,   747,   747,   747,   747,   747,   747,   747,   747,   747,
     747,   747,   747,   747,   747,   747,   747,   747,   747,   747,
     748,   748,   749,   749,   750,   750,   751,   751,   751,   752,
     752,   753,   753,   754,   754,   754,   755,   755,   756,   757,
     757,   758,   758,   759,   759,   760,   760,   760,   761,   761,
     762,   762,   762,   762,   762,   762,   762,   762,   762,   763,
     763,   764,   764,   764,   765,   766,   766,   767,   767,   768,
     768,   768,   769,   769,   770,   770,   771,   771,   772,   772,
     773,   773,   773,   774,   774,   774,   775,   775,   775,   775,
     776,   776,   777,   777,   777,   777,   778,   778,   779,   779,
     779,   780,   780,   780,   780,   781,   781,   782,   782,   783,
     783,   783,   783,   784,   785,   785,   786,   786,   787,   787,
     787,   787,   787,   788,   789,   789,   789,   790,   790,   791,
     791,   792,   792,   793,   793,   793,   794,   794,   795,   795,
     796,   796,   796,   796,   796,   797,   798,   799,   800,   801,
     801,   802,   802,   803,   803,   804,   804,   805,   805,   806,
     806,   807,   808,   808,   808,   808,   809,   809,   810,   810,
     810,   811,   811,   812,   812,   813,   813,   814,   814,   815,
     815,   816,   817,   817,   817,   817,   817,   817,   817,   817,
     817,   817,   817,   817,   817,   817,   818,   818,   819,   819,
     819,   820,   820,   821,   821,   821,   822,   822,   823,   823,
     824,   824,   825,   826,   826,   827,   827,   827,   827,   827,
     827,   827,   827,   827,   827,   827,   828,   828,   828,   828,
     829,   829,   830,   830,   830,   830,   830,   831,   831,   831,
     831,   831,   831,   832,   832,   833,   833,   834,   834,   834,
     834,   835,   835,   836,   837,   837,   838,   838,   839,   839,
     840,   840,   841,   841,   842,   843,   843,   844,   844,   845,
     845,   846,   846,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   848,   848,   849,   849,   849,   850,   850,
     850,   850,   850,   850,   850,   851,   851,   851,   851,   852,
     853,   853,   854,   854,   854,   854,   854,   854,   854,   854,
     854,   854,   854,   855,   855,   856,   856,   857,   857,   858,
     859,   860,   860,   861,   861,   862,   863,   864,   864,   864,
     864,   864,   864,   865,   865,   866,   866,   866,   866,   867,
     868,   868,   868,   869,   869,   870,   870,   871,   871,   872,
     872,   873,   873,   874,   874,   875,   875,   876,   876,   877,
     877,   878,   878,   879,   879,   880,   880,   881,   881,   882,
     882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
     882,   882,   882,   882,   882,   882,   882,   882,   882,   882,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   884,   884,   884,   884,   884,   884,   884,   884,
     884,   884,   884,   884,   884,   884,   884,   884,   884,   884,
     884,   884,   884,   884,   884,   884,   884,   885,   885,   886,
     886,   886,   886,   886,   886,   887,   887,   887,   888,   888,
     888,   889,   889,   889,   889,   889,   889,   889,   889,   889,
     889,   890,   891,   892,   893,   893,   893,   893,   893,   893,
     893,   894,   894,   895,   895,   896,   896,   896,   896,   896,
     896,   896,   896,   896,   896,   896,   896,   896,   896,   897,
     898,   898,   899,   899,   900,   900,   900,   901,   901,   902,
     902,   903,   903,   904,   905,   905,   905,   906,   907,   907,
     908,   908,   909,   909,   909,   909,   910,   910,   911,   911,
     911,   911,   911,   912,   912,   912,   912,   912,   913,   913,
     914,   914,   915,   916,   916,   917,   917,   918,   919,   919,
     920,   920,   921,   921,   922,   922,   922,   923,   923,   924,
     924,   924,   924,   924,   924,   924,   924,   924,   924,   924,
     924,   924,   924,   925,   925,   926,   926,   927,   927,   927,
     927,   927,   927,   927,   927,   928,   928,   929,   929,   930,
     930,   931,   931,   932,   932,   933,   933,   934,   934,   935,
     935,   935,   936,   936,   937,   937,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     938,   939,   939,   940,   941,   941,   942,   942,   942,   942,
     942,   942,   943,   944,   945,   945,   945,   946,   946,   946,
     946,   947,   948,   948,   949,   950,   950,   951,   951,   952,
     952,   953,   954,   954,   571,   571,   571,   571,   955,   955,
     956,   956,   957,   957,   957,   958,   958,   958,   958,   958,
     959,   959,   960,   960,   961,   961,   962,   962,   963,   963,
     964,   964,   964,   964,   965,   965,   966,   966,   967,   967,
     968,   968,   969,   969,   970,   971,   971,   972,   972,   973,
     973,   973,   974,   975,   975,   976,   976,   977,   977,   977,
     978,   978,   979,   979,   980,   980,   981,   981,   982,   983,
     983,   984,   984,   984,   984,   984,   984,   984,   984,   984,
     984,   984,   984,   984,   984,   985,   986,   986,   986,   987,
     987,   987,   988,   988,   988,   989,   989,   990,   990,   991,
     991,   992,   993,   993,   737,   738,   738,   739,   739,   739,
     739,   739,   739,   659,   659,   659,   660,   660,   661,   661,
     661,   661,   704,   704,   705,   706,   706,   707,   707,   708,
     708,   709,   709,   710,   710,   536,   536,   536,   536,   536,
     536,   561,   561,   562,   562,   563,   563,   564,   564,   565,
     565,   565,   565,   565,   565,   565,   565,   565,   565,   702,
     702,   703,   691,   691,   691,   691,   692,   692,   693,   693,
     693,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   694,   694,   694,   694,   694,   694,   694,   694,
     694,   694,   695,   695,   695,   696,   696,   697,   697,   698,
     698,   699,   699,   699,   699,   700,   701,   701,  1008,  1008,
    1008,  1008,  1008,  1009,  1009,  1009,  1009,  1010,  1010,  1011,
    1012,  1012,  1012,  1012,  1012,  1012,  1012,  1013,  1013,   732,
     732,   732,   732,   733,   733,   734,   734,   735,   735,   735,
    1000,  1000,  1000,  1000,  1000,  1001,  1001,  1001,  1001,  1001,
    1002,  1002,  1003,  1003,  1004,  1004,   675,   675,   676,   676,
     676,   677,   677,   678,   678,   555,   555,   556,   556,   556,
     557,   557,   557,   558,   558,   559,   559,  1005,  1005,  1005,
    1005,  1005,  1006,  1006,  1007,  1007,  1007,  1014,  1014,  1014,
    1014,  1014,  1014,  1014,  1014,  1015,  1015,  1016,  1016,  1017,
    1017,  1018,  1018,   560,  1019,  1019,  1019,  1019,  1019,  1020,
    1020,  1020,  1020,   640,   640,   640,   641,   641,   641,   642,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   643,   643,   643,
     643,   643,   643,   643,   643,   643,   643,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   644,   644,   644,   644,   644,   644,   644,   644,   644,
     644,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   645,
     645,   645,   645,   645,   645,   645,   645,   645,   645,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   646,
     646,   646,   646,   646,   646,   646,   646,   646,   646,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   647,   647,   647,   647,   647,   647,   647,   647,   647,
     647,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   648,   648,   648,   648,   648,   648,
     648,   648,   648,   648,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     4,     6,     4,
       6,     4,     6,     4,     6,     1,     2,     3,     2,     1,
       3,     2,     3,     1,     3,     2,     5,     3,     6,     6,
       3,     6,     3,     4,     6,     6,     6,     5,     5,     6,
       9,     4,     5,     7,     6,     4,     8,     4,     2,     4,
       3,     6,     4,     2,     2,     2,     2,     1,     2,     0,
       1,     2,     2,     2,     1,     3,     4,     2,     1,     0,
       2,     3,     2,     3,     1,     2,     1,     1,     1,     1,
       1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
       6,     6,     8,     6,     8,     6,     8,     6,     8,     8,
      10,     8,    10,     1,     0,     9,     1,     4,     4,     7,
       2,     1,     3,     2,     2,     0,     4,     3,     0,     1,
       0,     2,     3,     5,     2,     2,     0,     8,     5,     0,
       5,     5,     7,     2,     0,     1,     1,     1,     3,     2,
       0,     1,     0,     1,     3,     1,     3,     1,     2,     1,
       3,     2,     6,     8,     5,     1,     0,     1,     3,     2,
       4,     5,     5,     8,     7,     1,     0,     8,    11,    10,
       0,     1,     0,     1,     1,     0,     2,     1,     2,     1,
       3,     4,     3,     9,    12,     1,     3,     1,     3,     3,
       0,     4,     6,     1,     2,     1,     1,     0,     1,     2,
       2,     1,     2,     2,     1,     2,     3,     2,     2,     2,
       2,     3,     3,     3,     1,     3,     1,     0,     1,     2,
       2,     5,     7,     0,     2,     2,     3,     3,     2,     2,
       2,     1,     1,     0,     2,     2,     0,     2,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     1,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       1,     2,     2,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     1,     1,     1,     5,     8,     7,     5,     8,
       7,     4,     4,     1,     3,     1,     1,     3,     1,     3,
       1,     1,     2,     3,     8,    11,     9,     7,     0,     3,
       3,     1,     1,     3,     0,     1,     3,     1,     0,     1,
       0,     1,     0,     1,     3,     1,     1,     1,     1,     3,
       1,     1,     0,     2,     2,     0,     2,     0,     1,     0,
       1,     1,     1,     3,     3,     1,     1,     3,     3,     3,
       3,     3,     3,     4,     3,     2,     1,     1,     1,     1,
       3,     1,     1,     3,     1,     1,     3,     3,     3,     1,
       2,     4,     4,     2,     3,     5,     5,     1,     1,     3,
       0,    11,    11,    10,    12,     1,     2,     5,     4,     4,
       4,     4,     7,     5,     4,     7,     6,     9,     9,     4,
       1,     1,     1,     1,     1,     1,     1,     5,     1,     1,
       3,     1,     2,     2,     2,     3,     1,     3,     8,     5,
       0,     1,     2,     1,     3,     1,     2,     0,     2,     0,
       3,     3,     4,     4,     4,     4,     3,     2,     1,     1,
       0,     1,     1,     0,     2,     1,     5,     1,     0,     2,
       2,     0,     1,     0,     3,     5,     1,     3,     4,     3,
       1,     1,     0,     2,     2,     0,     2,     2,     1,     1,
       1,     0,     2,     4,     5,     4,     2,     3,     1,     1,
       1,     2,     2,     1,     2,     3,     0,     1,     0,     5,
       1,     4,     6,     2,     1,     0,     4,     0,     1,     1,
       2,     2,     2,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     3,     3,     0,     1,     3,     1,     2,
       1,     1,     1,     1,     1,     2,     4,     4,     5,     1,
       1,     2,     0,     2,     0,     1,     3,     1,     0,     1,
       2,     3,     2,     4,     2,     3,     2,     0,     1,     2,
       0,     4,     5,     1,     2,     2,     0,     1,     3,     1,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     1,     4,     4,     9,     9,     3,     0,     2,     2,
       0,     5,     3,     1,     1,     3,     5,     3,     1,     2,
       1,     3,     5,     1,     2,     3,     4,     5,     4,     5,
       4,     6,     5,     4,     5,     5,     5,     2,     4,     1,
       1,     0,     1,     4,     5,     4,     0,     2,     2,     2,
       1,     1,     1,     1,     0,     4,     2,     1,     2,     2,
       4,     2,     6,     2,     1,     3,     4,     0,     2,     0,
       2,     0,     1,     3,     3,     2,     0,     2,     4,     1,
       1,     1,     0,     2,     3,     5,     6,     2,     3,     1,
       5,     5,     5,     3,     3,     3,     4,     0,     1,     1,
       1,     1,     1,     2,     4,     1,     1,     1,     1,     2,
       3,     0,     1,     1,     1,     1,     1,     2,     2,     2,
       2,     2,     1,     3,     0,     1,     1,     1,     1,     5,
       2,     1,     1,     1,     1,     4,     1,     2,     2,     1,
       3,     3,     2,     1,     0,     5,     2,     5,     2,     1,
       3,     3,     0,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,
       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,
       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,
       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,
       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
       6,     7,     3,     4,     4,     6,     1,     4,     4,     5,
       4,     6,     1,     3,     2,     2,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     2,     2,     5,     6,     6,     7,     1,     2,     1,
       1,     1,     2,     2,     4,     3,     1,     1,     1,     1,
       2,     1,     1,     1,     1,     1,     1,     1,     2,     4,
       2,     3,     3,     4,     3,     5,     6,     7,     9,     7,
       7,     5,     1,     1,     1,     5,     6,     6,     4,     4,
       4,     4,     6,     5,     5,     5,     4,     6,     4,     1,
       7,     9,     5,     0,     5,     4,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     3,     3,     3,     0,     1,     4,     2,     2,
       2,     2,     2,     3,     2,     2,     3,     0,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     3,     2,     3,     0,     3,     3,     2,     2,
       1,     0,     2,     2,     3,     2,     1,     1,     3,     1,
       1,     5,     1,     2,     4,     2,     0,     1,     0,     1,
       3,     1,     1,     2,     3,     5,     7,     7,     1,     0,
       0,     2,     0,     2,     3,     3,     3,     5,     7,     7,
       0,     2,     1,     0,     1,     0,     1,     3,     1,     2,
       3,     2,     1,     3,     4,     2,     1,     3,     1,     3,
       1,     2,     1,     0,     3,     1,     3,     1,     2,     4,
       2,     0,     3,     1,     3,     1,     2,     4,     2,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     1,     1,
       2,     1,     1,     2,     1,     1,     2,     7,     2,     5,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
       0,     1,     1,     1,     5,     3,     0,     1,     1,     1,
       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,
       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,
       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,
       8,     3,     2,     1,     0,     6,     6,     1,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     1,     1,     4,
       6,     3,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
       1,     1,     1,     1,     1,     2,     1,     1,     2,     3,
       3,     3,     3,     1,     3,     3,     2,     3,     3,     1,
       1,     1,     3,     5,     1,     1,     1,     1,     3,     2,
       4,     6,     6,     0,     1,     1,     1,     0,     2,     2,
       4,     6,     5,     4,     6,     1,     1,     1,     1,     1,
       1,     0,     1,     3,     1,     0,     7,     3,     1,     2,
       3,     2,     0,     2,     0,     2,     4,     5,     8,     7,
       2,     3,     5,     1,     0,     2,     0,     2,     3,     3,
       3,     3,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     3,     4,     3,     1,     1,     1,     1,     1,     1,
       0,     1,     3,     2,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 512 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 19542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 528 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 19558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 540 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 19569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* stmt: %empty  */
#line 590 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 19685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 19691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 19697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 19703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 19711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 19719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 19734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 19742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 19750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 19758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: SET PARTITIONED BY '(' expr_list_opt_comma ')'  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: RESET PARTITIONED BY  */
#line 184 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetPartitionedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: SET SORTED BY '(' sortby_list ')'  */
#line 192 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: RESET SORTED BY  */
#line 200 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetSortedBy;
					n->def_list = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 208 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 217 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 225 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 233 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 19896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 242 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 251 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 260 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 19932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 269 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 19952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 286 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 295 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 313 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 323 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P opt_Typename opt_collate_clause alter_using  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: ADD_P TableConstraint  */
#line 360 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 20055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 368 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 383 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 391 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_table_cmd: SET LOGGED  */
#line 411 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_table_cmd: SET UNLOGGED  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 20130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_table_cmd: SET reloptions  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_table_cmd: RESET reloptions  */
#line 433 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 20152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_table_cmd: alter_generic_options  */
#line 440 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 20163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_using: USING a_expr  */
#line 450 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 20169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_using: %empty  */
#line 451 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 20175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_option_elem: generic_option_elem  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 20183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* alter_generic_option_elem: SET generic_option_elem  */
#line 461 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 20192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 466 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 20201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* alter_generic_option_elem: DROP generic_option_name  */
#line 471 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 20209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* alter_table_cmds: alter_table_cmd  */
#line 478 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 479 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 484 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* opt_set_data: SET DATA_P  */
#line 488 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 20233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* opt_set_data: SET  */
#line 489 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* opt_set_data: %empty  */
#line 490 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 20245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 20265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 20285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 20293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 20323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 20409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 20598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 20604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 20660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 20670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 20678 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 20687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 20693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 20705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 20717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 20737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 20743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 20749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 20761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 20770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 20795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 20803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 20811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 20832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 20845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 20853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20883 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 20898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 20910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 20916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 20922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 20934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 20958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 20970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 20982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 21006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 21018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 21044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 21063 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 21069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 21180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-9].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name opt_storage_specifier '(' create_secret_generic_opt_list ')'  */
#line 28 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_type = (yyvsp[-6].str);
					n->secret_name = (yyvsp[-4].str);
					n->secret_storage = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* opt_secret_name: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 21228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* opt_secret_name: ColId  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 21234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* opt_persist: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* opt_persist: TEMPORARY  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 21246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: PERSISTENT  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("persistent"); }
#line 21252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_storage_specifier: %empty  */
#line 51 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_storage_specifier: IN_P IDENT  */
#line 52 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* create_secret_generic_opt_arg: a_expr  */
#line 57 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 21270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* create_secret_generic_opt_elem: ColLabel create_secret_generic_opt_arg  */
#line 62 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 21278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* create_secret_generic_opt_list: create_secret_generic_opt_elem  */
#line 69 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* create_secret_generic_opt_list: create_secret_generic_opt_list ',' create_secret_generic_opt_elem  */
#line 73 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* UpdateExtensionsStmt: opt_with_clause UPDATE EXTENSIONS opt_column_list  */
#line 8 "third_party/libpg_query/grammar/statements/update_extensions.y"
                                {
					PGUpdateExtensionsStmt *n = makeNode(PGUpdateExtensionsStmt);
					n->extensions = (yyvsp[0].list);

					if ((yyvsp[-3].with)) {
                          ereport(ERROR,
                                  (errcode(PG_ERRCODE_SYNTAX_ERROR),
                                   errmsg("Providing a with clause with an UPDATE EXTENSIONS statement is not allowed"),
                                   parser_errposition((yylsp[-3]))));
                          break;
                    }

					(yyval.node) = (PGNode *)n;
				}
#line 21313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 21324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 21364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 21372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 21413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 21467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21566 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 21631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* DropSecretStmt: DROP opt_persist SECRET ColId opt_storage_drop_specifier  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->persist_type = (yyvsp[-3].str);
					n->secret_name = (yyvsp[-1].str);
					n->secret_storage = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* DropSecretStmt: DROP opt_persist SECRET IF_P EXISTS ColId opt_storage_drop_specifier  */
#line 17 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->persist_type = (yyvsp[-5].str);
                    n->secret_name = (yyvsp[-1].str);
                    n->secret_storage = (yyvsp[0].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 21663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* opt_storage_drop_specifier: %empty  */
#line 28 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = pstrdup(""); }
#line 21669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_storage_drop_specifier: FROM IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                                    { (yyval.str) = (yyvsp[0].str); }
#line 21675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 21687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* TransactionStmt: BEGIN_P opt_transaction opt_transaction_type  */
#line 11 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 21698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* TransactionStmt: START opt_transaction opt_transaction_type  */
#line 18 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					n->transaction_type = (yyvsp[0].transactiontype);
					(yyval.node) = (PGNode *)n;
				}
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* TransactionStmt: COMMIT opt_transaction  */
#line 25 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* TransactionStmt: END_P opt_transaction  */
#line 33 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 21733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 41 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					n->transaction_type = PG_TRANS_TYPE_DEFAULT;
					(yyval.node) = (PGNode *)n;
				}
#line 21745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* opt_transaction: WORK  */
#line 51 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 21751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* opt_transaction: TRANSACTION  */
#line 52 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 21757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* opt_transaction: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 21763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* opt_transaction_type: READ_P ONLY  */
#line 57 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_ONLY; }
#line 21769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* opt_transaction_type: READ_P WRITE_P  */
#line 58 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        { (yyval.transactiontype) = PG_TRANS_TYPE_READ_WRITE; }
#line 21775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* opt_transaction_type: %empty  */
#line 59 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                { (yyval.transactiontype) = PG_TRANS_TYPE_DEFAULT; }
#line 21781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 21842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 21876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 21882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 21894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 21900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 21906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 21912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21918 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 21930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 21936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 21942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 21948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 21954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 21960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 21971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 22000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 22122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 22128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 22134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 22174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 22188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 22220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 22226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 22232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 22238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 22244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 22250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 22268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 22274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 22285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 22297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 22309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 22315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 22321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 22339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 22401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 22413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 22419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 22425 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 22443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 22461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 22467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 22473 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 22479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 22485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 22491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 22514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 22544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 22550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 22562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 22602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22614 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 22620 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 22626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 22634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 22652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 22658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 22672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 22680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 22689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 22697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 22748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 22857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 22881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 22893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 22909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 22920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22938 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 22944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 22966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 22978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 22984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 22990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 23104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name table_macro_list  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name table_macro_list  */
#line 19 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 23293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name table_macro_list  */
#line 30 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 23306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name macro_definition_list  */
#line 40 "third_party/libpg_query/grammar/statements/create_function.y"
             {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
             }
#line 23319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name macro_definition_list  */
#line 50 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name macro_definition_list  */
#line 60 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
				n->name = (yyvsp[-1].range);
				n->functions = (yyvsp[0].list);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 23345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* table_macro_definition: param_list AS TABLE select_no_parens  */
#line 72 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* table_macro_definition_parens: param_list AS TABLE select_with_parens  */
#line 82 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-3].list);
				n->query = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* table_macro_list_internal: table_macro_definition_parens  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 23375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* table_macro_list_internal: table_macro_list_internal ',' table_macro_definition_parens  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
			}
#line 23383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* table_macro_list: table_macro_definition  */
#line 103 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].node));
			}
#line 23391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* macro_definition: param_list AS a_expr  */
#line 111 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGFunctionDefinition *n = makeNode(PGFunctionDefinition);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				(yyval.node) = (PGNode *)n;
			}
#line 23402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* macro_definition_list: macro_definition  */
#line 120 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* macro_definition_list: macro_definition_list ',' macro_definition  */
#line 124 "third_party/libpg_query/grammar/statements/create_function.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* param_list: '(' ')'  */
#line 136 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 23426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* param_list: '(' func_arg_list ')'  */
#line 140 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 23434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 23449 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 23516 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 23522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 23528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 23534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23540 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 23546 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 23600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 23606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 23612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_generic_opt_arg: list_expr  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 23642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_generic_opt_arg: '*'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23654 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_generic_opt_arg: struct_expr  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 23660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_generic_opt_arg: map_expr  */
#line 122 "third_party/libpg_query/grammar/statements/copy.y"
                                                                            { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 23666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_generic_opt_arg: %empty  */
#line 123 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 23672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* opt_oids: WITH OIDS  */
#line 137 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* opt_oids: %empty  */
#line 140 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23694 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_opt_list: %empty  */
#line 146 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 23706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* opt_binary: BINARY  */
#line 152 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23714 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* opt_binary: %empty  */
#line 155 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 23720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* copy_opt_item: BINARY  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* copy_opt_item: OIDS  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* copy_opt_item: FREEZE  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* copy_opt_item: CSV  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* copy_opt_item: HEADER_P  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* copy_opt_item: FORCE QUOTE columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* copy_opt_item: FORCE QUOTE '*'  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* copy_opt_item: PARTITION BY columnList  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* copy_opt_item: PARTITION BY '*'  */
#line 209 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 213 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* copy_opt_item: FORCE NULL_P columnList  */
#line 217 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* copy_opt_item: ENCODING Sconst  */
#line 221 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 228 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* copy_file_name: Sconst  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* copy_file_name: STDIN  */
#line 234 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* copy_file_name: STDOUT  */
#line 235 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 23872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* copy_file_name: IDENT '.' ColId  */
#line 236 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* copy_file_name: IDENT  */
#line 237 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 244 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 248 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 23912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* select_with_parens: '(' VariableShowStmt ')'  */
#line 55 "third_party/libpg_query/grammar/statements/select.y"
                    {
		    	(yyval.node) = (yyvsp[-1].node);
			}
#line 23920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* select_no_parens: simple_select  */
#line 72 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* select_no_parens: select_clause sort_clause  */
#line 74 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 81 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 89 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* select_no_parens: with_clause select_clause  */
#line 97 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 23973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* select_no_parens: with_clause select_clause sort_clause  */
#line 105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 23985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 113 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1), (PGNode*) list_nth((yyvsp[0].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 23997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 121 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1), (PGNode*) list_nth((yyvsp[-1].list), 2),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 24009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* select_clause: simple_select  */
#line 131 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* select_clause: select_with_parens  */
#line 132 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 24029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* opt_select: %empty  */
#line 164 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 24038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 175 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 191 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 24075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 208 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					n->from_first = true;
					(yyval.node) = (PGNode *)n;
				}
#line 24114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* simple_select: values_clause_opt_comma  */
#line 241 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* simple_select: TABLE relation_expr  */
#line 243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 24143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 262 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 24151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 24175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 278 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-3]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 288 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 299 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 318 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-6]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					n->location = (yylsp[-5]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					n->location = (yylsp[-8]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 367 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					n->location = (yylsp[-3]);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* pivot_column_entry: b_expr  */
#line 397 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 403 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 24336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* pivot_column_entry: single_pivot_value  */
#line 409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* pivot_column_list_internal: pivot_column_entry  */
#line 413 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 414 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* pivot_column_list: pivot_column_list_internal  */
#line 418 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* pivot_column_list: pivot_column_list_internal ','  */
#line 419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* with_clause: WITH cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 24377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* with_clause: WITH_LA cte_list  */
#line 441 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 24388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* with_clause: WITH RECURSIVE cte_list  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 24399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* cte_list: common_table_expr  */
#line 457 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* cte_list: cte_list ',' common_table_expr  */
#line 458 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* common_table_expr: name opt_name_list opt_on_key AS opt_materialized '(' PreparableStmt ')'  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-7].str);
				n->aliascolnames = (yyvsp[-6].list);
				n->recursive_keys = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-7]);
				(yyval.node) = (PGNode *) n;
			}
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_on_key: USING KEY '(' column_ref_list_opt_comma ')'  */
#line 475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_on_key: %empty  */
#line 476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = list_make1(NIL); }
#line 24438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* column_ref_list_opt_comma: column_ref_list  */
#line 480 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* column_ref_list_opt_comma: column_ref_list ','  */
#line 481 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* column_ref_list: columnref  */
#line 485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 24456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* column_ref_list: column_ref_list ',' columnref  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 24462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* opt_materialized: MATERIALIZED  */
#line 490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 24468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* opt_materialized: NOT MATERIALIZED  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 24474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* opt_materialized: %empty  */
#line 492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 24480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* into_clause: INTO OptTempTableName  */
#line 497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 24494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* into_clause: %empty  */
#line 507 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 24500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 516 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 521 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 24560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 552 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 24569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* OptTempTableName: TABLE qualified_name  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 24578 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* OptTempTableName: qualified_name  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 24587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* opt_table: TABLE  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 24593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_table: %empty  */
#line 569 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 24599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* all_or_distinct: ALL  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 24605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* all_or_distinct: DISTINCT  */
#line 574 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* all_or_distinct: %empty  */
#line 575 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* by_name: BY NAME_P  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 24623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* distinct_clause: DISTINCT  */
#line 586 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 24629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 587 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* opt_all_clause: ALL  */
#line 591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 24641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* opt_all_clause: %empty  */
#line 592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 596 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_IGNORE_NULLS;}
#line 24653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 597 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ignorenulls) = PG_RESPECT_NULLS;}
#line 24659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_ignore_nulls: %empty  */
#line 598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ignorenulls) = PG_DEFAULT_NULLS; }
#line 24665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_sort_clause: sort_clause  */
#line 602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 24671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* opt_sort_clause: %empty  */
#line 603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sort_clause: ORDER BY sortby_list  */
#line 607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 24700 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* sortby_list: sortby  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 24706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* sortby_list: sortby_list ',' sortby  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 24712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 24725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 638 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 24738 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* opt_asc_desc: ASC_P  */
#line 648 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 24744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* opt_asc_desc: DESC_P  */
#line 649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 24750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* opt_asc_desc: %empty  */
#line 650 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 24756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 653 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 24762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 654 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 24768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_nulls_order: %empty  */
#line 655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 24774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* select_limit: limit_clause offset_clause  */
#line 659 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make3((yyvsp[0].node), (yyvsp[-1].node), NULL); }
#line 24780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit: offset_clause limit_clause  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make3((yyvsp[-1].node), (yyvsp[0].node), (yyvsp[-1].node)); }
#line 24786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_limit: limit_clause  */
#line 661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL, (yyvsp[0].node), NULL); }
#line 24792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit: offset_clause  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3((yyvsp[0].node), NULL, (yyvsp[0].node)); }
#line 24798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* opt_select_limit: select_limit  */
#line 666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 24804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* opt_select_limit: %empty  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make3(NULL,NULL,NULL); }
#line 24810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* limit_clause: LIMIT select_limit_value  */
#line 672 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 24829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 24835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 692 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 24841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* offset_clause: OFFSET select_offset_value  */
#line 697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 24847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 700 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 24853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* sample_value: FCONST  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
        }
#line 24861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* sample_value: ICONST  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
        {
            (yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
        }
#line 24869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* sample_count: sample_value '%'  */
#line 720 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 24877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* sample_count: sample_value PERCENT  */
#line 724 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), true);
		}
#line 24885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* sample_count: sample_value  */
#line 728 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[0].node), false);
		}
#line 24893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* sample_count: sample_value ROWS  */
#line 732 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize((yyvsp[-1].node), false);
		}
#line 24901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* sample_clause: %empty  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 24915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* opt_sample_func: ColId  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 24921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* opt_sample_func: %empty  */
#line 751 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 24927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 24936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* tablesample_entry: sample_count  */
#line 761 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 24944 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 765 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 24952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 24961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 24969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* opt_tablesample_clause: tablesample_clause  */
#line 783 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* opt_tablesample_clause: %empty  */
#line 784 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 24981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 789 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 24987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* opt_repeatable_clause: %empty  */
#line 790 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 24993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* select_limit_value: a_expr  */
#line 794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* select_limit_value: ALL  */
#line 796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 25008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* select_limit_value: a_expr '%'  */
#line 801 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* select_limit_value: FCONST PERCENT  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 25020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* select_limit_value: ICONST PERCENT  */
#line 805 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 25026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* select_offset_value: a_expr  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* select_fetch_first_value: c_expr  */
#line 829 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* select_fetch_first_value: '+' I_or_F_const  */
#line 831 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* select_fetch_first_value: '-' I_or_F_const  */
#line 833 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* I_or_F_const: Iconst  */
#line 837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 25056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* I_or_F_const: FCONST  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 25062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* row_or_rows: ROW  */
#line 842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 25068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* row_or_rows: ROWS  */
#line 843 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* first_or_next: FIRST_P  */
#line 846 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 25080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* first_or_next: NEXT  */
#line 847 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 25086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* group_clause: GROUP_P BY ALL  */
#line 874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 25101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* group_clause: %empty  */
#line 878 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* group_by_list: group_by_item  */
#line 882 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* group_by_list: group_by_list ',' group_by_item  */
#line 883 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 25119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* group_by_list_opt_comma: group_by_list  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* group_by_list_opt_comma: group_by_list ','  */
#line 888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 25131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* group_by_item: a_expr  */
#line 892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* group_by_item: empty_grouping_set  */
#line 893 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* group_by_item: cube_clause  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* group_by_item: rollup_clause  */
#line 895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* group_by_item: grouping_sets_clause  */
#line 896 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* empty_grouping_set: '(' ')'  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 25169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 914 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 25185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 928 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* grouping_or_grouping_id: GROUPING  */
#line 934 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 25199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* grouping_or_grouping_id: GROUPING_ID  */
#line 935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 25205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* having_clause: HAVING a_expr  */
#line 939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* having_clause: %empty  */
#line 940 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25217 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* qualify_clause: QUALIFY a_expr  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* qualify_clause: %empty  */
#line 945 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 25229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* for_locking_clause: for_locking_items  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* for_locking_clause: FOR READ_P ONLY  */
#line 950 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* opt_for_locking_clause: for_locking_clause  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* opt_for_locking_clause: %empty  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* for_locking_items: for_locking_item  */
#line 959 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* for_locking_items: for_locking_items for_locking_item  */
#line 960 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 25265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 965 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 25277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* for_locking_strength: FOR UPDATE  */
#line 975 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 25283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 976 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 25289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* for_locking_strength: FOR SHARE  */
#line 977 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 25295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* for_locking_strength: FOR KEY SHARE  */
#line 978 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 25301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* locked_rels_list: OF qualified_name_list  */
#line 982 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* locked_rels_list: %empty  */
#line 983 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 25313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* opt_nowait_or_skip: NOWAIT  */
#line 988 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 25319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 989 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 25325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* opt_nowait_or_skip: %empty  */
#line 990 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 25331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 1006 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* values_clause_opt_comma: values_clause  */
#line 1014 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 25357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* values_clause_opt_comma: values_clause ','  */
#line 1015 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 25363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* from_clause: FROM from_list_opt_comma  */
#line 1028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 25369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* from_clause: %empty  */
#line 1029 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 25375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* from_list: table_ref  */
#line 1033 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* from_list: from_list ',' table_ref  */
#line 1034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 25387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* from_list_opt_comma: from_list  */
#line 1038 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 25393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* from_list_opt_comma: from_list ','  */
#line 1039 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* alias_prefix_colon_clause: ColIdOrString ':'  */
#line 1044 "third_party/libpg_query/grammar/statements/select.y"
            {
                (yyval.alias) = makeNode(PGAlias);
                (yyval.alias)->aliasname = (yyvsp[-1].str);
            }
#line 25408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1055 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 25418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* table_ref: alias_prefix_colon_clause relation_expr opt_tablesample_clause  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                {
                    (yyvsp[-1].range)->alias = (yyvsp[-2].alias);
                    (yyvsp[-1].range)->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) (yyvsp[-1].range);
                }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* table_ref: alias_prefix_colon_clause func_table opt_tablesample_clause  */
#line 1075 "third_party/libpg_query/grammar/statements/select.y"
                    {
                        PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
                        n->alias = (yyvsp[-2].alias);
                        n->sample = (yyvsp[0].node);
                        (yyval.node) = (PGNode *) n;
                    }
#line 25451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1083 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-2].node);
                    n->alias = (yyvsp[-1].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 25476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* table_ref: alias_prefix_colon_clause select_with_parens opt_tablesample_clause  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGRangeSubselect *n = makeNode(PGRangeSubselect);
                    n->lateral = false;
                    n->subquery = (yyvsp[-1].node);
                    n->alias = (yyvsp[-2].alias);
                    n->sample = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 25502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 25515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* table_ref: joined_table  */
#line 1128 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 25523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 25532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* table_ref: alias_prefix_colon_clause '(' joined_table ')'  */
#line 1137 "third_party/libpg_query/grammar/statements/select.y"
                {
                    (yyvsp[-1].jexpr)->alias = (yyvsp[-3].alias);
                    (yyval.node) = (PGNode *) (yyvsp[-1].jexpr);
                }
#line 25541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 25556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					n->location = (yylsp[-7]);
					(yyval.node) = (PGNode *) n;
				}
#line 25571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 25577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* opt_pivot_group_by: %empty  */
#line 1167 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 25583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 25589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1171 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 25595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* opt_include_nulls: %empty  */
#line 1172 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 25601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1176 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1184 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 25623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* pivot_header: d_expr  */
#line 1193 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* pivot_header: indirection_expr  */
#line 1194 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 25635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 25641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1207 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 25663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* pivot_value_list: pivot_value  */
#line 1216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1220 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 25679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* unpivot_header: ColIdOrString  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1227 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 25691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1232 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 25702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* unpivot_value_list: unpivot_value  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 25710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1245 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 25718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* joined_table: '(' joined_table ')'  */
#line 1270 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 25726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1274 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1287 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1316 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1328 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 25831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1355 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 25849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1369 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 25866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 25885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1397 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 25905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1416 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* alias_clause: AS ColIdOrString  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1427 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 25934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* alias_clause: ColId  */
#line 1433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 25943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* opt_alias_clause: alias_clause  */
#line 1439 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 25949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* opt_alias_clause: %empty  */
#line 1440 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 25955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* func_alias_clause: alias_clause  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 25963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1453 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 25971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1463 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 25991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* func_alias_clause: %empty  */
#line 1469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 25999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* join_type: FULL join_outer  */
#line 1474 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 26005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* join_type: LEFT join_outer  */
#line 1475 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 26011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* join_type: RIGHT join_outer  */
#line 1476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 26017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* join_type: SEMI  */
#line 1477 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 26023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* join_type: ANTI  */
#line 1478 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 26029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* join_type: INNER_P  */
#line 1479 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 26035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* join_outer: OUTER_P  */
#line 1483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 26041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* join_outer: %empty  */
#line 1484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1496 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 26053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* join_qual: ON a_expr  */
#line 1497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* relation_expr: qualified_name  */
#line 1503 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* relation_expr: qualified_name '*'  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 26081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* relation_expr: ONLY qualified_name  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 26103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* func_table: func_expr_windowless opt_ordinality  */
#line 1556 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1567 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 26133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1580 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 26139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* rowsfrom_list: rowsfrom_item  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 26145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1585 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 26151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1588 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* opt_col_def_list: %empty  */
#line 1589 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 26169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* opt_ordinality: %empty  */
#line 1593 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* where_clause: WHERE a_expr  */
#line 1598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* where_clause: %empty  */
#line 1599 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* TableFuncElementList: TableFuncElement  */
#line 1605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 26195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 26203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1615 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 26225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* opt_collate_clause: COLLATE any_name  */
#line 1636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* opt_collate_clause: %empty  */
#line 1643 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 26243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* colid_type_list: ColId Typename  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 26259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* opt_Typename: Typename  */
#line 1667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* opt_Typename: %empty  */
#line 1668 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 26271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Typename: SimpleTypename opt_array_bounds  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 26280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 26290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 26299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 26309 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* Typename: SimpleTypename ARRAY  */
#line 1694 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 26318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1699 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 26328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Typename: qualified_typename  */
#line 1705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 26336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1709 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 26347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1723 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 26369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* qualified_typename: IDENT '.' IDENT  */
#line 1732 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 26375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1733 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 26381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1738 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 26387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1740 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 26393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* opt_array_bounds: %empty  */
#line 1742 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 26399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* SimpleTypename: GenericType  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* SimpleTypename: Numeric  */
#line 1747 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* SimpleTypename: Bit  */
#line 1748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* SimpleTypename: Character  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* SimpleTypename: ConstDatetime  */
#line 1750 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* SimpleTypename: ConstInterval opt_interval  */
#line 1752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 26438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1757 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 26448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* ConstTypename: Numeric  */
#line 1776 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* ConstTypename: ConstBit  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* ConstTypename: ConstCharacter  */
#line 1778 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ConstTypename: ConstDatetime  */
#line 1779 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 26472 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* GenericType: type_name_token opt_type_modifiers  */
#line 1791 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 26488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* opt_type_modifiers: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 26494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* Numeric: INT_P  */
#line 1812 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* Numeric: INTEGER  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* Numeric: SMALLINT  */
#line 1822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* Numeric: BIGINT  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 856: /* Numeric: REAL  */
#line 1832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* Numeric: FLOAT_P opt_float  */
#line 1837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* Numeric: DOUBLE_P PRECISION  */
#line 1842 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1847 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* Numeric: DEC opt_type_modifiers  */
#line 1853 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1859 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* Numeric: BOOLEAN_P  */
#line 1865 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* opt_float: '(' Iconst ')'  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 26621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_float: %empty  */
#line 1893 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 26629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* Bit: BitWithLength  */
#line 1903 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* Bit: BitWithoutLength  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* ConstBit: BitWithLength  */
#line 1915 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* ConstBit: BitWithoutLength  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 26662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* BitWithoutLength: BIT opt_varying  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* Character: CharacterWithLength  */
#line 1960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* Character: CharacterWithoutLength  */
#line 1964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* ConstCharacter: CharacterWithLength  */
#line 1970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 26717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* ConstCharacter: CharacterWithoutLength  */
#line 1974 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 26732 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 26742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* CharacterWithoutLength: character  */
#line 1995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* character: CHARACTER opt_varying  */
#line 2005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* character: CHAR_P opt_varying  */
#line 2007 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26766 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* character: VARCHAR  */
#line 2009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 26772 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* character: NATIONAL CHARACTER opt_varying  */
#line 2011 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26778 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* character: NATIONAL CHAR_P opt_varying  */
#line 2013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26784 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* character: NCHAR opt_varying  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 26790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_varying: VARYING  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 26796 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_varying: %empty  */
#line 2020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 2028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 2037 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 2045 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 26840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* ConstDatetime: TIME opt_timezone  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 26852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* ConstInterval: INTERVAL  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 26861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* opt_timezone: WITH_LA TIME ZONE  */
#line 2072 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 26867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* opt_timezone: WITHOUT TIME ZONE  */
#line 2073 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* opt_timezone: %empty  */
#line 2074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* opt_interval: year_keyword  */
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* opt_interval: month_keyword  */
#line 2120 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 26891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* opt_interval: day_keyword  */
#line 2122 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 26897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* opt_interval: hour_keyword  */
#line 2124 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 26903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* opt_interval: minute_keyword  */
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 26909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* opt_interval: second_keyword  */
#line 2128 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 26915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* opt_interval: millisecond_keyword  */
#line 2130 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 26921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* opt_interval: microsecond_keyword  */
#line 2132 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* opt_interval: week_keyword  */
#line 2134 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(WEEK), (yylsp[0]))); }
#line 26933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* opt_interval: quarter_keyword  */
#line 2136 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(QUARTER), (yylsp[0]))); }
#line 26939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* opt_interval: decade_keyword  */
#line 2138 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DECADE), (yylsp[0]))); }
#line 26945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* opt_interval: century_keyword  */
#line 2140 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(CENTURY), (yylsp[0]))); }
#line 26951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* opt_interval: millennium_keyword  */
#line 2142 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLENNIUM), (yylsp[0]))); }
#line 26957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* opt_interval: year_keyword TO month_keyword  */
#line 2144 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 26966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* opt_interval: day_keyword TO hour_keyword  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 26975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* opt_interval: day_keyword TO minute_keyword  */
#line 2154 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 26985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* opt_interval: day_keyword TO second_keyword  */
#line 2160 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 26996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 27005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* opt_interval: hour_keyword TO second_keyword  */
#line 2172 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* opt_interval: minute_keyword TO second_keyword  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 27024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* opt_interval: %empty  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: c_expr  */
#line 2214 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr TYPECAST Typename  */
#line 2217 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr COLLATE any_name  */
#line 2219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 27054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 27064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: '+' a_expr  */
#line 2242 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: '-' a_expr  */
#line 2244 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr '+' a_expr  */
#line 2246 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr '-' a_expr  */
#line 2248 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr '*' a_expr  */
#line 2250 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr '/' a_expr  */
#line 2252 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2254 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr '%' a_expr  */
#line 2256 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr '^' a_expr  */
#line 2258 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr POWER_OF a_expr  */
#line 2260 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: a_expr '<' a_expr  */
#line 2262 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: a_expr '>' a_expr  */
#line 2264 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: a_expr '=' a_expr  */
#line 2266 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2268 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2270 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2272 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* a_expr: a_expr qual_Op a_expr  */
#line 2275 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* a_expr: qual_Op a_expr  */
#line 2277 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* a_expr: a_expr qual_Op  */
#line 2279 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* a_expr: a_expr AND a_expr  */
#line 2282 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* a_expr: a_expr OR a_expr  */
#line 2284 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* a_expr: NOT a_expr  */
#line 2286 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* a_expr: NOT_LA a_expr  */
#line 2288 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 27202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* a_expr: a_expr GLOB a_expr  */
#line 2290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* a_expr: a_expr LIKE a_expr  */
#line 2295 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2307 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2312 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* a_expr: a_expr ILIKE a_expr  */
#line 2319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 27260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2324 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2331 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 27280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2336 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2344 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 27303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 27315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2360 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 27327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2368 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 27339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* a_expr: a_expr IS NULL_P  */
#line 2386 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* a_expr: a_expr ISNULL  */
#line 2394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* a_expr: a_expr IS NOT NULL_P  */
#line 2402 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* a_expr: a_expr NOT NULL_P  */
#line 2410 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* a_expr: a_expr NOTNULL  */
#line 2418 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2426 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 27411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2434 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 27419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* a_expr: row OVERLAPS row  */
#line 2438 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 27439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* a_expr: a_expr IS TRUE_P  */
#line 2454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2462 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* a_expr: a_expr IS FALSE_P  */
#line 2470 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* a_expr: a_expr IS UNKNOWN  */
#line 2486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 27499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 27511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2510 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2518 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 27555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2526 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 27567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 27579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2542 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 27591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* a_expr: a_expr IN_P in_expr  */
#line 2550 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 27615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2570 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 27641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2592 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 27656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2603 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 27667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* a_expr: DEFAULT  */
#line 2610 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 27697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* a_expr: UNPACK '(' a_expr ')'  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((yyvsp[-1].node)), (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 27706 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* a_expr: '*' COLUMNS '(' a_expr ')'  */
#line 2637 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-4]);

					PGFuncCall *n = makeFuncCall(SystemFuncName("unpack"), list_make1((PGNode *)star), (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 27720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* a_expr: '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2647 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 27733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list opt_rename_list  */
#line 2656 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-5].str);
					star->except_list = (yyvsp[-2].list);
					star->replace_list = (yyvsp[-1].list);
					star->rename_list = (yyvsp[0].list);
					star->location = (yylsp[-5]);
					(yyval.node) = (PGNode *) star;
				}
#line 27747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* b_expr: c_expr  */
#line 2677 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* b_expr: b_expr TYPECAST Typename  */
#line 2679 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 27759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* b_expr: '+' b_expr  */
#line 2681 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* b_expr: '-' b_expr  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* b_expr: b_expr '+' b_expr  */
#line 2685 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* b_expr: b_expr '-' b_expr  */
#line 2687 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* b_expr: b_expr '*' b_expr  */
#line 2689 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* b_expr: b_expr '/' b_expr  */
#line 2691 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2693 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* b_expr: b_expr '%' b_expr  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* b_expr: b_expr '^' b_expr  */
#line 2697 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* b_expr: b_expr POWER_OF b_expr  */
#line 2699 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* b_expr: b_expr '<' b_expr  */
#line 2701 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* b_expr: b_expr '>' b_expr  */
#line 2703 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* b_expr: b_expr '=' b_expr  */
#line 2705 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2711 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* b_expr: b_expr qual_Op b_expr  */
#line 2713 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 27861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* b_expr: qual_Op b_expr  */
#line 2715 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 27867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* b_expr: b_expr qual_Op  */
#line 2717 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 27873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 27881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2723 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 27889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2727 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 27897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2731 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 27905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* c_expr: indirection_expr_or_a_expr opt_extended_indirection  */
#line 2746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 27921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* d_expr: columnref_opt_indirection  */
#line 2759 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* d_expr: AexprConst  */
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* d_expr: select_with_parens  */
#line 2762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* d_expr: select_with_parens indirection  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* d_expr: EXISTS select_with_parens  */
#line 2797 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 27991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2808 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 28002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* indirection_expr_or_a_expr: '(' a_expr ')'  */
#line 2818 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 28010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* indirection_expr_or_a_expr: indirection_expr  */
#line 2822 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 28018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* indirection_expr_or_a_expr: row  */
#line 2825 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 28027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* param_expr: '?'  */
#line 2833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 28035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* param_expr: PARAM  */
#line 2837 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 28046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* param_expr: '$' ColLabel  */
#line 2844 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 28054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* indirection_expr: ARRAY select_with_parens  */
#line 2858 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 28069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* indirection_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2868 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 28079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* indirection_expr: '#' ICONST  */
#line 2874 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 28090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* list_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2882 "third_party/libpg_query/grammar/statements/select.y"
                                            {
                PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
                (yyval.node) = (PGNode *) n;
            }
#line 28099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2889 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* map_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2896 "third_party/libpg_query/grammar/statements/select.y"
                {
                    PGList *key_list = NULL;
                    PGList *value_list = NULL;
                    PGListCell *lc;
                    PGList *entry_list = (yyvsp[-1].list);
                    foreach(lc, entry_list)
                    {
                        PGList *l = (PGList *) lc->data.ptr_value;
                        key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
                        value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
                    }
                    PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
                    PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
                    PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
                    (yyval.node) = (PGNode *) f;
                }
#line 28129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* func_application: func_name '(' ')'  */
#line 2916 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 28137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* func_application: func_name '(' sort_clause opt_ignore_nulls ')'  */
#line 2920 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), NIL, (yylsp[-4]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2927 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					(yyval.node) = (PGNode *)n;
				}
#line 28183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].ignorenulls);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2981 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 28250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* func_expr: func_expr_common_subexpr  */
#line 3017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 28256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* func_expr_windowless: func_application  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 28262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* func_expr_windowless: func_expr_common_subexpr  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 28268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 3036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 28278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 3042 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 28284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 28290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 3050 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position_inverse(A, B) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("__internal_position_operator"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 3064 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 3071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 28350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 3086 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 28377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 3101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 28385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 3105 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 28404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* list_comprehension_lhs: columnrefList  */
#line 3119 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
			(yyval.node) = (PGNode *) n;
		}
#line 28413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P a_expr ']'  */
#line 3127 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-3].node);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 28426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* list_comprehension: '[' a_expr FOR list_comprehension_lhs IN_P c_expr IF_P a_expr ']'  */
#line 3136 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = (yyvsp[-5].node);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = (yyvsp[-5].node);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 28445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3157 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* within_group_clause: %empty  */
#line 3158 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3162 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3163 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 28469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* filter_clause: %empty  */
#line 3164 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 28475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* export_clause: EXPORT_STATE  */
#line 3168 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 28481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* export_clause: %empty  */
#line 3169 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 28487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* window_clause: WINDOW window_definition_list  */
#line 3176 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* window_clause: %empty  */
#line 3177 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* window_definition_list: window_definition  */
#line 3181 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 28505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3183 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 28511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* window_definition: ColId AS window_specification  */
#line 3188 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 28521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* over_clause: OVER window_specification  */
#line 3196 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 28527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* over_clause: OVER ColId  */
#line 3198 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 28544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* over_clause: %empty  */
#line 3211 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 28550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3216 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 28568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* opt_existing_window_name: ColId  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* opt_existing_window_name: %empty  */
#line 3242 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 28580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3245 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* opt_partition_clause: %empty  */
#line 3246 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3263 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 28628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* opt_frame_clause: %empty  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* frame_extent: frame_bound  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 28663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3308 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3363 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* frame_bound: CURRENT_P ROW  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* frame_bound: a_expr PRECEDING  */
#line 3381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* frame_bound: a_expr FOLLOWING  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 28770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 28776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3403 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 28788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 28794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* opt_window_exclusion_clause: %empty  */
#line 3405 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 28800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* qualified_row: ROW '(' ')'  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* row: qualified_row  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 28818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* row: '(' expr_list ',' a_expr ')'  */
#line 3424 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 28824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3428 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 28837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* dict_arguments: dict_arg  */
#line 3438 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 28843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3439 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 28849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* dict_arguments_opt_comma: dict_arguments  */
#line 3443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3444 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* map_arg: a_expr ':' a_expr  */
#line 3449 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* map_arguments: map_arg  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* map_arguments: map_arguments ',' map_arg  */
#line 3456 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* map_arguments_opt_comma: map_arguments  */
#line 3461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* map_arguments_opt_comma: map_arguments ','  */
#line 3462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* opt_map_arguments_opt_comma: %empty  */
#line 3468 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 28905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* sub_type: ANY  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* sub_type: SOME  */
#line 3472 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 28917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* sub_type: ALL  */
#line 3473 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 28923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* all_Op: Op  */
#line 3476 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* all_Op: MathOp  */
#line 3477 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 28935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* MathOp: '+'  */
#line 3480 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 28941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* MathOp: '-'  */
#line 3481 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 28947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* MathOp: '*'  */
#line 3482 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 28953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* MathOp: '/'  */
#line 3483 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 28959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* MathOp: INTEGER_DIVISION  */
#line 3484 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 28965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* MathOp: '%'  */
#line 3485 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 28971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* MathOp: '^'  */
#line 3486 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 28977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* MathOp: POWER_OF  */
#line 3487 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 28983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* MathOp: '<'  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 28989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* MathOp: '>'  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 28995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* MathOp: '='  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 29001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* MathOp: LESS_EQUALS  */
#line 3491 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 29007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* MathOp: GREATER_EQUALS  */
#line 3492 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 29013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* MathOp: NOT_EQUALS  */
#line 3493 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 29019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* qual_Op: Op  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3499 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* qual_all_Op: all_Op  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* subquery_Op: all_Op  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* subquery_Op: LIKE  */
#line 3515 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 29061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* subquery_Op: NOT_LA LIKE  */
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 29067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* subquery_Op: GLOB  */
#line 3519 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 29073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* subquery_Op: NOT_LA GLOB  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 29079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* subquery_Op: ILIKE  */
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 29085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* subquery_Op: NOT_LA ILIKE  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 29091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* any_operator: all_Op  */
#line 3539 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 29097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* any_operator: ColId '.' any_operator  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* c_expr_list: c_expr  */
#line 3546 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3550 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* c_expr_list_opt_comma: c_expr_list  */
#line 3557 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3562 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* expr_list: a_expr  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* expr_list: expr_list ',' a_expr  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* expr_list_opt_comma: expr_list  */
#line 3579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* expr_list_opt_comma: expr_list ','  */
#line 3584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 29167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* opt_expr_list_opt_comma: %empty  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 29183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* func_arg_list: func_arg_expr  */
#line 3604 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 29191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 29199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* func_arg_expr: a_expr  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 29207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3627 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 29233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* type_list: Typename  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 29239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* type_list: type_list ',' Typename  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 29245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* extract_list: extract_arg FROM a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 29253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* extract_list: %empty  */
#line 3646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* extract_arg: IDENT  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* extract_arg: year_keyword  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 29271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* extract_arg: month_keyword  */
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 29277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* extract_arg: day_keyword  */
#line 3656 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 29283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* extract_arg: hour_keyword  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 29289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* extract_arg: minute_keyword  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 29295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* extract_arg: second_keyword  */
#line 3659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 29301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* extract_arg: millisecond_keyword  */
#line 3660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 29307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* extract_arg: microsecond_keyword  */
#line 3661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 29313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* extract_arg: week_keyword  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "week"; }
#line 29319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* extract_arg: quarter_keyword  */
#line 3663 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "quarter"; }
#line 29325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* extract_arg: decade_keyword  */
#line 3664 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "decade"; }
#line 29331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* extract_arg: century_keyword  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "century"; }
#line 29337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* extract_arg: millennium_keyword  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millennium"; }
#line 29343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* extract_arg: Sconst  */
#line 3667 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3682 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* overlay_placing: PLACING a_expr  */
#line 3689 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* position_list: b_expr IN_P b_expr  */
#line 3695 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node)); }
#line 29377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* position_list: %empty  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* substr_list: a_expr substr_from substr_for  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* substr_list: a_expr substr_for substr_from  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 29400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* substr_list: a_expr substr_from  */
#line 3722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 29408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* substr_list: a_expr substr_for  */
#line 3726 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 29427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* substr_list: expr_list  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 29435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* substr_list: %empty  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 29441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* substr_from: FROM a_expr  */
#line 3749 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* substr_for: FOR a_expr  */
#line 3752 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3755 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 29459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* trim_list: FROM expr_list_opt_comma  */
#line 3756 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* trim_list: expr_list_opt_comma  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* in_expr: select_with_parens  */
#line 3761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 29482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3767 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 29488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* in_expr: indirection_expr  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                           { (yyval.node) = (PGNode *)(yyvsp[0].node); }
#line 29494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3780 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 29508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* when_clause_list: when_clause  */
#line 3793 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* when_clause_list: when_clause_list when_clause  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 29532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* case_default: ELSE a_expr  */
#line 3809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* case_default: %empty  */
#line 3810 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* case_arg: a_expr  */
#line 3813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* case_arg: %empty  */
#line 3814 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* columnrefList: columnref  */
#line 3818 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* columnrefList: columnrefList ',' columnref  */
#line 3819 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* columnref: ColId  */
#line 3823 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
		}
#line 29576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* columnref_opt_indirection: ColId  */
#line 3829 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 29584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* columnref_opt_indirection: ColId indirection  */
#line 3833 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 29592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* indirection_el: '[' a_expr ']'  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29604 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3848 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 29629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3863 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* opt_slice_bound: a_expr  */
#line 3873 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 29647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* opt_slice_bound: %empty  */
#line 3874 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 29653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* opt_indirection: %empty  */
#line 3879 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 29659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* opt_indirection: opt_indirection indirection_el  */
#line 3880 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* opt_func_arguments: %empty  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 29671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* opt_func_arguments: '(' ')'  */
#line 3885 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 29677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3886 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3891 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 29696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* extended_indirection_el: '[' a_expr ']'  */
#line 3900 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29708 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3908 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 29733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3924 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 29745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* opt_extended_indirection: %empty  */
#line 3939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 29751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3940 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 29757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* opt_target_list_opt_comma: %empty  */
#line 3957 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 29769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* target_list: target_el  */
#line 3961 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 29775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* target_list: target_list ',' target_el  */
#line 3962 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 29781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* target_list_opt_comma: target_list  */
#line 3966 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* target_list_opt_comma: target_list ','  */
#line 3967 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* target_el: a_expr AS ColLabelOrString  */
#line 3971 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 29805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* target_el: a_expr IDENT  */
#line 3987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 29817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* target_el: a_expr  */
#line 3995 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 29829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* target_el: ColId ':' a_expr  */
#line 4003 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-2].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 29841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* except_list: EXCLUDE '(' except_name_list_opt_comma ')'  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* except_list: EXCLUDE except_name  */
#line 4013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* except_name: ColIdOrString  */
#line 4018 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make1((yyvsp[0].str));
			}
#line 29861 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* except_name: except_name '.' ColIdOrString  */
#line 4022 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].str));
			}
#line 29869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* except_name_list: except_name  */
#line 4028 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* except_name_list: except_name_list ',' except_name  */
#line 4030 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* except_name_list_opt_comma: except_name_list  */
#line 4034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* except_name_list_opt_comma: except_name_list ','  */
#line 4035 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_except_list: except_list  */
#line 4039 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_except_list: %empty  */
#line 4040 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* replace_list_el: a_expr AS ColId  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* replace_list: replace_list_el  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* replace_list: replace_list ',' replace_list_el  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* replace_list_opt_comma: replace_list  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* replace_list_opt_comma: replace_list ','  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* opt_replace_list: REPLACE replace_list_el  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_replace_list: %empty  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 29953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* rename_list_el: except_name AS ColId  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[-2].list), (yyvsp[0].str)); }
#line 29959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* rename_list: rename_list_el  */
#line 4065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* rename_list: rename_list ',' rename_list_el  */
#line 4066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 29971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* rename_list_opt_comma: rename_list  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 29977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* rename_list_opt_comma: rename_list ','  */
#line 4071 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 29983 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* opt_rename_list: RENAME '(' rename_list_opt_comma ')'  */
#line 4073 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 29989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* opt_rename_list: RENAME rename_list_el  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 29995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* opt_rename_list: %empty  */
#line 4075 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.list) = NULL; }
#line 30001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* qualified_name_list: qualified_name  */
#line 4085 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 30007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 4086 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 30013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* name_list: name  */
#line 4091 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* name_list: name_list ',' name  */
#line 4093 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* name_list_opt_comma: name_list  */
#line 4098 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 30031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* name_list_opt_comma: name_list ','  */
#line 4099 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 4103 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 4104 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30049 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* name: ColIdOrString  */
#line 4107 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30055 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* func_name: function_name_token  */
#line 4119 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* func_name: ColId indirection  */
#line 4122 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 30070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1311: /* AexprConst: Iconst  */
#line 4133 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 30078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1312: /* AexprConst: FCONST  */
#line 4137 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1313: /* AexprConst: Sconst opt_indirection  */
#line 4141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 30102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1314: /* AexprConst: BCONST  */
#line 4153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1315: /* AexprConst: XCONST  */
#line 4157 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 30123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1316: /* AexprConst: func_name Sconst  */
#line 4166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1317: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 4173 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].ignorenulls) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 30176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1318: /* AexprConst: ConstTypename Sconst  */
#line 4211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 30184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1319: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4215 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 30192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1320: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4219 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1321: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 30208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1322: /* AexprConst: TRUE_P  */
#line 4227 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 30216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1323: /* AexprConst: FALSE_P  */
#line 4231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 30224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1324: /* AexprConst: NULL_P  */
#line 4235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 30232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1325: /* Iconst: ICONST  */
#line 4240 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 30238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* type_function_name: IDENT  */
#line 4257 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* type_function_name: unreserved_keyword  */
#line 4258 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* type_function_name: type_func_name_keyword  */
#line 4259 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* function_name_token: IDENT  */
#line 4262 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* function_name_token: unreserved_keyword  */
#line 4263 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* function_name_token: func_name_keyword  */
#line 4264 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* type_name_token: IDENT  */
#line 4267 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* type_name_token: unreserved_keyword  */
#line 4268 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* type_name_token: type_name_keyword  */
#line 4269 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* any_name: ColId  */
#line 4272 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* any_name: ColId attrs  */
#line 4273 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 30304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* attrs: '.' attr_name  */
#line 4277 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 30310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* attrs: attrs '.' attr_name  */
#line 4279 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 30316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4283 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 30322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* opt_name_list: %empty  */
#line 4284 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 30328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* ColLabelOrString: ColLabel  */
#line 4291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* ColLabelOrString: SCONST  */
#line 4292 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 30352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 30358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 30364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 30448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 30454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 30508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 30526 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 30532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 30550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 30556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 30562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 30568 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 30574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 30639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 30652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 30686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* CommentOnStmt: COMMENT ON comment_on_type_any_name qualified_name IS comment_value  */
#line 8 "third_party/libpg_query/grammar/statements/comment_on.y"
                                {
					PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
					n->object_type = (yyvsp[-3].objtype);
					n->name = (yyvsp[-2].range);
					n->value = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 30698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* CommentOnStmt: COMMENT ON COLUMN a_expr IS comment_value  */
#line 16 "third_party/libpg_query/grammar/statements/comment_on.y"
                {
                    PGCommentOnStmt *n = makeNode(PGCommentOnStmt);
                    n->object_type = PG_OBJECT_COLUMN;
                    n->column_expr = (yyvsp[-2].node);
                    n->value = (yyvsp[0].node);
                    (yyval.node) = (PGNode *)n;
                }
#line 30710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* comment_value: Sconst  */
#line 26 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 30716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* comment_value: NULL_P  */
#line 27 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                            { (yyval.node) = makeNullAConst((yylsp[0])); }
#line 30722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* comment_on_type_any_name: TABLE  */
#line 30 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 30728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* comment_on_type_any_name: SEQUENCE  */
#line 31 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 30734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* comment_on_type_any_name: FUNCTION  */
#line 32 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* comment_on_type_any_name: MACRO  */
#line 33 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 30746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* comment_on_type_any_name: MACRO TABLE  */
#line 34 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 30752 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* comment_on_type_any_name: VIEW  */
#line 35 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 30758 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* comment_on_type_any_name: DATABASE  */
#line 36 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_DATABASE; }
#line 30764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* comment_on_type_any_name: INDEX  */
#line 37 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 30770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* comment_on_type_any_name: SCHEMA  */
#line 38 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 30776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* comment_on_type_any_name: TYPE_P  */
#line 39 "third_party/libpg_query/grammar/statements/comment_on.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 30782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 30812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 30822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 30833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 30847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 30858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 30869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 30875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 30881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 30887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 30893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 30899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* NonReservedWord: IDENT  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* NonReservedWord: unreserved_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* NonReservedWord: other_keyword  */
#line 93 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 30917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* NonReservedWord_or_Sconst: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* explain_option_list: explain_option_elem  */
#line 105 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 30937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 109 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 30945 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* analyze_keyword: ANALYZE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 30951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* analyze_keyword: ANALYSE  */
#line 117 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 30957 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* opt_boolean_or_string: TRUE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 30963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* opt_boolean_or_string: FALSE_P  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 30969 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_boolean_or_string: ON  */
#line 124 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 30975 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 130 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 30981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 136 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 30989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* explain_option_name: NonReservedWord  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 30995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* explain_option_name: analyze_keyword  */
#line 144 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 31001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 31011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 31031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 31041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* VariableSetStmt: SET VARIABLE_P set_rest  */
#line 35 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) n;
				}
#line 31051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1463: /* set_rest: generic_set  */
#line 44 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 31057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1464: /* set_rest: var_name FROM CURRENT_P  */
#line 46 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 31068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1465: /* set_rest: TIME ZONE zone_value  */
#line 54 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 31083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1466: /* set_rest: SCHEMA Sconst  */
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 31095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1467: /* generic_set: var_name TO var_list  */
#line 77 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1468: /* generic_set: var_name '=' var_list  */
#line 85 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 31119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1469: /* var_value: a_expr  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 31125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1470: /* zone_value: Sconst  */
#line 102 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1471: /* zone_value: IDENT  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 31141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1472: /* zone_value: ConstInterval Sconst opt_interval  */
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 31160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1473: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 31171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1474: /* zone_value: NumericOnly  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 31177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1475: /* zone_value: DEFAULT  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1476: /* zone_value: LOCAL  */
#line 133 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 31189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1477: /* var_list: var_value  */
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 31195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1478: /* var_list: var_list ',' var_value  */
#line 138 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 31201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1479: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = NULL;
					n->repo_is_alias = false;
					n->version = NULL;
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 31215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1480: /* LoadStmt: opt_force INSTALL file_name opt_ext_version  */
#line 17 "third_party/libpg_query/grammar/statements/load.y"
                                                                            {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-1].str);
                    n->repository = NULL;
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-3].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 31229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1481: /* LoadStmt: opt_force INSTALL file_name FROM ColId opt_ext_version  */
#line 26 "third_party/libpg_query/grammar/statements/load.y"
                                                                                       {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = true;
                    n->filename = (yyvsp[-3].str);
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 31243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1482: /* LoadStmt: opt_force INSTALL file_name FROM Sconst opt_ext_version  */
#line 35 "third_party/libpg_query/grammar/statements/load.y"
                                                                                        {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[-3].str);
                    n->repository = (yyvsp[-1].str);
                    n->repo_is_alias = false;
                    n->version = (yyvsp[0].str);
                    n->load_type = (yyvsp[-5].loadinstalltype);
                    (yyval.node) = (PGNode *)n;
				}
#line 31257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1483: /* opt_force: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_INSTALL; }
#line 31263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1484: /* opt_force: FORCE  */
#line 47 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.loadinstalltype) = PG_LOAD_TYPE_FORCE_INSTALL; }
#line 31269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1485: /* file_name: Sconst  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1486: /* file_name: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1487: /* opt_ext_version: %empty  */
#line 53 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = NULL; }
#line 31287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1488: /* opt_ext_version: VERSION_P Sconst  */
#line 54 "third_party/libpg_query/grammar/statements/load.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31293 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1489: /* opt_ext_version: VERSION_P ColId  */
#line 55 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 31299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1490: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1491: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1492: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 31351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1493: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 31363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1494: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 31377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1495: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 31383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1496: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 31389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1497: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 31395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1498: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 31401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1499: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 31415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1500: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1501: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1502: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 31433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1503: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 31439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1504: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 31445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1505: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 31451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1506: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 31465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1507: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 31479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1508: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 31487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1509: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 31498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1510: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 31509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1511: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 31515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1512: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 31521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1513: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 31527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1514: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 31533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1515: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 31547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1516: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 31561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1517: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31574 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1518: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1519: /* AttachStmt: ATTACH OR REPLACE opt_database Sconst opt_database_alias copy_options  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 31600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1520: /* DetachStmt: DETACH ColLabel  */
#line 38 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1521: /* DetachStmt: DETACH DATABASE ColLabel  */
#line 45 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31622 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1522: /* DetachStmt: DETACH DATABASE IF_P EXISTS ColLabel  */
#line 52 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 31633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1523: /* opt_database: DATABASE  */
#line 60 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 31639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1524: /* opt_database: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 31645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1525: /* opt_database_alias: AS ColId  */
#line 65 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 31651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1526: /* opt_database_alias: %empty  */
#line 66 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 31657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1527: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 31666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1528: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1529: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1530: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1531: /* VariableResetStmt: RESET VARIABLE_P reset_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_VARIABLE;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 31702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1532: /* generic_reset: var_name  */
#line 32 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 31713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1533: /* generic_reset: ALL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 31723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1534: /* reset_rest: generic_reset  */
#line 48 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 31729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1535: /* reset_rest: TIME ZONE  */
#line 50 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 31740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1536: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 57 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 31751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1537: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1538: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1539: /* VariableShowStmt: SUMMARIZE qualified_name  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 31786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1540: /* VariableShowStmt: show_or_describe qualified_name  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->relation = (yyvsp[0].range);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1541: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1542: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1543: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1544: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->set = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 31841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1551: /* var_name: ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 31847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1552: /* var_name: var_name '.' ColId  */
#line 69 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 31853 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1553: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 31863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1554: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1555: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1556: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 31911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1557: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 31932 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1558: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 31953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1559: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 31959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1560: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 31965 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1561: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 31971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1562: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 31977 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1563: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 31994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1564: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1565: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 32028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1566: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1567: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 32040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1568: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 32046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1569: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 32060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 32064 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGNode *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount, PGNode *isLimitOffsetFirst,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	if (stmt->type != T_PGSelectStmt) {
		ereport(ERROR,
				(errcode(PG_ERRCODE_SYNTAX_ERROR),
						errmsg("DESCRIBE/SHOW/SUMMARIZE with CTE/ORDER BY/... not allowed - wrap the statement in a subquery instead"),
						parser_errposition(exprLocation((PGNode *) stmt))));
	}
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (limitOffset == isLimitOffsetFirst) {
		stmt->offset_first = true;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = larg;
	n->rarg = rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
