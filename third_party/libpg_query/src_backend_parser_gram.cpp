/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PIVOT = 307,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 308,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 309,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 310,                  /* PLACING  */
  YYSYMBOL_PLANS = 311,                    /* PLANS  */
  YYSYMBOL_POLICY = 312,                   /* POLICY  */
  YYSYMBOL_POSITION = 313,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 314,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 315,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 316,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 317,                /* PRECISION  */
  YYSYMBOL_PREPARE = 318,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 319,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 320,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 321,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 322,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 323,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 324,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 325,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 326,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 327,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 328,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 329,                    /* QUOTE  */
  YYSYMBOL_RANGE = 330,                    /* RANGE  */
  YYSYMBOL_READ_P = 331,                   /* READ_P  */
  YYSYMBOL_REAL = 332,                     /* REAL  */
  YYSYMBOL_REASSIGN = 333,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 334,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 335,                /* RECURSIVE  */
  YYSYMBOL_REF = 336,                      /* REF  */
  YYSYMBOL_REFERENCES = 337,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 338,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 339,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 340,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 341,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 342,                  /* RELEASE  */
  YYSYMBOL_RENAME = 343,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 344,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 345,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 346,                  /* REPLICA  */
  YYSYMBOL_RESET = 347,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 348,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 349,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 350,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 351,                /* RETURNING  */
  YYSYMBOL_RETURNS = 352,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 353,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 354,                    /* RIGHT  */
  YYSYMBOL_ROLE = 355,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 356,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 357,                   /* ROLLUP  */
  YYSYMBOL_ROW = 358,                      /* ROW  */
  YYSYMBOL_ROWS = 359,                     /* ROWS  */
  YYSYMBOL_RULE = 360,                     /* RULE  */
  YYSYMBOL_SAMPLE = 361,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 362,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 363,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 364,                  /* SCHEMAS  */
  YYSYMBOL_SCROLL = 365,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 366,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 367,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 368,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 369,                   /* SECRET  */
  YYSYMBOL_SECURITY = 370,                 /* SECURITY  */
  YYSYMBOL_SELECT = 371,                   /* SELECT  */
  YYSYMBOL_SEMI = 372,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 373,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 374,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 375,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 376,                   /* SERVER  */
  YYSYMBOL_SESSION = 377,                  /* SESSION  */
  YYSYMBOL_SET = 378,                      /* SET  */
  YYSYMBOL_SETOF = 379,                    /* SETOF  */
  YYSYMBOL_SETS = 380,                     /* SETS  */
  YYSYMBOL_SHARE = 381,                    /* SHARE  */
  YYSYMBOL_SHOW = 382,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 383,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 384,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 385,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 386,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 387,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 388,                     /* SOME  */
  YYSYMBOL_SQL_P = 389,                    /* SQL_P  */
  YYSYMBOL_STABLE = 390,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 391,             /* STANDALONE_P  */
  YYSYMBOL_START = 392,                    /* START  */
  YYSYMBOL_STATEMENT = 393,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 394,               /* STATISTICS  */
  YYSYMBOL_STDIN = 395,                    /* STDIN  */
  YYSYMBOL_STDOUT = 396,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 397,                  /* STORAGE  */
  YYSYMBOL_STORED = 398,                   /* STORED  */
  YYSYMBOL_STRICT_P = 399,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 400,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 401,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 402,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 403,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 404,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 405,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 406,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 407,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 408,                    /* TABLE  */
  YYSYMBOL_TABLES = 409,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 410,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 411,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 412,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 413,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 414,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 415,                   /* TEXT_P  */
  YYSYMBOL_THEN = 416,                     /* THEN  */
  YYSYMBOL_TIES = 417,                     /* TIES  */
  YYSYMBOL_TIME = 418,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 419,                /* TIMESTAMP  */
  YYSYMBOL_TO = 420,                       /* TO  */
  YYSYMBOL_TRAILING = 421,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 422,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 423,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 424,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 425,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 426,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 427,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 428,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 429,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 430,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 431,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 432,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 433,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 434,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 435,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 436,                    /* UNION  */
  YYSYMBOL_UNIQUE = 437,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 438,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 439,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 440,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 441,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 442,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 443,                   /* UPDATE  */
  YYSYMBOL_USE_P = 444,                    /* USE_P  */
  YYSYMBOL_USER = 445,                     /* USER  */
  YYSYMBOL_USING = 446,                    /* USING  */
  YYSYMBOL_VACUUM = 447,                   /* VACUUM  */
  YYSYMBOL_VALID = 448,                    /* VALID  */
  YYSYMBOL_VALIDATE = 449,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 450,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 451,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 452,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 453,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 454,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 455,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 456,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 457,                /* VERSION_P  */
  YYSYMBOL_VIEW = 458,                     /* VIEW  */
  YYSYMBOL_VIEWS = 459,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 460,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 461,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 462,                     /* WHEN  */
  YYSYMBOL_WHERE = 463,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 464,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 465,                   /* WINDOW  */
  YYSYMBOL_WITH = 466,                     /* WITH  */
  YYSYMBOL_WITHIN = 467,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 468,                  /* WITHOUT  */
  YYSYMBOL_WORK = 469,                     /* WORK  */
  YYSYMBOL_WRAPPER = 470,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 471,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 472,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 473,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 474,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 475,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 476,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 477,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 478,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 479,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 480,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 481,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 482,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 483,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 484,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 485,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 486,                    /* YES_P  */
  YYSYMBOL_ZONE = 487,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 488,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 489,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 490,                  /* WITH_LA  */
  YYSYMBOL_491_ = 491,                     /* '<'  */
  YYSYMBOL_492_ = 492,                     /* '>'  */
  YYSYMBOL_493_ = 493,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 494,                /* POSTFIXOP  */
  YYSYMBOL_495_ = 495,                     /* '+'  */
  YYSYMBOL_496_ = 496,                     /* '-'  */
  YYSYMBOL_497_ = 497,                     /* '*'  */
  YYSYMBOL_498_ = 498,                     /* '/'  */
  YYSYMBOL_499_ = 499,                     /* '%'  */
  YYSYMBOL_500_ = 500,                     /* '^'  */
  YYSYMBOL_UMINUS = 501,                   /* UMINUS  */
  YYSYMBOL_502_ = 502,                     /* '['  */
  YYSYMBOL_503_ = 503,                     /* ']'  */
  YYSYMBOL_504_ = 504,                     /* '('  */
  YYSYMBOL_505_ = 505,                     /* ')'  */
  YYSYMBOL_506_ = 506,                     /* '.'  */
  YYSYMBOL_507_ = 507,                     /* ';'  */
  YYSYMBOL_508_ = 508,                     /* ','  */
  YYSYMBOL_509_ = 509,                     /* '#'  */
  YYSYMBOL_510_ = 510,                     /* '$'  */
  YYSYMBOL_511_ = 511,                     /* '?'  */
  YYSYMBOL_512_ = 512,                     /* '{'  */
  YYSYMBOL_513_ = 513,                     /* '}'  */
  YYSYMBOL_514_ = 514,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 515,                 /* $accept  */
  YYSYMBOL_stmtblock = 516,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 517,                /* stmtmulti  */
  YYSYMBOL_stmt = 518,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 519,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 520,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 521,               /* SeqOptList  */
  YYSYMBOL_opt_with = 522,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 523,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 524,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 525,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 526,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 527,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 528, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 529,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 530, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 531, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 532,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 533,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 534, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 535,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 536,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 537,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 538,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 539,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 540,               /* DetachStmt  */
  YYSYMBOL_opt_database = 541,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 542,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 543,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 544,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 545,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 546,           /* qualified_name  */
  YYSYMBOL_ColId = 547,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 548,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 549,                   /* Sconst  */
  YYSYMBOL_indirection = 550,              /* indirection  */
  YYSYMBOL_indirection_el = 551,           /* indirection_el  */
  YYSYMBOL_attr_name = 552,                /* attr_name  */
  YYSYMBOL_ColLabel = 553,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 554,                 /* CopyStmt  */
  YYSYMBOL_copy_from = 555,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 556,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 557, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 558,                /* opt_using  */
  YYSYMBOL_opt_as = 559,                   /* opt_as  */
  YYSYMBOL_opt_program = 560,              /* opt_program  */
  YYSYMBOL_copy_options = 561,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 562,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 563,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 564,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 565,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 566,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 567,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 568, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 569,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 570,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 571,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 572,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 573,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 574, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 575,       /* generic_option_arg  */
  YYSYMBOL_key_action = 576,               /* key_action  */
  YYSYMBOL_ColConstraint = 577,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 578,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 579,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 580,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 581,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 582,      /* generic_option_elem  */
  YYSYMBOL_key_update = 583,               /* key_update  */
  YYSYMBOL_key_actions = 584,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 585,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 586,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 587,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 588,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 589,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 590,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 591,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 592,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 593,                  /* OptWith  */
  YYSYMBOL_definition = 594,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 595,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 596,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 597,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 598,                /* columnDef  */
  YYSYMBOL_def_list = 599,                 /* def_list  */
  YYSYMBOL_index_name = 600,               /* index_name  */
  YYSYMBOL_TableElement = 601,             /* TableElement  */
  YYSYMBOL_def_elem = 602,                 /* def_elem  */
  YYSYMBOL_opt_definition = 603,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 604,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 605,               /* columnElem  */
  YYSYMBOL_opt_column_list = 606,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 607,              /* ColQualList  */
  YYSYMBOL_key_delete = 608,               /* key_delete  */
  YYSYMBOL_reloption_elem = 609,           /* reloption_elem  */
  YYSYMBOL_columnList = 610,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 611,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 612,                /* func_type  */
  YYSYMBOL_ConstraintElem = 613,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 614,         /* TableElementList  */
  YYSYMBOL_key_match = 615,                /* key_match  */
  YYSYMBOL_TableLikeClause = 616,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 617,                  /* OptTemp  */
  YYSYMBOL_generated_when = 618,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 619,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 620,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 621,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 622,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 623,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 624,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 625,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 626,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 627,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 628,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 629,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 630,              /* macro_alias  */
  YYSYMBOL_param_list = 631,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 632,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 633,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 634,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 635,         /* CreateSecretStmt  */
  YYSYMBOL_secret_key = 636,               /* secret_key  */
  YYSYMBOL_secret_key_val = 637,           /* secret_key_val  */
  YYSYMBOL_opt_secret_key_val = 638,       /* opt_secret_key_val  */
  YYSYMBOL_CreateSeqStmt = 639,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 640,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 641,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 642,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 643,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 644,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 645,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 646,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 647,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 648,             /* using_clause  */
  YYSYMBOL_DropStmt = 649,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 650,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 651,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 652,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 653,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 654, /* drop_type_name_on_any_name  */
  YYSYMBOL_type_name_list = 655,           /* type_name_list  */
  YYSYMBOL_ExecuteStmt = 656,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 657,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 658,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 659,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 660,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 661,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 662,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 663,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 664,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 665, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 666,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 667,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 668,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 669,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 670,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 671,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 672,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 673,                /* IndexStmt  */
  YYSYMBOL_access_method = 674,            /* access_method  */
  YYSYMBOL_access_method_clause = 675,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 676,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 677,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 678,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 679,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 680,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 681,              /* insert_rest  */
  YYSYMBOL_insert_target = 682,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 683,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 684,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 685,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 686,       /* insert_column_item  */
  YYSYMBOL_set_clause = 687,               /* set_clause  */
  YYSYMBOL_opt_or_action = 688,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 689,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 690,               /* index_elem  */
  YYSYMBOL_returning_clause = 691,         /* returning_clause  */
  YYSYMBOL_override_kind = 692,            /* override_kind  */
  YYSYMBOL_set_target_list = 693,          /* set_target_list  */
  YYSYMBOL_opt_collate = 694,              /* opt_collate  */
  YYSYMBOL_opt_class = 695,                /* opt_class  */
  YYSYMBOL_insert_column_list = 696,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 697,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 698, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 699,             /* index_params  */
  YYSYMBOL_set_target = 700,               /* set_target  */
  YYSYMBOL_LoadStmt = 701,                 /* LoadStmt  */
  YYSYMBOL_file_name = 702,                /* file_name  */
  YYSYMBOL_repo_path = 703,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 704,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 705,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 706,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 707,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 708,               /* RenameStmt  */
  YYSYMBOL_opt_column = 709,               /* opt_column  */
  YYSYMBOL_SelectStmt = 710,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 711,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 712,         /* select_no_parens  */
  YYSYMBOL_select_clause = 713,            /* select_clause  */
  YYSYMBOL_opt_select = 714,               /* opt_select  */
  YYSYMBOL_simple_select = 715,            /* simple_select  */
  YYSYMBOL_value_or_values = 716,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 717,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 718,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 719,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 720, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 721,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 722,              /* with_clause  */
  YYSYMBOL_cte_list = 723,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 724,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 725,         /* opt_materialized  */
  YYSYMBOL_into_clause = 726,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 727,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 728,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 729,          /* all_or_distinct  */
  YYSYMBOL_by_name = 730,                  /* by_name  */
  YYSYMBOL_distinct_clause = 731,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 732,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 733,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 734,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 735,              /* sort_clause  */
  YYSYMBOL_sortby_list = 736,              /* sortby_list  */
  YYSYMBOL_sortby = 737,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 738,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 739,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 740,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 741,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 742,             /* limit_clause  */
  YYSYMBOL_offset_clause = 743,            /* offset_clause  */
  YYSYMBOL_sample_count = 744,             /* sample_count  */
  YYSYMBOL_sample_clause = 745,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 746,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 747,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 748,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 749,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 750,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 751,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 752,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 753, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 754,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 755,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 756,            /* first_or_next  */
  YYSYMBOL_group_clause = 757,             /* group_clause  */
  YYSYMBOL_group_by_list = 758,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 759,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 760,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 761,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 762,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 763,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 764,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 765,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 766,            /* having_clause  */
  YYSYMBOL_qualify_clause = 767,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 768,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 769,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 770,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 771,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 772,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 773,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 774,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 775,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 776,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 777,              /* from_clause  */
  YYSYMBOL_from_list = 778,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 779,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 780,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 781,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 782,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 783,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 784,             /* pivot_header  */
  YYSYMBOL_pivot_value = 785,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 786,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 787,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 788,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 789,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 790,             /* joined_table  */
  YYSYMBOL_alias_clause = 791,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 792,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 793,        /* func_alias_clause  */
  YYSYMBOL_join_type = 794,                /* join_type  */
  YYSYMBOL_join_outer = 795,               /* join_outer  */
  YYSYMBOL_join_qual = 796,                /* join_qual  */
  YYSYMBOL_relation_expr = 797,            /* relation_expr  */
  YYSYMBOL_func_table = 798,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 799,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 800,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 801,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 802,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 803,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 804,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 805,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 806,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 807,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 808,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 809,             /* opt_Typename  */
  YYSYMBOL_Typename = 810,                 /* Typename  */
  YYSYMBOL_opt_array_bounds = 811,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 812,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 813,            /* ConstTypename  */
  YYSYMBOL_GenericType = 814,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 815,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 816,                  /* Numeric  */
  YYSYMBOL_opt_float = 817,                /* opt_float  */
  YYSYMBOL_Bit = 818,                      /* Bit  */
  YYSYMBOL_ConstBit = 819,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 820,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 821,         /* BitWithoutLength  */
  YYSYMBOL_Character = 822,                /* Character  */
  YYSYMBOL_ConstCharacter = 823,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 824,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 825,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 826,                /* character  */
  YYSYMBOL_opt_varying = 827,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 828,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 829,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 830,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 831,             /* year_keyword  */
  YYSYMBOL_month_keyword = 832,            /* month_keyword  */
  YYSYMBOL_day_keyword = 833,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 834,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 835,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 836,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 837,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 838,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 839,             /* opt_interval  */
  YYSYMBOL_a_expr = 840,                   /* a_expr  */
  YYSYMBOL_b_expr = 841,                   /* b_expr  */
  YYSYMBOL_c_expr = 842,                   /* c_expr  */
  YYSYMBOL_d_expr = 843,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 844,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 845,              /* struct_expr  */
  YYSYMBOL_func_application = 846,         /* func_application  */
  YYSYMBOL_func_expr = 847,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 848,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 849, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 850,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 851,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 852,            /* filter_clause  */
  YYSYMBOL_export_clause = 853,            /* export_clause  */
  YYSYMBOL_window_clause = 854,            /* window_clause  */
  YYSYMBOL_window_definition_list = 855,   /* window_definition_list  */
  YYSYMBOL_window_definition = 856,        /* window_definition  */
  YYSYMBOL_over_clause = 857,              /* over_clause  */
  YYSYMBOL_window_specification = 858,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 859, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 860,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 861,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 862,             /* frame_extent  */
  YYSYMBOL_frame_bound = 863,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 864, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 865,            /* qualified_row  */
  YYSYMBOL_row = 866,                      /* row  */
  YYSYMBOL_dict_arg = 867,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 868,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 869, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 870,                  /* map_arg  */
  YYSYMBOL_map_arguments = 871,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 872,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 873, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 874,                 /* sub_type  */
  YYSYMBOL_all_Op = 875,                   /* all_Op  */
  YYSYMBOL_MathOp = 876,                   /* MathOp  */
  YYSYMBOL_qual_Op = 877,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 878,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 879,              /* subquery_Op  */
  YYSYMBOL_any_operator = 880,             /* any_operator  */
  YYSYMBOL_c_expr_list = 881,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 882,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 883,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 884,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 885,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 886,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 887,            /* func_arg_expr  */
  YYSYMBOL_type_list = 888,                /* type_list  */
  YYSYMBOL_extract_list = 889,             /* extract_list  */
  YYSYMBOL_extract_arg = 890,              /* extract_arg  */
  YYSYMBOL_overlay_list = 891,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 892,          /* overlay_placing  */
  YYSYMBOL_position_list = 893,            /* position_list  */
  YYSYMBOL_substr_list = 894,              /* substr_list  */
  YYSYMBOL_substr_from = 895,              /* substr_from  */
  YYSYMBOL_substr_for = 896,               /* substr_for  */
  YYSYMBOL_trim_list = 897,                /* trim_list  */
  YYSYMBOL_in_expr = 898,                  /* in_expr  */
  YYSYMBOL_case_expr = 899,                /* case_expr  */
  YYSYMBOL_when_clause_list = 900,         /* when_clause_list  */
  YYSYMBOL_when_clause = 901,              /* when_clause  */
  YYSYMBOL_case_default = 902,             /* case_default  */
  YYSYMBOL_case_arg = 903,                 /* case_arg  */
  YYSYMBOL_columnref = 904,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 905,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 906,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 907,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 908,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 909, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 910,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 911, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 912,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 913,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 914,                /* target_el  */
  YYSYMBOL_except_list = 915,              /* except_list  */
  YYSYMBOL_opt_except_list = 916,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 917,          /* replace_list_el  */
  YYSYMBOL_replace_list = 918,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 919,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 920,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 921,      /* qualified_name_list  */
  YYSYMBOL_name_list = 922,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 923,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 924, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 925,                     /* name  */
  YYSYMBOL_func_name = 926,                /* func_name  */
  YYSYMBOL_AexprConst = 927,               /* AexprConst  */
  YYSYMBOL_Iconst = 928,                   /* Iconst  */
  YYSYMBOL_type_function_name = 929,       /* type_function_name  */
  YYSYMBOL_function_name_token = 930,      /* function_name_token  */
  YYSYMBOL_type_name_token = 931,          /* type_name_token  */
  YYSYMBOL_any_name = 932,                 /* any_name  */
  YYSYMBOL_attrs = 933,                    /* attrs  */
  YYSYMBOL_opt_name_list = 934,            /* opt_name_list  */
  YYSYMBOL_param_name = 935,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 936,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 937,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 938,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 939,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 940,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 941,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 942,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 943,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 944,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 945,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 946,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 947,            /* generic_reset  */
  YYSYMBOL_reset_rest = 948,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 949,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 950,                 /* set_rest  */
  YYSYMBOL_generic_set = 951,              /* generic_set  */
  YYSYMBOL_var_value = 952,                /* var_value  */
  YYSYMBOL_zone_value = 953,               /* zone_value  */
  YYSYMBOL_var_list = 954,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 955,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 956,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 957,               /* opt_tables  */
  YYSYMBOL_var_name = 958,                 /* var_name  */
  YYSYMBOL_table_id = 959,                 /* table_id  */
  YYSYMBOL_ViewStmt = 960,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 961          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  687
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   69654

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  515
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  447
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2058
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3439

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   747


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   509,   510,   499,     2,     2,
     504,   505,   497,   495,   508,   496,   506,   498,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   514,   507,
     491,   493,   492,   511,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   502,     2,   503,   500,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   512,     2,   513,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   494,   501
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   495,   495,   511,   523,   532,   533,   534,   535,   536,
     537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
     547,   548,   549,   550,   551,   552,   553,   554,   555,   556,
     557,   558,   559,   560,   561,   562,   563,   564,   565,   566,
     567,   568,   569,   571,     9,    18,    27,    36,    45,    54,
      63,    72,    85,    87,    93,    94,    99,   103,   107,   118,
     126,   130,   139,   148,   157,   166,   175,   184,   192,   200,
     209,   218,   227,   236,   253,   262,   271,   280,   290,   303,
     318,   327,   335,   350,   358,   368,   378,   385,   392,   400,
     407,   418,   419,   424,   428,   433,   438,   446,   447,   452,
     456,   457,   458,     7,    13,    19,    25,     9,    13,    44,
      45,    46,    50,    51,    55,    59,    60,    64,    70,    75,
      76,    77,    78,     6,    15,    25,    35,    45,    55,    65,
      75,    85,    95,   106,   117,   127,   140,   141,     9,    23,
      29,    36,    42,    49,    59,    63,    71,    72,    73,    77,
      86,    95,   102,   103,   108,   120,   125,   150,   155,   160,
     166,   176,   186,   192,   203,   214,   229,   230,   236,   237,
     242,   243,   249,   250,   254,   255,   260,   262,   268,   269,
     273,   274,   277,   278,   283,     7,    16,    25,    46,    47,
      50,    54,     7,    14,    22,     9,    19,    29,    42,    43,
       7,    16,    25,    37,    41,    42,    46,    47,     7,    14,
      31,    51,    55,    65,    69,    75,    76,     9,    17,    29,
      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,
      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,
     101,   105,   112,   113,   117,   118,   119,     2,     9,    15,
      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,
      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,
      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,
     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,
     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,
     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,
     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,
     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,
     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,
     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,
     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,
     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,
     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,
     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,
     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,
      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   114,   115,   116,   117,   118,   119,   124,   125,   130,
     131,   132,   137,   138,   139,   142,   143,     8,    20,    33,
      46,    58,    70,    86,    87,    91,    95,     7,     1,    30,
      53,    54,    59,    63,    68,    72,    80,    81,    85,    86,
      91,    92,    96,    97,   102,   103,   104,   105,   106,   107,
     112,   120,   124,   129,   130,   135,   139,   144,   148,   152,
     156,   160,   164,   168,   172,   176,   180,   184,   188,   192,
     196,   200,   204,   212,   218,   219,   220,   225,   229,    47,
      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,
     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,
     236,   255,   259,   263,   267,   271,   280,   290,   299,   308,
     318,   328,   339,   353,   370,   370,   374,   374,   378,   378,
     382,   388,   395,   399,   400,   404,   405,   419,   426,   433,
     443,   444,   447,   460,   461,   462,   466,   477,   485,   490,
     495,   500,   505,   513,   521,   526,   531,   538,   539,   543,
     544,   545,   549,   556,   557,   561,   562,   566,   567,   568,
     572,   573,   577,   578,   594,   595,   598,   607,   618,   619,
     620,   623,   624,   625,   629,   630,   631,   632,   636,   637,
     641,   643,   659,   661,   666,   669,   677,   681,   685,   689,
     693,   697,   704,   709,   716,   717,   721,   726,   730,   734,
     742,   749,   750,   755,   756,   760,   761,   766,   768,   770,
     775,   795,   796,   798,   803,   804,   808,   809,   812,   813,
     838,   839,   844,   848,   849,   853,   854,   858,   859,   860,
     861,   862,   866,   879,   886,   893,   900,   901,   905,   906,
     910,   911,   915,   916,   920,   921,   925,   926,   930,   941,
     942,   943,   944,   948,   949,   954,   955,   956,   965,   971,
     980,   981,   994,   995,   999,  1000,  1004,  1005,  1011,  1017,
    1025,  1034,  1042,  1051,  1060,  1064,  1069,  1079,  1092,  1093,
    1096,  1097,  1098,  1101,  1109,  1119,  1120,  1123,  1131,  1140,
    1144,  1151,  1152,  1156,  1165,  1169,  1194,  1198,  1211,  1225,
    1240,  1252,  1265,  1279,  1293,  1306,  1321,  1340,  1346,  1351,
    1357,  1364,  1365,  1373,  1377,  1381,  1387,  1394,  1399,  1400,
    1401,  1402,  1403,  1404,  1408,  1409,  1421,  1422,  1427,  1434,
    1441,  1448,  1480,  1491,  1504,  1509,  1510,  1513,  1514,  1517,
    1518,  1523,  1524,  1529,  1533,  1539,  1560,  1568,  1581,  1584,
    1588,  1588,  1591,  1592,  1594,  1599,  1606,  1611,  1617,  1622,
    1628,  1634,  1640,  1649,  1651,  1654,  1658,  1659,  1660,  1661,
    1662,  1663,  1668,  1688,  1689,  1690,  1691,  1702,  1716,  1717,
    1723,  1728,  1733,  1738,  1743,  1748,  1753,  1758,  1764,  1770,
    1776,  1783,  1805,  1814,  1818,  1826,  1830,  1838,  1850,  1871,
    1875,  1881,  1885,  1898,  1906,  1916,  1918,  1920,  1922,  1924,
    1926,  1931,  1932,  1939,  1948,  1956,  1965,  1976,  1984,  1985,
    1986,  1990,  1990,  1993,  1993,  1996,  1996,  1999,  1999,  2002,
    2002,  2005,  2005,  2008,  2008,  2011,  2011,  2014,  2016,  2018,
    2020,  2022,  2024,  2026,  2028,  2030,  2035,  2040,  2046,  2053,
    2058,  2064,  2070,  2101,  2103,  2105,  2113,  2128,  2130,  2132,
    2134,  2136,  2138,  2140,  2142,  2144,  2146,  2148,  2150,  2152,
    2154,  2156,  2158,  2161,  2163,  2165,  2168,  2170,  2172,  2174,
    2176,  2181,  2186,  2193,  2198,  2205,  2210,  2217,  2222,  2230,
    2238,  2246,  2254,  2272,  2280,  2288,  2296,  2304,  2312,  2320,
    2324,  2340,  2348,  2356,  2364,  2372,  2380,  2388,  2392,  2396,
    2400,  2404,  2412,  2420,  2428,  2436,  2456,  2478,  2489,  2496,
    2510,  2518,  2526,  2546,  2548,  2550,  2552,  2554,  2556,  2558,
    2560,  2562,  2564,  2566,  2568,  2570,  2572,  2574,  2576,  2578,
    2580,  2582,  2584,  2586,  2588,  2592,  2596,  2600,  2614,  2615,
    2619,  2633,  2634,  2635,  2642,  2646,  2650,  2653,  2664,  2669,
    2671,  2682,  2706,  2717,  2728,  2732,  2739,  2743,  2747,  2764,
    2772,  2781,  2785,  2792,  2800,  2808,  2819,  2839,  2875,  2886,
    2887,  2894,  2900,  2902,  2904,  2908,  2917,  2922,  2929,  2944,
    2951,  2955,  2959,  2963,  2967,  2977,  2986,  3008,  3009,  3013,
    3014,  3015,  3019,  3020,  3027,  3028,  3032,  3033,  3038,  3046,
    3048,  3062,  3065,  3092,  3093,  3096,  3097,  3105,  3113,  3121,
    3130,  3140,  3158,  3204,  3213,  3222,  3231,  3240,  3252,  3253,
    3254,  3255,  3256,  3270,  3271,  3274,  3275,  3279,  3289,  3290,
    3294,  3295,  3299,  3306,  3307,  3312,  3313,  3318,  3319,  3322,
    3323,  3324,  3327,  3328,  3331,  3332,  3333,  3334,  3335,  3336,
    3337,  3338,  3339,  3340,  3341,  3342,  3343,  3344,  3347,  3349,
    3354,  3356,  3361,  3363,  3365,  3367,  3369,  3371,  3373,  3375,
    3389,  3391,  3396,  3400,  3407,  3412,  3418,  3422,  3429,  3434,
    3441,  3446,  3454,  3458,  3464,  3468,  3477,  3488,  3489,  3493,
    3497,  3504,  3505,  3506,  3507,  3508,  3509,  3510,  3511,  3512,
    3513,  3523,  3527,  3534,  3541,  3542,  3558,  3562,  3567,  3571,
    3586,  3591,  3595,  3598,  3601,  3602,  3603,  3606,  3613,  3623,
    3637,  3638,  3642,  3653,  3654,  3657,  3658,  3661,  3665,  3672,
    3680,  3688,  3696,  3706,  3707,  3712,  3713,  3717,  3718,  3719,
    3723,  3732,  3740,  3748,  3757,  3772,  3773,  3778,  3779,  3789,
    3790,  3794,  3795,  3799,  3800,  3803,  3819,  3827,  3837,  3838,
    3841,  3842,  3845,  3849,  3850,  3854,  3855,  3858,  3859,  3860,
    3870,  3871,  3875,  3877,  3883,  3884,  3888,  3889,  3892,  3903,
    3906,  3917,  3921,  3925,  3937,  3941,  3950,  3957,  3995,  3999,
    4003,  4007,  4011,  4015,  4019,  4025,  4042,  4043,  4044,  4047,
    4048,  4049,  4052,  4053,  4054,  4057,  4058,  4061,  4063,  4068,
    4069,  4072,  4076,  4077,     7,    18,    19,    23,    24,    25,
      26,    27,     7,    26,    50,    73,    80,    85,    86,    87,
      88,     8,    33,    62,    66,    67,    72,    73,    78,    79,
      83,    84,    89,    90,     7,    16,    25,    34,    43,    52,
       5,    12,    22,    23,     7,    19,    33,     9,    16,    26,
      33,    44,    45,    50,    51,    52,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    90,    91,    92,    97,
      98,   103,   107,   115,   116,   121,   122,   123,   129,   134,
     142,   143,    10,    16,    22,    28,    38,    39,    47,    58,
      70,    78,    86,    93,   103,   105,   111,   115,   119,   134,
     141,   142,   143,   147,   148,     7,    15,    22,    29,    36,
      45,    46,    48,    49,     8,    22,    36,    48,    56,    70,
      71,    72,    73,    74,    87,    88,    93,    94,    98,    99,
       7,    18,    31,    35,    42,    53,    54,    60,    61,     9,
      19,     7,    18,    25,    34,    35,    39,    40,     2,     7,
      12,    17,    26,    33,    43,    44,    51,     3,    10,    17,
      24,    31,    38,    45,    52,    61,    61,    63,    63,    65,
      66,    70,    71,     6,     8,    21,    34,    47,    65,    87,
      88,    89,    90,    11,    24,    37,    54,    55,    56,    61,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER", "PLACING", "PLANS",
  "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P", "PRECEDING", "PRECISION",
  "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES",
  "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE",
  "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
  "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
  "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
  "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P",
  "SECONDS_P", "SECRET", "SECURITY", "SELECT", "SEMI", "SEQUENCE",
  "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETOF", "SETS",
  "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT",
  "SOME", "SQL_P", "STABLE", "STANDALONE_P", "START", "STATEMENT",
  "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", "STRICT_P",
  "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
  "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
  "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIES",
  "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM",
  "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST",
  "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION",
  "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNPIVOT", "UNTIL",
  "UPDATE", "USE_P", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VIRTUAL", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'",
  "'}'", "':'", "$accept", "stmtblock", "stmtmulti", "stmt",
  "AlterObjectSchemaStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt", "copy_from",
  "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
  "opt_program", "copy_options", "copy_generic_opt_arg",
  "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
  "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "secret_key",
  "secret_key_val", "opt_secret_key_val", "CreateSeqStmt", "OptSeqOptList",
  "CreateTypeStmt", "opt_enum_val_list", "enum_val_list", "DeallocateStmt",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "DropStmt", "drop_type_any_name", "drop_type_name",
  "any_name_list", "opt_drop_behavior", "drop_type_name_on_any_name",
  "type_name_list", "ExecuteStmt", "execute_param_expr",
  "execute_param_list", "execute_param_clause", "ExplainStmt",
  "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "ExportStmt", "ImportStmt", "IndexStmt",
  "access_method", "access_method_clause", "opt_concurrently",
  "opt_index_name", "opt_reloptions", "opt_unique", "InsertStmt",
  "insert_rest", "insert_target", "opt_by_name_or_position",
  "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
  "opt_or_action", "opt_on_conflict", "index_elem", "returning_clause",
  "override_kind", "set_target_list", "opt_collate", "opt_class",
  "insert_column_list", "set_clause_list", "set_clause_list_opt_comma",
  "index_params", "set_target", "LoadStmt", "file_name", "repo_path",
  "PragmaStmt", "PrepareStmt", "prep_type_clause", "PreparableStmt",
  "RenameStmt", "opt_column", "SelectStmt", "select_with_parens",
  "select_no_parens", "select_clause", "opt_select", "simple_select",
  "value_or_values", "pivot_keyword", "unpivot_keyword",
  "pivot_column_entry", "pivot_column_list_internal", "pivot_column_list",
  "with_clause", "cte_list", "common_table_expr", "opt_materialized",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "by_name", "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "opt_array_bounds", "SimpleTypename", "ConstTypename", "GenericType",
  "opt_type_modifiers", "Numeric", "opt_float", "Bit", "ConstBit",
  "BitWithLength", "BitWithoutLength", "Character", "ConstCharacter",
  "CharacterWithLength", "CharacterWithoutLength", "character",
  "opt_varying", "ConstDatetime", "ConstInterval", "opt_timezone",
  "year_keyword", "month_keyword", "day_keyword", "hour_keyword",
  "minute_keyword", "second_keyword", "millisecond_keyword",
  "microsecond_keyword", "opt_interval", "a_expr", "b_expr", "c_expr",
  "d_expr", "indirection_expr", "struct_expr", "func_application",
  "func_expr", "func_expr_windowless", "func_expr_common_subexpr",
  "list_comprehension", "within_group_clause", "filter_clause",
  "export_clause", "window_clause", "window_definition_list",
  "window_definition", "over_clause", "window_specification",
  "opt_existing_window_name", "opt_partition_clause", "opt_frame_clause",
  "frame_extent", "frame_bound", "opt_window_exclusion_clause",
  "qualified_row", "row", "dict_arg", "dict_arguments",
  "dict_arguments_opt_comma", "map_arg", "map_arguments",
  "map_arguments_opt_comma", "opt_map_arguments_opt_comma", "sub_type",
  "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "c_expr_list", "c_expr_list_opt_comma", "expr_list",
  "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "opt_slice_bound", "opt_indirection", "opt_func_arguments",
  "extended_indirection_el", "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2950)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1987)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    7890,   -55,   715, -2950, -2950,   233,   -55, 47427, 61962,   -55,
     104,  1750, 49367, -2950,   258,  7221,   -55, 52277, 69133,   277,
     309, 30445,   321, 52762, 52762, -2950, -2950, -2950, 61962, 52277,
   53247,   -55,   294, 62447, -2950,   -55, 32385, 49852,   263, -2950,
   52277,    66,    64, 53732, 52277,  3369,   631,   315, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
     187, -2950, -2950, -2950, -2950,   161, -2950, -2950, -2950, -2950,
   -2950,   149, -2950,   693,   156, 30445, 30445,  1877,   322, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, 31900, -2950, -2950,
   -2950, -2950, 54217, 52277, 54702, 50337, 55187, -2950,   900, -2950,
     178, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,   180,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
     181, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950,   206, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950,   251,   212, -2950, -2950, -2950,   119, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,  3369,
   52277,   619,   811,   569, 55672, 62932, -2950, -2950, 52277, -2950,
   -2950,    89,   675, -2950, -2950, 50822, -2950, -2950, -2950,   736,
     955,   728, -2950, -2950,   525, -2950,   213, -2950, -2950,   592,
     585, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,   685,
   -2950, 66327, -2950, 63417, 56157, 56642, -2950,   559,  2486, 69150,
   29473, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,   187, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, 52762, 61962, 52762,   578,   602,   976,   626,
   30930,   688, 32871,   700,   704,  1003,   750,   773,   793,   807,
      64, 29959,   722,   251, -2950, 57127, 57127,   -56,  3116, -2950,
   57127, 57612, -2950,   828, -2950,   900, -2950, -2950, -2950,  1073,
   -2950,   472,   818, -2950, 58097, 58097, 58097,   849,  1122, -2950,
   -2950, -2950,   884, -2950, -2950,  1091, 19412, 19412, 63902, 63902,
     900, 63902,   949, -2950, -2950,    31, -2950, -2950, -2950,  1877,
     899,   251, -2950, -2950, 49852, -2950, -2950,   184,  1281, 19412,
   52277,   951, -2950,   970,   951,   973,   982, -2950,  7890, -2950,
   52277,  1325,  1223, 49852,   368,   368,  1465,   368,  1102,  1111,
    2298,  3089, -2950,   145, -2950,  1036,  1123,  1060,  1341, -2950,
     899,  1438,   170,  1258,  1467,  4276,  1480,   928,  1482,  1016,
    1598, 19412, 45002,   251, -2950, 10761,  1140,  1152, -2950, -2950,
   -2950, -2950,  1020,  1393, -2950,  1395,  1234,  1633, -2950, -2950,
    1239, 58582, 59067, 59552, 60037,  1623, -2950, -2950,  1564, -2950,
   -2950, -2950,  1244, -2950, -2950, -2950,   152, -2950, -2950, -2950,
   -2950, -2950, -2950,  1262, -2950,  1262,  1262, -2950, -2950, -2950,
   -2950,  1231,  1231,  1420,  1237, -2950, -2950, -2950,  1590, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,  1238,
     519, -2950,  1262, -2950,  1231, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, 68692, -2950, -2950, -2950, -2950,   260,   526, -2950,
    1240, -2950, -2950, -2950, -2950,    94,  1243, -2950,  1704, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950,  1245, -2950,  4449,
    1231,  1602,  1246,   126, -2950,  1605,   134, -2950,  1608,  1474,
   13821, -2950,  1416, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950,    64, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,   654,
   -2950, -2950, 42300, 69150,  1342,  1259, -2950,  1600, 19412, 19412,
    1266,  2379, 57127, 57612, 19412, 52277, -2950, 19412, 24002,  1267,
   19412, 19412, 11271, 19412, 28503, 57127,  3116,  1268, -2950,   716,
   52277,  1272, -2950,  1367,  1367,   294, 30445,  1557, -2950,   794,
    1558,  1486, -2950, 30445,  1486,  1444,  1277,  1563,  1486, -2950,
     200,  1567,  1367, 33356,  1290, -2950,  1367,  1509, -2950, -2950,
   52762, 42300, 13821, 66797,  1760, -2950, -2950, -2950, -2950,  1573,
   61962,  1301, -2950, -2950, -2950, -2950, -2950, -2950,   800,  1801,
     135,  1802, 19412,   135,   135,  1304,   216,   216, -2950,  1306,
   -2950,   217,  1308,  1309,  1809,  1812,   165,   163,   519,   135,
   19412, -2950,   216,  1315,  1820,  1322,  1822,   196,   219, -2950,
     220, 19412, 19412, 19412,  1684, 19412, 10251,  1824, 45002, -2950,
   52277,   507, -2950,   251,  1330,   900, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950,   175,  6544, -2950, -2950, -2950, -2950,
    1371, -2950, -2950, -2950, -2950,  1544, 19412, -2950, -2950,  1332,
    1557, -2950,   227, -2950, -2950,  1557, -2950, -2950, -2950, -2950,
   -2950,   247,  1739, 41330, 41815, 61962,   251, -2950, 64387, -2950,
   -2950, -2950, -2950, -2950, -2950,   753, -2950,   187, 43833,  1334,
    1338,   951, 52277, 52277,  1807, -2950, -2950, -2950,   970, 49852,
     146,  1635,  1470, -2950, -2950,  1877,  1877, 14822,  1328,   318,
     796, 15332, 19922,  1689,  1572,   630,   618,  1692, -2950,  1575,
    1797, 24002, 19412, 19412,  1102,  1111, 19412, -2950, -2950, -2950,
    1626, 52277, 47912,   913,   985,  1354,  1439,  1357,    29,  1772,
   -2950,  1356, -2950,  1445, 52277, 68692,   264, -2950,  1811,   264,
     264,   623,  1813,  1448,   256,  1636,    65,   482,  2353, -2950,
    1356, 49852,   151,   552,  1356, 52277,  1462,   643,  1356, 61962,
    1259, 39266,  1382, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950,   148, 13821, -2950,   874,  1059,  1170,   758,
     141,  1216,  1252, 13821,  1270,  1279,   177,  1333,  1355,  1384,
    1398,  1427,  1454,  1593,  1646,   153,  1656,  1658,  1662,  1664,
    1666,  1678, -2950,  1680,   190,  1682,   164, 13821,  1687, -2950,
     201, -2950, 43833,    -5, -2950, -2950,  1691,  1492, 61962,  1434,
   52277, 61962,   697,  1765,  1816,  1767,  1423, 67267, 52277,  1649,
    2353,  1650,  1415,  1881,  1654,  1152,  1657,  1424, -2950, 64872,
    1924, -2950, -2950, -2950, -2950, -2950, -2950,  1425, -2950, -2950,
   19412, -2950, -2950, -2950,  1921, -2950, 66797, 66797,  1262,  1262,
   -2950, -2950,  1896,  1519,  1520,  1921, -2950,  1921, -2950, 61962,
   -2950, -2950, 66797, -2950, 61962,  1437,  1440,  1921, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950,  1921,  1521, -2950,  1523,  1524,  1525,
   -2950, -2950, -2950, -2950, -2950, 61962, 45002,  1443, 61962, -2950,
   52277, 52277, -2950, 52277, 61962, -2950,   774, 43833,  1943,   918,
   69150, 46457, -2950, -2950, -2950, -2950,  1099,  1109, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950,   900, 45002, -2950,
    2621, 52762, 42902,  1455, 19412, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950,  1456,  1792, -2950, -2950,  6397,
    1460, 42942,  1463, 24002, 24002,   251,  2348, -2950, -2950, 24002,
    1468, 46942, 42822,  1464,  1469, 43287, 15842, 19412, 15842, 15842,
   43327, -2950,  1471, 43367, 57127,  1475, 52277, 51307, -2950, -2950,
   -2950, 19412, 19412,  3116, 51792,  1504, -2950, 30445, -2950,  1755,
   30445, -2950, -2950,  2917, -2950, 30445,  1761, 19412, 30445, -2950,
    1705,  1707,  1479, 30445, -2950, 52277,  1483, 52277, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950,  1481,   848, -2950,   852,
    2775, -2950, -2950, 19412, 19412, -2950, 43833,  1526, 19412, -2950,
   19412,  6272, 37723, 16352,  6272,  1980,  1980, 35781, -2950,  1653,
   43407, -2950,  1497,  1541,  6778,  1493, -2950, -2950,  1498, -2950,
    1505,  1501, 39875,   174,   251,   251, 19412, -2950, 19412,  3798,
    3798, -2950,   197, 66797, 19412, 19412, 19412, 19412, 19412, 19412,
   19412, 19412, 44517,  1603,   162, 61962, 19412, 19412,  1513,   853,
   -2950, 19412,  1747, -2950,  1528, 19412,  1604,   157, 19412, 19412,
   19412, 19412, 19412, 19412, 19412, 19412, 19412, -2950, -2950, 26533,
     223,   638,  1847,  1875,   -49,   395, 19412,  1867, 10761, -2950,
    1867, -2950, -2950, -2950, -2950, -2950,   228, -2950, -2950, -2950,
    1481, -2950,  1481, -2950, 61962, -2950, 52277,   184, 48882, 19412,
   -2950, -2950,  1527,  1531,   564, -2950,  1591, -2950, -2950, 52277,
   36266,  1826, -2950,   334,  1534, -2950, 42782,  1795,  1826,  1877,
   -2950, -2950, 25022,  1677,  1837,  1777, -2950, -2950,  1756,  1758,
   -2950,  1561, 43920, 20432, 20432, -2950,  1348, 43833,  1350, -2950,
   -2950, -2950, -2950, -2950, -2950,    79, -2950, 52277,    69, 33841,
   -2950,  1562,    68, -2950,  3018,  1895,  1857,  1689,   618,  1569,
   -2950,  1028,  1571, 65357, 52277,  1855,  1814,  1858,   -97, 66797,
   -2950, -2950, -2950, -2950, 52277, 61962, 60522, 65842, 45487, 52277,
   45002, -2950, -2950, -2950, -2950, 52277,   550, 52277,  8070, -2950,
   -2950, -2950,   264, -2950, -2950, -2950, -2950, -2950, 61962, 52277,
   -2950, -2950,   264, 61962, 52277,   264, -2950,  1477, 52277, 52277,
   52277, 52277,  1607, 52277, 52277, -2950, -2950, -2950, 20942,     3,
       3,  1790, 11781,   182, -2950, 19412, 19412,  1759, -2950, -2950,
     856,  1805,    90, -2950,  1660,  1629, 52277, 52277, 52277, 52277,
   52277,  2121, -2950, -2950, -2950, -2950, -2950, 61962, 61962,  1588,
   -2950,  1592,  1946,  2353, -2950,  1947, 48397,   863,  1599,  1949,
    1632,  1951, 12291,  2062,  1836, -2950, -2950,  1825, -2950, 19412,
    1606,  1609,    94,   862, -2950, -2950,  1610,  1440,  1622,  1628,
    1611,  1613, 66797,   868, -2950,   911,  1921,   132,  1617,  1620,
    1459,  1042,   629,  1351,   126, -2950, 45002, -2950,   134, -2950,
    1827,   173, -2950, 13821, 19412, -2950, -2950, -2950, -2950, -2950,
   -2950,  1259, 27029, -2950,   916, -2950, -2950,  2087,   900,  2087,
     648, -2950, -2950,  2087, -2950,  2069,  2087, -2950, -2950, 66797,
   -2950,  7550, -2950, 19412, 19412, -2950, 19412,  1962, -2950,  2122,
    2122, 66797, 24002, 24002, 24002, 24002, 24002, 24002,   210,  1315,
   24002, 24002, 24002, 24002, 24002, 24002, 24002, 24002, 24002, 25532,
     282, -2950, -2950,   925,  2095, 19412, 19412,  1976,  1962, 19412,
   -2950, 66797,  1634, -2950,  1639,  1640, 19412, -2950, 66797, -2950,
   52277,  1641,    27,    81, -2950,  1637,  1643, -2950,  1557, -2950,
     990,  1008, 52277,  3243,  4304,  5348, -2950, -2950, 19412,  1974,
    2917, 30445, -2950, 19412,  1648, -2950, -2950, 30445,  1991, -2950,
   -2950, -2950, 34326,  2917, 66797,   940, -2950, 52277, 66797,   947,
   42300, -2950, 13821, -2950, 66797, -2950, -2950, -2950, -2950, -2950,
   -2950,  1651,  1652, 19412,    46, -2950,  8061,  5886, -2950,  1655,
   -2950,  1647, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950,  1661, -2950,  1667,
   -2950,  1669, 52277, -2950, 21452, -2950, 61962, -2950, -2950, 19412,
   19412, 52277, -2950,  1684, -2950,  1670, 38216, -2950, -2950, -2950,
     248,  1006, 43960,   395,   270,   270,   270,  6272, -2950, -2950,
   -2950,  1672, -2950, 24002, 24002, -2950,  3721,  3675, 10251, -2950,
   -2950,  1987, -2950,   836, -2950,  1674, -2950, -2950,  4182, -2950,
   37723, 44038, 19412,   167, -2950, 19412,  1513, 19412,  1741,   270,
     270,   270,   402,   402,   248,   248,   248,  1006,   395, -2950,
   -2950, -2950,  1675, 19412, 45002, -2950,  1679,  1685,  2015,  1322,
   19412, -2950, -2950, 30445,  1504,    -5,  1504,  1921,  3798, -2950,
     970, -2950, -2950,   970, 43833, 52277, -2950, -2950,  1937,  1688,
   30445,  1725,  2151,  2134, 61962, -2950, -2950,  1686,  1867,  1702,
   -2950, -2950,  1708, 19412,  1293,  1708, -2950,  1826,   -41,  1914,
    1124,  1124,  1348,  1916, -2950, -2950,  1762, -2950, -2950, -2950,
   19412, 12801,  1362, -2950,  1365, -2950, -2950, -2950, -2950, -2950,
    1693, -2950,  1965, -2950, 52277, -2950, -2950, 24002,  2153, 19412,
   34811,  2155,  1959, -2950, -2950, -2950,  1803,  1356, 19412,  1942,
   -2950,   199,  1717,  2074,   344,  2026, 61962, -2950,   403,   576,
   -2950,   763,  2079,   173,  2081,   173, 45002, 45002, 45002,   953,
   -2950, -2950, -2950,   900, -2950,   424,   958, -2950, -2950, -2950,
   -2950,  1810,   649,  2353,  1356, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950,   293,   682,  1356,  1818, -2950,  1829, -2950,  1832,
     748,  1356, -2950, -2950,  8717, 43833,   587,   182,   182,   182,
   13821, -2950,  1957,  1958,  1729, 43833, 43833, -2950,   166, -2950,
   61962, -2950, -2950, -2950,  1759,  1816,  1751, 52277,  2353,  1749,
    2216,  1152,  1424, -2950,  1912,   897,  1830, 61962,   236, -2950,
   61962, 52277, 52277, 52277, 61007, -2950, -2950, -2950,  1753,  1754,
   -2950,   -11,  1982,  1983, 52277,  1806, 52277,  1357,  2227, 52277,
   -2950,   968, 16862,  2126, 52277,  1764, -2950, -2950, -2950, -2950,
    1921, -2950, -2950,   511,   511, -2950, -2950, 61962, -2950,  1775,
   -2950,  1778, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, 61962, -2950, -2950, 43833, -2950, -2950,
   45972, -2950, -2950, -2950, -2950, -2950, 45002, -2950,   900, -2950,
     900,  2009, 61962, 40360,   900, 40845,   900,  1781, -2950, 43833,
   38256, 43833,  1976, -2950,   189,  2122,  1190,  1190,  1190,  5155,
    2125,   237,  1784,  1190,  1190,  1190,   346,   346,   189,   189,
     189,  2122,   282,   828, 46942,  1785, -2950, 43833, 43833, -2950,
   -2950,  1788, -2950, -2950, -2950, -2950,  1793,  1794, -2950, -2950,
   -2950, -2950, -2950, -2950, 61962,  1159,  1504,   263,   263,   263,
     263, -2950, 52277, 52277, 52277, 43833,  2236,  2116, -2950,  2917,
   43833, 52277, -2950, 28014, 52277, -2950,  2138, -2950,  2223, -2950,
   52277,   974, -2950, -2950, -2950, -2950, -2950, 43454, 19412, -2950,
    2163, -2950, 19412, 19412, -2950, 37723, -2950, -2950,  1808, 10251,
   43793, -2950,  2112, 38296, 43833, -2950,  1653, -2950,  3798, 19412,
    3429,  3617, 19412,  1815, 19412,  2140, -2950, -2950,  1804, -2950,
   -2950, 66797, 19412,  1817,  5170, 24002, 24002,  5455, -2950,  5702,
   19412, 10251, -2950, 39306,  1796,  1819,  1790, 17372, -2950,  2017,
    1823, -2950,  1974,   182,  1974,  1821, -2950, -2950, -2950, -2950,
    2775, -2950, 19412,  1961, 61962,    83,   882,   981, -2950,   251,
   36266,  1725, 19412,   195, -2950, -2950,  1833, -2950,  1708, -2950,
   -2950, -2950,  2030, -2950, -2950, -2950, 52277, -2950,  1831, -2950,
   33841,  2139, 10251, -2950, 33841, 52277, 52277, 38336,  2168, -2950,
   61962, 61962, 61962, -2950, 61962,  1834,  1838,   809,  1835,   845,
   -2950,  1731,   809,  2146,   612,  1357,   256,  6860,    10, -2950,
   -2950, -2950,  1890, 52277, -2950, 61962, -2950, -2950, -2950, -2950,
   -2950, 45487, -2950, -2950, 37237, 45002, -2950, 45002, 52277, 52277,
   52277, 52277, 52277, 52277, 52277, 52277, 52277, 52277, 19412, -2950,
   19412,  1841,  1843,  1849,  1790, -2950, -2950, -2950, -2950, -2950,
   -2950,   482, -2950,   166, 61962,  1851, -2950, 48397,  3369,  1632,
    2284,  1816,   703, 61477,  1845,  1848, -2950, 61962, -2950, -2950,
    1856,  1852,   989,  2353,  1861,  2285, -2950,   863, 48397, -2950,
   -2950, -2950,  2243, -2950,   559,   215, -2950,  1152, -2950,  3369,
    1424, -2950,  3369, 43833, 61962,  1882, -2950,  1440,  1859, -2950,
   -2950,  1440, 66797,  1440, -2950, -2950,   173,   999, -2950, -2950,
   -2950, -2950, -2950, 61962,  1865, -2950,  1865, -2950, -2950,  1865,
   -2950, -2950, -2950, -2950, 24002,  2199,  1871, 66797, -2950, -2950,
   52277, -2950, -2950, -2950,  1007,  1873,  1974, 52277, 52277, 52277,
   52277, -2950, -2950, -2950, 17882, 19412,  1911, -2950,  1874, 14331,
    2136, -2950, 27525, -2950,   232,  1884, 34326, 61962, -2950, -2950,
   -2950, 19412, 43833, -2950, 43833, -2950, -2950, -2950,  6681, -2950,
    1872,  1885, 61962, 19412, -2950, -2950, -2950,   733, 19412, 19412,
    3721, -2950,  3594, 19412, 66797,  1011,  3721,   245, 19412,  4588,
    4807, 19412, 19412,  6251, 38376, -2950, 21962, 13311, -2950,  1887,
   19412, 38721, 36751, -2950, 30445,  2116,  1889,  2116,   900,  1891,
   43833, 19412, -2950, -2950, -2950, -2950,  1935,   528, 32385,  2115,
   -2950,  1902, 61962, -2950,  1961, 43833, -2950, -2950, 37723, -2950,
   -2950, -2950, -2950, -2950,  2341,  1868,  1897,  1899, -2950,  1276,
   -2950, -2950, 61962,  1903, -2950,  1906,   809, -2950, 61962,  1941,
   -2950,   677,  2214,    93, -2950, 19412, -2950,  2302,  2376,  1731,
    1915, 61962, 52277, 24002, -2950,   680,   300, -2950,  2196, 52277,
    1941,  2334, -2950, -2950, -2950,   845, -2950,  2237,  2150, -2950,
     264, -2950, 19412,   845,  2157,   278, 61962, -2950, -2950,  3427,
   -2950, 66797,   173,   173, -2950,  1922,  1926,  1931,  1934,  1936,
    1939,  1940,  1953,  1954,  1955,  1956, -2950,  1963,  1964,  1970,
    1971,  1978,  1979,  1984,  1985,  1238,  1988, -2950,  1990,  1833,
    1992,  1993,  1994,  1995,  1998, 67737,  2001,  2002,  2003,  2004,
    1240,  2005,  1099,  1109, -2950, -2950, -2950, -2950,  2006, -2950,
   -2950, -2950,  1246,  1975, -2950, -2950, -2950,  2027, -2950,  2029,
   -2950, -2950, -2950, -2950, -2950,  1952,  1960, -2950, -2950, -2950,
     182,  1259,   118, 61962, 61962,  1966,  1806,  2412, 18392,   943,
    2212,  2010, 61962,  2459, -2950, -2950,   900,  1632, -2950, 48397,
    2752,   208,  1983, -2950,   238,  1806, -2950,  2362,  1632,  2031,
    2473, -2950,  2238, 61962,  2016, -2950, -2950, -2950, -2950, 45972,
    1865,  5231, 24002, 66797,  1077,  1082, -2950,  2510,  2178,  2116,
   -2950, -2950, -2950, -2950, -2950,  2022,   -59,  2023,  9741,  2024,
   -2950, -2950, -2950, -2950, -2950, -2950, 43833, 43833, 61962,  2202,
   -2950, -2950,  2028,  2034, 35296,  2482,  2038, -2950, 13821, -2950,
    2350, -2950, 28988, -2950, 43833, 19412, -2950, -2950, 39346,  2358,
    3721,  3721,  3594,  1095, -2950,  3721, 19412, 19412,  3721,  3721,
   19412, -2950,  9229,   642, -2950,  1112, -2950, 38761, -2950, 68207,
   -2950, -2950,  1911,   900,  1911, -2950, -2950,  2048, -2950, -2950,
   -2950,  2106, -2950, -2950,  1117,  2470,  1961, 19412, -2950, -2950,
    2057, 33841, -2950, -2950, -2950, -2950, 33841,   809, -2950,  2229,
    1941,  2064, -2950, -2950, -2950, -2950, -2950, -2950, 38801, -2950,
      53, 19412, -2950,   734,  5155, -2950, -2950, -2950, -2950,  1941,
    1152, -2950, 52277,  2529,  2422, -2950, -2950, 43833, -2950, -2950,
    1921,  1921, -2950, -2950,  2223, -2950, -2950, -2950, -2950,  1246,
     -98, 37237, 52277, 52277, -2950, -2950,  2066, -2950, -2950,   482,
    2452, -2950,  1118,   863, -2950,  3369,  3369, 43833, 52277,  2425,
   48397, 61962, -2950, -2950,  2534,  2070, 52277,  1806,  1086,  1086,
   -2950,  2217, -2950,  2218, -2950, -2950,  2538,   283, -2950, 18902,
   52277, -2950, -2950, 31415, -2950,  5231,  1135, -2950, -2950,  2075,
    2078, -2950,  1911, 19412,  2080, 19412, -2950, 22472,  2539,  2084,
   -2950, 19412,  2142, 26042, -2950, 19412, -2950, 52277, 57127,     3,
    2085, 57127, -2950, -2950, -2950, 19412, -2950,  3721,  3721,  3721,
   19412, -2950, 19412, -2950, -2950, -2950,  2290,  2202, -2950,  2202,
   19412,  3369,   251,  2489, 61962,    12, -2950, 43833, -2950, -2950,
   -2950, 52277, -2950, 45002, -2950,   809,   188,  2094, 19412, 38841,
    2328, -2950, -2950,  2359, -2950,  2416, -2950,  2158,   522,  2177,
   -2950, -2950, -2950, -2950,  1259,   900,  1632,  1983,  2031, -2950,
    2102, 52277, -2950,  3369,   863,   559, -2950, -2950, -2950, -2950,
   -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950, -2950,  3369,
    2537,  2324,  2542,  3369, 43833,  1882, 19412,    73, -2950,  1139,
    2533, -2950, -2950,  2607,  2202,  2113, 22472,  2119, -2950,  2117,
   61962, 43833,  2256, -2950, -2950,  2129, -2950, -2950,   182, 19412,
   -2950, 39393,  2123,  2135,  2561,  1790,  2142,  2142, -2950,   528,
   -2950, -2950,  2548, 31415,  2512,  1152,   809,  2149,  1144, -2950,
   -2950, -2950, -2950, -2950,  2353, -2950, 38881,  2377,   144,  2361,
    2094, 19412, -2950,  2215, -2950, -2950, -2950,  2605, -2950, -2950,
   48397,  2143,  2031,  1983,  1806,  2031,  2364, -2950,  2367, -2950,
    2144, 39226, 61962, 61962,  1632, 31415, 61962,  2156,  2142, -2950,
    2159, -2950, -2950, -2950, 51307, -2950,  2161,  2162, -2950, -2950,
   -2950, 19412,   140, -2950, -2950,  2203, 52277,  1145,    42,  2359,
   37237, -2950, 45002,  2175,   188,  2455, -2950, -2950, -2950, -2950,
      91,  2380, -2950,  2385, -2950, 43833, -2950,  3369, 48397, -2950,
   -2950, -2950, -2950, -2950, -2950, 31415,  2533, -2950,   334, -2950,
    1504, -2950,   334, -2950, -2950, -2950, -2950,   900, -2950,  1464,
   22982, 22982, 22982,  2164,  3369, -2950,  1504, -2950,  2282,  2361,
   -2950, -2950, -2950, -2950, -2950,   209,   209,  2553, -2950,  2232,
   -2950,  2031,  1149, 61962,  1708, -2950,  1708, 24512,  2314,   268,
   42862,  2535, -2950,  2535,  2535, -2950, -2950, -2950, 36266, -2950,
   -2950,  2652, -2950,   266, -2950, -2950, -2950,  1632,   334, -2950,
   -2950,  2642, -2950, -2950, -2950, -2950, -2950,   160, -2950, -2950,
   -2950,  1504,   809, -2950, -2950, -2950,  1504,  1708, 23492,  2323,
   -2950,  2391, -2950, -2950, -2950, -2950, -2950, -2950, -2950
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     153,   255,     0,  1334,  1333,  1405,   255,     0,  1283,   255,
     476,   393,     0,  1426,  1405,     0,   255,     0,   153,     0,
       0,     0,     0,     0,     0,   536,   539,   537,     0,     0,
       0,   255,   576,     0,  1425,   255,     0,     0,   568,   538,
       0,  1385,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    23,    24,    25,
    1292,    26,    27,    28,    29,     0,    30,    31,    32,    33,
      34,   512,   499,   581,   511,     0,     0,   152,   680,   519,
      35,    36,    37,    38,    39,    40,    41,  1424,    42,   254,
     253,   247,     0,     0,     0,     0,     0,  1404,     0,   248,
     109,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,
    1459,  1460,  1817,  1461,  1462,  1463,  1464,  1465,  1818,  1466,
    1467,  1468,  1763,  1764,  1819,  1765,  1766,  1469,  1470,  1471,
    1472,  1473,  1474,  1475,  1476,  1767,  1768,  1477,  1478,  1479,
    1480,  1481,  1769,  1820,  1770,  1482,  1483,  1484,  1485,  1486,
    1821,  1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,
    1822,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,
    1505,  1771,  1772,  1506,  1507,  1508,  1509,  1510,  1511,  1512,
    1513,  1514,  1515,  1516,  1517,  1518,  1519,  1520,  1521,  1522,
    1523,  1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,
    1533,  1773,  1534,  1535,  1536,  1537,  1538,  1774,  1539,  1540,
    1541,  1775,  1542,  1543,  1544,  1823,  1824,  1545,  1546,  1776,
    1826,  1547,  1548,  1777,  1778,  1549,  1550,  1551,  1552,  1553,
    1554,  1555,  1556,  1557,  1827,  1558,  1559,  1560,  1561,  1562,
    1563,  1564,  1565,  1566,  1567,  1568,  1569,  1828,  1779,  1570,
    1571,  1572,  1573,  1574,  1780,  1781,  1782,  1575,  1829,  1830,
    1576,  1831,  1577,  1578,  1579,  1580,  1581,  1582,  1583,  1832,
    1584,  1833,  1585,  1586,  1587,  1588,  1589,  1590,  1591,  1592,
    1783,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,
    1602,  1603,  1604,  1605,  1606,  1607,  1608,  1609,  1610,  1784,
    1835,  1785,  1611,  1612,  1613,  1786,  1614,  1615,  1836,  1616,
    1787,  1617,  1788,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
    1625,  1626,  1627,  1789,  1837,  1628,  1838,  1790,  1629,  1630,
    1631,  1632,  1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,
    1791,  1839,  1641,  1642,  1792,  1643,  1644,  1645,  1646,  1647,
    1648,  1649,  1650,  1651,  1652,  1653,  1654,  1793,  1655,  1656,
    1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
    1667,  1668,  1669,  1670,  1671,  1672,  1673,  1840,  1674,  1675,
    1676,  1794,  1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,
    1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,
    1795,  1695,  1696,  1697,  1841,  1698,  1699,  1796,  1700,  1701,
    1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,
    1712,  1797,  1713,  1798,  1714,  1715,  1716,  1717,  1843,  1718,
    1719,  1720,  1721,  1722,  1723,  1799,  1800,  1724,  1725,  1801,
    1726,  1802,  1727,  1728,  1803,  1729,  1730,  1731,  1732,  1733,
    1734,  1735,  1736,  1737,  1738,  1739,  1740,  1741,  1742,  1743,
    1744,  1745,  1804,  1805,  1746,  1844,  1747,  1748,  1749,  1750,
    1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1806,  1807,
    1808,  1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1759,
    1760,  1761,  1762,     0,   110,   111,  1231,  1433,     0,  1209,
     109,  1776,  1783,  1797,  1281,  1282,   110,   250,   475,     0,
       0,     0,     0,     0,     0,     0,   387,   386,     0,  1272,
     392,     0,     0,   113,   105,  1643,   112,  1208,   103,  1404,
       0,     0,   413,   414,     0,   423,     0,   406,   411,   407,
       0,   432,   425,   433,   415,   405,   426,   416,   404,     0,
     434,     0,   409,     0,     0,     0,   251,   216,   393,   153,
       0,  1296,  1297,  1298,  1299,  1300,  1301,  1306,  1302,  1303,
    1304,  1305,  1307,  1308,  1309,  1310,  1311,  1287,  1292,  1312,
    1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,  1322,
    1323,  1324,  1325,     0,  1283,     0,     0,  1769,  1820,  1774,
       0,  1787,     0,  1790,  1791,  1677,  1798,  1801,  1802,  1803,
    1804,     0,   748,   112,   107,   732,     0,   514,   684,   694,
     732,   737,   999,   760,  1000,     0,   114,  1371,  1370,  1366,
    1365,   192,  1246,  1413,  1547,  1587,  1693,  1799,  1724,  1429,
    1414,  1408,  1412,   252,   575,   573,     0,  1180,  1547,  1587,
    1681,  1693,  1799,  1342,  1346,     0,   249,  1431,  1418,     0,
    1419,   112,   520,   567,     0,   256,  1384,     0,  1389,     0,
    1657,   547,   550,  1240,   548,   512,     0,     1,   153,  1291,
    1399,     0,   159,     0,   571,   571,     0,   571,     0,   504,
       0,     0,   512,   507,   511,   681,  1428,  1799,  1724,  1417,
    1420,  1556,     0,     0,  1556,     0,  1556,     0,  1556,     0,
    1407,  1164,     0,  1210,   115,     0,     0,   358,   391,   390,
     389,   388,   393,  1556,  1256,  1556,     0,     0,   443,   444,
       0,     0,     0,     0,     0,  1267,   106,   104,     0,  1402,
     421,   422,     0,   412,   408,   410,     0,  1232,  1845,  1846,
    1847,   803,  1848,   832,   810,   832,   832,  1849,  1850,  1851,
    1852,   799,   799,  1521,   812,  1853,  1854,  1855,  1556,  1856,
    1857,   800,   801,   837,  1858,  1859,  1860,  1861,  1862,     0,
       0,  1863,   832,  1864,   799,  1865,  1866,  1867,   804,  1868,
     770,  1869,     0,  1870,   802,   771,  1871,   840,   840,  1872,
       0,   827,  1873,  1233,  1234,   431,     0,   435,   785,   786,
     787,   788,   813,   814,   789,   819,   820,   824,   790,   872,
     799,  1556,  1235,   431,   427,  1556,   431,  1202,  1556,     0,
       0,   208,     0,  1289,  1326,  1874,  1875,  1876,  1877,  1878,
    1879,  1880,  1881,  1883,  1882,  1884,  1885,  1886,  1887,  1888,
    1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,
    1899,  1900,  1901,  1902,  1905,  1903,  1904,  1906,  1907,  1908,
    1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,  1917,  1918,
    1920,  1919,  1921,  1922,  1923,  1924,  1925,  1926,  1927,  1928,
    1929,  1930,  1931,  1932,  1933,  1934,  1935,  1936,  1937,  1938,
    1939,  1940,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,
    1949,  1950,  1951,  1952,  1953,  1954,  1327,  1328,  1340,     0,
    1341,  1331,  1295,   153,     0,   474,  1280,  1367,     0,     0,
       0,  1120,   732,   737,     0,     0,   750,     0,  1135,     0,
    1141,     0,     0,     0,   732,   519,     0,   694,   749,   108,
       0,   730,   731,   622,   622,   576,     0,   557,   742,     0,
       0,   745,   743,     0,   745,     0,     0,     0,   745,   741,
     702,     0,   622,     0,   730,   733,   622,     0,   752,  1286,
       0,     0,     0,     0,     0,  1411,  1409,  1410,  1415,     0,
       0,     0,  1212,  1214,  1215,  1088,  1225,   985,     0,  1764,
    1765,  1766,  1156,  1767,  1768,  1770,  1771,  1772,   939,  1773,
    1223,  1775,  1777,  1778,  1780,  1781,  1782,  1783,  1784,  1785,
       0,  1224,  1788,  1623,  1793,  1794,  1796,  1799,  1800,  1222,
    1805,     0,     0,     0,  1191,  1111,     0,     0,     0,   984,
       0,  1157,  1165,   980,     0,     0,   793,   794,   815,   816,
     795,   821,   822,   796,     0,  1187,   873,   968,  1175,   987,
    1018,   989,   998,   976,  1055,   969,     0,   979,   971,  1183,
     557,  1181,     0,   972,  1211,   557,  1179,  1345,  1343,  1349,
    1344,     0,     0,     0,     0,     0,   108,  1391,  1392,  1383,
    1381,  1382,  1380,  1379,  1386,     0,  1388,  1292,  1106,  1108,
       0,   549,     0,     0,     0,   502,   501,     3,  1240,     0,
       0,     0,     0,   569,   570,     0,     0,     0,     0,     0,
       0,     0,     0,   665,   596,   597,   599,   662,   666,   674,
       0,     0,     0,     0,     0,   508,     0,  1427,  1423,  1421,
       0,     0,     0,   137,   137,     0,     0,     0,     0,     0,
      97,    46,    90,     0,     0,     0,     0,   230,   243,     0,
       0,     0,     0,     0,   240,     0,     0,   223,   217,   219,
      48,     0,   137,     0,    44,     0,     0,     0,    50,     0,
     474,  1163,     0,   119,  1987,  1988,  1989,  1990,  1991,  1992,
    1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,  2002,
    2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,  2012,
    2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,  2022,
    2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,
    2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,  2042,
    2043,  2044,  2045,  2046,  2047,  2048,  2049,  2050,  2051,  2052,
    2053,  1941,  2054,  2055,  2056,  2057,  2058,   117,   118,   121,
     120,   122,   116,   109,     0,  1955,  1817,  1818,  1819,  1820,
    1770,  1821,  1822,     0,  1823,  1824,  1776,  1826,  1827,  1828,
    1829,  1830,  1831,  1832,  1833,  1783,  1835,  1836,  1837,  1838,
    1839,  1840,  1981,  1841,  1797,  1843,  1803,     0,  1844,   991,
     110,  1228,  1114,   581,  1112,  1241,     0,     0,     0,   472,
       0,     0,     0,     0,  1252,     0,     0,     0,     0,  1556,
     199,  1556,   358,     0,  1556,   358,  1556,     0,  1266,  1269,
       0,   424,   420,   418,   417,   419,   831,   818,   826,   825,
    1111,   808,   807,   806,     0,   805,     0,     0,   832,   832,
     830,   809,   785,     0,     0,     0,   836,     0,   834,     0,
     429,   430,     0,   402,     0,   778,   774,     0,   845,   846,
     847,   848,   855,   856,   853,   854,   849,   850,   843,   844,
     851,   852,   841,   842,     0,   857,   858,   859,   860,   861,
     862,   863,   864,   791,   797,     0,     0,  1236,     0,   397,
       0,     0,   399,     0,     0,   213,     0,   211,     0,   393,
     153,     0,   224,  1336,  1337,  1335,     0,     0,  1294,   227,
    1330,  1339,  1329,  1338,  1293,   244,  1288,     0,     0,  1284,
     462,     0,     0,     0,     0,  1121,  1130,  1122,  1123,  1124,
    1125,  1126,  1127,  1128,  1129,     0,     0,   693,   691,     0,
       0,     0,     0,     0,     0,  1157,     0,   943,   969,     0,
       0,     0,  1106,  1140,     0,     0,     0,     0,     0,     0,
    1106,  1146,     0,     0,   716,   728,     0,   615,   621,   692,
     690,     0,  1180,   685,     0,   762,   742,     0,   741,     0,
       0,   744,   738,     0,   739,     0,     0,     0,     0,   740,
       0,     0,     0,     0,   688,     0,   728,     0,   689,   759,
    1373,  1372,  1368,  1355,  1354,  1363,   193,     0,  1117,     0,
     153,  1416,  1430,     0,  1111,   977,  1155,     0,     0,   982,
    1068,   898,     0,     0,   899,   877,   878,     0,  1190,  1199,
    1106,  1110,     0,   980,  1106,     0,   973,   974,     0,  1058,
    1060,     0,     0,  1158,  1213,   981,     0,  1218,     0,   872,
     872,  1186,  1088,     0,  1078,  1081,     0,     0,  1085,  1086,
    1087,     0,     0,     0,  1178,     0,  1096,  1098,     0,     0,
     914,  1094,     0,   917,     0,     0,     0,     0,  1082,  1083,
    1084,  1074,  1075,  1076,  1077,  1079,  1080,  1092,  1073,   895,
       0,   970,     0,  1021,     0,   894,  1184,   683,     0,  1216,
     683,  1357,  1361,  1362,  1360,  1356,     0,  1348,  1347,  1352,
    1350,  1353,  1351,  1432,     0,  1393,  1377,     0,  1374,  1109,
     678,   551,  1204,     0,   555,  1400,  1398,   158,   157,     0,
       0,   524,   523,   590,   582,   584,   590,     0,   522,     0,
     638,   639,     0,     0,     0,     0,   671,   669,  1212,  1225,
     626,   600,   625,     0,     0,   604,     0,   630,   873,   664,
     506,   594,   595,   598,   505,     0,   667,     0,   677,     0,
     543,   545,   528,   542,   540,   525,   533,   665,   599,     0,
    1422,     0,     0,     0,     0,     0,  1556,     0,     0,   773,
      81,    62,   310,   136,     0,     0,     0,     0,     0,     0,
       0,    89,    86,    87,    88,     0,     0,     0,     0,   228,
     229,   242,     0,   233,   234,   231,   235,   236,     0,     0,
     221,   222,     0,     0,     0,     0,   220,     0,     0,     0,
       0,     0,     0,     0,     0,  1406,  1401,  1159,  1164,   581,
     581,   581,     0,   579,   580,     0,     0,   461,   356,   366,
       0,     0,     0,  1256,     0,     0,     0,     0,     0,     0,
       0,   393,  1257,  1255,  1259,  1258,  1260,     0,     0,  1527,
     187,     0,     0,   198,   195,     0,   355,   329,     0,     0,
    1271,     0,     0,     0,  1556,   345,  1268,     0,  1403,     0,
       0,     0,   431,     0,   829,   828,   779,   775,     0,     0,
       0,     0,     0,     0,   436,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   431,  1237,     0,   428,   431,  1203,
       0,   431,   215,     0,     0,  1290,  1332,   225,   245,   226,
     246,   474,   469,   497,     0,   477,   482,   459,     0,   459,
       0,   479,   483,   459,   478,     0,   459,   473,  1369,     0,
    1014,     0,  1004,     0,     0,   751,     0,     0,  1005,   945,
     946,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   963,
     962,  1006,   755,     0,   758,     0,     0,  1138,  1139,     0,
    1007,     0,     0,  1145,     0,     0,     0,  1012,     0,   695,
       0,     0,     0,   610,   614,   617,     0,   620,   557,   513,
    1547,  1587,     0,   568,   568,   568,   566,   556,     0,   642,
       0,     0,   717,     0,     0,   719,   721,     0,     0,   724,
     701,   700,     0,     0,     0,     0,   763,     0,  1208,     0,
       0,   194,     0,  1245,     0,  1250,  1251,  1248,  1244,  1247,
    1249,     0,     0,     0,  1154,  1150,     0,     0,  1063,  1065,
    1067,     0,  1072,  1078,  1081,  1085,  1086,  1087,  1082,  1083,
    1084,  1074,  1075,  1076,  1077,  1079,  1080,     0,  1100,     0,
    1054,     0,     0,  1189,     0,   941,     0,   975,   986,     0,
       0,  1061,   990,  1191,  1166,     0,     0,  1221,  1220,   874,
     883,   886,   918,   919,   890,   891,   892,   896,  1243,  1242,
    1185,     0,  1177,     0,     0,   875,   900,   905,     0,  1147,
     935,     0,   923,     0,   913,     0,   921,   925,   901,   916,
       0,   897,     0,  1178,  1097,  1099,     0,  1095,     0,   887,
     888,   889,   879,   880,   881,   882,   884,   885,   893,  1071,
    1069,  1070,     0,  1164,     0,  1176,     0,     0,  1023,     0,
       0,   920,  1182,     0,   762,   581,   762,     0,   872,  1394,
    1240,  1387,  1376,  1240,  1107,  1205,  1239,   553,     0,     0,
       0,  1396,   144,   148,     0,  1165,   178,   180,   683,     0,
     588,   589,   593,     0,     0,   593,   572,   521,  1794,  1677,
       0,     0,     0,     0,   631,   672,     0,   663,   628,   629,
       0,   627,  1212,   632,  1211,   633,   636,   637,   605,  1200,
     673,   675,     0,   668,     0,  1206,   527,   546,     0,     0,
       0,     0,     0,   510,   509,   679,     0,    47,     0,  1556,
      64,     0,     0,     0,     0,     0,     0,   260,     0,   360,
     260,   102,  1556,   431,  1556,   431,  1454,  1522,  1694,     0,
      60,   334,    93,     0,   130,   363,     0,   319,    83,    98,
     123,     0,     0,   218,    49,   232,   237,   126,   241,   238,
    1276,   239,   137,     0,    45,     0,   124,     0,  1274,     0,
       0,    51,   128,  1278,     0,  1163,     0,   579,   579,   579,
       0,  1113,     0,     0,     0,  1115,  1116,   460,     0,   357,
       0,   471,   450,   451,   461,  1254,     0,     0,   199,   358,
       0,   358,     0,  1256,     0,     0,     0,   206,   189,   185,
       0,     0,     0,     0,   356,   348,   346,   379,     0,   353,
     347,     0,     0,   305,     0,  1448,     0,     0,     0,     0,
     445,     0,     0,     0,     0,     0,   798,   811,   403,   785,
       0,   839,   838,   840,   840,   768,   785,     0,   785,     0,
     783,     0,   823,   792,   865,   866,   867,   868,   869,   870,
     871,   396,  1238,   398,     0,   400,   214,   212,  1285,   466,
       0,   465,   470,   464,   468,   463,     0,   458,     0,   492,
       0,     0,     0,     0,     0,     0,     0,     0,  1001,  1119,
       0,  1133,  1132,   944,   951,   954,   958,   959,   960,  1134,
       0,     0,     0,   955,   956,   957,   947,   948,   949,   950,
     952,   953,   961,   760,     0,     0,   754,  1143,  1142,  1136,
    1137,     0,  1009,  1010,  1011,  1144,     0,     0,   729,   608,
     606,   609,   611,   607,     0,     0,   762,   568,   568,   568,
     568,   565,     0,     0,     0,   761,     0,   659,   723,     0,
     747,     0,   720,     0,     0,   711,     0,   718,   767,   734,
       0,     0,   736,  1364,  1118,   574,   978,     0,     0,  1151,
       0,   940,     0,  1066,   988,     0,  1089,  1053,     0,     0,
       0,  1198,     0,  1107,  1057,  1059,  1199,   983,   872,     0,
       0,     0,     0,     0,     0,     0,   924,   915,     0,   922,
     926,     0,     0,     0,   909,     0,     0,   907,   936,   903,
       0,     0,   937,  1163,     0,  1167,     0,     0,  1022,  1031,
     686,   682,   642,   579,   642,     0,  1358,  1378,  1375,   554,
     153,  1397,     0,   167,     0,     0,     0,     0,   170,   184,
     181,  1396,     0,     0,   583,   585,     0,  1090,   593,   587,
     635,   634,     0,   603,   670,   601,     0,   676,     0,   544,
       0,   530,     0,   704,     0,     0,     0,     0,     0,   309,
       0,     0,     0,   260,     0,   368,     0,   375,     0,     0,
     360,   341,    82,     0,     0,     0,    56,   101,    74,    66,
      52,    80,     0,     0,    85,     0,    78,    95,    96,    94,
      99,     0,   270,   295,     0,     0,   306,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1164,  1160,
    1164,     0,     0,     0,   581,   577,   578,   992,   495,   496,
     494,   223,   367,     0,     0,     0,   197,   355,     0,  1271,
       0,  1253,   393,     0,     0,     0,   204,   207,   200,   190,
       0,   188,     0,   199,   358,     0,   333,   329,   354,   327,
     326,   328,     0,  1449,   216,     0,  1443,   358,  1270,     0,
       0,   446,     0,   440,     0,  1265,   817,   781,     0,   835,
     833,   782,     0,   780,   776,   784,   431,     0,   454,   493,
     498,   480,   485,     0,   491,   487,   486,   481,   489,   488,
     484,  1002,  1013,  1131,     0,     0,     0,     0,   753,   756,
       0,  1008,  1003,   727,     0,     0,   642,     0,     0,     0,
       0,   559,   558,   564,     0,     0,  1025,   722,     0,     0,
       0,   709,   699,   705,     0,     0,     0,     0,   765,   764,
     735,     0,  1153,  1149,  1062,  1064,  1101,  1188,  1106,  1193,
    1195,     0,     0,     0,  1056,   942,  1219,   876,     0,     0,
     906,  1148,   927,     0,     0,     0,   902,  1089,     0,     0,
       0,     0,     0,   911,     0,  1171,  1164,     0,  1170,     0,
       0,     0,     0,   997,   687,   659,     0,   659,     0,     0,
    1395,     0,  1390,   145,   146,   147,     0,     0,     0,   162,
     139,     0,     0,   179,   167,   155,   591,   592,     0,   586,
     602,  1201,  1207,   529,     0,   980,     0,     0,   526,     0,
     131,   260,     0,     0,    63,     0,   377,   321,   369,   352,
     336,     0,     0,     0,   261,     0,   394,     0,     0,   342,
       0,     0,     0,     0,   322,     0,     0,   281,     0,     0,
     352,     0,   359,   277,   278,     0,    55,    75,     0,    71,
       0,   100,     0,     0,     0,     0,     0,    58,    70,     0,
      53,     0,   431,   431,    61,  1232,  1845,  1846,  1847,  1848,
    1849,  1850,  1851,  1852,  1853,  1854,  1965,  1855,  1856,  1857,
    1858,  1859,  1860,  1861,  1862,  1974,  1863,   267,  1864,  1623,
    1865,  1866,  1867,  1868,  1869,     0,  1870,   771,  1871,  1872,
    2050,  1873,  1074,  1075,   265,   266,   362,   262,  1233,   263,
     370,   264,     0,   365,   320,   127,  1277,     0,   125,     0,
    1275,   134,   132,   129,  1279,     0,     0,   995,   996,   993,
     579,   474,   453,   206,     0,     0,  1448,     0,     0,     0,
    1556,     0,     0,     0,   205,   186,     0,  1271,   196,   355,
       0,   385,   305,   380,     0,  1448,  1446,     0,  1271,  1442,
       0,   437,     0,     0,     0,   777,   769,   401,   467,     0,
     490,   964,     0,     0,     0,     0,   618,     0,   624,   659,
     563,   562,   561,   560,   641,  1497,  1777,  1676,     0,   645,
     640,   643,   648,   650,   649,   651,   647,   658,     0,   661,
     746,  1102,  1104,     0,     0,     0,     0,   710,     0,   712,
       0,   714,     0,   766,  1152,  1196,  1197,  1192,     0,   873,
     933,   931,   928,     0,   929,   910,     0,     0,   908,   904,
       0,   938,     0,     0,  1168,     0,  1017,     0,  1020,  1034,
    1030,  1029,  1025,   992,  1025,  1359,   552,   166,   143,   169,
     168,     0,  1165,   176,     0,     0,   167,     0,   171,   447,
       0,     0,   541,   703,   534,   535,     0,   373,    65,     0,
     352,     0,   260,   338,   337,   340,   335,   339,     0,   395,
       0,     0,   279,     0,   286,   324,   325,   323,   280,   352,
     358,   282,     0,     0,     0,    67,    57,    54,    59,    68,
       0,     0,    69,    72,   767,    84,    77,  1974,  1983,     0,
       0,     0,     0,     0,  1162,  1161,     0,   449,   456,   223,
       0,   202,     0,   329,  1445,     0,     0,   442,     0,     0,
     355,   206,   203,   191,     0,     0,     0,  1448,     0,     0,
     257,     0,   302,     0,   209,  1447,     0,     0,  1434,     0,
       0,  1263,  1264,     0,   455,   965,     0,   966,   757,     0,
       0,   616,  1025,     0,     0,     0,   652,   646,     0,  1024,
    1026,     0,   613,  1105,   706,     0,   708,     0,   732,   581,
       0,   732,   715,  1194,  1015,     0,   930,   934,   932,   912,
    1164,  1172,  1164,  1169,  1019,  1033,  1036,   661,  1217,   661,
       0,     0,   154,     0,     0,   151,   138,   156,  1091,   531,
     532,     0,   260,     0,   351,   374,   291,   269,     0,     0,
       0,   276,   283,   384,   285,     0,    76,    92,     0,     0,
     364,   135,   133,   994,   474,     0,  1271,   305,  1442,   439,
       0,     0,   201,     0,   329,   216,  1444,   318,   311,   312,
     313,   314,   315,   316,   317,   332,   331,   303,   304,     0,
       0,     0,     0,     0,   441,  1265,     0,   173,   182,     0,
     173,   967,   619,     0,   661,     0,     0,     0,   644,     0,
       0,   660,     0,   517,  1103,     0,   698,   696,   579,     0,
     697,     0,     0,     0,     0,   581,   613,   613,   140,     0,
     141,   177,     0,     0,     0,   358,   376,   350,     0,   343,
     289,   288,   290,   294,     0,   292,     0,   308,     0,   301,
     269,     0,    79,     0,   371,   448,   452,     0,   259,  1436,
     355,     0,  1442,   305,  1448,  1442,     0,  1439,     0,   438,
       0,     0,     0,   175,  1271,     0,   175,     0,   613,   654,
       0,   653,  1028,  1027,   615,   707,     0,     0,  1016,  1174,
    1173,     0,  1040,   516,   515,     0,     0,     0,     0,   384,
       0,   330,     0,     0,   291,     0,   284,   381,   382,   383,
       0,   297,   287,   298,    73,    91,   372,     0,   355,  1437,
     258,   210,  1435,  1440,  1441,     0,   173,   172,   590,   174,
     762,   183,   590,   623,   518,   655,   612,     0,   713,  1035,
       0,     0,     0,     0,     0,   150,   762,   161,     0,   301,
     349,   344,   268,   293,   307,     0,     0,     0,   299,     0,
     300,  1442,     0,   175,   593,  1261,   593,  1763,  1498,  1731,
       0,  1052,  1041,  1052,  1052,  1032,   142,   149,     0,   260,
     273,     0,   272,     0,   361,   296,  1438,  1271,   590,   163,
     164,     0,  1045,  1044,  1043,  1047,  1046,     0,  1039,  1037,
    1038,   762,   378,   271,   275,   274,   762,   593,     0,     0,
    1049,     0,  1050,   160,  1262,   165,  1042,  1048,  1051
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2950, -2950, -2950,  1997,    95,    96,  -709, -1145,  -903, -1147,
   -2950,  -122,    97, -2950, -2950,   159, -2950,   962, -2950,   154,
    -648,   523, -2950,  1052, -2950, -2950,  2679, -2950,    98,   100,
    2096,  3325,  2247,  3440,   205,  -502,  -704, -1298,  -964,     8,
   -2950, -2950, -2950, -2950,  -699,   465, -1156, -2950,   390, -2950,
   -2950, -2950, -2950,  -212,   147, -2950,     2, -2137, -2848,  -562,
   -2950,  -665, -2950,  -321, -2950,  -605, -2950,  -725,  -619,  -646,
   -2737, -1110, -2950,  1576,  -364, -2950,   563, -2950, -2477, -2950,
   -2950,   553, -2950, -1111, -2950, -2214,   150,  -591, -2514, -2483,
   -2106,  -706,   214,  -599,   186, -2077,  -989, -2950,   574, -2950,
    -582, -2950,  -689, -2404,   106, -2656, -1647,    -7, -2950, -2950,
   -2950,  -542, -2950, -2452,   111,  1421, -2050,   112, -1630, -2950,
   -2950,   155, -2950, -2587,     4, -2062,   113, -2950, -2950,   114,
      11,  -494,   257, -2950,   115, -2950, -2950,  1345,  -610, -2950,
    1396,   116,   908, -2950, -2476, -2950,  -456, -2950,  -486,  -485,
   -2950, -2950,    21,  -897,  1336, -2950, -2950, -2950,    15, -2950,
    -462, -2950, -2950, -2478, -2950,    18, -2950, -2950, -2950, -2950,
   -2950,  -400,   279, -2950, -2950,  -535, -2524,  -484, -2950, -2910,
   -2555, -2950, -2950,  -635, -2925, -1997,   117,   102,  1323,   125,
     129, -2950,   296,   131, -1100,    13,  2935,   -20,   -32, -2950,
     -28, -2950, -2950, -2950,   622, -2950, -2950,     9,    75,  1665,
   -2950,  -981, -2950, -1468,   861, -2950,  1828,  1842, -2131,  -693,
     -71, -2950,   657, -1626, -2065,  -546,  1081,  1645,  1668,   406,
   -2412, -2950,  -521, -2950,   235, -2950, -2950,   658,  1127, -1527,
   -1516, -2950, -2090, -2950,  -436,  -326, -2950, -2950, -2950, -2950,
   -2950, -2400, -2812,  -534,  1103, -2950,  1671, -2950, -2950, -2950,
   -2950,     5, -1478,  2771,   699,   108, -2950, -2950, -2950, -2950,
     183, -2950,   857,  -161, -2950,  2192,  -558,  -625,  1878,   110,
     229, -1790,     0,  2206,   463, -2950, -2950,   467, -2033, -1465,
     418,  -232,  1449, -2950, -2950,  -515, -1299,  -785, -2950, -2950,
    -490,   172, -2950, -2950, -2950,   262,   636, -2950, -2950,  1458,
    2415, -2950,  -620,  2506,    51,  -732,  1883,  -869,  1886,  -875,
    -880,  -864,  1888,  1892, -1495,  4733,  -649,  3383, -2177, -2950,
     979,    37, -2950, -1435,    49, -2950, -2950, -2950, -2950, -2626,
   -2950,  -405, -2950,  -403, -2950, -2950, -2950, -1632, -2949, -1662,
   -2950,  3173,   817, -2950, -2950,   421, -2950, -2950, -2950, -2950,
   -1497, -2950,  5462,   721, -2950, -1957, -2950, -2950,  -928,  -659,
   -1036,  -952, -1250, -1309, -2950, -2950, -2950, -2950, -2950, -2950,
   -1005, -1732,  -190,   780, -2950, -2950,   879, -2950, -2950, -2950,
   -1696, -2045, -2950, -2950, -2950,   784,  1364,   123,  -653, -1574,
   -2950,   829, -2292, -2950, -2950,   432, -2950,  -483, -1049, -2356,
     492,    17, -2950,  4697, -2464, -2950, -2950,  -556, -2588, -1053,
    -784, -2950,   133,  1419,    23, -2950,   136,  1224, -2950, -2950,
   -2950,   137, -2950,   530,   138,   666, -2950,   905, -2950,   640,
     139, -2950, -2950,    76,  2769,    16, -2880
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   571,   572,  1793,  1742,  1523,  1179,
    1732,  1429,   573,  2528,  2529,  2530,  2179,  1160,  3272,  2180,
    1161,  1162,  2532,    52,    53,    54,   108,  1190,   574,   575,
     514,   622,  1051,   624,  1052,  1565,   724,  1267,  1268,   576,
    2234,  3069,  2627,  3070,  2318,  2228,  1439,  2312,  1853,  1772,
    1440,   520,  1867,  2628,  2571,  1854,   577,  2517,  2856,  3265,
    2543,  3404,  2792,  2793,  3262,  3263,  2520,  2182,  3331,  3332,
    2603,  1724,  3326,  2255,  3205,  2186,  2167,  2794,  2263,  3164,
    2901,  2183,  2774,  2256,  3258,  1806,  2257,  3259,  3022,  2258,
    1769,  1797,  2521,  3333,  2187,  1770,  2516,  2857,  1712,  2259,
    3269,  2260,   531,  2778,   578,  2606,  1333,   516,   505,   506,
     814,  1270,  1311,  1271,   579,   744,  1803,   580,  1324,  1783,
      62,  2586,  2587,  2588,   581,  1794,   582,  2590,  2591,   583,
     584,  1097,  2473,  2101,   585,   563,   564,   833,  1373,   565,
     815,   586,  1415,  1416,   841,    69,   690,  1431,   587,  1432,
    1433,   929,    70,  1524,   931,   932,    71,    72,   589,  3102,
    2914,  1339,  1807,  2268,   532,   590,  2739,  2103,  2476,  3254,
      75,  3003,  2106,  1121,  3006,  3218,  2732,  3001,  2477,  3293,
    3348,  3004,  2107,  2108,  3219,  2109,   591,   639,  1522,   592,
     593,   994,  1968,   594,  1715,   595,  1053,    82,    83,   967,
      84,  3016,    85,    86,  1690,  1691,  1692,   669,   681,   682,
    2099,  1495,  1937,   674,  1125,  1659,   656,   657,  2224,   698,
    1764,  1654,  1655,  2112,  2484,  1683,  1684,  1134,  1135,  1925,
    3233,  1926,  1927,  1488,  1489,  3111,  1671,  1675,  1676,  2133,
    2123,  1662,  2387,  2939,  2940,  2941,  2942,  2943,  2944,  2945,
    1054,  2666,  3122,  1679,  1680,  1137,  1138,  1139,  1688,  2143,
      88,    89,  2084,  2460,  2461,   628,  2956,  1512,  1693,  2670,
    2671,  2672,  2960,  2961,  2962,   629,   962,   963,   986,   981,
    1502,  1945,   630,   631,  1902,  1903,  2356,   988,  1939,  1955,
    1956,  2678,  1823,   816,  2168,  1528,  1376,   818,  1055,   819,
    1351,  1056,  1355,   821,  1057,  1058,  1059,   824,  1060,  1061,
    1062,   827,  1347,  1063,  1064,  1366,  1395,  1396,  1397,  1398,
    1399,  1400,  1401,  1402,  1403,  1108,  1694,  1066,  1067,  1068,
    1069,  1070,  1071,   633,  1072,  1073,  1613,  2078,  2459,  2949,
    3119,  3120,  2723,  2991,  3146,  3245,  3363,  3391,  3392,  3418,
    1074,  1075,  1559,  1560,  1561,  1978,  1979,  1980,  1981,  2072,
    1607,  1608,  1076,  2861,  1610,  1999,  2952,  2953,  1109,  1481,
    1552,  1313,  1314,  1529,  1455,  1456,  1462,  1877,  1470,  1474,
    1907,  1908,  1482,  2040,  1077,  1974,  1975,  2410,  1537,  1078,
    1192,  1564,  2718,  2075,  1611,  2034,  1085,  1079,  1086,  1081,
    1548,  1549,  2421,  2690,  2691,  2005,  2140,  1642,  2145,  2146,
     837,  1082,  1083,  1084,  1315,   509,   830,  3349,  1407,  1114,
    1316,  2030,   596,   101,   597,    92,   598,  1104,   678,  1105,
    1107,   599,   650,   651,   600,   663,   664,  1525,  1627,  1526,
     601,    97,  1148,   652,   670,   602,  3098
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     504,   723,    58,  1080,    63,   982,  1178,   834,    57,    87,
    1144,    66,   699,    80,   504,    73,    98,  1362,    74,  1272,
    1110,  1319,  1473,    91,   508,   686,   626,    87,   927,  1428,
    2115,  1746,  1745,  2522,  1756,  1434,  1904,   672,   508,   588,
    1527,  1711,  2082,  1322,   507,  1998,   817,  1721,  1813,   668,
    2489,  2462,  1959,  2464,  1717,   703,  1418,  1761,   632,   704,
    2479,  1451,  2216,  1817,  1643,  1645,  1450,  1180,   964,  1184,
     634,  1188,  1448,   985,  2017,  2018,  1368,  1452,   504,   504,
    2862,   836,  1750,   843,  1557,   928,  2561,  2562,  2563,  2515,
     626,   626,  2859,  2443,  2885,    49,    50,    51,    55,  1617,
      56,  2887,   508,   508,  1620,   717,    59,  2478,  1835,   665,
     709,    60,    61,    64,    65,    67,    68,    76,  1555,   684,
    2902,   959,   632,   632,  2572,    77,   640,  2689,  2905,    78,
    2240,    79,   933,    90,   634,   634,    93,    94,    95,    96,
    -832,  1006,  2086,  2235,  2753,  1348,  1349,  2135,  2758,  -500,
    2388,  3292,  1133, -1229, -1960, -1960,  -503,  1370, -1834,   518,
    2138, -1226, -1226,  2397,  1136,  3090, -1974, -1974, -1834,  1096,
    -837,   636,  1360,  2592,  -837,  2359,  2576, -1985, -1985, -1210,
     636,  2408, -1825, -1229,  1006, -1825, -1834,  1099,  1624,  1370,
   -1965, -1965,  2580,   700,   701, -1842,  1152,  1370,  1092,  1122,
    1881,  -840,  1153, -1983, -1983,  1883, -1230,  2032,  3026,  3375,
    2053, -1842,  2032,  3180, -1227, -1227,  2673, -1230,     3,     4,
    3009,  -799,  -812,  1409,  -840,  -827,  1412, -1072,   638,   638,
    3074,  1713,   636,   636,   676, -1072,  1370,   636,  -457,  3167,
    1342,   636,  1748,  -636,  2148,  2634,  2636,  -500,  2639,  3094,
    1621,  1422,   636,  2069,  -503,  1272,  1006,  2232,   738,  1573,
    -223,  2070,  3429,  1730,  1575,  -223,  1733,  1734,  1422,  1722,
    2599,  1702,  3400,  1006,  3060, -1093,  3041,  1343,  1572,   691,
    1443,  1573,  1352, -1093,   696,  1574,  1575,  1006,   694, -1987,
   -1987, -1987,   696,  1881,  1583,  3252,  3071,  1882,  1883,  1466,
    2767,  1663,  -581,  1154,  1361,  1722,  1368,  -581,  3279,  2079,
    3296,  3367,  3327,   720,  1810,   965,  1583,  1457,   752,  3360,
    2906,  3114,  1759,  1584,   654,  2992,  1585,  2994,  3317,  2054,
     739,  1760,  2726,  2369,  1647,  3246,  3430,  3247,  2340,   107,
    1404,  2141,  2734,  2656,  1510,  1664,  2055,  3210,  1585,  2165,
    1100,  2056,  1101,  3088,  2746,  3211,  3091,  1881,   695,  2526,
    1622,  1882,  1883,  1705,   539,  2645,  3147,    99,  3149,   692,
    2222,  3092,  2725,  1713,  2727,  2110,  2766,  2454,  -581,  3424,
    1729,  3059,   604,   603,  2550,   985,  1551,  2371,  2809,  2057,
     927,  3043,  1272,  1348,  1349,  1511,  2735,   964,  1123,  3048,
    2912,  3179,  3339,    21,  3089,  3342,  1573,  2166,  1836,  1360,
    1574,  1575,  3298,  1573,   100,  3037,  3085,  1574,  1575,  3084,
    3382,  2747,   655,  2749,   740,  -581,  3431,   635,  1744,  3413,
    3096,  3196,  -500,  2515,   696,  2515,  3383,  1921,  3411,  -503,
    2372,  1583,  1586,  2518,  1371,  -656,  3328,  1436,  1583,   927,
    3278,  1093,   966,  1344,  2142,  2080,  2111,  1155,  2686,  1587,
    1666,   783,   741,  1543,  1588,  2382,  2383,  2384,  1921,  1723,
    3361,  3178,  3370,  1585,  1852,  3401,  1371,  1660,  2341,  3436,
    1585,  2907,  3156,  1623,  1371,  3368,  3224,  1699,  2342,  1695,
    1696,  1648,  2401,  1720,  3192,  2673,  1124,   742,  1972,  3362,
    -500,  3406,  1591,  1762,   538,  1723,  3162,  -503,  1973,   567,
    2233,  1962,  2221,  1156,  2149,  2646,  3253,  1157,   605,  3212,
    1707,   642,  1667,  1371,  1094,  3172,  2370,  1352,  3329,  3112,
    2223,  2898,   726,  1720,  3376,   683,   683,  1000,  2302,  3425,
    2058,  3027,  1361,    25,    26,    27,  3340,   743,  1158,  1563,
     686,   927,   927,  1998,   813,  1594,  2920,  3168,  3093,  3402,
    2910,  2568,  2569,   926,  3068,  1345,  2929,  2033,   679,  1720,
     677,  1749,  2445,  3038,  2519,   721,  1152,  3432,    87,   722,
    2373,   697,  1153,  1661,  3414, -1072,  3260,  3403,  1358,  1359,
    1346,   930,  2160,  2466,  2135,   713,  3187,  2862,  1697,  2667,
    2643,   686,  1372,   504,   693,  2595,  2492,    32,   519,  2859,
    1698,  2071,   829,  2581,   504,  -500,  -772,  2487,  2029,  1159,
    1763,   753,  -503,   725,  3017,  1646,   955,   508,  3341,  1800,
    2481,   687,  1145, -1093,  1408,  2290,  1708,   703,   508,  -832,
    1102,   704,  1411,   689,    37,  1538,  1746,   632,  3261,   504,
     504,  1638, -1229,  1596,  -500,  3159,  -500, -1834,   632,   634,
    3160,  -503,  2572,  -503,  1363,  1540,  2085, -1834,   953,  -837,
     634,   673,   504,  3133,  1098,  1540,   721,    39, -1210,  1568,
     722, -1825, -1229,  1154, -1825, -1834,  1364,  1363,    42,  1898,
      58,  1551,    63,  1098, -1842,  2308,    57,    87,  1103,    66,
    1365,    80,    43,    73,    98, -1230,    74,   937,  3277,  1364,
   -1842,    91,  2221,  2551,   504,  1269, -1230,  3283,  1310,  3284,
    1350,  1354,  1740,  1367,  -827,  2796,    44,  1735,  1363,   956,
    1322,  1618,  2087,   820,   665,   665,  2958,   665,  1814,  1815,
      45,  3352,  1426,  1427,  1573,  3008,  1741,  -772,  1606,  3066,
    1364,  -223,  -223,   721,  2181,  1111,  2185,   722,  1597,  1426,
    1427, -1987, -1987, -1987,  1365,  1601,  1602,  1603,  1604,  1605,
    1606, -1959, -1959,  3050,  3051,  1129,  2455,  1893,  1894,  1895,
    1896,  1897,  1898,    49,    50,    51,    55,  1129,    56,  2523,
    2165,  3010,  1722,  3023,    59,   813,  3035,  2885,  2797,    60,
      61,    64,    65,    67,    68,    76,  2780,  3072,   935,  2097,
     638,  1585,  1790,    77,  1879,  1880,  3350,    78,  1913,    79,
    1900,    90,   688,   822,    93,    94,    95,    96,  3408,  2195,
     705,  1496,  2098,  1310,  3313,  3314,   694,  1155,  1928,  2198,
     989,   817,  2201,  1895,  1896,  1897,  1898,  2783,  2512,   834,
    2271,  1131,  1837,   829,  1948,  3085,  2862,  1824,  1841,  1272,
    2014,  1272,  2875,  1131,  2876,  1089,   738,  3024,  2859,  1736,
    3036,  2367,  2332,   745,  1971,  1551,   521,  1737,  2776,   927,
    2798,  1386,  1387,  1722,  2001,  3165,  3354, -1956, -1956,  1722,
    1601,  1602,  1603,  1604,  1605,  1606,  2524,  1157,  1132,  1603,
    1604,  1605,  1606,  2360,  2777,   636,   695,  2015,  2367,  2657,
    2658,  2659,  2660,   102,   732,  1751,  2321,  2544,  1998,  1904,
     940,  2322,  1722,   748,  2770,   926,  1919,  1838,  1158,  3426,
    2545,   504,   504,  2696,  1845,  2999,   928,   504,   739,   522,
     504,   504,    87,   504,   504,   504,   504,  2376,  1740,  2311,
     751,  2296,  2298,  2418,  1152,  2313,  2295,  3152,   749,   504,
    1153,  2294,   971,  1563,  2435,   991,   504,  2297,  2299,  2300,
    2564,   626,  1741,  3000,   820,   750,   992,  2323,   626,  1363,
    2617,  2041,   696,   508,   926,  1310,   813,  2621,  1722,  2623,
     508,  2436,  1723,  1713,  1363,  2736,  1390,  1391,   972,  1159,
     754,  1364,  3170,   632,  1714,   504,  1754,  2787,  2042,   721,
     632,  2771,  2549,  1562,  1497,   634,  1364,  1573,  1663,  2193,
    2983,  3273,   634,   504,   974,  3256,   686,   747,  1836,  2035,
    1367,   728,  1775,   729,   504,   504,   504,  2467,   504,   504,
    2468,  1269,  1152,   755,   829,  2553,  1746,  2487,  1153,    21,
    1155,   756,  1583,  2157,  1152,  2788,  1720,   839,  2019,  1418,
    1153,  1154,  1664,   840,   822,  1713,  2217,  2218,  2219,   504,
    1776,  2789, -1957, -1957,  1493,  2772,  1716,  2773,   103,  1499,
    2194,  1503,   938,  1723,  1585,  1506,   926,   926,   104,  1723,
    2559,   521,  2245,  1651,  1652,  2498,  1658,   704,   704,  2204,
     704,  2560,  2552,  1847,  2211,  1777,   939,  3306,  1006,  2437,
    2525,  2557,  2526,  1849,  2438,   526,  3197,   527,  1006,  1098,
     504,  2043,  1723,   105,   504,   504,  2044,  1665,  2490,   697,
     941,  2045,  2705,  1006,   504,   504,   504,  1430,   940,   504,
    2073,  2527,  1626,   530,  2074,  3141,  1446,  1720,   978,  1154,
    2275,  2600,  1555,  1720,   522,  1778,  3142,  2608,   813,  1420,
    2320,  1154,  1421,  1922,  2324,   820,  1498,  2326,  1923,  3198,
     949,  2790,   683,   106,   995,   996,   997,  1666,  3199,  2737,
    2791,  1747,  2196, -1958, -1958,  2925,  1720,  2199,  1723,    25,
      26,    27,   944,   521,  2169,  1521,  1430,   823,  1005,  1490,
    3200,  1881,  2278,  1504,   947,  1882,  1883,  1509,   948, -1987,
   -1987, -1987,  2181,  2181,  2181,  1155,   829,  1514,   721,   958,
   -1210,  1518,   722,   730,  2301,   731,  1380,  1381,  2303, -1961,
   -1961,  2305,   740,  2334,  2335,  2336,  2337,  2338,  2339,  1667,
     990,  2343,  2344,  2345,  2346,  2347,  2348,  2349,  2350,  2351,
    2352,  1998,  1720,    32,   950,   822,   522,  2365,  1636,  1129,
    1567,  1637,  3422,  2439,  1130, -1962, -1962,  1310,  -580,  1569,
     741,  1182,  3201,  -580,  2440,  1157,  1310,   951,  1775,  1842,
    2046,  1320,  1843, -1963, -1963,  3202,  1912,  1619,  1914,  1915,
      37,  2047, -1964, -1964,  1386,  1387,  1625,   952,  1430,  1430,
    1310,  1982,  1534,  1155,    45,  2583,  1183,  2285,  1983,  1984,
     927,   953,  1985,  1986,  1987,  1155,  1776,  3385,   987,  3409,
     813,  3410,   993,    39,  1087,  1088,  1782,  1090,  1784,  2261,
     526,  2262,   527,  3397,    42,  1131,   998,   820,  2924,  1785,
    1786,   999,  2668,   504,  -580,  2675, -1966, -1966,    43,   813,
     813,  3078,  1852,  1961,  2327,   743,  1962,  1963,   530,  1186,
    1964,  2229,  3435,  1157,  2230,   813,  2333,  2279, -1967, -1967,
    1964,  2156,    44,  2286,  1001,  1157,  2287,  1159,   829,  2433,
    2807,  2800,  1132,  1320,  2430,  2431,  2738,  1657,  3433,  1321,
    1000,  -580,  2463,  3434,  1187,  2973,  2361, -1968, -1968,  1269,
    2764,  1778,  2377,  2366,  2378,  1095,  1158,   829,   829,  1390,
    1391, -1969, -1969,  2629,   926,  2799,  2288,  2808,   927,  2287,
    2379,  2315,  2380,   829,  2316,   109,  2881,   822,   517,    87,
    2353,  1269,   526,  2354,   527,   566,  1091,   504,   823,  2398,
   -1970, -1970,   930,  2398,  3242,  2399,  3243,  1106,  2400,  2404,
     653,  2537,  2402,  2539,   666,  2400,   504,   504,  2540,  1112,
     530,  2541,   504,  2546,   504,  1159,  2547, -1971, -1971,   504,
     504,   504,   504,  2611,  1113,  1889,  1962,  1159,  1115,  2680,
    3203,  1496,  2400,  3204,   504,   504,  2741,  1116,   508,  2742,
     504,  1555,  1119,   504,  2897,    21,  2501,  2230,   504,   820,
     504,   504,   626,  1152,  2918,   626,   504,  2919,   632,  1153,
     626,  1120,  2926,   626,   508,  2927,  2974,   508,   626,  1964,
     634,  2763,   508,  2765,  1127,   508,   504,   504,   820,   820,
     508,   504,  1147,   504,   632,  2579,   504,   632,  1965,    87,
    1146,  1966,   632,  1969,   820,   632,   634,  1149,  1967,   634,
     632,  2619,  2620,  1970,   634,  1269,  1126,   634,  1128,   504,
    1150,   504,   634,  2534,  2487,  2536,   813,   504,   504,   504,
     504,   504,   504,   504,   504,  1269,  2082,  2181,  2486,   504,
     504,  2863,  3107,  2185,   504,  1964,  1151,  3108,   504,   822,
    2400,   504,   504,   504,   504,   504,   504,   504,   504,   504,
    3136,  1163,   504,  1964,   683,  1940, -1972, -1972,  1942,   504,
    1154,  1310,   971,  1946,  3106,  1164,  1949,  3143,   822,   822,
    1962,  1953,  3153,  3186,   829,  3154,  2230,  2117,  1181,   823,
    1185,   704,   504,  1152,   822,    25,    26,    27,  1189,  1153,
    3221,  2854,  1851,  1964,  3294,  1317,  1521,  3295,   972,  3321,
    3366,  3018,  3322,  3295,  3407,   504,  1318,  3295,  1103, -1973,
   -1973,  1323,  2807,  1325,  1505,  1326,   504,   504,  3220, -1975,
   -1975, -1976, -1976,  1327,   974, -1977, -1977, -1978, -1978, -1979,
   -1979, -1987, -1987, -1987,  -512,  1893,  1894,  1895,  1896,  1897,
    1898, -1980, -1980, -1982, -1982, -1984, -1984,  1328,  -512,    32,
   -1986, -1986,   813,  -512,  1765,  1766,  2136,  2137,  -631,  -631,
    1338,  1269,  1340,  1269,  1341,  1388,  1389,  1346,  1390,  1391,
    -635,  -635,  3384,  -634,  -634,  3067,  3386,  3014,  3015,  3393,
    3394,  3419,  3420,  1630,  1632,  1350,    37,  1353,  1356,  2169,
    1154,  1354,  1357,  1375,  1369,   820,  2264,  1374,  2626,  1377,
    1405,   504,  1406,  1410,  -512,  1310,  1413,  1414,   504,   504,
     829,  1419,  1437,  1438,  1155,  2985,    21,  1441,   927,    39,
    1444,  1471,  1494,  1484,  -512,  2014,  1486,  1487,  1500,  1501,
      42,  1507,  3427,  1508,  1988,  1989,  1990,  1513,  1991,  1992,
    1993,  1994,  1995,  1996,  1517,  1310,  2709,  2710,   978,  1519,
    1530,   823,   504,  2780,  1531,  1533,  -803,  -810,  1538,  2781,
      45,  2265,  -656,  -657,  -800,   813,  1498,  -801,  3220,  1542,
    2202,  -512,  2782,  2487,  1157,  -804,  1543,  -802,  1547,  1269,
    -512,  2088,    45,  1556,  1566,   822,  1310,   504,  1612,  1614,
    1616,  1628,  1639,  1640,  2783,   926,  2784,  1644,  1650,  2757,
    1649,  1130,  1132,  1687,  1685,  2203,  1689,  1700,  1718,  1719,
    3220,  1720,   813,  1725,  1726,  1727,   504,   504,  1739,   504,
    1731,  2880,  1738,   829,   813,   504,   504,   504,   504,   504,
     504,   820,  1753,   504,   504,   504,   504,   504,   504,   504,
     504,   504,   504,  2889,  1155,  1743,  1758,  3046,   504,   504,
    1771,  2908,   504,  1839,   813,  1840,    25,    26,    27,   504,
    3220,   813,  1767,  1780,  1781,  1787,  1788,  1792,  1795,  1796,
     829,  1798,  1799,   521,  3184,  1801,  1159,  1808,  1802,  1809,
    1006,   504,   829,  2785,   504,  1816,   504,  1818,  1819,  1826,
     504,  1830,  1827,  1831,  1832,  1833,   626,   813, -1273,  1836,
    2209,   813,   626,   926,  1157,  1310,  1844,   813,   508,  1873,
    1870,  1872,   829,   823,   508,  1875,   504,  1938,  1878,   829,
      32,   822,  1909,  1901,  1910,  1941,  1917,  -512,   632,  1920,
    1950,  1947,  1951,  1952,   632,  2210,   522,  1957,  1973,  1960,
     634,  1573,   823,   823,   820,  2921,   634,   504,  2004,  2786,
    2007,  2009,   504,   504,  2787,   829,  3129,    37,   823,   829,
    1555,  -512,  2010,  2011,  2012,   829,  2917,  2038,   686,   825,
    2049,  2031,  2629,  2076,  2052,  -512,   504,   504,  3275,  2860,
    -512,   504,  2050,  2077,  2083,  2095,  2096,  2100,   523,   695,
      39,   820,  2113,   721,    21,   504,  1115,   722,   504,  2389,
     504,    42,  2788,   820,  2116,  2392,  1159,  1430,  2125,  2126,
    1362,  2127,  2128,  2319,  2129,    43,   504,  1269,  2789,  2130,
    2147,  2151,  2152,   504,  2155,  2158,   504,  2162,  3236,   696,
    2164,  -512,  2163,   820,   822,  2227,  2231,  2237,   626,    44,
     820,  2236,  2248,   504,  2251,  2252,  2250,  2266,  2267,  2269,
     508,  -512,  2272,    45,  2273,   626,   504,  2916,  2274,  2281,
    2304,  2276,  2280,   524,  2277,  2282,  2283,   508,  2284,   525,
     632,  2963,  2292,   504,   504,  2293,   820,  2317,  2325,  1906,
     820,   822,   634,  1881,  3034,  2355,   820,   632,  1905,  2362,
     504,  2374,   504,   822,  2363,  2364,  2368,  2375,  -512,   634,
    2386,   504,  2391,  2393,  2434,  2406,  2405,  -512,  2854,  2429,
    2414,  2450,   526,  2413,   527,  1430,  2458,  2415,  2790,  1269,
    1269,  1269,  2416,   822,  2417,  2427,  1746,  2791,  2441,  2451,
     822,   528,  2469,  2456,    25,    26,    27,   529,  2472,  2457,
     530,  2474,  2470,  2475,  2480,  2482,  2161,  2483,  -637,  3257,
    2493,  2496,  3055,  3056,  2497,  2494,  2170,   504,  2173,   823,
    2508,  2184,  2500,  1310,  2504,  1165,   822,  2188,  2505,  2190,
     822,  2510,  2511,  2506,  2514,  3032,   822,  2533,   686,  2535,
    2548,  2197,  2565,  2566,  2567,  1166,  2200,  1782,  2554,  1784,
    2205,  2206,  2207,  2208,  2574,  2212,  2213,   813,    32,  2555,
    1785,  1786,  2556,  2577,   503,   515,  2578,  2582,  2597,   536,
     825,  2584,  2598,  2601,   536,   504,  2602,  2609,   623,  2616,
     637,   637,  2605,  3105,  2614,   641,   536,   649,  2624,  1167,
     649,  2625,  2633,   667,   671,    37,  2641,   671,  2647,  2650,
     536,   536,  2644,  2651,   521,  2664,  3054,  2665,  2652,  2653,
    2676,  2677,  2683,   926,  -512,   829,  2693,  2703,  2704,  1269,
    2716,  2722,  2731,  2687,  2750,  2754,  2762,  2795,    39, -1273,
    2701,  2811,  2707,  2717,  2888,  2900,  2728,  2904,  2913,    42,
    2954,  2724,   623,   623,  3173,   968,  2752,  2748,  2892,  2775,
     969,  2893,  2768,  2769,   667,   823,  2877,   504,  2878,   671,
     536,   671,   671,   671,  2879,  2884,  1005,   522,  3257,  1881,
    2896,  2895,  2915,  1882,  1883,  2899,  2922,  1884,  1885,  1886,
     721,   508,  1168,  2230,   722,  2923,  2948,   927,  2928,  2950,
    2965,    45,  1445,  3359,   636,  2719,   504,  2998,  2542,  2959,
    2966,   632,  2986,  1165,  2993,  3007,  2996,   970,  3005,   686,
    3011,   504,  3012,   634,  3013,   504,   504,  3021,  3019,  2244,
    2674,  3020,   504,  1166,  3025,  3029,  3030,  2854,  3039,  3031,
    3042,  1169,   504,  3045,  3044,   504,   820,   504, -1226,  1170,
    3049,   686, -1955,  2570,   813,   504,  3238, -1956,   504,   504,
   -1957,  1171, -1958,   504,   504, -1959, -1960,  3062,  2014,  3063,
     504,   825,  3075,  2589,  3225,  3064,  3227,  1167,   823, -1961,
   -1962, -1963, -1964,  3065,  3082,   504,   971,  3095,  3061, -1966,
   -1967,  3073,  3235,  1172,  1140,   504, -1968, -1969,  1965,    87,
    3079,  1966,  2756,  1969, -1970, -1971,  1378,  1379,  1967,  2740,
   -1972, -1973,   829,  1970, -1975,   504, -1976,  3097, -1977, -1978,
   -1979, -1980,   972,  3237, -1981,   823,  3240, -1982, -1983, -1984,
   -1985, -1986, -1227,  3099,  3080,  1430,   822,   823,   973,  3109,
    3103,  3100,  3110,  2631,  1174,  2632,  3113,  3115,   974,  2637,
    3121,  2640,  3117,   526,  1269,   527,  3123,  2858,  1269,  3124,
    1269,  3127,  1887,  3128,  3130,  3135,  2860,   823,  1175,  3319,
    1168,   504,  3312,   504,   823,  3323,  3150,  3151,   529,  3155,
     975,   530,  3158,  1380,  1381,  1888,  3161,  1177,  3163,  3175,
    3176,  3183,  3185,  3191,  3193,  3194,  3207,  3208,  3209,  3229,
    3222,  1141,  3223,  1782,  3226,  1784,  3307,  1839,  3232,  3239,
     823,  2886,  3230,  3244,   823,   829,  1785,  1786,  3264,  1169,
     823,  3038,  3270,  3268,  3271,   976,  3280,  1170,  3274,  3286,
    3287,  3292,   977,   820,  3288,   813,  3297,  3304,  3299,  1171,
    3311,  2989,  2909,   825,  3301,  2911,  3309,  1382,  1383,  1384,
    1385,  1386,  1387,  1889,  3305,  1388,  1389,   504,  3310,  3316,
     813,  3318,  3320,  3325,  3330,  3337,  3336,  3338,  3345,   686,
    3343,  1172,   978,  3344,  3364,  3374,    21,   504,   504,   521,
    3398,  3353,   504,  3377,  3355,   504,  3357,  3358,  3379,  3395,
     979,  3375,  3412,   829,   504,  3376,  1855,  3423,  3428,  3417,
    3372,  3437,  3438,  3052, -1273,  1117,   504,  2810,  2189,  2674,
    2092,   504,   504,   540,  2531,  2814,   504,   813,   829,  2573,
     936,   504,  1174,   822,   504,   504,  2630,  3104,  3334,   504,
    1310,  3405,  3171,   504,  3380,   723,   820,   504,   686,  3373,
    2882,  1856,   522,  3399,   504,  3206,  1175,  2513,  1710,   626,
    2538,  3371,  3378,  2864,  2779,  2509,  3347,  3369,  2744,   980,
    1857,   508,  2894,  1779,  1142,  1177,  1390,  1391,  2903,  2855,
    1834,  2306,  1812,  3290,  3251,   829,  2604,  1846,  1858,  2743,
    3351,   632,  1859,  3421,  1868,  3315,  2729,   671,   504,  2499,
    2485,   671,   736,   634,   842,   671,   504,  1641,  2570,  2154,
    1682,  2655,   536,  3356,  1860,   825,  3249,  1861,  2495,  2122,
    3300,  3228,   627,  1491,   820,   504,    25,    26,    27,  2471,
    2153,  3132,  1681,  1862,   813,  2860,   822,  1492,  1686,  2396,
     832,   536,   536,   957,   825,   825,   943,  2649,  2679,   820,
    2648,  1458,  3177,  1825,  1447,  3303,  3302,  1449,  2425,  1453,
     825,  2314,  1493,  1454,  2685,  2488,  2448,  2446,  2858,  1890,
    1891,  1892,  2426,  1893,  1894,  1895,  1896,  1897,  1898,   524,
     934,   515,   637,  2409,  2997,  2957,  1929,   503,  2695,   671,
      32,  2091,   829,  1392,  1393,  2403,   710,     0,   623,     0,
       0,    10,   961,   961,     0,     0,   820,   961,   984,  1619,
       0,   504,     0,     0,   822,     0,     0,     0,     0,     0,
     823,   649,   649,   649,  1863,     0,   829,    37,   526,  3086,
     527,     0,  1864,     0,     0,   649,   649,     0,   649,   822,
       0,     0,   926,  3087,     0,   504,   813,   528,   686,    21,
       0,   671,     0,   529,  1865,     0,   530,   536,     0,     0,
      39,   504,     0,  2995,     0,    81,     0,   671,     0,     0,
     671,    42,    21,     0,     0,     0,     0,     0,     0,     0,
    1866,  1310,     0,    81,   968,    43,   625,     0,   504,   969,
       0,     0,     0,     0,     0,     0,   822,     0,     0,   504,
     504,    81,     0,   504,   829,   504,   826,     0,     0,    44,
     685,     0,     0,   820,     0,     0,     0,     0,   671,   671,
     671,   671,     0,    45,     0,     0,     0,  2759,  2760,     0,
     504,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   970,   820,     0,     0,
     625,   625,   702,     0,   504,  2812,  1005,     0,     0,  1881,
       0,   825,    81,  1882,  1883,     0,     0,  1884,  1885,  1886,
    2865,  2866,  2867,  2868,  2869,  2870,  2871,  2872,  2873,  2874,
       0,     0,     0,     0,  2858,     0,     0,     0,     0,    25,
      26,    27,     0,     0,     0,     0,     0,   828,     0,     0,
       0,     0,     0,   822,     0,     0,     0,   823,     0,     0,
       0,     0,    25,    26,    27,   971,     0,     0,  3188,  3189,
       0,     0,   504,     0,     0,   820,   504,     0,     0,     0,
       0,  3083,     0,     0,     0,     0,   504,   822,   504,     0,
     504,     0,   829,     0,   504,     0,   504,     0,   504,     0,
     508,   972,     0,    32,  1430,     0,   968,     0,   504,     0,
       0,   969,     0,   504,     0,   504,     0,   973,     0,     0,
     632,     0,     0,   504,     0,     0,    32,   974,     0,     0,
       0,     0,   634,   968,     0,     0,  1269,     0,   969,     0,
      37,   504,     0,     0,  3248,     0,  3250,   825,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   975,
     823,     0,     0,    37,     0,   822,     0,     0,   970,   961,
     984,     0,   671,    39,     0,  1465,     0,     0,  3148,     0,
    1943,   961,   961,    38,    42,     0,  3282,   536,     0,   504,
       0,     0,  2150,   623,     0,   970,    39,   826,    43,   504,
     623,     0,  3285,     0,   976,     0,  3289,    42,     0,     0,
     536,   977,   504,   820,     0,  1888,     0,  1520,     0,     0,
       0,    43,    44, -1719,     0,     0,   504,  1532,     0,     0,
       0,     0,     0,     0,     0,     0,    45,   971,   823,     0,
       0,     0,     0,     0,   504,    44,  2855,     0,     0,     0,
     508,   978,     0,     0,  3033,     0,     0,     0,     0,    45,
     825,     0,     0,   823,   971,     0,     0,     0,   504,   979,
     632,     0,     0,   972,     0,     0,     0,   536,     0,     0,
       0,     0,   634,  1889,   504,     0,     0,     0,   828,   973,
       0,     0,   508,  2858,     0,  1269,     0,     0,     0,   974,
     972,     0,     0,   822,     0,     0,     0,   825,     0,     0,
       0,     0,   632,     0,     0,     0,   973,     0,   504,   825,
     823, -1719,  1633,     0,   634,  1635,   974,     0,     0,     0,
    3381,   975,     0,   504,   504,   504,     0,     0,   980,   536,
     536,     0,   508,  1944,     0,   675,   671,     0,     0,   825,
       0,   829,  1143,     0,     0,     0,   825,  3396,   975,     0,
     504,     0,   632,     0,     0,     0, -1719,     0,  1465,     0,
    3276,     0,     0,     0,   634,     0,   976,     0,   671,  1709,
   -1719,     0,     0,   977,     0, -1719,     0,     0,   826,     0,
   -1719,   671,   825,     0,     0,     0,   825,     0,     0, -1719,
       0,   504,   825,   976, -1719,     0,     0,   712,   671,   715,
     977,   719,   671,     0,     0,     0,  1755,  1005,     0,     0,
    1881,     0,     0,   978,  1882,  1883,     0,   823,  1884,  1885,
    1886,     0,   537,     0,    81,     0, -1719,   537,     0,     0,
       0,   979,     0,     0,     0,  2698,     0,  1165,     0,   537,
     978,     0,     0,     0,     0,     0, -1719,     0,     0,     0,
       0,   823,     0,   537,   537,     0,     0,  1166,   979,     0,
       0,     0,   820,     0,     0,     0,     0,     0,     0,   828,
       0,     0,     0,     0,    81,   685,     0,     0,     0,  1890,
    1891,  1892,     0,  1893,  1894,  1895,  1896,  1897,  1898,     0,
       0,     0,     0, -1719,     0,  2855, -1719,     0,     0,     0,
     980,  1167, -1719,     0,  3174,     0,    21,     0,     0,     0,
       0,     0,     0,   537,     0,   942,     0,     0,     0,     0,
       0,     0,     0,     0,  3181,  3182,   954,   980,     0,   823,
       0,     0,  3148,     0,     0,  1768,     0,   671,  1774,     0,
       0, -1719,     0,     0,     0,   671,     0,     0,  3195,     0,
     826,     0,   822,     0,     0,     0,  1805,     0,     0,     0,
       0,     0,     0,     0, -1719,     0,     0,     0,  2803,     0,
       0,     0,  1572,     0,   702,  1573,     0,     0,     0,  1574,
    1575,     0,     0,  1578,  1579,  1580,  1822,     0,     0,     0,
       0,  1822,     0,    81,  1168,  1005,     0,     0,  1881,     0,
       0,     0,  1882,  1883,     0,     0,  1884,  1885,  1886,     0,
    1583,     0,     0,     0,     0,     0,  1888,  1584,     0,     0,
       0,   673,   832,  2699,     0,   832,     0,   536,   536,     0,
     536,   832,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   828,  1585,  1169,     0,     0,    25,    26,    27, -1719,
       0,  1170,     0,  1572,     0,     0,  1573,     0,  1520, -1719,
    1574,  1575,     0,  1171,     0,     0,     0,   823,     0,     0,
       0,     0,     0,     0,     0,     0, -1719,     0, -1719, -1719,
    1465,  1465,   825,     0,  1889,     0,  1465,     0,   503,     0,
       0,  1583,     0,     0,     0,  1172,     0,     0, -1987,  1572,
       0,   961,  1573,   536,  1924,     0,  1574,  1575,     0,     0,
      32,   671,   826,     0,   623, -1719,     0,   623, -1719, -1719,
   -1719,     0,   623,  1585,     0,   623,     0,     0,     0,     0,
     623,     0,   536,     0,   536,     0,  1586,  1583,     0,     0,
       0,   826,   826,     0, -1987,     0,  1174,    37,     0,     0,
       0,     0,     0,  1587,     0,     0,     0,   826,  1588,  1997,
       0,     0,     0,     0,  2003,     0,     0,     0,     0,  1585,
    1175,     0,     0,     0,     0,     0,     0,     0,  3365,     0,
      39, -1987, -1987,     0,     0,     0,  2432,     0,     0,  1177,
       0,    42,     0,     0,     0,     0,  1591,     0,     0,     0,
       0,     0,   832,   828,  1888,    43,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   727,     0, -1987,     0,   734,
       0,     0,     0,   737,     0,     0,     0,     0,     0,    44,
       0,     0,   828,   828, -1987, -1987,     0,     0,    81, -1987,
       0,     0,     0,    45,     0,     0,     0,     0,   828,  1594,
       0,  2089,     0,   671,     0,   671,     0,     0,     0,     0,
       0,     0,     0, -1987,     0,     0,   671,  2105,     0,   825,
       0,   625,  1889,     0,     0,  1378,  1379, -1987,   625,  1465,
   -1987,     0,     0,     0,     0, -1987,     0,     0,     0,     0,
    1890,  1891,  1892,     0,  1893,  1894,  1895,  1896,  1897,  1898,
       0,     0,     0,     0,   671,     0,   536,   946,     0,     0,
       0,     0,     0,  1535,     0,     0,     0,     0,     0,     0,
    1709,   536,     0, -1987,  1539,     0,   823,     0,     0,     0,
    1594,   536,  2171,   536,  2175,     0,   536,     0,     0,     0,
       0,     0,   536,     0,   536,   537,     0,  1596,     0,     0,
       0,  1553,  1380,  1381,     0,   832,   536,     0,   826,     0,
     832,   536,     0,     0,     0,   536,   536,   536,   536,     0,
     536,   536,   825,     0,   537,   537,  1594,     0,     0,     0,
       0,     0,     0,     0,     0,  1118,     0,     0,     0,     0,
       0,     0,     0,   671,   671,   671,   671,   671,     0,     0,
       0,     0,     0,     0,  2246,  2247,     0,     0,     0,     0,
       0,     0,     0,  2254,     0,     0,  1382,  1383,  1384,  1385,
    1386,  1387,     0,     0,  1388,  1389,     0,     0, -1987,     0,
     702,   702,     0,   702,     0,     0,  1330,  1332,  1335,  1337,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   828,
     825,     0,  1597,     0,     0,  1598,  1599,  1600,     0,  1601,
    1602,  1603,  1604,  1605,  1606,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1987,   825,     0,     0,  1890,  1891,
    1892,     0,  1893,  1894,  1895,  1896,  1897,  1898,     0,     0,
     537,  1468,     0,     0,   826,     0,     0,     0,     0,  1465,
    1465,  1465,  1465,  1465,  1465,     0,     0,  1465,  1465,  1465,
    1465,  1465,  1465,  1465,  1465,  1465,  1465,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   825, -1987,     0,  1390,  1391,   536,     0,     0,
    1601,  1602,  1603,  1604,  1605,  1606,     0,     0,     0,   671,
       0,     0,     0,     0,     0,     0,     0,     0,   623,     0,
    1572,     0,     0,  1573,   623,     0,     0,  1574,  1575,   536,
       0,     0,     0,     0,   536,     0,     0,     0,     0, -1987,
       0,     0,     0,     0,     0,   828,  1601,  1602,  1603,  1604,
    1605,  1606,     0,     0,     0,     0,     0,     0,  1583,     0,
       0,     0,     0,     0,     0, -1987,     0,   826,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   536,
       0,     0,     0,  2422,     0,     0,     0,     0,   536,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,     0,   825,
    1460,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1465,  1465,  1392,  1393,   826,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   826,  1997,     0,     0,
       0,     0,  1152,   825, -1721,     0,     0,     0,  1153,     0,
       0,     0,     0,     0,  1468,     0,  1165,     0,     0,     0,
       0,     0,     0,  2442,     0,     0,   826,     0,   828,     0,
     623,  1467,     0,   826,     0,     0,  1166,     0,     0,     0,
       0,     0,   536,     0,     0,     0,     0,   623,     0,     0,
       0,  2105,     0,     0, -1987,    81,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   826,
       0, -1987,     0,   826,     0,   828, -1987,     0,     0,   826,
    1167,   825,     0,     0,     0,     0,     0,   828,     0,     0,
       0,   536,     0,     0,  1465,     0,     0,   536,     0,     0,
    1485,     0, -1721,     0,     0,     0,     0,     0,     0,  1154,
       0,     0,     0,  1768, -1987,     0,     0,   828,     0,     0,
       0,     0,     0,  1516,   828,     0,     0,     0,     0,     0,
       0,     0,   625,     0,     0,   625,     0,     0,     0,     0,
     625,     0,     0,   625,     0,     0,     0, -1721,   625,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     828, -1721,     0,     0,   828,    81, -1721,  1594,     0,     0,
     828, -1721,     0,  1168,     0,     0,  1701,  1768,     0,     0,
   -1721,     0,     0,     0,   671, -1721,     0,     0,     0,  1728,
    1558,     0,     0,     0,  2585,     0,     0,  1768,   671,   671,
     671,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1752,   536,     0,   671,     0,  1678,   671, -1721,     0,   825,
       0,   671,  1169,  2039,  1467,     0,     0,     0,     0,     0,
    1170,     0,     0,     0,  2622,     0,     0, -1721,     0,     0,
       0,     0,  1171,     0,     0,     0,     0,     0,     0,     0,
       0,   832,   537,   537,     0,     0,  1378,  1379,     0,     0,
       0,     0,     0,  1155,     0, -1987,     0,     0,     0,  1768,
    1768,     0,  1768,     0,  1172,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1721,     0,     0, -1721,     0,     0,
       0,     0,     0, -1721,   702,     0,  1005,     0,     0,  1881,
       0,   503,     0,  1882,  1883,     0,     0,  1884,  1885,  1886,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1173,
       0,  2654,     0,  1157,  2976,  1174,     0,     0,     0,   671,
     671,   671, -1721,  1380,  1381,     0,  1468,  1468,   536,     0,
    1465,   536,  1468,     0,     0,  1773,     0,   536,     0,  1175,
       0,     0,     0,  1791,  1176, -1721,     0,     0,     0,     0,
       0,     0,  1997,     0,     0,     0,     0,     0,  1177,   826,
   -1987,     0,     0,     0,     0,     0,     0,  1601,  1602,  1603,
    1604,  1605,  1606,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1465,  1465,     0,     0,     0,  1382,  1383,  1384,
    1385,  1386,  1387,     0,     0,  1388,  1389,     0,     0,     0,
       0,     0,   673,     0,     0,     0,     0,     0,     0,     0,
       0,  2733,     0,     0,  2249,  1159,     0,  2105,     0,     0,
       0,     0,     0,    81,     0,     0,     0,     0,     0,     0,
   -1721,     0,     0,   671,     0,     0,     0,   536,     0,     0,
   -1721,   536,   536,   536,     0,     0,     0,  1768,  1709,  1768,
     828,  1805,     0,     0,     0,     0,     0, -1721,     0, -1721,
   -1721,     0,     0,     0,     0,     0,     0,     0,   825,     0,
     536,     0,  2813,     0,     0,     0,     0,  2081,     0,     0,
       0,     0,     0,     0,     0,   536,   536,   536,   536,   536,
     536,   536,   536,   536,   536,  1888, -1721,     0,     0, -1721,
   -1721, -1721,     0,     0,     0,  1005,  1390,  1391,  1881,  1936,
       0,  2883,  1882,  1883,  2254,     0,  1884,  1885,  1886,     0,
     671,     0,     0,     0,  2585,  1468,     0,     0,     0,     0,
       0,     0,     0,  2977,     0,  1709,  1467,  1467,     0,     0,
     537,   537,  1467,   537,     0,     0,   826,     0,     0,     0,
       0,  1805,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1889,     0,     0,   625,     0,     0,     0,
    1768,     0,   625,     0,     0,     0,     0,     0,     0,     0,
       0,  1465,     0,     0,     0,     0,     0,   536,     0,     0,
       0,     0,     0,     0,   671,   671,   671,   671,     0,     0,
       0,     0,     0,     0,     0,     0,  1465,     0,     0,  1465,
       0,     0,     0,   536,   832,     0,   537,     0,     0,     0,
       0,     0,     0,  1392,  1393,     0,     0,     0,     0,  2967,
       0,     0,     0,     0,     0,     0,     0,   828,     0,     0,
       0,     0,     0,  1394,     0,  1954,     0,  1958,     0,   826,
       0,  2090,     0,  2093,     0,     0,     0,     0,     0,  2990,
       0,   623,     0,  1553,  2102,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3002,     0,     0,     0,  2105,
       0,  2039,     0,     0,     0,  1997,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2452,     0,  1709,
       0,     0,  2139,     0,     0,  1768,     0,     0,   625,     0,
       0,     0,     0,     0,  1888,     0,     0,     0,   832,   536,
    1465,     0,     0,     0,     0,   625,   671,   826,     0,     0,
       0,     0,     0,     0,     0,  2124,     0,     0,     0,     0,
     828,     0,     0,  3053,     0,  1468,  1468,  1468,  1468,  1468,
    1468,     0,   826,  1468,  1468,  1468,  1468,  1468,  1468,  1468,
    1468,  1468,  1468,     0,     0,     0,     0,     0,     0,  1890,
    1891,  1892,     0,  1893,  1894,  1895,  1896,  1897,  1898,     0,
       0,     0,  1889,     0,     0,     0,     0,     0,     0,     0,
       0,  2238,  2239,  2241,  2242,  2243,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   826,
       0,     0,     0,     0,     0,     0,     0,     0,   828,   537,
    2585,  1768,     0,     0,     0,     0,     0,     0,     0,  3081,
       0,     0,     0,     0,   537,     0,  2254,     0,     0,     0,
       0,     0,     0,   828,   537,     0,   537,     0,     0,   537,
    3101,     0,     0,  1005,     0,   537,  1881,   537,     0,  1465,
    1882,  1883,     0,     0,  1884,  1885,  1886,     0,  1572,   537,
       0,  1573,     0,   685,   537,  1574,  1575,     0,   537,   537,
     537,   537,     0,   537,   537,  3118,     0,     0,     0,     0,
       0,   536,     0,     0,     0,     0,  1468,  1468,     0,   536,
     828,     0,     0,     0,     0,     0,  1583,     0,     0,     0,
       0,     0,     0, -1987,     0,     0,   826,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3145,     0,     0,  1005,
       0,     0,  1881,     0,     0,     0,  1882,  1883,  1585,     0,
    1884,  1885,  1886,     0,     0,     0,     0,  2381,   536,     0,
     826,     0,     0,   536,     0,  1467,  1467,  1467,  1467,  1467,
    1467,     0,     0,  1467,  1467,  1467,  1467,  1467,  1467,  1467,
    1467,  1467,  1467,     0,     0,     0,     0,     0,     0,   536,
       0,     0,     0,     0,     0,     0,     0,     0,  1890,  1891,
    1892,     0,  1893,  1894,  1895,  1896,  1897,  1898,     0,   536,
     536,  2708,     0,     0,     0,     0,     0,   828,     0,     0,
    1468,     0,     0,     0,     0,   671,     0,  1709,  2585,     0,
       0,     0,     0,   536,     0,     0,     0,     0,   826,     0,
       0,     0, -1987,     0,     0,     0,     0,   671, -1736,     0,
    3217,   828,     0,     0,  1553,     0,     0,     0,     0, -1987,
     537,     0,     0,     0, -1987,     0,     0,     0,     0,     0,
    1465,     0,  1888,     0,   536,   961,     0,     0,   961,     0,
       0,     0,     0,     0,     0,     0,  1553,     0,     0,  1065,
    1065,     0,  2395,     0,     0,     0,     0,  1958,     0,     0,
       0,  3002, -1987,     0,     0,    81,     0,     0,   671,     0,
       0,    81,     0,     0,     0,     0,  1467,  1467,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   828,
       0,     0,     0,     0,     0,     0,     0,  2755,   671,     0,
    1889,     0,   537,     0,     0,     0, -1736,     0, -1987,     0,
       0,  1558,     0,     0,  1191,  1594,     0,     0,  1312,     0,
       0,     0,     0,  1572,     0,     0,  1573,     0,     0,     0,
    1574,  1575,     0,     0,     0,     0,   826,  3118,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1736,     0,     0,     0,     0,     0,     0,     0,     0,
    3217,  1583,     0,     0,     0, -1736,     0,     0, -1987,     0,
   -1736,     0,     0,    81,     0, -1736,  1889,     0,     0,     0,
       0,     0,     0,     0, -1736,     0,     0,  1709,     0, -1736,
    1467,     0,     0,  1585,     0,   537,     0,     0,     0,   832,
     832,     0,  3217,   832,    81,     0,     0,    81,     0,     0,
       0,  1924,     0, -1987,     0,     0,     0,     0,     0,     0,
       0, -1736,  2575,   536,     0,     0,     0,   828,     0,     0,
       0,     0,     0,  1417,     0,     0,  2593,  2594,  2596,     0,
       0, -1736,     0,     0,   537,  1709,     0,     0,     0,     0,
    2503,  2607,  3217,     0,  2610,     0,  2711,     0,     0,  2615,
       0,     0,     0,     0,  1553,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1468,  1468,
       0,     0,     0,     0,     0,     0,     0, -1987, -1736,  1435,
     832, -1736,     0,     0,     0,     0,     0, -1736,     0,     0,
       0,     0,     0,     0, -1987,  2105,  1890,  1891,  1892, -1987,
    1893,  1894,  1895,  1896,  1897,  1898,     0,     0, -1987,   625,
       0,     0,     0,     0,     0,  1601,  1602,  1603,  1604,  1605,
    1606,  1442,     0,   685,     0,     0, -1736,  1459,     0,     0,
    1461,     0,     0,  1472,  1475,  1480,  1483, -1987,  1435,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0, -1736,
       0,     0,     0,     0,   537,     0,     0,  2661,  2662,  2663,
    1572,     0,     0,  1573,     0,     0,     0,  1574,  1575,     0,
       0,     0,  1890,  1891,  1892,  1312,  1893,  1894,  1895,  1896,
    1897,  1898,     0,     0,     0,   826,     0,     0,     0,     0,
    1594,     0,     0,     0,     0,  1536,     0,     0,  1583,     0,
       0,     0,     0,     0,     0, -1987,   673,     0,     0,     0,
       0,  1570,     0,  1541,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1544,  1545,  1546,     0,  1550,  1554,
    1585,     0,     0,     0, -1736,     0,     0,     0,  1435,     0,
    1435,  1435,     0,     0, -1736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1615,
       0, -1736,     0, -1736, -1736,     0,     0,  1468,     0,     0,
       0,  2751,     0,     0,     0,     0,   828,     0,  1467,  1467,
       0,   537,     0,     0,   537,    81,     0,     0, -1987,     0,
    1954,     0,  1468,  2712,     0,     0,     0,     0,     0,     0,
   -1736,     0,     0, -1736, -1736, -1736,     0,     0,     0,     0,
    1656,     0,     0,  1435,  1672,  1677,  1435,  1435,     0,     0,
       0,     0,     0,  1553, -1987,  1065,  1065,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1987,     0,     0,  1572,     0, -1987,  1573,     0,     0,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  2891,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1583,     0, -1987,     0,     0,     0,     0,  1584,
     537,     0,     0, -1987,   537,   537,   537,     0,     0,     0,
    1601,  1602,  1603,  1604,  1605,  1606,  1468,     0,     0,     0,
       0,     0,     0,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,     0,   537,     0,     0,     0,     0,     0,     0,
       0,     0,  2930,  2931,  2932,  2933,     0,  1594,   537,   537,
     537,   537,   537,   537,   537,   537,   537,   537,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1312,     0,     0,
      81,    81,     0,     0,     0,     0,  1312,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1467,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1312,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1811,  2951,     0,     0,     0,     0,     0,  1586,     0,
       0,     0,  1820,     0,  1821,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1828,  1587,  2969,     0,     0,     0,
    1588,     0,     0,     0,     0, -1987,    81,     0,    81,     0,
    1954,  1829,     0,     0,     0,  1468,     0,     0,     0,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3040,     0,  2395,     0,  1591,     0,
       0,     0,     0,  1848,  1850,     0,     0,     0,    81,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    81,     0,     0,     0,    81,     0,
       0,     0,     0,     0,  1592,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,     0,  1467,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,  1871,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1987,     0,     0,     0,     0,     0,     0,  1601,  1602,  1603,
    1604,  1605,  1606,     0,     0,     0,     0,     0,     0,  1480,
       0,  1480,  1480,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   537,     0,  1065,  1065,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1065,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,  1573,     0,     0,     0,  1574,  1575,     0,  1596,
       0,  1976,    81,  1977,     0,     0,     0,     0,     0,     0,
    1572,     0,     0,  1573,     0,     0,     0,  1574,  1575,     0,
       0,  1578,  1579,  1580,     0,     0,  1468,  1583,     0,    81,
       0,  2016,     0,     0, -1987,  1467,     0,  2020,  2021,  2022,
    2023,  2024,  2025,  2026,  2027,     0,     0,     0,  1583,  2036,
    2037,     0,     0,     0,  2048,  1584,     0,     0,  2051,  1585,
       0,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
       0,     0,  2068,     0,     0,     0,     0,     0,     0,  1065,
    1585,  1312,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2134,  2134,  2094,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,     0,
       0,     0,  2980,     0,  3126,     0,     0,     0,     0,     0,
    2412,     0,  2395,  3190,     0,  1572,  1545,  1546,  1573,     0,
    1469,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,
       0,     0,     0, -1987,     0,  3215,     0,     0,     0,  1435,
       0,     0,     0,  1581,     0,     0,     0,     0,     0,  1435,
   -1987,     0,  1435,  1583,  1586, -1987,     0,     0,     0,     0,
    1584,   537,     0,     0,     0,     0,   537,     0,     0,     0,
       0,  1587,     0,     0,     0,     0,  1588,     0,     0,     0,
       0,     0,     0,     0,     0,  1585,     0,     0,     0,     0,
       0,     0,   537, -1987,     0,     0,  3255,     0,     0,  1589,
    1590,  2215,     0,     0,     0,  1312,     0,     0,  2225,  2226,
       0,     0,   537,   537,  1591,     0,  3234,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  3281,     0,     0,     0,
       0,     0,     0,  2289,  2291,     0,   537,  1609,     0,     0,
       0,     0,     0,     0,     0,  1312,  1594,     0,     0,     0,
    1592,     0,     0,  1593,     0,     0,     0,  1571,     0,  1435,
       0,     0,  1572,     0,     0,  1573,     0,  1594,     0,  1574,
    1575,  1576,  1577,  1578,  1579,  1580,     0,   537,     0,  1586,
    1609,     0,     0,     0,     0,     0,  1417,  2307,     0,     0,
    1581,     0,     0,     0,  1582,     0,  1587,     0,     0,     0,
    1583,  1588,     0,     0,     0,     0,     0,  1584,     0,     0,
       0,     0,     0,  1469,     0,     0,  2329,  2330,     0,  2331,
       0,     0,     0,     0,  1589,  1590,     0,     0,     0,     0,
       0,     0,  1585,     0,     0,     0,     0,     0,     0,  1591,
       0,     0,     0,     0, -1987,     0,     0,     0,  2357,  2358,
       0,     0,  2094,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1609,     0,  1596,     0,  1435,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,  1593,     0,
       0,  2385,     0,     0,     0,     0,  2390,     0,     0,     0,
       0,     0,  1594,     0,     0,  1595,     0,     0,     0,  1572,
       0,     0,  1573,     0,     0,  1312,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,     0,     0,  2407,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1586,  1581,     0,     0,
       0,  2692,     0,     0,     0,     0,     0,  1583,     0,     0,
       0,     0,     0,  1587,  1584,     0,     0,  2420,  1588, -1987,
       0,     0,  2423,  2424,     0,     0,  1601,  1602,  1603,  1604,
    1605,  1606,     0,     0,     0,     0,   537,     0,     0,  1585,
    1597,  1589,  1590,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,     0,  1609,     0,  1591,     0,     0,     0,
    1596,     0,     0,     0,  2465,  2444,  1572,     0,  2447,  1573,
    2449,     0,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,
       0,     0,     0,     0,     0,     0,  2453,     0,     0,     0,
       0,     0,  1592,     0,  1581,  1593,     0,  2491,  2491,     0,
       0,     0,     0,     0,  1583,     0,     0,     0,     0,  1594,
       0,  1584,  1595,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1656,     0,     0,     0,
       0,     0,     0,  1586,     0,     0,  1585,     0,     0,     0,
       0,     0,     0,  1677,  2066,     0,     0,     0,     0,     0,
    1587,     0,     0,     0,     0,  1588,     0,     0,     0,  1609,
       0,     0,  1065,     0,     0,  1597,     0,     0,  1598,  1599,
    1600,  2507,  1601,  1602,  1603,  1604,  1605,  1606,  1589,  1590,
    1165,     0,     0,     0,  1609,  1874,     0,     0,     0,     0,
       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,
    1166,  1609,     0,  1609,     0,  1469,  1469,  1596,  1899,     0,
       0,  1469,     0,     0,  1609,     0,     0,  1609,     0,     0,
       0,     0,  1609,     0,     0,  1609,     0,  1546,     0,  1592,
    1586,     0,  1593,  1312,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1167,  2801,  1594,  1587,     0,  1595,
       0,     0,  1588,  2802,     0,     0,     0,  2618,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1589,  1590,     0,  1609,     0,
       0,     0,     0,  1609,     0,  2613,  1609,  1609,  1609,     0,
    1591,     0,  1609,     0,     0,     0,  1609,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2803,  1597,     0,     0,  1598,  1599,  1600,     0,  1601,
    1602,  1603,  1604,  1605,  1606,     0,  1592,     0,     0,  1593,
       0,     0,     0,     0,     0,     0,     0,  1168,     0,     0,
       0,     0,     0,  1594,  1596,     0,  1595,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1609,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1169,     0,     0,     0,
       0,     0,     0,     0,  1170,     0,     0,     0,  1609,     0,
       0,     0,     0,     0,     0,     0,  1171,     0,  2804,     0,
       0,     0,     0,     0,  1609,     0,     0,     0,     0,  1609,
       0,  2682,     0,     0,     0,  2684,  1977,     0,     0,     0,
       0,     0,  2688,     0,     0,     0,  1899,     0,  1172,     0,
       0,  1596,  2697,     0,     0,  2700,     0,  2702,     0,  1597,
       0,     0,  1598,  1599,  1600,  2706,  1601,  1602,  1603,  1604,
    1605,  1606,     0,  2713,  2714,     0,  2008,     0,     0,     0,
    2721,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2730,     0,     0,     0,  1174,
       0,     0,     0,     0,     0,  2745,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1175,     0,  1065,     0,     0,     0,     0,
       0,  1435,     0,     0,     0,   541,     0,     0,     0,     0,
       0,     0,  1177,     0,  2805,     0,     0,  2806,     0,     0,
       0,     0,     0,     0,     0,     0,  1597,     0,     0,  1598,
    1599,  1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,     0,
       0,     0,     0,  2008,     0,     0,     0,     0,     0,     0,
       0,  2215,     0,  2215,     0,     0,     0,     0,     0,     0,
     542,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   543,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,  1899,  1899,     0,  1469,  1469,  1469,  1469,  1469,  1469,
       0,     0,  1469,  1469,  1469,  1469,  1469,  1469,  1469,  1469,
    1469,  1469,  1899,   544,  1720,     0,     0,     0,     0,     0,
       0,     0,     0,   545,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   546,     0,     0,     0,     0,
     547,     0,     0,     0,     0,     0,     0,  2946,  2947,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2964,     0,     0,     0,     0,   548,
       0,     0,     0,     0,     0,     0,  2968,     0,     0,     0,
       0,  2970,  2971,     0,     0,     0,  2972,     0,  1609,  1609,
       0,  2975,     0,     0,  2978,  2979,     0,     0,     0,  2215,
    1312,     0,     0,  2987,     0,     0,     0,     0,     0,     0,
       0,     0,   549,     0,  1065,     0,   550,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1609,     0,
       0,     0,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
       0,     0,     0,     0,     0,  1469,  1469,  1435,  1609,  1609,
       0,     0,  1435,     0,     0,     0,     0,     0,  3028,     0,
    1609,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,  1609,
    1609,     0,     0,   551,     0,  3047,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   552,  1848,
    1850,     0,     0,     0,     0,     0,  1609,     0,  1572,     0,
       0,  1573,     0,     0,     0,  1574,  1575,  1576,  1577,  1578,
    1579,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   553,     0,     0,   554,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,   555,     0,  1583,   556,     0,     0,
       0,     0,     0,  1584,     0,     0,     0,     0,     0,  1469,
       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,
       0,  3077,     0,     0,     0,     0,     0,     0,  1585,   558,
       0,     0,     0,     0,     0,     0,   559,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   560,     0,     0,     0,
       0,     0,   561,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1554,     0,     0,     0,     0,     0,  1609,     0,   562,
       0,     0,     0,     0,     0,     0,     0,  1609,  1609,     0,
       0,  1312,     0,     0,     0,     0,     0,     0,  2420,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3137,
    3138,     0,     0,  3139,     0,  1546,     0,     0,     0,     0,
       0,     0,  1586,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1587,
    3157,     0,     0,     0,  1588,     0,     0,  1848,  1850,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1435,     0,
       0,     0,     0,     0,  3169,     0,     0,  1589,  1590,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1591,     0,     0,     0,     0,     0,     0,     0,
       0,  1609,  1609,  1609,     0,     0,  1899,  1899,  1899,  1899,
    1899,  1899,     0,     0,     0,  1899,  1899,  1899,  1899,  1899,
    1899,  1899,  1899,  1899,  1899,     0,     0,     0,  1592,  1609,
    1609,  1593,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  3214,     0,     0,  1594,     0,     0,  1595,     0,
       0,     0,     0,     0,     0,     0,     0,  1609,     0,     0,
    2946,     0,  1609,     0,  3231,     0,     0,     0,  1065,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3241,  1609,
       0,     0,     0,  2215,     0,  2215,     0,     0,     0,     0,
       0,     0,  1609,  1065,     0,  1609,  1609,     0,     0,     0,
     -43,     0,  1899,  1899,     0,     0,     0,     0,     0,     0,
       0,  3266,     0,     0,     0,     0,  1609,  1469,  1469,  1609,
       0,  1609,     1,     0,     0,  1609,     0,     0,     0,     0,
       0,     0,     2,     0,     3,     4,     0,     0,     0,     0,
       0,     0,     0,  1596,     0,     0,     0,     5,     0,     0,
       0,     0,     6,     0,     0,     0,     0,     0,     0,  3291,
       0,     7,     0,     0,     0,     0,     0,     0,     0,  2946,
       0,     0,     0,     8,     0,     0,     0,     0,     0,  1609,
       0,     0,  1065,     0,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    10,     0,    11,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    12,
       0,     0,     0,     0,  3335,     0,     0,     0,     0,     0,
       0,     0,     0,    13,    14,     0,     0,  1435,     0,     0,
       0,     0,     0,    15,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,     0,    17,  1597,    18,
      19,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,  1605,
    1606,     0,     0,    20,     0,  2328,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,  1573,     0,     0,  1609,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,    22,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3390,  3390,  3390,  1152,  1581,     0,    23,
       0,     0,  1153,     0,     0,     0,  1469,  1583,     0,     0,
    1165,     0,     0,     0,  1584,     0,     0,     0,     0,     0,
    3390,     0,     0,     0,     0,    24,     0,     0,     0,     0,
    1166,     0,     0,     0,     0,     0,     0,     0,     0,  1585,
       0,     0,     0,     0,  1609,     0,  1609,     0,     0,     0,
    1609,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,  3390,  1609,     0,  1609,     0,     0,     0,  1609,     0,
       0,  1899,  1899,     0,  1167,  1609,  1609,     0,     0,     0,
       0,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,     0,  1609,     0,     0,     0,     0,    25,    26,    27,
       0,     0,     0,  1154,     0,    28,     0,  1609,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1586,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,     0,  1469,    31,     0,     0,     0,
    1587,     0,     0,     0,     0,  1588,     0,     0,     0,     0,
       0,    32,     0,     0,     0,     0,     0,  1168,    33,     0,
       0,     0,    34,     0,     0,     0,     0,     0,  1589,  1590,
       0,     0,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1591,    36,     0,     0,     0,    37,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1169,     0,    38,     0,
       0,     0,     0,     0,  1170,     0,     0,     0,     0,  1592,
       0,    39,  1593,     0,    40,     0,  1171,    41,     0,     0,
       0,     0,    42,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,    43,  1155,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1172,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      44,     0,     0,  1899,  1469,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,   -43,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1609,  1609,
       0,     0,     0,  2191,     0,     0,     0,  1157,     0,  1174,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,     0,
    1609,     0,  1609,  1609,  1609,     0,     0,  1609,     0,     0,
    1609,  1609,     0,  1175,  1596,     0,     0,     0,  2192,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1177,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1609,     0,     0,     0,     0,     0,  1899,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1159,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,     0,     0,     0,     0,  2411,  1899,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
    1609,  1609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1609,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1609,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1609,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     110,  1002,   636,  1003,  1004,  1005,  1006,  1007,  1609,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,  1609,     0,     0,  1008,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,  1009,   134,  1010,  1011,     0,   137,   138,   139,   140,
     141,   142,  1012,   606,   143,   144,  1013,  1014,   147,     0,
     148,   149,   150,   151,   607,     0,   608,  1609,  1015,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,  1016,  1017,   183,
    1018,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,  1609,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,  1019,   212,   213,   214,   215,
     216,   609,  1020,   218,     0,   219,   220,  1021,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,  1022,  1023,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,  1024,  1025,
       0,  1026,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  1027,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,  1028,   310,
    1029,   312,   313,   314,   315,  1030,   316,   317,   318,   319,
    1031,   611,   321,  1032,   323,   324,   325,     0,   326,   327,
       0,     0,  1033,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   613,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     614,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,  1034,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,  1035,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,  1036,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     616,   434,     0,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,     0,   444,  1037,  1038,     0,     0,   447,
     448,   617,   450,   618,  1039,   452,   453,   619,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
    1040,     0,   474,   475,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,  1041,     0,     0,     0,     0,
       0,     0,  1042,  1043,  1044,     0,     0,     0,     0,  1045,
       0,  1046,     0,     0,     0,     0,  1047,  1048,  1049,  1050,
       0,  2558,   110,  1002,   636,  1003,  1004,  1005,  1006,  1007,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,  1008,     0,
       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,
     130,   131,   132,  1009,   134,  1010,  1011,     0,   137,   138,
     139,   140,   141,   142,  1012,   606,   143,   144,  1013,  1014,
     147,     0,   148,   149,   150,   151,   607,     0,   608,     0,
    1015,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,  1016,
    1017,   183,  1018,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   773,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,  1019,   212,   213,
     214,   215,   216,   609,  1020,   218,     0,   219,   220,  1021,
     222,     0,   223,     0,   224,   225,     0,   226,   227,   228,
     229,   230,   231,     0,   232,     0,  1022,  1023,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
    1024,  1025,     0,  1026,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,  1027,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
    1028,   310,  1029,   312,   313,   314,   315,  1030,   316,   317,
     318,   319,  1031,   611,   321,  1032,   323,   324,   325,     0,
     326,   327,     0,     0,  1033,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   613,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   614,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,  1034,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,  1035,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,  1036,   418,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   616,   434,     0,   435,   436,     0,   437,   438,
     439,   440,   441,   442,   443,     0,   444,  1037,  1038,     0,
       0,   447,   448,   617,   450,   618,  1039,   452,   453,   619,
     455,   456,   457,   458,   459,     0,     0,   460,   461,   462,
       0,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   472,  1040,     0,   474,   475,   476,   477,   478,   479,
     480,     0,     0,   481,     0,     0,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,  1041,     0,     0,
       0,     0,     0,     0,  1042,  1043,  1044,     0,     0,     0,
       0,  1045,     0,  1046,     0,     0,     0,     0,  1047,  1048,
    1049,  1050,     0,  3140,   110,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1008,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1009,   134,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,  1015,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,   225,    21,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1027,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,   310,  1029,   312,   313,   314,   315,  1030,
     316,   317,   318,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    25,    26,
      27,     0,   348,   349,   614,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    32,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   616,   434,     0,   435,   436,    37,
     437,   438,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,   619,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,    39,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   620,  1040,     0,   474,   475,   476,   477,
     478,   479,   480,     0,     0,   481,     0,    43,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,    44,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,  3116,     0,     0,     0,
    1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1008,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1009,   134,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,  1015,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,   225,    21,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1027,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,   310,  1029,   312,   313,   314,   315,  1030,
     316,   317,   318,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    25,    26,
      27,     0,   348,   349,   614,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    32,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   616,   434,     0,   435,   436,    37,
     437,   438,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,   619,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,    39,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   620,  1040,     0,   474,   475,   476,   477,
     478,   479,   480,     0,     0,   481,     0,    43,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,    44,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,  1273,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,  1274,   119,   120,   121,     0,     0,     0,  1275,     0,
    1008,     0,     0,  1276,   123,   124,     0,   125,   126,   127,
    1277,   129,   130,   131,   132,  1009,  1278,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
    1279,     0,  1280,   155,   156,   157,   158,   159,  1281,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1282,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,  1283,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,  1284,     0,  1285,
     227,   228,  1286,  1287,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1288,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1289,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,  1290,  1291,
     270,  1292,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1293,   280,  1294,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1295,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,  1296,  1029,   312,   313,   314,   315,  1030,
     316,   317,  1297,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,  1298,   335,  1299,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,  1300,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1301,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,  1302,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1303,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1304,   432,   616,   434,     0,   435,   436,     0,
     437,  1305,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,  1306,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,  1307,   474,  1308,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,  1309,     0,     0,     0,
    1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1008,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1009,   134,  1010,  1011,  1476,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,  1015,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,   225,  1477,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,  1478,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1027,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,   310,  1029,   312,   313,   314,   315,  1030,
     316,   317,   318,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   616,   434,     0,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,  1479,   447,   448,   617,   450,   618,  1039,   452,
     453,   619,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,     0,   474,   475,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,  1273,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1275,     0,
    1008,     0,     0,  1276,   123,   124,     0,   125,   126,   127,
    1277,   129,   130,   131,   132,  1009,  1278,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
    1279,     0,  1280,   155,   156,   157,   158,   159,  1281,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1282,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,  1284,     0,  1285,
     227,   228,  1286,  1287,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1288,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1289,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,  1290,  1291,
     270,  1292,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1293,   280,  1294,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1295,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,  1296,  1029,   312,   313,   314,   315,  1030,
     316,   317,  1297,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,  1298,   335,  1299,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,  1300,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1301,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,  1302,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1303,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1304,   432,   616,   434,     0,   435,   436,     0,
     437,  1305,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,  1306,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,  2220,   474,  1308,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,  1273,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1275,     0,
    1008,     0,     0,  1276,   123,   124,     0,   125,   126,   127,
    1277,   129,   130,   131,   132,  1009,  1278,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
    1279,     0,  1280,   155,   156,   157,   158,   159,  1281,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1282,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,  1284,     0,  1285,
     227,   228,  1286,  1287,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1288,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1289,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,  1290,  1291,
     270,  1292,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1293,   280,  1294,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1295,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,  1296,  1029,   312,   313,   314,   315,  1030,
     316,   317,  1297,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,  1298,   335,  1299,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,  1300,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1301,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,  1302,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1303,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1304,   432,   616,   434,     0,   435,   436,     0,
     437,  1305,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,  1306,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,     0,   474,  1308,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,  2270,     0,     0,     0,
    1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118, -1079,   119,   120,   121,     0,     0,     0,     0, -1079,
    1008,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1009,   134,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,  1015,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,   225,     0,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1027,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,   310,  1029,   312,   313,   314,   315,  1030,
     316,   317,   318,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1036,   418, -1079,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   616,   434,     0,   435,   436,     0,
     437,   438,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,   619,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,     0,   474,   475,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,  1273,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1275,     0,
    1008,     0,     0,  1276,   123,   124,     0,   125,   126,   127,
    1277,   129,   130,   131,   132,  1009,  1278,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
    1279,     0,  1280,   155,   156,   157,   158,   159,  1281,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1282,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,  1284,     0,  1285,
     227,   228,  1286,  1287,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1288,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1289,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,  1290,  1291,
     270,  1292,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1293,   280,  1294,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1295,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,  1296,  1029,   312,   313,   314,   315,  1030,
     316,   317,  1297,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,  1298,   335,  1299,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,  1300,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1301,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,  1302,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1303,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1304,   432,   616,   434,     0,   435,   436,     0,
     437,  1305,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,  1306,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,     0,   474,  1308,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,  2984,     0,     0,     0,
    1047,  1048,  1049,  1050,  1273,  1002,   636,  1003,  1004,  1005,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,  1275,     0,
    1008,     0,     0,  1276,   123,   124,     0,   125,   126,   127,
    1277,   129,   130,   131,   132,  1009,  1278,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
    1279,     0,  1280,   155,   156,   157,   158,   159,  1281,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
    1282,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,  1018,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,  1284,     0,  1285,
     227,   228,  1286,  1287,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
    1288,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,  1289,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,  1290,  1291,
     270,  1292,   272,   273,   274,   275,   276,   277,     0,     0,
     278,  1293,   280,  1294,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1295,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,  1296,  1029,   312,   313,   314,   315,  1030,
     316,   317,  1297,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,  1033,   329,   330,     0,
       0,   331,   332,   333,  1298,   335,  1299,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   614,  1300,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,  1301,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,  1302,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,  1303,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,  1304,   432,   616,   434,     0,   435,   436,     0,
     437,  1305,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,  1306,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,  1040,     0,   474,  1308,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,  1041,
       0,     0,     0,     0,     0,     0,  1042,  1043,  1044,     0,
       0,     0,     0,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,     0,
    1006,  1007,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
    1008,     0,     0,   122,   123,   124,     0,   125,   126,   127,
     128,   129,   130,   131,   132,  1009,   134,  1010,  1011,     0,
     137,   138,   139,   140,   141,   142,  1012,   606,   143,   144,
    1013,  1014,   147,     0,   148,   149,   150,   151,   607,     0,
     608,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,  1016,  1017,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   773,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,  1019,
     212,   213,   214,   215,   216,   609,  1020,   218,     0,   219,
     220,  1021,   222,     0,   223,     0,   224,   225,    21,   226,
     227,   228,   229,   230,   231,     0,   232,     0,  1022,  1023,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,   257,   258,   259,   260,   261,
     262,   263,  1024,  1025,     0,  1026,     0,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,     0,     0,
     278,   279,   280,   281,     0,   282,   283,   284,   285,   286,
     287,   288,   289,  1027,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,  1028,   310,  1029,   312,   313,   314,   315,     0,
     316,   317,   318,   319,  1031,   611,   321,  1032,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,   334,   335,   336,   613,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,    25,    26,
      27,     0,   348,   349,   614,   351,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,  1034,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,   387,   388,   389,   390,  1035,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    32,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,   414,   415,   416,  1036,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   616,   434,     0,   435,   436,    37,
     437,   438,   439,   440,   441,   442,   443,     0,   444,  1037,
    1038,     0,     0,   447,   448,   617,   450,   618,  1039,   452,
     453,   619,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,    39,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   620,  1040,     0,   474,   475,   476,   477,
     478,   479,   480,     0,     0,   481,     0,    43,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
       0,    44,     0,     0,     0,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,  1045,     0,  1046,     0,     0,     0,     0,
    1047,  1048,  1049,  1050,   111,   112,   113,   114,   115,   116,
     117,   118,  1653,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1668,   636,  1003,  1004,
    1005,  1669,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,  1670,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,  1477,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,  2000,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
    2612,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,  2720,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,  2934,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,  2935,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  2936,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,  2937,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  2938,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
    3076,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
    3213,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1673,  1674,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  2132,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  2214,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  2419,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  2982,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,  2935,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  2936,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,  2937,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  2938,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,  3387,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,  3388,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,  3389,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,  3388,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
    1030,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,  3389,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
    1041,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
       0,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,     0,     0,     0,     0,     0,  1463,  1464,     0,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131, -1987,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,  1015,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,  3388,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,  1018,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229, -1987,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243, -1987,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,     0,
       0,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280, -1987,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
       0,   316,   317,     0,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413, -1987,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,  3389,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
   -1987,     0,     0,     0,     0,     0,     0,  1042,  1043,  1044,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
       0,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
       0,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    2118,  2119,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,     0,     0,     0,     0,     0,  2120,  2121,     0,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
    1005,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
       0,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,  1033,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,     0,     0,     0,     0,     0,  1463,  1464,     0,
       0,     0,     0,     0,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   110,  1002,   636,  1003,  1004,
       0,  1006,  1007,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,  1008,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,  1009,   134,  1010,  1011,
       0,   137,   138,   139,   140,   141,   142,  1012,   606,   143,
     144,  1013,  1014,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,  1016,  1017,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
    1019,   212,   213,   214,   215,   216,   609,  1020,   218,     0,
     219,   220,  1021,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,  1022,
    1023,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,  1024,  1025,     0,  1026,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,  1027,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,  1028,   310,  1029,   312,   313,   314,   315,
       0,   316,   317,   318,   319,  1031,   611,   321,  1032,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,  1034,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
    1035,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,  1036,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
    1037,  1038,     0,     0,   447,   448,   617,   450,   618,  1039,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,  1040,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
       0,     0,     0,     0,     0,     0,   110,  1002,   636,  1003,
    1004,  1005,  1006,  1007,  1045,     0,  1046,     0,     0,     0,
       0,  1047,  1048,  1049,  1050,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,  1008,     0,     0,   122,   123,   124,     0,   125,
     126,   127,   128,   129,   130,   131,     0,  1009,   134,  1010,
    1011,     0,   137,   138,   139,   140,   141,   142,  1012,   606,
     143,   144,  1013,  1014,   147,     0,   148,   149,   150,   151,
     607,     0,   608,     0,  1015,   155,   156,   157,   158,   159,
     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,  1016,  1017,   183,  1018,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   773,   199,   200,     0,   201,
     202,   203,     0,   204,     0,   206,     0,   207,   208,   209,
     210,  1019,   212,   213,   214,   215,   216,   609,  1020,   218,
       0,   219,   220,  1021,   222,     0,   223,     0,   224,   225,
       0,   226,   227,   228,   229,     0,   231,     0,   232,     0,
    1022,  1023,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   257,   258,   259,
     260,   261,   262,   263,  1024,  1025,     0,  1026,     0,   267,
       0,     0,   270,   271,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   279,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,  1027,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,  1028,   310,  1029,   312,   313,   314,
     315,     0,   316,   317,     0,   319,  1031,   611,   321,  1032,
     323,   324,   325,     0,   326,   327,     0,     0,  1033,   329,
     330,     0,     0,   331,   332,   333,   334,   335,   336,   613,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   614,   351,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,  1034,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   387,   388,   389,
     390,  1035,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   415,   416,  1036,
     418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   616,   434,     0,   435,
     436,     0,   437,   438,   439,   440,   441,   442,   443,     0,
     444,  1037,  1038,     0,     0,   447,   448,   617,   450,   618,
    1039,   452,   453,   619,   455,   456,   457,   458,   459,     0,
       0,   460,   461,   462,     0,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,  1040,     0,   474,   475,
     476,   477,   478,   479,   480,     0,     0,   481,     0,     0,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,     0,     0,     0,     0,     0,  1042,  1043,
    1044,     0,   844,  1422,   636,  1045,     0,  1046,  1006,     0,
       0,     0,  1047,  1048,  1049,  1050,     0,     0,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,   845,     0,     0,     0,
       0,   846,   123,   124,     0,   125,   126,   127,   847,   129,
     130,   131,   848,   849,   850,   851,   852,     0,   137,   138,
     139,   140,   141,   142,     0,     0,   143,   144,   853,   854,
     147,     0,   148,   149,   150,   151,   855,     0,   856,     0,
     857,   155,   156,   157,   158,   159,   858,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   859,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   860,
     861,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   862,   212,   213,
     214,   215,   216,   863,  1423,   218,     0,   219,   220,   864,
     222,     0,   223,     0,   224,   865,     0,   866,   227,   228,
     867,   868,   231,     0,   232,     0,   869,   870,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   871,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   872,   873,   259,   260,   261,   262,   263,
     874,   875,     0,   876,     0,   267,   877,   878,   270,   879,
     272,   273,   274,   275,   276,   277,     0,     0,   278,   880,
     280,   881,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   882,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     883,   884,   885,   312,   313,   314,   886,     0,   316,   317,
     887,   319,     0,   888,   321,   889,   323,   324,   325,     0,
     326,   327,  1424,     0,   328,   329,   330,     0,     0,   331,
     332,   890,   891,   335,   892,   893,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,     0,     0,     0,     0,
     348,   349,   894,   895,   352,   353,   896,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   897,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   898,   388,   389,   390,   899,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
       0,   900,   404,   405,   406,   407,   408,   409,   901,   411,
     412,   413,   902,   415,   416,   903,   418,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     904,   432,   905,   434,     0,   435,   436,     0,   437,   906,
     439,   440,   441,   442,   443,     0,   444,   907,   908,     0,
       0,   447,   448,   909,   450,   910,  1425,   452,   453,   911,
     455,   456,   457,   458,   459,     0,     0,   460,   461,   462,
       0,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,  1261,   913,     0,   474,   914,   476,   477,   478,   479,
     480,     0,     0,   481,     0,     0,   482,   483,   484,   485,
     486,   487,   915,   916,   917,   918,   919,   920,   921,   922,
     923,   924,   925,   499,   500,   501,   502,     0,     0,     0,
       0,     0,     0,     0,  1426,  1427,  2309,     0,   110,  1002,
     636,  1003,  1004,  2310,  1006,     0,     0,     0,     0,     0,
       0,  1050,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,  1008,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,  1009,
     134,  1010,  1011,     0,   137,   138,   139,   140,   141,   142,
    1012,     0,   143,   144,  1013,  1014,   147,     0,   148,   149,
     150,   151,   152,     0,   153,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,  1016,  1017,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   773,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,  1019,   212,   213,   214,   215,   216,   217,
    1020,   218,     0,   219,   220,  1021,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,  2955,  1022,  1023,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,  1024,  1025,     0,  1026,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,  1028,   310,  1029,   312,
     313,   314,   315,     0,   316,   317,   318,   319,  1031,   320,
     321,  1032,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,  1034,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,  1036,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,     0,   444,  1037,  1038,     0,     0,   447,   448,   449,
     450,   451,  1039,   452,   453,   454,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,     0,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,  1040,     0,
     474,   475,   476,   477,   478,   479,   480,     0,     0,   481,
       0,     0,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,     0,     0,     0,   110,  1002,   636,
    1003,  1004,     0,  1006,     0,     0,     0,  1045,     0,  2669,
       0,     0,     0,     0,  1047,  1048,   111,   112,   113,   114,
     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,
       0,     0,     0,  1008,     0,     0,   122,   123,   124,     0,
     125,   126,   127,   128,   129,   130,   131,   132,  1009,   134,
    1010,  1011,     0,   137,   138,   139,   140,   141,   142,  1012,
       0,   143,   144,  1013,  1014,   147,     0,   148,   149,   150,
     151,   152,     0,   153,     0,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,
     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,
     177,   178,   179,   180,  1016,  1017,   183,     0,   184,     0,
     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,
     194,   195,     0,     0,   196,   197,   773,   199,   200,     0,
     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,
     209,   210,  1019,   212,   213,   214,   215,   216,   217,  1020,
     218,     0,   219,   220,  1021,   222,     0,   223,     0,   224,
     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,
       0,  1022,  1023,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,     0,   249,
     250,   251,   252,   253,   254,   255,     0,   256,   257,   258,
     259,   260,   261,   262,   263,  1024,  1025,     0,  1026,     0,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,     0,     0,   278,   279,   280,   281,     0,   282,   283,
     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,  1028,   310,  1029,   312,   313,
     314,   315,     0,   316,   317,   318,   319,  1031,   320,   321,
    1032,   323,   324,   325,     0,   326,   327,     0,     0,   328,
     329,   330,     0,     0,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,     0,     0,     0,     0,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,     0,   358,   359,   360,   361,
     362,   363,     0,   364,   365,   366,  1034,   368,   369,   370,
     371,     0,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,     0,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,     0,     0,   404,   405,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,   416,
    1036,   418,     0,   419,   420,   421,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,     0,
     435,   436,     0,   437,   438,   439,   440,   441,   442,   443,
       0,   444,  1037,  1038,     0,     0,   447,   448,   449,   450,
     451,  1039,   452,   453,   454,   455,   456,   457,   458,   459,
       0,     0,   460,   461,   462,     0,   463,   464,   465,   466,
       0,   467,   468,   469,   470,   471,   472,  1040,     0,   474,
     475,   476,   477,   478,   479,   480,     0,     0,   481,     0,
       0,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,     0,     0,     0,     0,   510,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1045,     0,  2669,     0,
       0,     0,     0,  1047,  1048,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,   960,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,  -512,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
    -512,   219,   220,   221,   222,  -512,   223,     0,   224,     0,
       0,     0,   227,   228,   511,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,  -512,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,  -512,   282,   283,   284,
     285,   286,   287,   288,   289,   512,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,  -512,   326,   327,     0,     0,   328,   329,
     330,     0,  -512,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   513,   432,   433,   434,     0,   435,
     436,     0,   437,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,  -512,
       0,   460,   461,   462,     0,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,     0,   474,     0,
     476,   477,   478,   479,   480,     0,     0,   481,     0,     0,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   510,     0,   533,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1115,     0,
     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,
     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,
     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,
       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,
     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,
     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,
       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,
     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,
     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,
       0,   223,     0,   224,     0,     0,     0,   227,   228,   511,
       0,   231,     0,   232,     0,   233,   234,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,   245,   246,
     247,   248,     0,   249,   250,   251,   252,   253,   254,   255,
       0,   256,     0,   258,   259,   260,   261,   262,   263,   264,
     265,     0,   266,     0,   267,     0,     0,   270,     0,   272,
     273,   274,   275,   276,   277,     0,     0,   278,     0,   280,
       0,     0,   282,   283,   284,   285,   286,   287,   288,   289,
     512,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
       0,   311,   312,   313,   314,   315,     0,   316,   317,     0,
     319,     0,   320,   321,   322,   323,   324,   325,     0,   326,
     327,     0,     0,   328,   329,   330,     0,     0,   331,   332,
     333,     0,   335,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,     0,     0,     0,     0,   348,
     349,   350,     0,   352,   353,   354,   355,   356,   357,     0,
     358,   359,   360,   361,   362,   363,     0,   364,   365,   366,
     367,   368,   369,   370,   371,     0,   372,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,     0,
     385,   386,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,     0,
       0,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,     0,   415,   416,   417,   418,     0,   419,   420,   421,
     422,   423,   424,   425,   426,   427,   428,   429,   430,   513,
     432,   433,   434,     0,   435,   436,     0,   437,     0,   439,
     440,   441,   442,   443,     0,   444,   445,   446,     0,     0,
     447,   448,   449,   450,   451,     0,   452,   453,   454,   455,
     456,   457,   458,   459,     0,     0,   460,   461,   462,     0,
     463,   464,   465,   466,     0,   467,   468,   469,   470,   471,
     472,   473,     0,   474,     0,   476,   477,   478,   479,   480,
       0,     0,   481,     0,     0,   482,   483,   484,   485,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   844,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2394,  3131,     0,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     3,     4,     0,
     845,     0,     0,     0,     0,   846,   123,   124,     0,   125,
     126,   127,   847,   129,   130,   131,   848,   849,   850,   851,
     852,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   853,   854,   147,     0,   148,   149,   150,   151,
     855,     0,   856,     0,   857,   155,   156,   157,   158,   159,
     858,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,   859,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   860,   861,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   862,   212,   213,   214,   215,   216,   863,     0,   218,
       0,   219,   220,   864,   222,     0,   223,     0,   224,   865,
      21,   866,   227,   228,   867,   868,   231,     0,   232,     0,
     869,   870,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,   871,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,   872,   873,   259,
     260,   261,   262,   263,   874,   875,     0,   876,     0,   267,
     877,   878,   270,   879,   272,   273,   274,   275,   276,   277,
       0,     0,   278,   880,   280,   881,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   882,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   883,   884,   885,   312,   313,   314,
     886,     0,   316,   317,   887,   319,     0,   888,   321,   889,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   890,   891,   335,   892,   893,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
      25,    26,    27,     0,   348,   349,   894,   895,   352,   353,
     896,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   897,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,   898,   388,   389,
     390,   899,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,    32,   900,   404,   405,   406,   407,
     408,   409,   901,   411,   412,   413,   902,   415,   416,   903,
     418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   904,   432,   905,   434,     0,   435,
     436,    37,   437,   906,   439,   440,   441,   442,   443,     0,
     444,   907,   908,     0,     0,   447,   448,   909,   450,   910,
       0,   452,   453,   911,   455,   456,   457,   458,   459,     0,
       0,   460,   461,   462,    39,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   912,   913,     0,   474,   914,
     476,   477,   478,   479,   480,     0,     0,   481,     0,    43,
     482,   483,   484,   485,   486,   487,   915,   916,   917,   918,
     919,   920,   921,   922,   923,   924,   925,   499,   500,   501,
     502,     0,   110,    44,   533,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,
     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,
       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,
     130,   131,   132,   133,   134,   135,   136,     0,   137,   138,
     139,   140,   141,   142,     0,   606,   143,   144,   145,   146,
     147,     0,   148,   149,   150,   151,   607,     0,   608,     0,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,
     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,
     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,
     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,
     214,   215,   216,   609,     0,   218,     0,   219,   220,   221,
     222,     0,   223,     0,   224,   225,    21,   226,   227,   228,
     229,   230,   231,     0,   232,     0,   233,   234,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,     0,   249,   250,   251,   252,   253,   254,
     255,     0,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,     0,   266,     0,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   610,     0,   278,   279,
     280,   281,     0,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,     0,   316,   317,
     318,   319,     0,   611,   321,   322,   323,   324,   325,     0,
     326,   327,     0,   612,   328,   329,   330,     0,     0,   331,
     332,   333,   334,   335,   336,   613,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,    25,    26,    27,     0,
     348,   349,   614,   351,   352,   353,   354,   355,   356,   357,
       0,   358,   359,   360,   361,   362,   363,     0,   364,   365,
     366,   367,   368,   369,   370,   371,     0,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
       0,   385,   386,   387,   388,   389,   390,   391,   615,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      32,     0,   404,   405,   406,   407,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,     0,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   616,   434,     0,   435,   436,    37,   437,   438,
     439,   440,   441,   442,   443,     0,   444,   445,   446,     0,
       0,   447,   448,   617,   450,   618,     0,   452,   453,   619,
     455,   456,   457,   458,   459,     0,     0,   460,   461,   462,
      39,   463,   464,   465,   466,     0,   467,   468,   469,   470,
     471,   620,   473,     0,   474,   475,   476,   477,   478,   479,
     480,     0,     0,   481,     0,    43,   482,   483,   484,   485,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,     0,   110,    44,
     533,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   621,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   606,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   607,     0,   608,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   609,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   610,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   611,
     321,   322,   323,   324,   325,     0,   326,   327,     0,   612,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   613,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   614,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   615,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   616,   434,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   617,
     450,   618,     0,   452,   453,   619,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,     0,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   620,   473,     0,
     474,   475,   476,   477,   478,   479,   480,     0,     0,   481,
       0,     0,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   110,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   621,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,   606,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   607,     0,   608,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   609,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,   225,     0,   226,   227,
     228,   229,   230,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     279,   280,   281,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,     0,   316,
     317,   318,   319,     0,   611,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,   334,   335,   336,   613,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   614,   351,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   387,   388,   389,   390,   391,   615,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   616,   434,     0,   435,   436,     0,   437,
     438,   439,   440,   441,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   617,   450,   618,     0,   452,   453,
     619,   455,   456,   457,   458,   459,     0,     0,   460,   461,
     462,     0,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,     0,   474,   475,   476,   477,   478,
     479,   480,     0,     0,   481,     0,     0,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   110,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,   122,   123,   124,
       0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,   606,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   607,     0,   608,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   609,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   279,   280,   281,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,     0,   316,   317,   318,   319,     0,   611,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,   334,   335,
     336,   613,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   614,   351,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   616,   434,
       0,   435,   436,     0,   437,   438,   439,   440,   441,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   617,
     450,   618,     0,   452,   453,   619,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,     0,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,     0,
     474,   475,   476,   477,   478,   479,   480,     0,     0,   481,
       0,     0,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   510,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3216,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
     706,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,    21,     0,   227,
     228,   511,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   512,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,    25,    26,    27,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,    32,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   513,   432,   433,   434,     0,   435,   436,    37,   437,
       0,   439,   440,   441,   442,   443,     0,   444,   707,   446,
       0,     0,   708,   448,   449,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,     0,     0,   460,   461,
     462,    39,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   620,   473,     0,   474,     0,   476,   477,   478,
     479,   480,     0,     0,   481,     0,    43,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   510,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,    21,     0,   227,   228,   511,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   512,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,    25,    26,    27,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    32,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   513,   432,   433,   434,
       0,   435,   436,    37,   437,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,    39,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   620,   473,     0,
     474,     0,   476,   477,   478,   479,   480,     0,     0,   481,
       0,    43,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,     0,   510,    44,   533,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    45,
       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   511,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   512,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   513,   432,   433,   434,     0,   435,   436,     0,
     437,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,     0,   474,     0,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   510,
       0,   533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   945,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   511,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   512,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   513,   432,   433,
     434,     0,   435,   436,     0,   437,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,     0,     0,   460,   461,   462,     0,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
       0,   474,     0,   476,   477,   478,   479,   480,     0,     0,
     481,     0,     0,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   510,     0,   533,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1515,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   511,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   512,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   513,   432,   433,   434,     0,   435,   436,     0,
     437,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,     0,   474,     0,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   510,
       0,   533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2144,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   511,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   512,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   513,   432,   433,
     434,     0,   435,   436,     0,   437,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,     0,     0,   460,   461,   462,     0,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
       0,   474,     0,   476,   477,   478,   479,   480,     0,     0,
     481,     0,     0,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   510,     0,   533,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2394,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   511,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   512,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   513,   432,   433,   434,     0,   435,   436,     0,
     437,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,     0,   474,     0,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   510,
       0,   533,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2502,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   511,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   512,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   513,   432,   433,
     434,     0,   435,   436,     0,   437,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,     0,     0,   460,   461,   462,     0,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
       0,   474,     0,   476,   477,   478,   479,   480,     0,     0,
     481,     0,     0,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3125,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   511,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   512,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   513,   432,   433,   434,     0,   435,   436,     0,
     437,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,     0,   474,     0,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   510,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2002,     0,     0,   111,   112,
     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,
     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,
     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,
     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,
     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,
     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,
     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,
     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,
     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,
     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,
     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,
     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,
       0,   224,     0,     0,     0,   227,   228,   511,     0,   231,
       0,   232,     0,   233,   234,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,   245,   246,   247,   248,
       0,   249,   250,   251,   252,   253,   254,   255,     0,   256,
       0,   258,   259,   260,   261,   262,   263,   264,   265,     0,
     266,     0,   267,     0,     0,   270,     0,   272,   273,   274,
     275,   276,   277,     0,     0,   278,     0,   280,     0,     0,
     282,   283,   284,   285,   286,   287,   288,   289,   512,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,     0,   311,
     312,   313,   314,   315,     0,   316,   317,     0,   319,     0,
     320,   321,   322,   323,   324,   325,     0,   326,   327,     0,
       0,   328,   329,   330,     0,     0,   331,   332,   333,     0,
     335,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,     0,     0,     0,     0,   348,   349,   350,
       0,   352,   353,   354,   355,   356,   357,     0,   358,   359,
     360,   361,   362,   363,     0,   364,   365,   366,   367,   368,
     369,   370,   371,     0,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,     0,   385,   386,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,     0,     0,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,     0,
     415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   513,   432,   433,
     434,     0,   435,   436,     0,   437,     0,   439,   440,   441,
     442,   443,     0,   444,   445,   446,     0,     0,   447,   448,
     449,   450,   451,     0,   452,   453,   454,   455,   456,   457,
     458,   459,     0,     0,   460,   461,   462,     0,   463,   464,
     465,   466,     0,   467,   468,   469,   470,   471,   472,   473,
       0,   474,     0,   476,   477,   478,   479,   480,     0,     0,
     481,     0,     0,   482,   483,   484,   485,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   510,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2104,     0,     0,   111,   112,   113,   114,   115,   116,   117,
     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,
       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,
     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,
     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,
       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,
     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,
       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,
     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,
       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,
       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,
     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,
     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,
     227,   228,   511,     0,   231,     0,   232,     0,   233,   234,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,   245,   246,   247,   248,     0,   249,   250,   251,   252,
     253,   254,   255,     0,   256,     0,   258,   259,   260,   261,
     262,   263,   264,   265,     0,   266,     0,   267,     0,     0,
     270,     0,   272,   273,   274,   275,   276,   277,     0,     0,
     278,     0,   280,     0,     0,   282,   283,   284,   285,   286,
     287,   288,   289,   512,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,     0,   311,   312,   313,   314,   315,     0,
     316,   317,     0,   319,     0,   320,   321,   322,   323,   324,
     325,     0,   326,   327,     0,     0,   328,   329,   330,     0,
       0,   331,   332,   333,     0,   335,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,     0,     0,
       0,     0,   348,   349,   350,     0,   352,   353,   354,   355,
     356,   357,     0,   358,   359,   360,   361,   362,   363,     0,
     364,   365,   366,   367,   368,   369,   370,   371,     0,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,     0,   385,   386,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,     0,     0,   404,   405,   406,   407,   408,   409,
     410,   411,   412,   413,     0,   415,   416,   417,   418,     0,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   513,   432,   433,   434,     0,   435,   436,     0,
     437,     0,   439,   440,   441,   442,   443,     0,   444,   445,
     446,     0,     0,   447,   448,   449,   450,   451,     0,   452,
     453,   454,   455,   456,   457,   458,   459,     0,     0,   460,
     461,   462,     0,   463,   464,   465,   466,     0,   467,   468,
     469,   470,   471,   472,   473,     0,   474,     0,   476,   477,
     478,   479,   480,     0,     0,   481,     0,     0,   482,   483,
     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,     0,
    2815,  1422,   636,     0,     0,  1982,  1006,     0,     0,     0,
       0,     0,  1983,  1984,     0,  2989,  1985,  1986,  1987,   111,
     112,   113,   114,   115,   116,   117,   118,  1194,   119,   120,
     121,  1195,  1196,  1197,  2816,  1198,  1199,  1200,  1201,  2817,
     123,   124,  1202,   125,   126,   127,  2818,   129,   130,   131,
       0,   761,  2819,   763,   764,  1203,   137,   138,   139,   140,
     141,   142,  1204,  1205,   143,   144,   765,   766,   147,  1206,
     148,   149,   150,   151,     0,  1207,  2820,  1208,  2821,   155,
     156,   157,   158,   159,  2822,   161,   162,   163,  1209,   164,
     165,   166,   167,   168,   169,  1210,  2823,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
    1211,   184,  1212,   185,   186,   187,   188,   189,   190,  1213,
     191,   192,   193,   194,   195,  1214,  1215,   196,   197,   773,
     199,   200,  1216,   201,   202,   203,  1217,   204,   205,   206,
    1218,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,  1219,   218,  1220,   219,   220,   774,   222,  1221,
     223,  1222,   224,  2824,  1223,  2825,   227,   228,  2826,  2827,
     231,  1224,   232,  1225,     0,     0,   235,   236,  1226,   237,
     238,   239,   240,   241,   242,   243,  2828,   245,   246,   247,
     248,  1227,   249,   250,   251,   252,   253,   254,   255,  1228,
     256,  2829,     0,   259,   260,   261,   262,   263,   781,   782,
    1229,   783,  1230,   267,  2830,  2831,   270,  2832,   272,   273,
     274,   275,   276,   277,  1231,  1232,   278,  2833,   280,  2834,
    1233,   282,   283,   284,   285,   286,   287,   288,   289,  2835,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,  2836,
     792,   312,   313,   314,  2837,  1234,   316,   317,  2838,   319,
    1235,     0,   321,   794,   323,   324,   325,  1236,   326,   327,
    1237,  1238,  2839,   329,   330,  1239,  1240,   331,   332,     0,
    2840,   335,  2841,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,  1241,  1242,  1243,  1244,   348,   349,
       0,  2842,   352,   353,     0,   355,   356,   357,  1245,   358,
     359,   360,   361,   362,   363,  1246,   364,   365,   366,   798,
     368,   369,   370,   371,  1247,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,  1248,   385,
     386,  2843,   388,   389,   390,   800,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,  1249,  2844,
     404,   405,   406,   407,   408,   409,  2845,   411,   412,   413,
    2846,   415,   416,   804,   418,  1250,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  2847,   432,
       0,   434,  1251,   435,   436,  1252,   437,  2848,   439,   440,
     441,   442,   443,  1253,   444,   807,   808,  1254,  1255,   447,
     448,     0,   450,     0,  1256,   452,   453,  2849,   455,   456,
     457,   458,   459,  2850,  1258,   460,   461,   462,  1259,   463,
     464,   465,   466,  1260,   467,   468,   469,   470,   471,     0,
     811,  1262,   474,  2851,   476,   477,   478,   479,   480,  1263,
    1264,   481,  1265,  1266,   482,   483,   484,   485,   486,   487,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,   510,     0,  1988,  1989,
    1990,  1982,  2852,  2853,  1993,  1994,  1995,  1996,  1983,  1984,
       0,     0,  1985,  1986,  1987,   111,   112,   113,   114,   115,
     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,
     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,
     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,
     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,
     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,
       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,
     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,
     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,
     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,
     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,
     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,
       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,
       0,     0,   227,   228,   511,     0,   231,     0,   232,     0,
     233,   234,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,   245,   246,   247,   248,     0,   249,   250,
     251,   252,   253,   254,   255,     0,   256,     0,   258,   259,
     260,   261,   262,   263,   264,   265,     0,   266,     0,   267,
       0,     0,   270,     0,   272,   273,   274,   275,   276,   277,
       0,     0,   278,     0,   280,     0,     0,   282,   283,   284,
     285,   286,   287,   288,   289,   512,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,     0,   311,   312,   313,   314,
     315,     0,   316,   317,     0,   319,     0,   320,   321,   322,
     323,   324,   325,     0,   326,   327,     0,     0,   328,   329,
     330,     0,     0,   331,   332,   333,     0,   335,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
       0,     0,     0,     0,   348,   349,   350,     0,   352,   353,
     354,   355,   356,   357,     0,   358,   359,   360,   361,   362,
     363,     0,   364,   365,   366,   367,   368,   369,   370,   371,
       0,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,     0,   385,   386,     0,   388,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,     0,     0,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,     0,   415,   416,   417,
     418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   513,   432,   433,   434,     0,   435,
     436,     0,   437,     0,   439,   440,   441,   442,   443,     0,
     444,   445,   446,     0,     0,   447,   448,   449,   450,   451,
       0,   452,   453,   454,   455,   456,   457,   458,   459,     0,
       0,   460,   461,   462,     0,   463,   464,   465,   466,     0,
     467,   468,   469,   470,   471,   472,   473,     0,   474,     0,
     476,   477,   478,   479,   480,     0,     0,   481,     0,     0,
     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,     0,     0,     0,  1988,  1989,  1990,     0,  1991,  1992,
    1993,  1994,  1995,  1996,  1572,     0,     0,  1573,     0,     0,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,  1586,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,     0,
       0,     0,     0,     0,     0,  1587,     0,     0,     0,     0,
    1588,     0,  1581,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,     0,     0,     0,     0,  1586,  1584,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1587,     0,     0,  1591,     0,
    1588,     0,     0,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1586,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,  1586,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,  1586,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,  1592,     0,     0,  1593,  1591,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,  1592,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,  1596,
       0,  2428,     0,     0,     0,     0,     0,     0,     0,  1572,
       0,     0,  1573,     0,     0,     0,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,  1581,     0,  1596,
       0,  2642,     0,     0,     0,     0,     0,  1583,     0,  1572,
       0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,  1581,     0,  1585,
       0,  2694,     0,     0,     0,     0,     0,  1583,     0,  1572,
       0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,  1581,     0,  1585,
       0,  2761,     0,     0,     0,     0,     0,  1583,     0,  1572,
       0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,  1581,     0,  1585,
       0,  2981,     0,     0,     0,     0,     0,  1583,     0,  1572,
       0,     0,  1573,  1586,  1584,     0,  1574,  1575,  1576,  1577,
    1578,  1579,  1580,     0,     0,     0,     0,     0,     0,     0,
    1587,     0,     0,     0,     0,  1588,     0,  1581,     0,  1585,
       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,
       0,     0,     0,  1586,  1584,     0,     0,     0,  1589,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1587,     0,     0,  1591,     0,  1588,     0,     0,     0,  1585,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1586,     0,     0,     0,     0,  1589,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
    1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,  1586,     0,     0,     0,     0,  1589,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
    1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,  1586,     0,     0,     0,     0,  1589,  1590,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1592,
    1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,     0,     0,  1589,  1590,
       0,     0,     0,     0,  1596,     0,     0,     0,     0,  1592,
       0,     0,  1593,  1591,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1596,     0,     0,     0,     0,  1592,
       0,     0,  1593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1594,     0,     0,  1595,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1596,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,     0,     0,  1596,     0,  2988,     0,     0,     0,
       0,     0,     0,     0,  1572,     0,     0,  1573,     0,     0,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,  1581,     0,  1596,     0,  3144,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,  1581,     0,  1585,     0,  3166,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,  1581,     0,  1585,     0,  3267,     0,     0,     0,
       0,     0,  1583,     0,  1572,     0,     0,  1573,     0,  1584,
       0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,  1597,
       0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,
    1605,  1606,  1581,     0,  1585,     0,  3324,     0,     0,     0,
       0,     0,  1583,     0,     0,     0,     0,     0,  1586,  1584,
       0,  1572,     0,     0,  1573,     0,     0,     0,  1574,  1575,
    1576,  1577,  1578,  1579,  1580,  1587,     0,     0,     0,     0,
    1588,     0,     0,     0,  1585,     0,     0,     0,     0,  1581,
       0,     0,     0,     0,     0,     0,     0,     0,  1586,  1583,
       0,     0,     0,  1589,  1590,     0,  1584,     0,     0,     0,
       0,     0,     0,     0,     0,  1587,     0,     0,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1585,     0,     0,     0,     0,     0,     0,  1586,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,  1586,     0,
       0,     0,     0,  1589,  1590,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,  1589,  1590,  1586,     0,     0,     0,     0,
       0,     0,     0,     0,  1592,     0,     0,  1593,  1591,     0,
       0,     0,  1587,     0,     0,     0,     0,  1588,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
    1589,  1590,     0,     0,  1592,     0,     0,  1593,     0,     0,
       0,     0,     0,     0,     0,  1591,     0,     0,     0,     0,
       0,  1594,     0,     0,  1595,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1592,     0,     0,  1593,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1594,     0,
       0,  1595,     0,     0,     0,     0,     0,     0,     0,  1596,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,  1596,
       0,  3346,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,  1757,
       0,     0,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,  2715,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1597,     0,     0,  1598,  1599,  1600,
       0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,  3134,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1193,     0,
       0,  1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,
    1603,  1604,  1605,  1606,     0,     0,  3308,   111,   112,   113,
     114,   115,   116,   117,   118,  1194,   119,   120,   121,  1195,
    1196,  1197,   845,  1198,  1199,  1200,  1201,   846,   123,   124,
    1202,   125,   126,   127,   847,   129,   130,   131,   848,   849,
     850,   851,   852,  1203,   137,   138,   139,   140,   141,   142,
    1204,  1205,   143,   144,   853,   854,   147,  1206,   148,   149,
     150,   151,   855,  1207,   856,  1208,   857,   155,   156,   157,
     158,   159,   858,   161,   162,   163,  1209,   164,   165,   166,
     167,   168,   169,  1210,   859,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   860,   861,   183,  1211,   184,
    1212,   185,   186,   187,   188,   189,   190,  1213,   191,   192,
     193,   194,   195,  1214,  1215,   196,   197,   198,   199,   200,
    1216,   201,   202,   203,  1217,   204,   205,   206,  1218,   207,
     208,   209,   210,   862,   212,   213,   214,   215,   216,   863,
    1219,   218,  1220,   219,   220,   864,   222,  1221,   223,  1222,
     224,   865,  1223,   866,   227,   228,   867,   868,   231,  1224,
     232,  1225,   869,   870,   235,   236,  1226,   237,   238,   239,
     240,   241,   242,   243,   871,   245,   246,   247,   248,  1227,
     249,   250,   251,   252,   253,   254,   255,  1228,   256,   872,
     873,   259,   260,   261,   262,   263,   874,   875,  1229,   876,
    1230,   267,   877,   878,   270,   879,   272,   273,   274,   275,
     276,   277,  1231,  1232,   278,   880,   280,   881,  1233,   282,
     283,   284,   285,   286,   287,   288,   289,   882,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   883,   884,   885,   312,
     313,   314,   886,  1234,   316,   317,   887,   319,  1235,   888,
     321,   889,   323,   324,   325,  1236,   326,   327,  1237,  1238,
     328,   329,   330,  1239,  1240,   331,   332,   890,   891,   335,
     892,   893,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,  1241,  1242,  1243,  1244,   348,   349,   894,   895,
     352,   353,   896,   355,   356,   357,  1245,   358,   359,   360,
     361,   362,   363,  1246,   364,   365,   366,   897,   368,   369,
     370,   371,  1247,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,  1248,   385,   386,   898,
     388,   389,   390,   899,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,  1249,   900,   404,   405,
     406,   407,   408,   409,   901,   411,   412,   413,   902,   415,
     416,   903,   418,  1250,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   904,   432,   905,   434,
    1251,   435,   436,  1252,   437,   906,   439,   440,   441,   442,
     443,  1253,   444,   907,   908,  1254,  1255,   447,   448,   909,
     450,   910,  1256,   452,   453,   911,   455,   456,   457,   458,
     459,  1257,  1258,   460,   461,   462,  1259,   463,   464,   465,
     466,  1260,   467,   468,   469,   470,   471,  1261,   913,  1262,
     474,   914,   476,   477,   478,   479,   480,  1263,  1264,   481,
    1265,  1266,   482,   483,   484,   485,   486,   487,   915,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   499,
     500,   501,   502,   510,     0,     0,     0,     0,     0,     0,
       0,     0,  2013,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,
     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,
     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,
       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,
     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,
     228,   511,     0,   231,     0,   232,     0,   233,   234,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,     0,   258,   259,   260,   261,   262,
     263,   264,   265,     0,   266,     0,   267,     0,     0,   270,
       0,   272,   273,   274,   275,   276,   277,     0,     0,   278,
       0,   280,     0,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   512,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,     0,   311,   312,   313,   314,   315,     0,   316,
     317,     0,   319,     0,   320,   321,   322,   323,   324,   325,
       0,   326,   327,     0,     0,   328,   329,   330,     0,     0,
     331,   332,   333,     0,   335,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   350,     0,   352,   353,   354,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   367,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,     0,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,     0,   415,   416,   417,   418,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   513,   432,   433,   434,     0,   435,   436,     0,   437,
       0,   439,   440,   441,   442,   443,     0,   444,   445,   446,
       0,     0,   447,   448,   449,   450,   451,     0,   452,   453,
     454,   455,   456,   457,   458,   459,     0,     0,   460,   461,
     462,     0,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,   472,   473,     0,   474,     0,   476,   477,   478,
     479,   480,     0,     0,   481,     0,     0,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   510,     0,
       0,     0,     0,     0,     0,     0,     0,  2635,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,
       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,
       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,
     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,
     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,
     224,     0,     0,     0,   227,   228,   511,     0,   231,     0,
     232,     0,   233,   234,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,     0,
     258,   259,   260,   261,   262,   263,   264,   265,     0,   266,
       0,   267,     0,     0,   270,     0,   272,   273,   274,   275,
     276,   277,     0,     0,   278,     0,   280,     0,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   512,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,     0,   311,   312,
     313,   314,   315,     0,   316,   317,     0,   319,     0,   320,
     321,   322,   323,   324,   325,     0,   326,   327,     0,     0,
     328,   329,   330,     0,     0,   331,   332,   333,     0,   335,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   350,     0,
     352,   353,   354,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   367,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,     0,   404,   405,
     406,   407,   408,   409,   410,   411,   412,   413,     0,   415,
     416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   513,   432,   433,   434,
       0,   435,   436,     0,   437,     0,   439,   440,   441,   442,
     443,     0,   444,   445,   446,     0,     0,   447,   448,   449,
     450,   451,     0,   452,   453,   454,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,     0,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,   472,   473,     0,
     474,     0,   476,   477,   478,   479,   480,     0,     0,   481,
       0,     0,   482,   483,   484,   485,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   844,  1422,   636,     0,     0,     0,  1006,
       0,     0,  2638,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,   845,     0,     0,
       0,     0,   846,   123,   124,     0,   125,   126,   127,   847,
     129,   130,   131,   848,   849,   850,   851,   852,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   853,
     854,   147,     0,   148,   149,   150,   151,   855,     0,   856,
       0,   857,   155,   156,   157,   158,   159,   858,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   859,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     860,   861,   183,  1629,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   862,   212,
     213,   214,   215,   216,   863,  1423,   218,     0,   219,   220,
     864,   222,     0,   223,     0,   224,   865,     0,   866,   227,
     228,   867,   868,   231,     0,   232,     0,   869,   870,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   871,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   872,   873,   259,   260,   261,   262,
     263,   874,   875,     0,   876,     0,   267,   877,   878,   270,
     879,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     880,   280,   881,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   882,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   883,   884,   885,   312,   313,   314,   886,     0,   316,
     317,   887,   319,     0,   888,   321,   889,   323,   324,   325,
       0,   326,   327,  1424,     0,   328,   329,   330,     0,     0,
     331,   332,   890,   891,   335,   892,   893,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   894,   895,   352,   353,   896,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   897,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   898,   388,   389,   390,   899,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   900,   404,   405,   406,   407,   408,   409,   901,
     411,   412,   413,   902,   415,   416,   903,   418,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   904,   432,   905,   434,     0,   435,   436,     0,   437,
     906,   439,   440,   441,   442,   443,     0,   444,   907,   908,
       0,     0,   447,   448,   909,   450,   910,  1425,   452,   453,
     911,   455,   456,   457,   458,   459,     0,     0,   460,   461,
     462,     0,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,  1261,   913,     0,   474,   914,   476,   477,   478,
     479,   480,     0,     0,   481,     0,     0,   482,   483,   484,
     485,   486,   487,   915,   916,   917,   918,   919,   920,   921,
     922,   923,   924,   925,   499,   500,   501,   502,   844,  1422,
     636,     0,     0,     0,  1006,  1426,  1427,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,
     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,
       0,     0,   845,     0,     0,     0,     0,   846,   123,   124,
       0,   125,   126,   127,   847,   129,   130,   131,   848,   849,
     850,   851,   852,     0,   137,   138,   139,   140,   141,   142,
       0,     0,   143,   144,   853,   854,   147,     0,   148,   149,
     150,   151,   855,     0,   856,     0,   857,   155,   156,   157,
     158,   159,   858,   161,   162,   163,     0,   164,   165,   166,
     167,   168,   169,     0,   859,   171,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   860,   861,   183,  1631,   184,
       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,
     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,
       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,
     208,   209,   210,   862,   212,   213,   214,   215,   216,   863,
    1423,   218,     0,   219,   220,   864,   222,     0,   223,     0,
     224,   865,     0,   866,   227,   228,   867,   868,   231,     0,
     232,     0,   869,   870,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,   871,   245,   246,   247,   248,     0,
     249,   250,   251,   252,   253,   254,   255,     0,   256,   872,
     873,   259,   260,   261,   262,   263,   874,   875,     0,   876,
       0,   267,   877,   878,   270,   879,   272,   273,   274,   275,
     276,   277,     0,     0,   278,   880,   280,   881,     0,   282,
     283,   284,   285,   286,   287,   288,   289,   882,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   883,   884,   885,   312,
     313,   314,   886,     0,   316,   317,   887,   319,     0,   888,
     321,   889,   323,   324,   325,     0,   326,   327,  1424,     0,
     328,   329,   330,     0,     0,   331,   332,   890,   891,   335,
     892,   893,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,     0,     0,     0,     0,   348,   349,   894,   895,
     352,   353,   896,   355,   356,   357,     0,   358,   359,   360,
     361,   362,   363,     0,   364,   365,   366,   897,   368,   369,
     370,   371,     0,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,     0,   385,   386,   898,
     388,   389,   390,   899,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,     0,   900,   404,   405,
     406,   407,   408,   409,   901,   411,   412,   413,   902,   415,
     416,   903,   418,     0,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   904,   432,   905,   434,
       0,   435,   436,     0,   437,   906,   439,   440,   441,   442,
     443,     0,   444,   907,   908,     0,     0,   447,   448,   909,
     450,   910,  1425,   452,   453,   911,   455,   456,   457,   458,
     459,     0,     0,   460,   461,   462,     0,   463,   464,   465,
     466,     0,   467,   468,   469,   470,   471,  1261,   913,     0,
     474,   914,   476,   477,   478,   479,   480,     0,     0,   481,
       0,     0,   482,   483,   484,   485,   486,   487,   915,   916,
     917,   918,   919,   920,   921,   922,   923,   924,   925,   499,
     500,   501,   502,   844,  1422,   636,     0,     0,     0,  1006,
    1426,  1427,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,
       0,   119,   120,   121,     0,     0,     0,   845,     0,     0,
       0,     0,   846,   123,   124,     0,   125,   126,   127,   847,
     129,   130,   131,   848,   849,   850,   851,   852,     0,   137,
     138,   139,   140,   141,   142,     0,     0,   143,   144,   853,
     854,   147,     0,   148,   149,   150,   151,   855,     0,   856,
       0,   857,   155,   156,   157,   158,   159,   858,   161,   162,
     163,     0,   164,   165,   166,   167,   168,   169,     0,   859,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     860,   861,   183,     0,   184,     0,   185,   186,   187,   188,
     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,
     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,
     204,   205,   206,     0,   207,   208,   209,   210,   862,   212,
     213,   214,   215,   216,   863,  1423,   218,     0,   219,   220,
     864,   222,     0,   223,     0,   224,   865,     0,   866,   227,
     228,   867,   868,   231,     0,   232,     0,   869,   870,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   871,
     245,   246,   247,   248,     0,   249,   250,   251,   252,   253,
     254,   255,     0,   256,   872,   873,   259,   260,   261,   262,
     263,   874,   875,     0,   876,     0,   267,   877,   878,   270,
     879,   272,   273,   274,   275,   276,   277,     0,     0,   278,
     880,   280,   881,     0,   282,   283,   284,   285,   286,   287,
     288,   289,   882,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   883,   884,   885,   312,   313,   314,   886,     0,   316,
     317,   887,   319,     0,   888,   321,   889,   323,   324,   325,
       0,   326,   327,  1424,     0,   328,   329,   330,     0,     0,
     331,   332,   890,   891,   335,   892,   893,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,     0,     0,     0,
       0,   348,   349,   894,   895,   352,   353,   896,   355,   356,
     357,     0,   358,   359,   360,   361,   362,   363,     0,   364,
     365,   366,   897,   368,   369,   370,   371,     0,   372,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,     0,   385,   386,   898,   388,   389,   390,   899,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,     0,   900,   404,   405,   406,   407,   408,   409,   901,
     411,   412,   413,   902,   415,   416,   903,   418,     0,   419,
     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   904,   432,   905,   434,     0,   435,   436,     0,   437,
     906,   439,   440,   441,   442,   443,     0,   444,   907,   908,
       0,     0,   447,   448,   909,   450,   910,  1425,   452,   453,
     911,   455,   456,   457,   458,   459,     0,     0,   460,   461,
     462,     0,   463,   464,   465,   466,     0,   467,   468,   469,
     470,   471,  1261,   913,     0,   474,   914,   476,   477,   478,
     479,   480,     0,     0,   481,     0,     0,   482,   483,   484,
     485,   486,   487,   915,   916,   917,   918,   919,   920,   921,
     922,   923,   924,   925,   499,   500,   501,   502,     0,     0,
    1572,     0,     0,  1573,     0,  1426,  1427,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
       0,     0,     0,  2110,     0,     0,     0,     0,  1583,     0,
    1572,     0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,  1583,     0,
    1572,     0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
    1585,     0,     0,     0,  2111,     0,     0,     0,  1583,     0,
    1572,     0,     0,  1573,     0,  1584,     0,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,     0,
    1585,     0,  1869,     0,     0,     0,     0,     0,  1583,     0,
    1572,     0,     0,  1573,  1586,  1584,     0,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,     0,     0,     0,     0,     0,     0,
       0,  1587,     0,     0,     0,     0,  1588,     0,  1581,     0,
    1585,     0,     0,     0,  1905,     0,     0,     0,  1583,  1906,
       0,     0,     0,     0,  1586,  1584,     0,     0,     0,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1587,     0,     0,  1591,     0,  1588,     0,     0,     0,
    1585,     0,     0,  3415,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,     0,     0,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1592,  1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
    1595,     0,     0,     0,  1586,     0,     0,     0,     0,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1592,  1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
    1595,     0,     0,     0,  1586,     0,     0,     0,     0,  1589,
    1590,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1592,  1587,     0,  1593,  1591,     0,  1588,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,  1589,
    1590,     0,     0,     0,     0,  1596,     0,     0,     0,     0,
    1592,     0,     0,  1593,  1591,     0,     0,     0,  3416,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,     0,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1596,     0,     0,     0,     0,
    1592,     0,     0,  1593,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1594,  2114,     0,
    1595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1596,     0,     0,     0,     0,
       0,     0,  1876,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,     0,     0,  1596,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1572,     0,     0,  1573,     0,
       0,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,
    1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,  1581,     0,  1596,     0,  1911,     0,     0,
       0,     0,     0,  1583,     0,  1572,     0,     0,  1573,     0,
    1584,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,
    1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,  1581,     0,  1585,     0,     0,     0,     0,
       0,     0,     0,  1583,     0,  1572,     0,     0,  1573,     0,
    1584,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,
    1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,  1581,     0,  1585,     0,  1918,     0,     0,
       0,     0,     0,  1583,     0,  1572,     0,     0,  1573,     0,
    1584,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,     0,
    1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,  1603,
    1604,  1605,  1606,  1581,     0,  1585,     0,     0,     0,     0,
       0,     0,     0,  1583,     0,     0,     0,     0,     0,  1586,
    1584,     0,  1572,     0,     0,  1573,     0,     0,     0,  1574,
    1575,  1576,  1577,  1578,  1579,  1580,  1587,     0,     0,     0,
       0,  1588,     0,     0,     0,  1585,     0,     0,     0,     0,
    1581,     0,     0,     0,  1916,     0,     0,     0,     0,  1586,
    1583,     0,     0,     0,  1589,  1590,     0,  1584,     0,     0,
       0,     0,     0,     0,     0,     0,  1587,     0,     0,  1591,
       0,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1585,     0,     0,     0,     0,     0,     0,  1586,
       0,     0,     0,     0,  1589,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,
       0,  1588,     0,     0,     0,     0,     0,     0,     0,  2006,
       0,     0,  1594,     0,     0,  1595,     0,     0,     0,  1586,
       0,     0,     0,     0,  1589,  1590,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,  1587,     0,  1593,  1591,
       0,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1594,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,  1589,  1590,  1586,     0,     0,     0,
       0,     0,     0,     0,     0,  1592,     0,     0,  1593,  1591,
       0,     0,     0,  1587,     0,     0,     0,     0,  1588,     0,
       0,     0,  1594,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1596,  1589,  1590,     0,     0,  1592,     0,     0,  1593,     0,
       0,     0,     0,     0,     0,     0,  1591,     0,     0,     0,
       0,     0,  1594,     0,     0,  1595,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1596,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1592,     0,     0,  1593,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1594,
       0,     0,  1595,     0,     0,     0,     0,     0,     0,     0,
    1596,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,     0,     0,  1598,  1599,
    1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,
    1596,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1572,     0,     0,  1573,     0,     0,     0,  1574,  1575,
    1576,  1577,  1578,  1579,  1580,  1597,     0,     0,  1598,  1599,
    1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,     0,  1581,
       0,     0,     0,  2692,     0,     0,     0,  1596,     0,  1583,
       0,  1572,     0,     0,  1573,     0,  1584,     0,  1574,  1575,
    1576,  1577,  1578,  1579,  1580,  1597,     0,     0,  1598,  1599,
    1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,     0,  1581,
    2681,  1585,     0,     0,     0,     0,     0,     0,     0,  1583,
       0,     0,     0,     0,     0,     0,  1584,     0,     0,     0,
       0,     0,     0,     0,     0,  1597,     0,     0,  1598,  1599,
    1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,     0,     0,
       0,  1585,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1572,     0,
       0,  1573,     0,     0,     0,  1574,  1575,  1576,  1577,  1578,
    1579,  1580,  1597,     0,     0,  1598,  1599,  1600,     0,  1601,
    1602,  1603,  1604,  1605,  1606,     0,  1581,     0,     0,     0,
       0,     0,     0,     0,     0,  1586,  1583,     0,  1572,     0,
       0,  1573,     0,  1584,     0,  1574,  1575,     0,     0,  1578,
    1579,  1580,  1587,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,     0,  1585,     0,
       0,     0,     0,     0,     0,  1586,  1583,     0,     0,     0,
    1589,  1590,     0,  1584,     0,     0,     0,     0,     0,     0,
       0,     0,  1587,     0,     0,  1591,     0,  1588,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1585,     0,
       0,     0,     0,     0,     0,     0,  1572,     0,     0,  1573,
    1589,  1590,     0,  1574,  1575,     0,     0,  1578,  1579,  1580,
       0,  1592,     0,     0,  1593,  1591,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,     0,     0,     0,  1594,     0,
       0,  1595,     0,     0,  1583,     0,     0,     0,     0,     0,
       0,  1584,  1586,     0,     0,     0,     0,     0,     0,     0,
       0,  1592,     0,     0,  1593,     0,     0,     0,     0,  1587,
       0,     0,     0,     0,  1588,     0,  1585,     0,  1594,     0,
       0,  1595,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1586,     0,     0,     0,     0,  1589,  1590,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1587,
       0,     0,  1591,     0,  1588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1596,  1589,  1590,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1592,     0,
       0,  1593,  1591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1594,     0,     0,  1595,     0,
    1586,     0,     0,     0,     0,     0,  1596,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1587,  1592,     0,
       0,  1593,  1588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1594,     0,     0,  1595,     0,
       0,     0,     0,     0,     0,  1589,  1590,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1591,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,
    1603,  1604,  1605,  1606,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1596,     0,     0,  1592,     0,     0,  1593,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1597,     0,  1594,  1598,  1599,  1600,     0,  1601,  1602,
    1603,  1604,  1605,  1606,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1596,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,  2131,
    1606,  1596,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1597,     0,
       0,  1598,  1599,  1600,     0,  1601,  1602,  1603,  1604,  1605,
    1606,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1193,     0,  2028,     0,     0,     0,  1597,     0,     0,  1598,
    1599,  1600,     0,  1601,  1602,  1603,  1604,  1605,  1606,   111,
     112,   113,   114,   115,   116,   117,   118,  1194,   119,   120,
     121,  1195,  1196,  1197,   845,  1198,  1199,  1200,  1201,   846,
     123,   124,  1202,   125,   126,   127,   847,   129,   130,   131,
     848,   849,   850,   851,   852,  1203,   137,   138,   139,   140,
     141,   142,  1204,  1205,   143,   144,   853,   854,   147,  1206,
     148,   149,   150,   151,   855,  1207,   856,  1208,   857,   155,
     156,   157,   158,   159,   858,   161,   162,   163,  1209,   164,
     165,   166,   167,   168,   169,  1210,   859,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   860,   861,   183,
    1211,   184,  1212,   185,   186,   187,   188,   189,   190,  1213,
     191,   192,   193,   194,   195,  1214,  1215,   196,   197,   198,
     199,   200,  1216,   201,   202,   203,  1217,   204,   205,   206,
    1218,   207,   208,   209,   210,   862,   212,   213,   214,   215,
     216,   863,  1219,   218,  1220,   219,   220,   864,   222,  1221,
     223,  1222,   224,   865,  1223,   866,   227,   228,   867,   868,
     231,  1224,   232,  1225,   869,   870,   235,   236,  1226,   237,
     238,   239,   240,   241,   242,   243,   871,   245,   246,   247,
     248,  1227,   249,   250,   251,   252,   253,   254,   255,  1228,
     256,   872,   873,   259,   260,   261,   262,   263,   874,   875,
    1229,   876,  1230,   267,   877,   878,   270,   879,   272,   273,
     274,   275,   276,   277,  1231,  1232,   278,   880,   280,   881,
    1233,   282,   283,   284,   285,   286,   287,   288,   289,   882,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   883,   884,
     885,   312,   313,   314,   886,  1234,   316,   317,   887,   319,
    1235,   888,   321,   889,   323,   324,   325,  1236,   326,   327,
    1237,  1238,   328,   329,   330,  1239,  1240,   331,   332,   890,
     891,   335,   892,   893,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,  1241,  1242,  1243,  1244,   348,   349,
     894,   895,   352,   353,   896,   355,   356,   357,  1245,   358,
     359,   360,   361,   362,   363,  1246,   364,   365,   366,   897,
     368,   369,   370,   371,  1247,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,  1248,   385,
     386,   898,   388,   389,   390,   899,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,  1249,   900,
     404,   405,   406,   407,   408,   409,   901,   411,   412,   413,
     902,   415,   416,   903,   418,  1250,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   904,   432,
     905,   434,  1251,   435,   436,  1252,   437,   906,   439,   440,
     441,   442,   443,  1253,   444,   907,   908,  1254,  1255,   447,
     448,   909,   450,   910,  1256,   452,   453,   911,   455,   456,
     457,   458,   459,  1257,  1258,   460,   461,   462,  1259,   463,
     464,   465,   466,  1260,   467,   468,   469,   470,   471,  1261,
     913,  1262,   474,   914,   476,   477,   478,   479,   480,  1263,
    1264,   481,  1265,  1266,   482,   483,   484,   485,   486,   487,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   499,   500,   501,   502,  1193,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,  1194,   119,   120,   121,  1195,  1196,  1197,   845,
    1198,  1199,  1200,  1201,   846,   123,   124,  1202,   125,   126,
     127,   847,   129,   130,   131,   848,   849,   850,   851,   852,
    1203,   137,   138,   139,   140,   141,   142,  1204,  1205,   143,
     144,   853,   854,   147,  1206,   148,   149,   150,   151,   855,
    1207,   856,  1208,   857,   155,   156,   157,   158,   159,   858,
     161,   162,   163,  1209,   164,   165,   166,   167,   168,   169,
    1210,   859,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   860,   861,   183,  1211,   184,  1212,   185,   186,
     187,   188,   189,   190,  1213,   191,   192,   193,   194,   195,
    1214,  1215,   196,   197,   198,   199,   200,  1216,   201,   202,
     203,  1217,   204,   205,   206,  1218,   207,   208,   209,   210,
     862,   212,   213,   214,   215,   216,   863,  1219,   218,  1220,
     219,   220,   864,   222,  1221,   223,  1222,   224,   865,  1223,
     866,   227,   228,   867,   868,   231,  1224,   232,  1225,   869,
     870,   235,   236,  1226,   237,   238,   239,   240,   241,   242,
     243,   871,   245,   246,   247,   248,  1227,   249,   250,   251,
     252,   253,   254,   255,  1228,   256,   872,   873,   259,   260,
     261,   262,   263,   874,   875,  1229,   876,  1230,   267,   877,
     878,   270,   879,   272,   273,   274,   275,   276,   277,  1231,
    1232,   278,   880,   280,   881,  1233,   282,   283,   284,   285,
     286,   287,   288,   289,   882,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   883,   884,   885,   312,   313,   314,   886,
    1234,   316,   317,   887,   319,  1235,   888,   321,   889,   323,
     324,   325,  1236,   326,   327,  1237,  1238,   328,   329,   330,
    1239,  1240,   331,   332,   890,   891,   335,   892,   893,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,  1241,
    1242,  1243,  1244,   348,   349,   894,   895,   352,   353,   896,
     355,   356,   357,  1245,   358,   359,   360,   361,   362,   363,
    1246,   364,   365,   366,   897,   368,   369,   370,   371,  1247,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,  1248,   385,   386,   898,   388,   389,   390,
     899,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,  1249,   900,   404,   405,   406,   407,   408,
     409,   901,   411,   412,   413,   902,   415,   416,   903,   418,
    1250,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   904,   432,   905,   434,  1251,   435,   436,
    1252,   437,   906,   439,   440,   441,   442,   443,  1253,   444,
     907,   908,  1254,  1255,   447,   448,   909,   450,   910,  1256,
     452,   453,   911,   455,   456,   457,   458,   459,  1257,  1258,
     460,   461,   462,  1259,   463,   464,   465,   466,  1260,   467,
     468,   469,   470,   471,  1261,   913,  1262,   474,   914,   476,
     477,   478,   479,   480,  1263,  1264,   481,  1265,  1266,   482,
     483,   484,   485,   486,   487,   915,   916,   917,   918,   919,
     920,   921,   922,   923,   924,   925,   499,   500,   501,   502,
    1193,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,  2176,   116,   117,   118,  1194,   119,   120,
     121,  1195,  1196,  1197,   845,  1198,  1199,  1200,  1201,   846,
     123,   124,  1202,   125,   126,   127,   847,   129,   130,   131,
     848,   849,   850,   851,   852,  1203,   137,   138,   139,   140,
     141,   142,  1204,  1205,   143,   144,   853,   854,   147,  1206,
     148,   149,   150,   151,   855,  1207,   856,  1208,   857,   155,
     156,   157,   158,   159,   858,   161,   162,   163,  1209,   164,
     165,   166,   167,   168,   169,  1210,   859,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   860,   861,   183,
    1211,   184,  1212,   185,   186,   187,   188,   189,   190,  1213,
     191,   192,   193,   194,   195,  1214,  1215,   196,   197,   198,
    2177,   200,  1216,   201,   202,   203,  1217,   204,   205,   206,
    1218,   207,   208,   209,   210,   862,   212,   213,   214,   215,
     216,   863,  1219,   218,  1220,   219,   220,   864,   222,  1221,
     223,  1222,   224,   865,  1223,   866,   227,   228,   867,   868,
     231,  1224,   232,  1225,   869,   870,   235,   236,  1226,   237,
     238,   239,   240,   241,   242,   243,   871,   245,   246,   247,
     248,  1227,   249,   250,   251,   252,   253,   254,   255,  1228,
     256,   872,   873,   259,   260,   261,   262,   263,   874,   875,
    1229,   876,  1230,   267,   877,   878,   270,   879,   272,   273,
     274,   275,   276,   277,  1231,  1232,   278,   880,   280,   881,
    1233,   282,   283,   284,   285,   286,   287,   288,   289,   882,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   883,   884,
     885,   312,   313,   314,   886,  1234,   316,   317,   887,   319,
    1235,   888,   321,   889,   323,   324,   325,  1236,   326,   327,
    1237,  1238,   328,   329,   330,  1239,  1240,   331,   332,   890,
     891,   335,   892,   893,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,  1241,  1242,  1243,  1244,   348,   349,
     894,   895,   352,   353,   896,   355,   356,   357,  1245,   358,
     359,   360,   361,   362,   363,  1246,   364,   365,   366,   897,
     368,   369,   370,   371,  1247,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,  1248,   385,
     386,   898,   388,   389,   390,   899,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,  1249,   900,
     404,   405,   406,   407,   408,  2178,   901,   411,   412,   413,
     902,   415,   416,   903,   418,  1250,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   904,   432,
     905,   434,  1251,   435,   436,  1252,   437,   906,   439,   440,
     441,   442,   443,  1253,   444,   907,   908,  1254,  1255,   447,
     448,   909,   450,   910,  1256,   452,   453,   911,   455,   456,
     457,   458,   459,  1257,  1258,   460,   461,   462,  1259,   463,
     464,   465,   466,  1260,   467,   468,   469,   470,   471,  1261,
     913,  1262,   474,   914,   476,   477,   478,   479,   480,  1263,
    1264,   481,  1265,  1266,   482,   483,   484,   485,   486,   487,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   499,   500,   501,   502,   844,     0,   636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,   845,
       0,     0,     0,     0,   846,   123,   124,     0,   125,   126,
     127,   847,   129,   130,   131,   848,   849,   850,   851,   852,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   853,   854,   147,     0,   148,   149,   150,   151,   855,
       0,   856,     0,   857,   155,   156,   157,   158,   159,   858,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   859,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   860,   861,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     862,   212,   213,   214,   215,   216,   863,  1423,   218,     0,
     219,   220,   864,   222,     0,   223,     0,   224,   865,     0,
     866,   227,   228,   867,   868,   231,     0,   232,     0,   869,
     870,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   871,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   872,   873,   259,   260,
     261,   262,   263,   874,   875,     0,   876,     0,   267,   877,
     878,   270,   879,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   880,   280,   881,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   882,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   883,   884,   885,   312,   313,   314,   886,
       0,   316,   317,   887,   319,     0,   888,   321,   889,   323,
     324,   325,     0,   326,   327,  1424,     0,   328,   329,   330,
       0,     0,   331,   332,   890,   891,   335,   892,   893,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   894,   895,   352,   353,   896,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   897,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   898,   388,   389,   390,
     899,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   900,   404,   405,   406,   407,   408,
     409,   901,   411,   412,   413,   902,   415,   416,   903,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   904,   432,   905,   434,     0,   435,   436,
       0,   437,   906,   439,   440,   441,   442,   443,     0,   444,
     907,   908,     0,     0,   447,   448,   909,   450,   910,  1425,
     452,   453,   911,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,  1261,   913,     0,   474,   914,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   915,   916,   917,   918,   919,
     920,   921,   922,   923,   924,   925,   499,   500,   501,   502,
     844,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     3,     4,     0,   845,     0,     0,     0,     0,   846,
     123,   124,     0,   125,   126,   127,   847,   129,   130,   131,
     848,   849,   850,   851,   852,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   853,   854,   147,     0,
     148,   149,   150,   151,   855,     0,   856,     0,   857,   155,
     156,   157,   158,   159,   858,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   859,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   860,   861,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   862,   212,   213,   214,   215,
     216,   863,     0,   218,     0,   219,   220,   864,   222,     0,
     223,     0,   224,   865,     0,   866,   227,   228,   867,   868,
     231,     0,   232,     0,   869,   870,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   871,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   872,   873,   259,   260,   261,   262,   263,   874,   875,
       0,   876,     0,   267,   877,   878,   270,   879,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   880,   280,   881,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   882,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   883,   884,
     885,   312,   313,   314,   886,     0,   316,   317,   887,   319,
       0,   888,   321,   889,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   890,
     891,   335,   892,   893,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     894,   895,   352,   353,   896,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   897,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   898,   388,   389,   390,   899,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   900,
     404,   405,   406,   407,   408,   409,   901,   411,   412,   413,
     902,   415,   416,   903,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   904,   432,
     905,   434,     0,   435,   436,     0,   437,   906,   439,   440,
     441,   442,   443,     0,   444,   907,   908,     0,     0,   447,
     448,   909,   450,   910,     0,   452,   453,   911,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,  1261,
     913,     0,   474,   914,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     915,   916,   917,   918,   919,   920,   921,   922,   923,   924,
     925,   499,   500,   501,   502,   110,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,   122,   123,   124,     0,   125,   126,
     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,   606,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   607,
       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   609,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,   225,     0,
     226,   227,   228,   229,   230,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   279,   280,   281,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
       0,   316,   317,   318,   319,     0,   611,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,   334,   335,   336,   613,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   614,   351,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   616,   434,     0,   435,   436,
       0,   437,   438,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   617,   450,   618,     0,
     452,   453,   619,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,   475,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,   122,
     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
     132,   133,   134,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,   153,     0,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   279,   280,   281,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,     0,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,     0,   435,   436,     0,   437,   438,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,   475,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,  1702,   148,   149,   150,   151,   152,
       0,     0,  1703,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,  1704,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,  1705,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1706,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,  1707,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,  1708,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,  1702,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,  1704,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,  1705,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,  2253,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,  1707,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,  1708,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     3,     4,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,   534,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   535,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,   612,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   716,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,   612,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,   746,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,  1922,     0,     0,     0,     0,  1923,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,  1930,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,  1931,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
    1932,   437,     0,   439,  1933,   441,  1934,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,  1935,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   636,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,   643,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     644,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   645,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   646,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   647,   446,     0,     0,   648,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   680,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   711,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   714,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   718,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   733,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   835,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   838,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,   960,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,   983,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,   643,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   647,   446,     0,     0,   648,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1329,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,  1331,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1334,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,  1336,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,   533,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  2172,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     757,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   758,     0,     0,  -773,     0,   759,
     123,   124,     0,   125,   126,   127,   760,   129,   130,   131,
       0,   761,   762,   763,   764,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   765,   766,   147,     0,
     148,   149,   150,   151,     0,     0,   767,     0,   768,   155,
     156,   157,   158,   159,   769,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   770,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   774,   222,     0,
     223,     0,   224,   775,     0,   776,   227,   228,  -773,   777,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   779,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   780,     0,   259,   260,   261,   262,   263,   781,   782,
       0,   783,     0,   267,   784,   785,   270,   786,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   787,   280,   788,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   789,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,   791,
     792,   312,   313,   314,     0,     0,   316,   317,   793,   319,
       0,     0,   321,   794,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     795,   335,   796,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,   797,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   798,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   799,   388,   389,   390,   800,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   801,
     404,   405,   406,   407,   408,   409,   802,   411,   412,   413,
     803,   415,   416,   804,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   805,   432,
       0,   434,     0,   435,   436,     0,   437,   806,   439,   440,
     441,   442,   443,     0,   444,   807,   808,     0,     0,   447,
     448,     0,   450,     0,     0,   452,   453,   809,   455,   456,
     457,   458,   459,   810,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,     0,
     811,     0,   474,   812,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     510,     0,   533,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,  2890,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     658,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   659,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     660,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   661,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   662,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   735,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   831,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   660,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     662,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,  1634,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,     0,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  1804,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,   235,   236,     0,   237,
     238,   239,   240,   241,  2159,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   510,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,
     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,
       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,
     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,
       0,   227,   228,   511,     0,   231,     0,   232,     0,   233,
     234,   235,   236,     0,   237,   238,   239,   240,   241,  2174,
     243,     0,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,     0,   258,   259,   260,
     261,   262,   263,   264,   265,     0,   266,     0,   267,     0,
       0,   270,     0,   272,   273,   274,   275,   276,   277,     0,
       0,   278,     0,   280,     0,     0,   282,   283,   284,   285,
     286,   287,   288,   289,   512,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,     0,   311,   312,   313,   314,   315,
       0,   316,   317,     0,   319,     0,   320,   321,   322,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,   333,     0,   335,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,   350,     0,   352,   353,   354,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   367,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,     0,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,     0,   415,   416,   417,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   513,   432,   433,   434,     0,   435,   436,
       0,   437,     0,   439,   440,   441,   442,   443,     0,   444,
     445,   446,     0,     0,   447,   448,   449,   450,   451,     0,
     452,   453,   454,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,   472,   473,     0,   474,     0,   476,
     477,   478,   479,   480,     0,     0,   481,     0,     0,   482,
     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     757,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   758,     0,     0,     0,     0,   759,
     123,   124,     0,   125,   126,   127,   760,   129,   130,   131,
       0,   761,   762,   763,   764,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   765,   766,   147,     0,
     148,   149,   150,   151,     0,     0,   767,     0,   768,   155,
     156,   157,   158,   159,   769,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   770,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   774,   222,     0,
     223,     0,   224,   775,     0,   776,   227,   228,     0,   777,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   778,   243,   779,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   780,     0,   259,   260,   261,   262,   263,   781,   782,
       0,   783,     0,   267,   784,   785,   270,   786,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   787,   280,   788,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   789,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,   791,
     792,   312,   313,   314,     0,     0,   316,   317,   793,   319,
       0,     0,   321,   794,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     795,   335,   796,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,   797,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   798,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   799,   388,   389,   390,   800,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   801,
     404,   405,   406,   407,   408,   409,   802,   411,   412,   413,
     803,   415,   416,   804,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   805,   432,
       0,   434,     0,   435,   436,     0,   437,   806,   439,   440,
     441,   442,   443,     0,   444,   807,   808,     0,     0,   447,
     448,     0,   450,     0,     0,   452,   453,   809,   455,   456,
     457,   458,   459,   810,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,     0,
     811,     0,   474,   812,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     757,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   758,     0,     0,     0,     0,   759,
     123,   124,     0,   125,   126,   127,   760,   129,   130,   131,
       0,   761,   762,   763,   764,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   765,   766,   147,     0,
     148,   149,   150,   151,     0,     0,   767,     0,   768,   155,
     156,   157,   158,   159,   769,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   770,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   774,   222,     0,
     223,     0,   224,   775,     0,   776,   227,   228,     0,   777,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   779,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   780,     0,   259,   260,   261,   262,   263,   781,   782,
       0,   783,     0,   267,   784,   785,   270,   786,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   787,   280,   788,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   789,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,   791,
     792,   312,   313,   314,     0,     0,   316,   317,   793,   319,
       0,     0,   321,   794,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     795,   335,   796,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,   797,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   798,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   799,   388,   389,   390,   800,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   801,
     404,   405,   406,   407,   408,   409,   802,   411,   412,   413,
     803,   415,   416,   804,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   805,   432,
       0,   434,     0,   435,   436,     0,   437,   806,   439,   440,
     441,   442,   443,     0,   444,   807,   808,     0,     0,   447,
     448,     0,   450,     0,     0,   452,   453,   809,   455,   456,
     457,   458,   459,   810,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,     0,
     811,     0,   474,   812,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     757,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,   758,     0,     0,     0,     0,   759,
     123,   124,     0,   125,   126,   127,   760,   129,   130,   131,
       0,   761,   762,   763,   764,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   765,   766,   147,     0,
     148,   149,   150,   151,     0,     0,   767,     0,   768,   155,
     156,   157,   158,   159,   769,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,   770,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,     0,   201,   202,   203,     0,  1789,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   774,   222,     0,
     223,     0,   224,   775,     0,   776,   227,   228,     0,   777,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,   779,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,   780,     0,   259,   260,   261,   262,   263,   781,   782,
       0,   783,     0,   267,   784,   785,   270,   786,   272,   273,
     274,   275,   276,   277,     0,     0,   278,   787,   280,   788,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   789,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,   791,
     792,   312,   313,   314,     0,     0,   316,   317,   793,   319,
       0,     0,   321,   794,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
     795,   335,   796,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,   797,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   798,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,   799,   388,   389,   390,   800,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,   801,
     404,   405,   406,   407,   408,   409,   802,   411,   412,   413,
     803,   415,   416,   804,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   805,   432,
       0,   434,     0,   435,   436,     0,   437,   806,   439,   440,
     441,   442,   443,     0,   444,   807,   808,     0,     0,   447,
     448,     0,   450,     0,     0,   452,   453,   809,   455,   456,
     457,   458,   459,   810,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,     0,
     811,     0,   474,   812,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
    2815,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,  2816,     0,     0,     0,     0,  2817,
     123,   124,     0,   125,   126,   127,  2818,   129,   130,   131,
       0,   761,  2819,   763,   764,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   765,   766,   147,     0,
     148,   149,   150,   151,     0,     0,  2820,     0,  2821,   155,
     156,   157,   158,   159,  2822,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,  2823,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   771,   772,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   773,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,
     216,     0,     0,   218,     0,   219,   220,   774,   222,     0,
     223,     0,   224,  2824,     0,  2825,   227,   228,  2826,  2827,
     231,     0,   232,     0,     0,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,  2828,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,  2829,     0,   259,   260,   261,   262,   263,   781,   782,
       0,   783,     0,   267,  2830,  2831,   270,  2832,   272,   273,
     274,   275,   276,   277,     0,     0,   278,  2833,   280,  2834,
       0,   282,   283,   284,   285,   286,   287,   288,   289,  3057,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   790,  2836,
     792,   312,   313,   314,     0,     0,   316,   317,  2838,   319,
       0,     0,   321,   794,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,     0,
    2840,   335,  2841,     0,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,     0,     0,     0,     0,   348,   349,
       0,  2842,   352,   353,     0,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,   365,   366,   798,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,  2843,   388,   389,   390,     0,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,  2844,
     404,   405,   406,   407,   408,   409,     0,   411,   412,   413,
    2846,   415,   416,   804,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,  3058,   432,
       0,   434,     0,   435,   436,     0,   437,  2848,   439,   440,
     441,   442,   443,     0,   444,   807,   808,     0,     0,   447,
     448,     0,   450,     0,     0,   452,   453,  2849,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,     0,
     811,     0,   474,  2851,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     510,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   499,   500,   501,   502,     0,     0,     0,     0,   111,
     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,
     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,
     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,
     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,
     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,
     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,
     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,
     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,
       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,
     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,
     223,     0,   224,     0,     0,     0,   227,   228,   511,     0,
     231,     0,   232,     0,   233,   234,     0,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,   245,   246,   247,
     248,     0,   249,   250,   251,   252,   253,   254,   255,     0,
     256,     0,   258,   259,   260,   261,   262,   263,   264,   265,
       0,   266,     0,   267,     0,     0,   270,     0,   272,   273,
     274,   275,   276,   277,     0,     0,   278,     0,   280,     0,
       0,   282,   283,   284,   285,   286,   287,   288,   289,   512,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,     0,
     311,   312,   313,   314,   315,     0,   316,   317,     0,   319,
       0,   320,   321,   322,   323,   324,   325,     0,   326,   327,
       0,     0,   328,   329,   330,     0,     0,   331,   332,   333,
       0,   335,     0,   337,   338,   339,   340,   341,   342,   343,
       0,   345,   346,   347,     0,     0,     0,     0,   348,   349,
     350,     0,   352,   353,   354,   355,   356,   357,     0,   358,
     359,   360,   361,   362,   363,     0,   364,     0,   366,   367,
     368,   369,   370,   371,     0,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,     0,   385,
     386,     0,   388,   389,   390,   391,     0,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,     0,     0,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,   418,     0,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   513,   432,
     433,   434,     0,   435,   436,     0,   437,     0,   439,   440,
     441,   442,   443,     0,   444,   445,   446,     0,     0,   447,
     448,   449,   450,   451,     0,   452,   453,   454,   455,   456,
     457,   458,   459,     0,     0,   460,   461,   462,     0,   463,
     464,   465,   466,     0,   467,   468,   469,   470,   471,   472,
     473,     0,   474,     0,   476,   477,   478,   479,   480,     0,
       0,   481,     0,     0,   482,   483,   484,   485,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   757,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,
     117,   118,     0,   119,   120,   121,     0,     0,     0,   758,
       0,     0,     0,     0,   759,   123,   124,     0,   125,   126,
     127,   760,   129,   130,   131,     0,   761,   762,   763,   764,
       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,
     144,   765,   766,   147,     0,   148,   149,   150,   151,     0,
       0,   767,     0,   768,   155,   156,   157,   158,   159,   769,
     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,
       0,   770,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   771,   772,   183,     0,   184,     0,   185,   186,
     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,
       0,     0,   196,   197,   773,   199,   200,     0,   201,   202,
     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,
       0,   212,   213,   214,   215,   216,     0,     0,   218,     0,
     219,   220,   774,   222,     0,   223,     0,   224,   775,     0,
     776,   227,   228,     0,   777,   231,     0,   232,     0,     0,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   779,   245,   246,   247,   248,     0,   249,   250,   251,
     252,   253,   254,   255,     0,   256,   780,     0,   259,   260,
     261,   262,   263,   781,   782,     0,   783,     0,   267,   784,
     785,   270,   786,   272,   273,   274,   275,   276,   277,     0,
       0,   278,   787,   280,   788,     0,   282,   283,   284,   285,
     286,   287,   288,   289,     0,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   790,   791,   792,   312,   313,   314,     0,
       0,   316,   317,   793,   319,     0,     0,   321,   794,   323,
     324,   325,     0,   326,   327,     0,     0,   328,   329,   330,
       0,     0,   331,   332,     0,   795,   335,   796,     0,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,     0,
       0,     0,     0,   348,   349,     0,   797,   352,   353,     0,
     355,   356,   357,     0,   358,   359,   360,   361,   362,   363,
       0,   364,   365,   366,   798,   368,   369,   370,   371,     0,
     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,     0,   385,   386,   799,   388,   389,   390,
       0,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,     0,   801,   404,   405,   406,   407,   408,
     409,     0,   411,   412,   413,   803,   415,   416,   804,   418,
       0,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,     0,   432,     0,   434,     0,   435,   436,
       0,   437,   806,   439,   440,   441,   442,   443,     0,   444,
     807,   808,     0,     0,   447,   448,     0,   450,     0,     0,
     452,   453,   809,   455,   456,   457,   458,   459,     0,     0,
     460,   461,   462,     0,   463,   464,   465,   466,     0,   467,
     468,   469,   470,   471,     0,   811,     0,   474,   812,   476,
     477,   478,   479,   480,     0,     1,   481,     0,     0,   482,
     483,   484,   485,   486,   487,     2,     0,     3,     4,     0,
       0,     0,     1,     0,     0,     0,   499,   500,   501,   502,
       0,     0,     2,     0,     0,     6,     0,     0,     0,     0,
       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,
       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,
       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,
       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,
       0,   568,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,    12,     0,     0,     0,    10,     0,   568,     0,
       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,
       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,
      17,     0,     0,    15,     0,     0,     0,     0,     0,    16,
       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,
      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    23,
       0,     0,     0,     0,     0,     0,     0,     0,    24,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      25,    26,    27,     0,     0,     0,     0,     0,    28,     0,
       0,    29,     0,     0,     0,     0,     0,    25,    26,    27,
       0,     0,     0,     0,     0,    28,     0,     0,    29,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      30,     0,     0,     0,     0,     0,     0,     0,     0,    31,
       0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
       0,     0,     0,     0,    32,     0,    31,     0,     0,     0,
       0,    33,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    32,     0,     0,     0,    35,     0,     0,    33,     0,
       0,     0,    34,     0,     0,     0,     0,    36,     0,     0,
       0,    37,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,    37,     0,
       0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,     0,     0,     0,    38,     0,
      41,     0,     0,     0,     0,    42,     0,     0,     0,   569,
       0,    39,     0,     0,     0,     0,     0,    41,     0,    43,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   570,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,   503,     0,   656,     0,   630,   715,   563,     0,     0,
     703,     0,    83,     0,    21,     0,     0,   802,     0,   723,
     679,   727,   950,     0,     7,    45,    21,    18,   570,   932,
    1656,  1178,  1177,  2170,  1190,   932,  1471,    37,    21,    18,
     992,  1152,  1616,   732,     7,  1542,   561,  1157,  1357,    36,
    2115,  2084,  1517,  2086,  1154,    87,   840,  1307,    21,    87,
    2105,   941,  1758,  1362,  1113,  1118,   941,   715,   626,   717,
      21,   719,   941,   631,  1569,  1570,   808,   941,    85,    86,
    2544,   564,  1182,   569,  1048,   570,  2217,  2218,  2219,  2166,
      85,    86,  2544,  2050,  2577,     0,     0,     0,     0,  1080,
       0,  2579,    85,    86,  1085,   105,     0,  2104,  1406,    33,
      97,     0,     0,     0,     0,     0,     0,     0,  1046,    44,
    2597,   623,    85,    86,  2230,     0,    24,  2419,  2604,     0,
    1777,     0,   588,     0,    85,    86,     0,     0,     0,     0,
       5,     9,  1620,  1773,  2500,   765,   766,  1674,  2504,     0,
    1940,    78,   698,     5,    13,    14,     0,    63,     5,    55,
    1676,    13,    14,  1953,   698,  2902,    13,    14,     5,   671,
       5,     5,   792,  2250,     9,  1907,  2238,    13,    14,     5,
       5,   135,     5,     5,     9,     5,     5,     3,  1091,    63,
      13,    14,  2242,    85,    86,     5,    26,    63,   167,   693,
      11,     5,    32,    13,    14,    16,     5,    45,   115,   118,
      53,     5,    45,  3061,    13,    14,  2393,     5,    34,    35,
    2744,     5,     5,   833,     5,     5,   836,    30,    23,    24,
    2886,    80,     5,     5,   168,    38,    63,     5,   120,   186,
      88,     5,    91,   284,   176,  2322,  2323,    98,  2325,  2905,
       3,     4,     5,    30,    98,   959,     9,   167,   169,    11,
       4,    38,   102,  1166,    16,     9,  1169,  1170,     4,   240,
     281,    72,    63,     9,  2862,    30,  2790,   125,     8,   118,
     939,    11,   772,    38,   289,    15,    16,     9,   143,    19,
      20,    21,   289,    11,    46,   283,  2883,    15,    16,   948,
    2514,   222,   157,   133,   794,   240,  1038,   162,  3188,   358,
    3220,   269,   168,   108,  1350,   371,    46,   942,   105,   179,
     105,   380,  1274,    53,    30,  2725,    78,  2727,  3253,   172,
     241,  1283,  2463,   306,   188,  3147,   176,  3149,   128,   106,
     830,   272,   259,  2376,   144,   266,   189,    64,    78,   446,
     166,   194,   168,   145,   159,    72,   118,    11,   213,   349,
     113,    15,    16,   164,   106,   128,  2992,   422,  2994,   208,
     188,   133,  2462,    80,  2464,    41,  2513,  2073,   233,   113,
    1165,  2845,    73,   106,    91,   943,  1045,   306,   378,   232,
     932,  2795,  1096,  1013,  1014,   195,   313,   955,    30,  2803,
    2614,   499,  3282,   167,   196,  3285,    11,   504,   506,  1029,
      15,    16,  3224,    11,   469,   115,  2899,    15,    16,  2897,
    3345,   226,   128,  2488,   335,   280,   266,   106,   363,   161,
    2908,  3087,   283,  2510,   289,  2512,  3346,  1486,  3387,   283,
     359,    46,   172,    40,   350,   504,   302,   933,    46,   991,
    3187,   420,   508,   301,   385,   504,   122,   287,  2415,   189,
     381,   214,   373,   504,   194,  1933,  1934,  1935,  1517,   440,
     330,  3059,  3320,    78,  1438,   266,   350,   159,   268,  3428,
      78,   266,  3006,   236,   350,   443,  3112,  1146,   278,  1142,
    1143,   345,  1957,   504,  3081,  2672,   128,   408,  1534,   359,
     351,  3381,   232,   508,    12,   440,  3020,   351,   462,    17,
     420,   508,  1762,   343,   446,   278,   504,   347,   209,   236,
     321,    29,   443,   350,   493,  3039,   499,  1017,   384,  2929,
     348,  2593,   519,   504,   443,    43,    44,   506,  1836,   273,
     383,   448,  1032,   307,   308,   309,  3283,   458,   378,  1051,
     570,  1093,  1094,  2050,   561,   285,  2633,   504,   320,   350,
    2610,   395,   396,   570,   446,   413,  2656,   405,   504,   504,
     504,   420,   405,   273,   171,   502,    26,   417,   569,   506,
     499,   436,    32,   265,   316,   388,   398,   378,    69,    70,
     455,   570,  1703,  2088,  2121,   103,  3073,  3061,  1144,  2389,
    2332,   621,   508,   610,   443,  2252,  2122,   371,   504,  3061,
    1144,   388,   561,  2243,   621,   466,    40,  2114,  1582,   449,
    1313,   408,   466,   504,  2761,  1119,   621,   610,  3284,  1335,
    2108,     0,   703,   388,   508,   503,   437,   669,   621,   504,
     456,   669,   508,   456,   408,   504,  1793,   610,   460,   656,
     657,  1107,   504,   383,   505,  3011,   507,   504,   621,   610,
    3016,   505,  2768,   507,   468,   512,  1618,   504,   504,   504,
     621,   408,   679,  2965,   674,   512,   502,   441,   504,   504,
     506,   504,   504,   133,   504,   504,   490,   468,   452,   500,
     688,  1350,   688,   693,   504,  1851,   688,   688,   677,   688,
     504,   688,   466,   688,   688,   504,   688,   605,  3186,   490,
     504,   688,  1962,   420,   721,   722,   504,  3194,   725,  3195,
     504,   504,   466,   504,   504,   113,   490,   104,   468,   621,
    1419,   504,   504,   561,   658,   659,   504,   661,  1358,  1359,
     504,  3296,   495,   496,    11,  2742,   490,   171,   500,  2880,
     490,   495,   496,   502,  1718,   680,  1720,   506,   488,   495,
     496,   491,   492,   493,   504,   495,   496,   497,   498,   499,
     500,    13,    14,   495,   496,   157,  2074,   495,   496,   497,
     498,   499,   500,   688,   688,   688,   688,   157,   688,    26,
     446,  2748,   240,   116,   688,   802,   116,  3280,   186,   688,
     688,   688,   688,   688,   688,   688,    72,  2884,   603,   245,
     605,    78,  1327,   688,  1463,  1464,  3294,   688,  1477,   688,
    1469,   688,   507,   561,   688,   688,   688,   688,  3383,  1732,
     508,    37,   268,   840,  3246,  3247,   143,   287,  1491,  1742,
     635,  1356,  1745,   497,   498,   499,   500,   113,   504,  1405,
    1802,   233,  1408,   802,  1507,  3338,  3320,  1372,  1414,  1563,
    1564,  1565,  2558,   233,  2560,   660,   169,   190,  3320,   246,
     190,  1920,  1877,   198,  1533,  1534,   173,   254,    33,  1421,
     268,   252,   253,   240,  1543,  3022,  3298,    13,    14,   240,
     495,   496,   497,   498,   499,   500,   133,   347,   280,   497,
     498,   499,   500,  1908,    59,     5,   213,  1566,  1957,  2377,
    2378,  2379,  2380,   198,   345,   363,   268,   493,  2415,  2354,
     162,   273,   240,   187,   115,   932,  1484,  1410,   378,  3407,
     506,   938,   939,  2428,  1420,   407,  1421,   944,   241,   236,
     947,   948,   933,   950,   951,   952,   953,  1928,   466,  1852,
     425,  1831,  1832,  2002,    26,  1852,  1831,  3002,     3,   966,
      32,  1830,   168,  1465,   128,   493,   973,  1831,  1832,  1833,
    2220,   966,   490,   445,   802,   247,   504,   329,   973,   468,
    2279,   128,   289,   966,   991,   992,   993,  2286,   240,  2288,
     973,   155,   440,    80,   468,   113,   367,   368,   204,   449,
     408,   490,   268,   966,    91,  1012,   363,   273,   155,   502,
     973,   202,   363,   506,   220,   966,   490,    11,   222,  1728,
    2716,   499,   973,  1030,   230,  3162,  1046,   535,   506,  1585,
     504,   412,   335,   414,  1041,  1042,  1043,  2090,  1045,  1046,
    2093,  1048,    26,   458,   993,   363,  2193,  2544,    32,   167,
     287,   366,    46,  1701,    26,   321,   504,   565,  1573,  1843,
      32,   133,   266,   504,   802,    80,  1759,  1760,  1761,  1076,
     373,   337,    13,    14,   966,   266,    91,   268,   363,   969,
    1728,   973,   504,   440,    78,   975,  1093,  1094,   373,   440,
     503,   173,  1781,  1125,  1126,  2144,  1128,  1125,  1126,  1747,
    1128,   514,  2202,     4,  1752,   408,   504,  3238,     9,   273,
     347,   363,   349,     4,   278,   412,    30,   414,     9,  1119,
    1127,   268,   440,   408,  1131,  1132,   273,   331,     4,   436,
     504,   278,  2441,     9,  1141,  1142,  1143,   932,   162,  1146,
     502,   378,  1091,   440,   506,   503,   941,   504,   354,   133,
    1809,  2261,  2080,   504,   236,   458,   514,  2267,  1165,   505,
    1859,   133,   508,     4,  1863,   993,   372,  1866,     9,    83,
     167,   437,   680,   458,   644,   645,   646,   381,    92,   297,
     446,  1181,  1738,    13,    14,  2650,   504,  1743,   440,   307,
     308,   309,   504,   173,  1709,   990,   991,   561,     8,   964,
     114,    11,  1812,   974,   504,    15,    16,   978,   504,    19,
      20,    21,  2176,  2177,  2178,   287,  1165,   982,   502,   497,
     504,   986,   506,   412,  1834,   414,   184,   185,  1838,    13,
      14,  1841,   335,  1882,  1883,  1884,  1885,  1886,  1887,   443,
     167,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,
    1899,  2748,   504,   371,   504,   993,   236,  1916,   505,   157,
    1055,   508,  3399,   427,   162,    13,    14,  1274,   157,  1064,
     373,   343,   186,   162,   438,   347,  1283,   504,   335,   505,
     427,   363,   508,    13,    14,   199,  1476,  1082,  1478,  1479,
     408,   438,    13,    14,   252,   253,  1091,   504,  1093,  1094,
    1307,     8,   502,   287,   504,   408,   378,  1822,    15,    16,
    1852,   504,    19,    20,    21,   287,   373,  3350,   490,  3384,
    1327,  3386,   504,   441,   658,   659,  1324,   661,  1324,   466,
     412,   468,   414,  3366,   452,   233,   487,  1165,  2647,  1324,
    1324,   219,  2391,  1350,   233,  2394,    13,    14,   466,  1356,
    1357,   408,  2316,   505,  1869,   458,   508,   505,   440,   343,
     508,   505,  3427,   347,   508,  1372,  1881,   505,    13,    14,
     508,   343,   490,   505,   283,   347,   508,   449,  1327,  2038,
    2527,  2526,   280,   363,  2033,  2034,   504,    59,  3421,   369,
     506,   280,  2085,  3426,   378,  2704,  1911,    13,    14,  1406,
    2511,   458,   412,  1918,   414,   506,   378,  1356,  1357,   367,
     368,    13,    14,  2310,  1421,  2525,   505,  2527,  1960,   508,
     412,   505,   414,  1372,   508,     6,  2571,  1165,     9,  1420,
     505,  1438,   412,   508,   414,    16,   487,  1444,   802,  1954,
      13,    14,  1421,  1958,  3140,   505,  3142,   166,   508,  1964,
      31,  2176,   505,  2178,    35,   508,  1463,  1464,   505,   508,
     440,   508,  1469,   505,  1471,   449,   508,    13,    14,  1476,
    1477,  1478,  1479,   505,   504,   285,   508,   449,   505,   505,
     394,    37,   508,   397,  1491,  1492,   505,   505,  1471,   508,
    1497,  2419,   167,  1500,   505,   167,  2149,   508,  1505,  1327,
    1507,  1508,  1497,    26,   505,  1500,  1513,   508,  1471,    32,
    1505,   288,   505,  1508,  1497,   508,   505,  1500,  1513,   508,
    1471,  2510,  1505,  2512,    59,  1508,  1533,  1534,  1356,  1357,
    1513,  1538,   409,  1540,  1497,  2241,  1543,  1500,  1530,  1530,
     504,  1530,  1505,  1530,  1372,  1508,  1497,   487,  1530,  1500,
    1513,  2283,  2284,  1530,  1505,  1562,   695,  1508,   697,  1566,
     219,  1568,  1513,  2173,  3061,  2175,  1573,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,  1582,  3150,  2541,   285,  1586,
    1587,  2545,   505,  2547,  1591,   508,   148,   505,  1595,  1327,
     508,  1598,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,
     505,   343,  1609,   508,  1112,  1497,    13,    14,  1500,  1616,
     133,  1618,   168,  1505,  2923,   148,  1508,   505,  1356,  1357,
     508,  1513,   505,   505,  1573,   508,   508,  1659,   148,   993,
     148,  1659,  1639,    26,  1372,   307,   308,   309,    40,    32,
     505,  2544,  1437,   508,   505,   505,  1441,   508,   204,   505,
     505,  2762,   508,   508,   505,  1662,   504,   508,  1637,    13,
      14,   268,  2809,   268,   220,   431,  1673,  1674,  3103,    13,
      14,    13,    14,    40,   230,    13,    14,    13,    14,    13,
      14,   491,   492,   493,   143,   495,   496,   497,   498,   499,
     500,    13,    14,    13,    14,    13,    14,   458,   157,   371,
      13,    14,  1709,   162,    13,    14,   358,   359,   358,   359,
      87,  1718,   148,  1720,   470,   256,   257,   455,   367,   368,
     358,   359,  3348,   358,   359,  2881,  3352,   451,   452,  3361,
    3362,  3393,  3394,  1093,  1094,   504,   408,   317,   148,  2254,
     133,   504,   504,    39,   504,  1573,   147,   504,  2304,   504,
     148,  1758,   506,   148,   213,  1762,   148,   283,  1765,  1766,
    1709,   345,   420,   504,   287,  2717,   167,   167,  2310,   441,
     504,   504,   215,   505,   233,  2479,   504,   410,   220,   293,
     452,   504,  3408,   220,   491,   492,   493,   220,   495,   496,
     497,   498,   499,   500,   504,  1802,  2445,  2446,   354,   290,
      40,  1165,  1809,    72,   231,   504,     5,     5,   504,    78,
     504,  1798,   504,   504,     5,  1822,   372,     5,  3253,   504,
     343,   280,    91,  3320,   347,     5,   504,     5,   144,  1836,
     289,  1626,   504,     9,   504,  1573,  1843,  1844,   467,   295,
     508,   102,   508,   505,   113,  1852,   115,    40,   378,  2502,
     215,   162,   280,   278,   162,   378,    59,   231,   504,   420,
    3295,   504,  1869,    91,   508,   420,  1873,  1874,   420,  1876,
      59,  2564,    59,  1822,  1881,  1882,  1883,  1884,  1885,  1886,
    1887,  1709,   420,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,  2582,   287,   259,   514,  2800,  1905,  1906,
     466,  2607,  1909,  1411,  1911,  1413,   307,   308,   309,  1916,
    3345,  1918,   420,   148,    98,   148,   493,   268,   268,   504,
    1869,    40,   268,   173,  3069,   268,   449,     3,   504,   504,
       9,  1938,  1881,   202,  1941,    39,  1943,   418,   418,   502,
    1947,   420,   502,   420,   420,   420,  1941,  1954,   198,   506,
     343,  1958,  1947,  1960,   347,  1962,    13,  1964,  1941,   167,
     505,   505,  1911,  1327,  1947,   505,  1973,   463,   505,  1918,
     371,  1709,   508,   505,   505,   220,   505,   436,  1941,   504,
     275,   220,   275,   504,  1947,   378,   236,   504,   462,   508,
    1941,    11,  1356,  1357,  1822,  2644,  1947,  2004,   345,   268,
     503,   508,  2009,  2010,   273,  1954,  2958,   408,  1372,  1958,
    2938,   143,   514,   508,   513,  1964,  2626,   504,  2038,   561,
     273,   418,  2919,   176,   420,   157,  2033,  2034,  3184,  2544,
     162,  2038,   504,   158,   167,   508,   505,   446,   288,   213,
     441,  1869,   508,   502,   167,  2052,   505,   506,  2055,  1941,
    2057,   452,   321,  1881,   259,  1947,   449,  1852,   381,   222,
    2845,   284,   306,  1858,   306,   466,  2073,  2074,   337,   508,
     508,   176,   215,  2080,   505,   504,  2083,   222,  3127,   289,
     222,   213,   268,  1911,  1822,   326,   281,   458,  2083,   490,
    1918,   431,   504,  2100,   148,   148,   504,   148,   466,   148,
    2083,   233,    40,   504,   268,  2100,  2113,  2622,   283,   487,
     283,   505,   502,   363,   505,   487,   505,  2100,   505,   369,
    2083,  2677,   505,  2130,  2131,   505,  1954,    40,    59,   167,
    1958,  1869,  2083,    11,  2783,    40,  1964,  2100,   162,   505,
    2147,   504,  2149,  1881,   505,   505,   505,   504,   280,  2100,
     176,  2158,   504,   162,   167,   503,   505,   289,  3061,   487,
     513,   420,   412,   508,   414,  1960,   151,   506,   437,  2176,
    2177,  2178,   505,  1911,   505,   505,  3323,   446,   504,   504,
    1918,   431,   245,   504,   307,   308,   309,   437,   463,   504,
     440,    40,   504,    59,   508,   493,  1704,   489,   284,  3163,
     284,   508,  2812,  2813,   239,   443,  1714,  2214,  1716,  1573,
     268,  1719,    59,  2220,    59,    40,  1954,  1725,   259,  1727,
    1958,   504,   148,   420,   198,  2781,  1964,   148,  2248,   148,
     420,  1739,   275,   275,   505,    60,  1744,  2235,   420,  2235,
    1748,  1749,  1750,  1751,   493,  1753,  1754,  2254,   371,   420,
    2235,  2235,   420,   504,     7,     8,    40,   345,   505,    12,
     802,   431,   508,   281,    17,  2272,   283,    40,    21,   505,
      23,    24,   466,  2922,   148,    28,    29,    30,   503,   104,
      33,   503,   273,    36,    37,   408,   505,    40,   504,   504,
      43,    44,   167,   505,   173,    59,  2811,   181,   505,   505,
     162,    78,   139,  2310,   436,  2254,   194,   167,   504,  2316,
     514,   294,   351,   505,   284,   176,   148,   171,   441,   198,
     505,   431,   505,   504,    40,    40,   505,    84,   446,   452,
     194,   508,    85,    86,  3040,    37,   505,   504,   493,   504,
      42,   493,   508,   505,    97,  1709,   505,  2354,   505,   102,
     103,   104,   105,   106,   505,   504,     8,   236,  3322,    11,
     508,   505,   503,    15,    16,   504,   167,    19,    20,    21,
     502,  2354,   197,   508,   506,   504,   465,  2919,   505,   505,
     508,   504,     3,  3311,     5,  2456,  2393,   452,  2183,   505,
     505,  2354,   505,    40,   505,   493,   505,    99,   283,  2419,
      59,  2408,   505,  2354,   505,  2412,  2413,   466,   505,   288,
    2393,   505,  2419,    60,   200,   113,    40,  3320,   222,   504,
      86,   246,  2429,   273,   187,  2432,  2254,  2434,   506,   254,
     273,  2451,   506,  2228,  2441,  2442,  3129,   506,  2445,  2446,
     506,   266,   506,  2450,  2451,   506,   506,   420,  3152,   420,
    2457,   993,    40,  2248,  3113,   503,  3115,   104,  1822,   506,
     506,   506,   506,   503,     5,  2472,   168,   105,   493,   506,
     506,   505,  3125,   298,   176,  2482,   506,   506,  2470,  2470,
     268,  2470,  2502,  2470,   506,   506,   107,   108,  2470,  2476,
     506,   506,  2441,  2470,   506,  2502,   506,   466,   506,   506,
     506,   506,   204,  3128,   506,  1869,  3131,   506,   506,   506,
     506,   506,   506,    40,   504,  2310,  2254,  1881,   220,     9,
     504,   283,   344,  2318,   349,  2320,   504,   504,   230,  2324,
     328,  2326,   508,   412,  2541,   414,   508,  2544,  2545,   505,
    2547,    59,   194,   505,   194,   187,  3061,  1911,   373,  3255,
     197,  2558,  3245,  2560,  1918,  3264,   508,   451,   437,    89,
     262,   440,   505,   184,   185,   217,   337,   392,   504,    40,
     148,   505,   120,   148,    40,   505,   359,   359,    40,    40,
     505,   283,   504,  2581,   504,  2581,  3239,  2095,   446,   504,
    1954,  2578,   508,   303,  1958,  2544,  2581,  2581,   504,   246,
    1964,   273,   186,   244,   446,   307,   504,   254,   431,    72,
     286,    78,   314,  2441,    72,  2622,     9,   361,   505,   266,
      59,   504,  2609,  1165,   505,  2612,   503,   248,   249,   250,
     251,   252,   253,   285,   505,   256,   257,  2644,   503,    91,
    2647,   129,   493,   266,   283,    40,   431,   504,   504,  2669,
     286,   298,   354,   286,   451,   200,   167,  2664,  2665,   173,
     378,   505,  2669,   283,   505,  2672,   505,   505,   283,   505,
     372,   118,   358,  2622,  2681,   443,    55,    25,    36,   144,
     505,   358,   291,  2805,   198,   688,  2693,  2528,  1726,  2672,
    1638,  2698,  2699,    14,  2171,  2541,  2703,  2704,  2647,  2234,
     604,  2708,   349,  2441,  2711,  2712,  2316,  2919,  3270,  2716,
    2717,  3376,  3033,  2720,  3333,  3217,  2544,  2724,  2738,  3324,
    2573,   100,   236,  3369,  2731,  3089,   373,  2164,  1152,  2724,
    2177,  3322,  3331,  2547,  2520,  2161,  3292,  3319,  2481,   441,
     119,  2724,  2587,  1322,   446,   392,   367,   368,  2598,  2544,
    1405,  1843,  1356,  3215,  3154,  2704,  2264,  1421,   137,  2480,
    3295,  2724,   141,  3398,  1441,  3249,  2470,   520,  2775,  2147,
    2113,   524,   525,  2724,   288,   528,  2783,  1112,  2573,  1698,
    1135,  2375,   535,  3304,   163,  1327,   297,   166,  2130,  1662,
    3226,  3117,    21,   965,  2622,  2802,   307,   308,   309,  2100,
    1697,  2962,  1134,   182,  2811,  3320,  2544,   965,  1137,  1952,
     563,   564,   565,   621,  1356,  1357,   610,  2354,  2400,  2647,
    2353,   943,  3054,  1374,   941,  3230,  3229,   941,  2011,   941,
    1372,  1852,  2724,   941,  2413,  2114,  2056,  2053,  2845,   491,
     492,   493,  2013,   495,   496,   497,   498,   499,   500,   363,
     603,   604,   605,  1974,  2731,  2672,  1492,   610,  2426,   612,
     371,  1637,  2811,   484,   485,  1960,    97,    -1,   621,    -1,
      -1,    96,   625,   626,    -1,    -1,  2704,   630,   631,  2674,
      -1,  2888,    -1,    -1,  2622,    -1,    -1,    -1,    -1,    -1,
    2254,   644,   645,   646,   273,    -1,  2845,   408,   412,   147,
     414,    -1,   281,    -1,    -1,   658,   659,    -1,   661,  2647,
      -1,    -1,  2919,  2900,    -1,  2922,  2923,   431,  2938,   167,
      -1,   674,    -1,   437,   303,    -1,   440,   680,    -1,    -1,
     441,  2938,    -1,  2728,    -1,     0,    -1,   690,    -1,    -1,
     693,   452,   167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     329,  2958,    -1,    18,    37,   466,    21,    -1,  2965,    42,
      -1,    -1,    -1,    -1,    -1,    -1,  2704,    -1,    -1,  2976,
    2977,    36,    -1,  2980,  2923,  2982,   561,    -1,    -1,   490,
      45,    -1,    -1,  2811,    -1,    -1,    -1,    -1,   741,   742,
     743,   744,    -1,   504,    -1,    -1,    -1,  2505,  2506,    -1,
    3007,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    99,  2845,    -1,    -1,
      85,    86,    87,    -1,  3031,  2533,     8,    -1,    -1,    11,
      -1,  1573,    97,    15,    16,    -1,    -1,    19,    20,    21,
    2548,  2549,  2550,  2551,  2552,  2553,  2554,  2555,  2556,  2557,
      -1,    -1,    -1,    -1,  3061,    -1,    -1,    -1,    -1,   307,
     308,   309,    -1,    -1,    -1,    -1,    -1,   561,    -1,    -1,
      -1,    -1,    -1,  2811,    -1,    -1,    -1,  2441,    -1,    -1,
      -1,    -1,   307,   308,   309,   168,    -1,    -1,  3075,  3076,
      -1,    -1,  3099,    -1,    -1,  2923,  3103,    -1,    -1,    -1,
      -1,  2896,    -1,    -1,    -1,    -1,  3113,  2845,  3115,    -1,
    3117,    -1,  3061,    -1,  3121,    -1,  3123,    -1,  3125,    -1,
    3103,   204,    -1,   371,  2919,    -1,    37,    -1,  3135,    -1,
      -1,    42,    -1,  3140,    -1,  3142,    -1,   220,    -1,    -1,
    3103,    -1,    -1,  3150,    -1,    -1,   371,   230,    -1,    -1,
      -1,    -1,  3103,    37,    -1,    -1,  3163,    -1,    42,    -1,
     408,  3168,    -1,    -1,  3151,    -1,  3153,  1709,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
    2544,    -1,    -1,   408,    -1,  2923,    -1,    -1,    99,   942,
     943,    -1,   945,   441,    -1,   948,    -1,    -1,  2993,    -1,
     283,   954,   955,   428,   452,    -1,  3193,   960,    -1,  3216,
      -1,    -1,   194,   966,    -1,    99,   441,   802,   466,  3226,
     973,    -1,  3209,    -1,   307,    -1,  3213,   452,    -1,    -1,
     983,   314,  3239,  3061,    -1,   217,    -1,   990,    -1,    -1,
      -1,   466,   490,     0,    -1,    -1,  3253,  1000,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,   168,  2622,    -1,
      -1,    -1,    -1,    -1,  3271,   490,  3061,    -1,    -1,    -1,
    3253,   354,    -1,    -1,  2782,    -1,    -1,    -1,    -1,   504,
    1822,    -1,    -1,  2647,   168,    -1,    -1,    -1,  3295,   372,
    3253,    -1,    -1,   204,    -1,    -1,    -1,  1050,    -1,    -1,
      -1,    -1,  3253,   285,  3311,    -1,    -1,    -1,   802,   220,
      -1,    -1,  3295,  3320,    -1,  3322,    -1,    -1,    -1,   230,
     204,    -1,    -1,  3061,    -1,    -1,    -1,  1869,    -1,    -1,
      -1,    -1,  3295,    -1,    -1,    -1,   220,    -1,  3345,  1881,
    2704,    98,  1095,    -1,  3295,  1098,   230,    -1,    -1,    -1,
    3337,   262,    -1,  3360,  3361,  3362,    -1,    -1,   441,  1112,
    1113,    -1,  3345,   446,    -1,    40,  1119,    -1,    -1,  1911,
      -1,  3320,   283,    -1,    -1,    -1,  1918,  3364,   262,    -1,
    3387,    -1,  3345,    -1,    -1,    -1,   143,    -1,  1141,    -1,
    3185,    -1,    -1,    -1,  3345,    -1,   307,    -1,  1151,  1152,
     157,    -1,    -1,   314,    -1,   162,    -1,    -1,   993,    -1,
     167,  1164,  1954,    -1,    -1,    -1,  1958,    -1,    -1,   176,
      -1,  3428,  1964,   307,   181,    -1,    -1,   102,  1181,   104,
     314,   106,  1185,    -1,    -1,    -1,  1189,     8,    -1,    -1,
      11,    -1,    -1,   354,    15,    16,    -1,  2811,    19,    20,
      21,    -1,    12,    -1,   519,    -1,   213,    17,    -1,    -1,
      -1,   372,    -1,    -1,    -1,    36,    -1,    40,    -1,    29,
     354,    -1,    -1,    -1,    -1,    -1,   233,    -1,    -1,    -1,
      -1,  2845,    -1,    43,    44,    -1,    -1,    60,   372,    -1,
      -1,    -1,  3320,    -1,    -1,    -1,    -1,    -1,    -1,   993,
      -1,    -1,    -1,    -1,   569,   570,    -1,    -1,    -1,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,   500,    -1,
      -1,    -1,    -1,   280,    -1,  3320,   283,    -1,    -1,    -1,
     441,   104,   289,    -1,  3042,    -1,   167,    -1,    -1,    -1,
      -1,    -1,    -1,   103,    -1,   610,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3062,  3063,   621,   441,    -1,  2923,
      -1,    -1,  3357,    -1,    -1,  1318,    -1,  1320,  1321,    -1,
      -1,   328,    -1,    -1,    -1,  1328,    -1,    -1,  3086,    -1,
    1165,    -1,  3320,    -1,    -1,    -1,  1339,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   351,    -1,    -1,    -1,   171,    -1,
      -1,    -1,     8,    -1,   669,    11,    -1,    -1,    -1,    15,
      16,    -1,    -1,    19,    20,    21,  1369,    -1,    -1,    -1,
      -1,  1374,    -1,   688,   197,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   217,    53,    -1,    -1,
      -1,   408,  1405,    36,    -1,  1408,    -1,  1410,  1411,    -1,
    1413,  1414,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1165,    78,   246,    -1,    -1,   307,   308,   309,   436,
      -1,   254,    -1,     8,    -1,    -1,    11,    -1,  1441,   446,
      15,    16,    -1,   266,    -1,    -1,    -1,  3061,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   463,    -1,   465,   466,
    1463,  1464,  2254,    -1,   285,    -1,  1469,    -1,  1471,    -1,
      -1,    46,    -1,    -1,    -1,   298,    -1,    -1,    53,     8,
      -1,  1484,    11,  1486,  1487,    -1,    15,    16,    -1,    -1,
     371,  1494,  1327,    -1,  1497,   502,    -1,  1500,   505,   506,
     507,    -1,  1505,    78,    -1,  1508,    -1,    -1,    -1,    -1,
    1513,    -1,  1515,    -1,  1517,    -1,   172,    46,    -1,    -1,
      -1,  1356,  1357,    -1,    53,    -1,   349,   408,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,    -1,  1372,   194,  1542,
      -1,    -1,    -1,    -1,  1547,    -1,    -1,    -1,    -1,    78,
     373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3316,    -1,
     441,   217,   218,    -1,    -1,    -1,   141,    -1,    -1,   392,
      -1,   452,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,  1585,  1327,   217,   466,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   520,    -1,   172,    -1,   524,
      -1,    -1,    -1,   528,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,  1356,  1357,   189,   271,    -1,    -1,   933,   194,
      -1,    -1,    -1,   504,    -1,    -1,    -1,    -1,  1372,   285,
      -1,  1634,    -1,  1636,    -1,  1638,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,  1649,  1650,    -1,  2441,
      -1,   966,   285,    -1,    -1,   107,   108,   232,   973,  1662,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
     491,   492,   493,    -1,   495,   496,   497,   498,   499,   500,
      -1,    -1,    -1,    -1,  1687,    -1,  1689,   612,    -1,    -1,
      -1,    -1,    -1,  1008,    -1,    -1,    -1,    -1,    -1,    -1,
    1703,  1704,    -1,   232,  1019,    -1,  3320,    -1,    -1,    -1,
     285,  1714,  1715,  1716,  1717,    -1,  1719,    -1,    -1,    -1,
      -1,    -1,  1725,    -1,  1727,   535,    -1,   383,    -1,    -1,
      -1,  1046,   184,   185,    -1,  1738,  1739,    -1,  1573,    -1,
    1743,  1744,    -1,    -1,    -1,  1748,  1749,  1750,  1751,    -1,
    1753,  1754,  2544,    -1,   564,   565,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   690,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1776,  1777,  1778,  1779,  1780,    -1,    -1,
      -1,    -1,    -1,    -1,  1787,  1788,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1796,    -1,    -1,   248,   249,   250,   251,
     252,   253,    -1,    -1,   256,   257,    -1,    -1,   383,    -1,
    1125,  1126,    -1,  1128,    -1,    -1,   741,   742,   743,   744,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1573,
    2622,    -1,   488,    -1,    -1,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,  2647,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,    -1,
     680,   948,    -1,    -1,  1709,    -1,    -1,    -1,    -1,  1882,
    1883,  1884,  1885,  1886,  1887,    -1,    -1,  1890,  1891,  1892,
    1893,  1894,  1895,  1896,  1897,  1898,  1899,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2704,   488,    -1,   367,   368,  1920,    -1,    -1,
     495,   496,   497,   498,   499,   500,    -1,    -1,    -1,  1932,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1941,    -1,
       8,    -1,    -1,    11,  1947,    -1,    -1,    15,    16,  1952,
      -1,    -1,    -1,    -1,  1957,    -1,    -1,    -1,    -1,   488,
      -1,    -1,    -1,    -1,    -1,  1709,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,  1822,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2002,
      -1,    -1,    -1,  2006,    -1,    -1,    -1,    -1,  2011,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2811,
     945,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2033,  2034,   484,   485,  1869,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1881,  2050,    -1,    -1,
      -1,    -1,    26,  2845,     0,    -1,    -1,    -1,    32,    -1,
      -1,    -1,    -1,    -1,  1141,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    -1,   141,    -1,    -1,  1911,    -1,  1822,    -1,
    2083,   948,    -1,  1918,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,  2095,    -1,    -1,    -1,    -1,  2100,    -1,    -1,
      -1,  2104,    -1,    -1,   172,  1420,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1954,
      -1,   189,    -1,  1958,    -1,  1869,   194,    -1,    -1,  1964,
     104,  2923,    -1,    -1,    -1,    -1,    -1,  1881,    -1,    -1,
      -1,  2144,    -1,    -1,  2147,    -1,    -1,  2150,    -1,    -1,
     960,    -1,    98,    -1,    -1,    -1,    -1,    -1,    -1,   133,
      -1,    -1,    -1,  2166,   232,    -1,    -1,  1911,    -1,    -1,
      -1,    -1,    -1,   983,  1918,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1497,    -1,    -1,  1500,    -1,    -1,    -1,    -1,
    1505,    -1,    -1,  1508,    -1,    -1,    -1,   143,  1513,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1954,   157,    -1,    -1,  1958,  1530,   162,   285,    -1,    -1,
    1964,   167,    -1,   197,    -1,    -1,  1151,  2230,    -1,    -1,
     176,    -1,    -1,    -1,  2237,   181,    -1,    -1,    -1,  1164,
    1050,    -1,    -1,    -1,  2247,    -1,    -1,  2250,  2251,  2252,
    2253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1185,  2264,    -1,  2266,    -1,  1132,  2269,   213,    -1,  3061,
      -1,  2274,   246,  1588,  1141,    -1,    -1,    -1,    -1,    -1,
     254,    -1,    -1,    -1,  2287,    -1,    -1,   233,    -1,    -1,
      -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2304,  1112,  1113,    -1,    -1,   107,   108,    -1,    -1,
      -1,    -1,    -1,   287,    -1,   383,    -1,    -1,    -1,  2322,
    2323,    -1,  2325,    -1,   298,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   280,    -1,    -1,   283,    -1,    -1,
      -1,    -1,    -1,   289,  1659,    -1,     8,    -1,    -1,    11,
      -1,  2354,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   343,
      -1,  2374,    -1,   347,    36,   349,    -1,    -1,    -1,  2382,
    2383,  2384,   328,   184,   185,    -1,  1463,  1464,  2391,    -1,
    2393,  2394,  1469,    -1,    -1,  1320,    -1,  2400,    -1,   373,
      -1,    -1,    -1,  1328,   378,   351,    -1,    -1,    -1,    -1,
      -1,    -1,  2415,    -1,    -1,    -1,    -1,    -1,   392,  2254,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
     498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2445,  2446,    -1,    -1,    -1,   248,   249,   250,
     251,   252,   253,    -1,    -1,   256,   257,    -1,    -1,    -1,
      -1,    -1,   408,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2474,    -1,    -1,  1789,   449,    -1,  2480,    -1,    -1,
      -1,    -1,    -1,  1798,    -1,    -1,    -1,    -1,    -1,    -1,
     436,    -1,    -1,  2496,    -1,    -1,    -1,  2500,    -1,    -1,
     446,  2504,  2505,  2506,    -1,    -1,    -1,  2510,  2511,  2512,
    2254,  2514,    -1,    -1,    -1,    -1,    -1,   463,    -1,   465,
     466,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3320,    -1,
    2533,    -1,  2535,    -1,    -1,    -1,    -1,  1614,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2548,  2549,  2550,  2551,  2552,
    2553,  2554,  2555,  2556,  2557,   217,   502,    -1,    -1,   505,
     506,   507,    -1,    -1,    -1,     8,   367,   368,    11,  1494,
      -1,  2574,    15,    16,  2577,    -1,    19,    20,    21,    -1,
    2583,    -1,    -1,    -1,  2587,  1662,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,  2598,  1463,  1464,    -1,    -1,
    1410,  1411,  1469,  1413,    -1,    -1,  2441,    -1,    -1,    -1,
      -1,  2614,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,    -1,  1941,    -1,    -1,    -1,
    2633,    -1,  1947,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2644,    -1,    -1,    -1,    -1,    -1,  2650,    -1,    -1,
      -1,    -1,    -1,    -1,  2657,  2658,  2659,  2660,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2669,    -1,    -1,  2672,
      -1,    -1,    -1,  2676,  2677,    -1,  1486,    -1,    -1,    -1,
      -1,    -1,    -1,   484,   485,    -1,    -1,    -1,    -1,  2692,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2441,    -1,    -1,
      -1,    -1,    -1,   504,    -1,  1515,    -1,  1517,    -1,  2544,
      -1,  1636,    -1,  1638,    -1,    -1,    -1,    -1,    -1,  2722,
      -1,  2724,    -1,  2038,  1649,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2738,    -1,    -1,    -1,  2742,
      -1,  2056,    -1,    -1,    -1,  2748,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2072,    -1,  2762,
      -1,    -1,  1687,    -1,    -1,  2768,    -1,    -1,  2083,    -1,
      -1,    -1,    -1,    -1,   217,    -1,    -1,    -1,  2781,  2782,
    2783,    -1,    -1,    -1,    -1,  2100,  2789,  2622,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1662,    -1,    -1,    -1,    -1,
    2544,    -1,    -1,  2806,    -1,  1882,  1883,  1884,  1885,  1886,
    1887,    -1,  2647,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,    -1,    -1,    -1,    -1,    -1,    -1,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,   500,    -1,
      -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1776,  1777,  1778,  1779,  1780,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2704,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2622,  1689,
    2883,  2884,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2892,
      -1,    -1,    -1,    -1,  1704,    -1,  2899,    -1,    -1,    -1,
      -1,    -1,    -1,  2647,  1714,    -1,  1716,    -1,    -1,  1719,
    2913,    -1,    -1,     8,    -1,  1725,    11,  1727,    -1,  2922,
      15,    16,    -1,    -1,    19,    20,    21,    -1,     8,  1739,
      -1,    11,    -1,  2248,  1744,    15,    16,    -1,  1748,  1749,
    1750,  1751,    -1,  1753,  1754,  2948,    -1,    -1,    -1,    -1,
      -1,  2954,    -1,    -1,    -1,    -1,  2033,  2034,    -1,  2962,
    2704,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,  2811,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2989,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    78,    -1,
      19,    20,    21,    -1,    -1,    -1,    -1,  1932,  3011,    -1,
    2845,    -1,    -1,  3016,    -1,  1882,  1883,  1884,  1885,  1886,
    1887,    -1,    -1,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1897,  1898,  1899,    -1,    -1,    -1,    -1,    -1,    -1,  3042,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,  3062,
    3063,   141,    -1,    -1,    -1,    -1,    -1,  2811,    -1,    -1,
    2147,    -1,    -1,    -1,    -1,  3078,    -1,  3080,  3081,    -1,
      -1,    -1,    -1,  3086,    -1,    -1,    -1,    -1,  2923,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,  3100,     0,    -1,
    3103,  2845,    -1,    -1,  2419,    -1,    -1,    -1,    -1,   189,
    1920,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,
    3123,    -1,   217,    -1,  3127,  3128,    -1,    -1,  3131,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2451,    -1,    -1,   656,
     657,    -1,  1952,    -1,    -1,    -1,    -1,  1957,    -1,    -1,
      -1,  3154,   232,    -1,    -1,  2470,    -1,    -1,  3161,    -1,
      -1,  2476,    -1,    -1,    -1,    -1,  2033,  2034,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2923,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2502,  3191,    -1,
     285,    -1,  2002,    -1,    -1,    -1,    98,    -1,   217,    -1,
      -1,  2011,    -1,    -1,   721,   285,    -1,    -1,   725,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    -1,    -1,    -1,    -1,  3061,  3230,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3253,    46,    -1,    -1,    -1,   157,    -1,    -1,    53,    -1,
     162,    -1,    -1,  2578,    -1,   167,   285,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   176,    -1,    -1,  3280,    -1,   181,
    2147,    -1,    -1,    78,    -1,  2095,    -1,    -1,    -1,  3292,
    3293,    -1,  3295,  3296,  2609,    -1,    -1,  2612,    -1,    -1,
      -1,  3304,    -1,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   213,  2237,  3316,    -1,    -1,    -1,  3061,    -1,    -1,
      -1,    -1,    -1,   840,    -1,    -1,  2251,  2252,  2253,    -1,
      -1,   233,    -1,    -1,  2144,  3338,    -1,    -1,    -1,    -1,
    2150,  2266,  3345,    -1,  2269,    -1,   141,    -1,    -1,  2274,
      -1,    -1,    -1,    -1,  2669,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2445,  2446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,   280,   932,
    3383,   283,    -1,    -1,    -1,    -1,    -1,   289,    -1,    -1,
      -1,    -1,    -1,    -1,   189,  3398,   491,   492,   493,   194,
     495,   496,   497,   498,   499,   500,    -1,    -1,   488,  2724,
      -1,    -1,    -1,    -1,    -1,   495,   496,   497,   498,   499,
     500,   938,    -1,  2738,    -1,    -1,   328,   944,    -1,    -1,
     947,    -1,    -1,   950,   951,   952,   953,   232,   991,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   351,
      -1,    -1,    -1,    -1,  2264,    -1,    -1,  2382,  2383,  2384,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    -1,   491,   492,   493,   992,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,  3320,    -1,    -1,    -1,    -1,
     285,    -1,    -1,    -1,    -1,  1012,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,   408,    -1,    -1,    -1,
      -1,  1064,    -1,  1030,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1041,  1042,  1043,    -1,  1045,  1046,
      78,    -1,    -1,    -1,   436,    -1,    -1,    -1,  1091,    -1,
    1093,  1094,    -1,    -1,   446,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1076,
      -1,   463,    -1,   465,   466,    -1,    -1,  2644,    -1,    -1,
      -1,  2496,    -1,    -1,    -1,    -1,  3320,    -1,  2445,  2446,
      -1,  2391,    -1,    -1,  2394,  2900,    -1,    -1,   383,    -1,
    2400,    -1,  2669,   141,    -1,    -1,    -1,    -1,    -1,    -1,
     502,    -1,    -1,   505,   506,   507,    -1,    -1,    -1,    -1,
    1127,    -1,    -1,  1166,  1131,  1132,  1169,  1170,    -1,    -1,
      -1,    -1,    -1,  2938,   172,  1142,  1143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,     8,    -1,   194,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,  2583,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,   232,    -1,    -1,    -1,    -1,    53,
    2500,    -1,    -1,   488,  2504,  2505,  2506,    -1,    -1,    -1,
     495,   496,   497,   498,   499,   500,  2783,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2533,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2657,  2658,  2659,  2660,    -1,   285,  2548,  2549,
    2550,  2551,  2552,  2553,  2554,  2555,  2556,  2557,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1274,    -1,    -1,
    3075,  3076,    -1,    -1,    -1,    -1,  1283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2644,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1307,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1354,  2669,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,  1365,    -1,  1367,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1377,   189,  2693,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,   383,  3151,    -1,  3153,    -1,
    2650,  1394,    -1,    -1,    -1,  2922,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2789,    -1,  2676,    -1,   232,    -1,
      -1,    -1,    -1,  1426,  1427,    -1,    -1,    -1,  3193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3209,    -1,    -1,    -1,  3213,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2783,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,  1444,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
     498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,  1476,
      -1,  1478,  1479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2782,    -1,  1491,  1492,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1507,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,   383,
      -1,  1538,  3337,  1540,    -1,    -1,    -1,    -1,    -1,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,
      -1,    19,    20,    21,    -1,    -1,  3123,    46,    -1,  3364,
      -1,  1568,    -1,    -1,    53,  2922,    -1,  1574,  1575,  1576,
    1577,  1578,  1579,  1580,  1581,    -1,    -1,    -1,    46,  1586,
    1587,    -1,    -1,    -1,  1591,    53,    -1,    -1,  1595,    78,
      -1,  1598,  1599,  1600,  1601,  1602,  1603,  1604,  1605,  1606,
      -1,    -1,  1609,    -1,    -1,    -1,    -1,    -1,    -1,  1616,
      78,  1618,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1673,  1674,  1639,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,    -1,
      -1,    -1,   141,    -1,  2954,    -1,    -1,    -1,    -1,    -1,
     514,    -1,  2962,  3078,    -1,     8,  1673,  1674,    11,    -1,
     948,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,   172,    -1,  3100,    -1,    -1,    -1,  1732,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,  1742,
     189,    -1,  1745,    46,   172,   194,    -1,    -1,    -1,    -1,
      53,  3011,    -1,    -1,    -1,    -1,  3016,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,  3042,   232,    -1,    -1,  3161,    -1,    -1,   217,
     218,  1758,    -1,    -1,    -1,  1762,    -1,    -1,  1765,  1766,
      -1,    -1,  3062,  3063,   232,    -1,  3123,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3191,    -1,    -1,    -1,
      -1,    -1,    -1,  1826,  1827,    -1,  3086,  1065,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1802,   285,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,     3,    -1,  1852,
      -1,    -1,     8,    -1,    -1,    11,    -1,   285,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,  3127,    -1,   172,
    1108,    -1,    -1,    -1,    -1,    -1,  1843,  1844,    -1,    -1,
      36,    -1,    -1,    -1,    40,    -1,   189,    -1,    -1,    -1,
      46,   194,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,  1141,    -1,    -1,  1873,  1874,    -1,  1876,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,  1905,  1906,
      -1,    -1,  1909,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1191,    -1,   383,    -1,  1960,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,  1938,    -1,    -1,    -1,    -1,  1943,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,  1962,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,  1973,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    36,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   189,    53,    -1,    -1,  2004,   194,   488,
      -1,    -1,  2009,  2010,    -1,    -1,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,  3316,    -1,    -1,    78,
     488,   217,   218,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    -1,  1312,    -1,   232,    -1,    -1,    -1,
     383,    -1,    -1,    -1,  2087,  2052,     8,    -1,  2055,    11,
    2057,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    -1,    -1,    -1,  2073,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    36,   271,    -1,  2120,  2121,    -1,
      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   285,
      -1,    53,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2113,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,  2130,  2131,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,  1417,
      -1,    -1,  2149,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,  2158,   495,   496,   497,   498,   499,   500,   217,   218,
      40,    -1,    -1,    -1,  1442,   508,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      60,  1459,    -1,  1461,    -1,  1463,  1464,   383,  1466,    -1,
      -1,  1469,    -1,    -1,  1472,    -1,    -1,  1475,    -1,    -1,
      -1,    -1,  1480,    -1,    -1,  1483,    -1,  2214,    -1,   268,
     172,    -1,   271,  2220,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   104,   105,   285,   189,    -1,   288,
      -1,    -1,   194,   113,    -1,    -1,    -1,  2280,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,  1536,    -1,
      -1,    -1,    -1,  1541,    -1,  2272,  1544,  1545,  1546,    -1,
     232,    -1,  1550,    -1,    -1,    -1,  1554,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   171,   488,    -1,    -1,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,   500,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,    -1,
      -1,    -1,    -1,   285,   383,    -1,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1615,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,  1656,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,   268,    -1,
      -1,    -1,    -1,    -1,  1672,    -1,    -1,    -1,    -1,  1677,
      -1,  2408,    -1,    -1,    -1,  2412,  2413,    -1,    -1,    -1,
      -1,    -1,  2419,    -1,    -1,    -1,  1694,    -1,   298,    -1,
      -1,   383,  2429,    -1,    -1,  2432,    -1,  2434,    -1,   488,
      -1,    -1,   491,   492,   493,  2442,   495,   496,   497,   498,
     499,   500,    -1,  2450,  2451,    -1,   505,    -1,    -1,    -1,
    2457,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2472,    -1,    -1,    -1,   349,
      -1,    -1,    -1,    -1,    -1,  2482,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   373,    -1,  2502,    -1,    -1,    -1,    -1,
      -1,  2544,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
      -1,    -1,   392,    -1,   394,    -1,    -1,   397,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,   500,    -1,
      -1,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2558,    -1,  2560,    -1,    -1,    -1,    -1,    -1,    -1,
      79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    95,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1871,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1879,  1880,    -1,  1882,  1883,  1884,  1885,  1886,  1887,
      -1,    -1,  1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,
    1898,  1899,  1900,   142,   504,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,
     169,    -1,    -1,    -1,    -1,    -1,    -1,  2664,  2665,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2681,    -1,    -1,    -1,    -1,   198,
      -1,    -1,    -1,    -1,    -1,    -1,  2693,    -1,    -1,    -1,
      -1,  2698,  2699,    -1,    -1,    -1,  2703,    -1,  1976,  1977,
      -1,  2708,    -1,    -1,  2711,  2712,    -1,    -1,    -1,  2716,
    2717,    -1,    -1,  2720,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   241,    -1,  2731,    -1,   245,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2016,    -1,
      -1,    -1,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,
      -1,    -1,    -1,    -1,    -1,  2033,  2034,  2800,  2036,  2037,
      -1,    -1,  2805,    -1,    -1,    -1,    -1,    -1,  2775,    -1,
    2048,    -1,    -1,  2051,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
    2068,    -1,    -1,   312,    -1,  2802,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   327,  2852,
    2853,    -1,    -1,    -1,    -1,    -1,  2094,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   360,    -1,    -1,   363,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   373,    -1,    46,   376,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,  2147,
      -1,    -1,    -1,    -1,    -1,   394,    -1,    -1,    -1,    -1,
      -1,  2888,    -1,    -1,    -1,    -1,    -1,    -1,    78,   408,
      -1,    -1,    -1,    -1,    -1,    -1,   415,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   425,    -1,    -1,    -1,
      -1,    -1,   431,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2938,    -1,    -1,    -1,    -1,    -1,  2215,    -1,   458,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2225,  2226,    -1,
      -1,  2958,    -1,    -1,    -1,    -1,    -1,    -1,  2965,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2976,
    2977,    -1,    -1,  2980,    -1,  2982,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
    3007,    -1,    -1,    -1,   194,    -1,    -1,  3050,  3051,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3061,    -1,
      -1,    -1,    -1,    -1,  3031,    -1,    -1,   217,   218,  2307,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2329,  2330,  2331,    -1,    -1,  2334,  2335,  2336,  2337,
    2338,  2339,    -1,    -1,    -1,  2343,  2344,  2345,  2346,  2347,
    2348,  2349,  2350,  2351,  2352,    -1,    -1,    -1,   268,  2357,
    2358,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3099,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2385,    -1,    -1,
    3117,    -1,  2390,    -1,  3121,    -1,    -1,    -1,  3125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3135,  2407,
      -1,    -1,    -1,  3140,    -1,  3142,    -1,    -1,    -1,    -1,
      -1,    -1,  2420,  3150,    -1,  2423,  2424,    -1,    -1,    -1,
       0,    -1,  2430,  2431,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3168,    -1,    -1,    -1,    -1,  2444,  2445,  2446,  2447,
      -1,  2449,    22,    -1,    -1,  2453,    -1,    -1,    -1,    -1,
      -1,    -1,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,    -1,    -1,    -1,    47,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,  3216,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3226,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,  2507,
      -1,    -1,  3239,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,
      -1,    -1,    -1,    -1,  3271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   123,   124,    -1,    -1,  3320,    -1,    -1,
      -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   147,   488,   149,
     150,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
     500,    -1,    -1,   163,    -1,   505,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,  2613,    15,    16,    17,    18,
      19,    20,    21,   193,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3360,  3361,  3362,    26,    36,    -1,   209,
      -1,    -1,    32,    -1,    -1,    -1,  2644,    46,    -1,    -1,
      40,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
    3387,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,  2682,    -1,  2684,    -1,    -1,    -1,
    2688,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2697,
      -1,  3428,  2700,    -1,  2702,    -1,    -1,    -1,  2706,    -1,
      -1,  2709,  2710,    -1,   104,  2713,  2714,    -1,    -1,    -1,
      -1,    -1,    -1,  2721,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2730,    -1,    -1,    -1,    -1,   307,   308,   309,
      -1,    -1,    -1,   133,    -1,   315,    -1,  2745,   318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,   347,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2783,   356,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,   371,    -1,    -1,    -1,    -1,    -1,   197,   378,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,   404,    -1,    -1,    -1,   408,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   246,    -1,   428,    -1,
      -1,    -1,    -1,    -1,   254,    -1,    -1,    -1,    -1,   268,
      -1,   441,   271,    -1,   444,    -1,   266,   447,    -1,    -1,
      -1,    -1,   452,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,   466,   287,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   298,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,    -1,    -1,  2921,  2922,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,   507,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2946,  2947,
      -1,    -1,    -1,   343,    -1,    -1,    -1,   347,    -1,   349,
      -1,    -1,    -1,    -1,    -1,    -1,  2964,    -1,    -1,    -1,
    2968,    -1,  2970,  2971,  2972,    -1,    -1,  2975,    -1,    -1,
    2978,  2979,    -1,   373,   383,    -1,    -1,    -1,   378,  2987,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3028,    -1,    -1,    -1,    -1,    -1,  3034,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3047,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   449,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3077,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    -1,    -1,    -1,    -1,   505,  3105,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3137,
    3138,  3139,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3157,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3214,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3231,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3241,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,     4,     5,     6,     7,     8,     9,    10,  3266,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,  3291,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,  3335,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,  3390,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,    -1,    -1,    -1,    -1,
      -1,    -1,   495,   496,   497,    -1,    -1,    -1,    -1,   502,
      -1,   504,    -1,    -1,    -1,    -1,   509,   510,   511,   512,
      -1,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
      -1,   442,   443,   444,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,    -1,    -1,
      -1,    -1,    -1,    -1,   495,   496,   497,    -1,    -1,    -1,
      -1,   502,    -1,   504,    -1,    -1,    -1,    -1,   509,   510,
     511,   512,    -1,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,   490,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,   490,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,   228,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    38,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,   505,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
      -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,    -1,
      -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,     3,     4,     5,     6,     7,    -1,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,   456,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
      -1,   490,    -1,    -1,    -1,     3,     4,     5,     6,     7,
       8,     9,    10,   502,    -1,   504,    -1,    -1,    -1,    -1,
     509,   510,   511,   512,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,   505,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,   463,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,   497,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,    -1,
      -1,    -1,    -1,    -1,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
      -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
       7,     8,     9,    10,   502,    -1,   504,    -1,    -1,    -1,
      -1,   509,   510,   511,   512,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,    -1,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,    -1,   409,   410,   411,   412,   413,   414,   415,    -1,
     417,   418,   419,    -1,    -1,   422,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   495,   496,
     497,    -1,     3,     4,     5,   502,    -1,   504,     9,    -1,
      -1,    -1,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,   283,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
      -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,    -1,   409,   410,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
      -1,   442,   443,   444,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   495,   496,   497,    -1,     3,     4,
       5,     6,     7,   504,     9,    -1,    -1,    -1,    -1,    -1,
      -1,   512,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,   176,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,    -1,    -1,    -1,     3,     4,     5,
       6,     7,    -1,     9,    -1,    -1,    -1,   502,    -1,   504,
      -1,    -1,    -1,    -1,   509,   510,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,    -1,   322,   323,   324,   325,
     326,   327,    -1,   329,   330,   331,   332,   333,   334,   335,
     336,    -1,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,    -1,    -1,   373,   374,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,    -1,   389,   390,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,    -1,
     406,   407,    -1,   409,   410,   411,   412,   413,   414,   415,
      -1,   417,   418,   419,    -1,    -1,   422,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
      -1,    -1,   438,   439,   440,    -1,   442,   443,   444,   445,
      -1,   447,   448,   449,   450,   451,   452,   453,    -1,   455,
     456,   457,   458,   459,   460,   461,    -1,    -1,   464,    -1,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   502,    -1,   504,    -1,
      -1,    -1,    -1,   509,   510,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,    -1,   285,   286,
     287,    -1,   289,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,    -1,   409,    -1,   411,   412,   413,   414,   415,    -1,
     417,   418,   419,    -1,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,   436,
      -1,   438,   439,   440,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,    -1,   455,    -1,
     457,   458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   505,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,    -1,
     322,   323,   324,   325,   326,   327,    -1,   329,   330,   331,
     332,   333,   334,   335,   336,    -1,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,    -1,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
      -1,   373,   374,   375,   376,   377,   378,   379,   380,   381,
     382,    -1,   384,   385,   386,   387,    -1,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,    -1,   406,   407,    -1,   409,    -1,   411,
     412,   413,   414,   415,    -1,   417,   418,   419,    -1,    -1,
     422,   423,   424,   425,   426,    -1,   428,   429,   430,   431,
     432,   433,   434,   435,    -1,    -1,   438,   439,   440,    -1,
     442,   443,   444,   445,    -1,   447,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,   459,   460,   461,
      -1,    -1,   464,    -1,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   504,   505,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,    -1,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,   408,   409,   410,   411,   412,   413,   414,   415,    -1,
     417,   418,   419,    -1,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,   441,   442,   443,   444,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,    -1,   455,   456,
     457,   458,   459,   460,   461,    -1,    -1,   464,    -1,   466,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,     3,   490,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,    -1,   269,   270,
     271,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
      -1,   322,   323,   324,   325,   326,   327,    -1,   329,   330,
     331,   332,   333,   334,   335,   336,    -1,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,    -1,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,    -1,   417,   418,   419,    -1,
      -1,   422,   423,   424,   425,   426,    -1,   428,   429,   430,
     431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
     441,   442,   443,   444,   445,    -1,   447,   448,   449,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,    -1,    -1,   464,    -1,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,    -1,     3,   490,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   504,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,   167,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,   408,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,   441,   442,   443,   444,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,   459,
     460,   461,    -1,    -1,   464,    -1,   466,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,     3,    -1,
     490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,   167,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,   408,   409,    -1,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,    -1,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,    -1,     3,   490,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,    -1,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,   459,   460,   461,    -1,    -1,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,    -1,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,   459,   460,   461,    -1,    -1,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,     3,    -1,     5,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,    -1,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,   459,   460,   461,    -1,    -1,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,    -1,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,    -1,   322,   323,
     324,   325,   326,   327,    -1,   329,   330,   331,   332,   333,
     334,   335,   336,    -1,   338,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
      -1,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,    -1,    -1,   373,
     374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
     384,   385,   386,   387,    -1,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,    -1,   406,   407,    -1,   409,    -1,   411,   412,   413,
     414,   415,    -1,   417,   418,   419,    -1,    -1,   422,   423,
     424,   425,   426,    -1,   428,   429,   430,   431,   432,   433,
     434,   435,    -1,    -1,   438,   439,   440,    -1,   442,   443,
     444,   445,    -1,   447,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,   459,   460,   461,    -1,    -1,
     464,    -1,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,    -1,
      -1,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,    -1,   322,   323,   324,   325,   326,   327,    -1,
     329,   330,   331,   332,   333,   334,   335,   336,    -1,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,   352,   353,    -1,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,    -1,    -1,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,    -1,   384,   385,   386,   387,    -1,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,    -1,   406,   407,    -1,
     409,    -1,   411,   412,   413,   414,   415,    -1,   417,   418,
     419,    -1,    -1,   422,   423,   424,   425,   426,    -1,   428,
     429,   430,   431,   432,   433,   434,   435,    -1,    -1,   438,
     439,   440,    -1,   442,   443,   444,   445,    -1,   447,   448,
     449,   450,   451,   452,   453,    -1,   455,    -1,   457,   458,
     459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,    -1,
       3,     4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,
      -1,    -1,    15,    16,    -1,   504,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    -1,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,    -1,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,    -1,   425,    -1,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,    -1,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,     3,    -1,   491,   492,
     493,     8,   495,   496,   497,   498,   499,   500,    15,    16,
      -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
      -1,    -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,
     317,   318,   319,   320,    -1,   322,   323,   324,   325,   326,
     327,    -1,   329,   330,   331,   332,   333,   334,   335,   336,
      -1,   338,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,   352,   353,    -1,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,    -1,    -1,   373,   374,   375,   376,
     377,   378,   379,   380,   381,   382,    -1,   384,   385,   386,
     387,    -1,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
     407,    -1,   409,    -1,   411,   412,   413,   414,   415,    -1,
     417,   418,   419,    -1,    -1,   422,   423,   424,   425,   426,
      -1,   428,   429,   430,   431,   432,   433,   434,   435,    -1,
      -1,   438,   439,   440,    -1,   442,   443,   444,   445,    -1,
     447,   448,   449,   450,   451,   452,   453,    -1,   455,    -1,
     457,   458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,
     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,    -1,    -1,    -1,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,   500,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,   172,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,
     194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,   383,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    36,    -1,   383,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    36,    -1,    78,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    36,    -1,    78,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    36,    -1,    78,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,
      -1,    -1,    11,   172,    53,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    36,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,   172,    53,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,   232,    -1,   194,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,
     189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    -1,    -1,   383,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    36,    -1,   383,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    36,    -1,    78,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    36,    -1,    78,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   488,
      -1,    -1,   491,   492,   493,    -1,   495,   496,   497,   498,
     499,   500,    36,    -1,    78,    -1,   505,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    36,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    46,
      -1,    -1,    -1,   217,   218,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,
      -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
     217,   218,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   383,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,   383,
      -1,   505,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,   503,
      -1,    -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,   503,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,   493,
      -1,   495,   496,   497,   498,   499,   500,    -1,    -1,   503,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,   500,    -1,    -1,   503,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,    -1,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,    -1,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,    -1,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,    -1,   409,
      -1,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,   423,   424,   425,   426,    -1,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,   459,
     460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,    -1,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,    -1,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,    -1,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,    -1,   409,    -1,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,    -1,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,    -1,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     3,     4,     5,    -1,    -1,    -1,     9,
      -1,    -1,   497,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,     3,     4,
       5,    -1,    -1,    -1,     9,   495,   496,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,   283,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,    -1,    -1,    -1,    -1,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,    -1,   322,   323,   324,
     325,   326,   327,    -1,   329,   330,   331,   332,   333,   334,
     335,   336,    -1,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,    -1,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,   407,    -1,   409,   410,   411,   412,   413,   414,
     415,    -1,   417,   418,   419,    -1,    -1,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,    -1,    -1,   438,   439,   440,    -1,   442,   443,   444,
     445,    -1,   447,   448,   449,   450,   451,   452,   453,    -1,
     455,   456,   457,   458,   459,   460,   461,    -1,    -1,   464,
      -1,    -1,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,     3,     4,     5,    -1,    -1,    -1,     9,
     495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,   283,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,    -1,    -1,    -1,
      -1,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,    -1,   322,   323,   324,   325,   326,   327,    -1,   329,
     330,   331,   332,   333,   334,   335,   336,    -1,   338,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,    -1,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,    -1,   406,   407,    -1,   409,
     410,   411,   412,   413,   414,   415,    -1,   417,   418,   419,
      -1,    -1,   422,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
     440,    -1,   442,   443,   444,   445,    -1,   447,   448,   449,
     450,   451,   452,   453,    -1,   455,   456,   457,   458,   459,
     460,   461,    -1,    -1,   464,    -1,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,    -1,    -1,
       8,    -1,    -1,    11,    -1,   495,   496,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,   122,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,   172,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    36,    -1,
      78,    -1,    -1,    -1,   162,    -1,    -1,    -1,    46,   167,
      -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,    -1,
      78,    -1,    -1,   161,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,   232,    -1,    -1,    -1,   316,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,   446,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,
      -1,    -1,   310,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     488,    -1,    -1,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    -1,    -1,   383,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     488,    -1,    -1,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    36,    -1,   383,    -1,    40,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     488,    -1,    -1,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     488,    -1,    -1,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    36,    -1,    78,    -1,    40,    -1,    -1,
      -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,
      53,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
     488,    -1,    -1,   491,   492,   493,    -1,   495,   496,   497,
     498,   499,   500,    36,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,
      53,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,
      46,    -1,    -1,    -1,   217,   218,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,   217,   218,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,    -1,
     383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      17,    18,    19,    20,    21,   488,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,    36,
      -1,    -1,    -1,    40,    -1,    -1,    -1,   383,    -1,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,
      17,    18,    19,    20,    21,   488,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,    36,
     416,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   488,    -1,    -1,   491,   492,
     493,    -1,   495,   496,   497,   498,   499,   500,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,   488,    -1,    -1,   491,   492,   493,    -1,   495,
     496,   497,   498,   499,   500,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    46,    -1,     8,    -1,
      -1,    11,    -1,    53,    -1,    15,    16,    -1,    -1,    19,
      20,    21,   189,    -1,    -1,    -1,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    46,    -1,    -1,    -1,
     217,   218,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
     217,   218,    -1,    15,    16,    -1,    -1,    19,    20,    21,
      -1,   268,    -1,    -1,   271,   232,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,   285,    -1,
      -1,   288,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,
      -1,    53,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,    78,    -1,   285,    -1,
      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   383,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
     172,    -1,    -1,    -1,    -1,    -1,   383,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,   268,    -1,
      -1,   271,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   488,    -1,    -1,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,    -1,    -1,   268,    -1,    -1,   271,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   488,    -1,   285,   491,   492,   493,    -1,   495,   496,
     497,   498,   499,   500,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   383,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
     500,   383,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,    -1,
      -1,   491,   492,   493,    -1,   495,   496,   497,   498,   499,
     500,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
       3,    -1,     5,    -1,    -1,    -1,   488,    -1,    -1,   491,
     492,   493,    -1,   495,   496,   497,   498,   499,   500,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
     123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
     133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
     143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,   227,   228,   229,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
     443,   444,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      -1,    -1,    80,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,   164,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,   437,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    72,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,   164,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,   437,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    34,    35,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,   284,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,     4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
     408,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,    -1,   425,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,    -1,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,    -1,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,    -1,   406,   407,
      -1,   409,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,   424,   425,   426,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,   459,   460,   461,    -1,    -1,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,    -1,   425,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,    -1,   425,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,    -1,   425,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,   436,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
      -1,   314,   315,   316,    -1,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,   330,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,   354,   355,   356,   357,    -1,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,   372,
     373,   374,   375,   376,   377,   378,    -1,   380,   381,   382,
     383,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
      -1,   404,    -1,   406,   407,    -1,   409,   410,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,    -1,   425,    -1,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,    -1,
     453,    -1,   455,   456,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   484,   485,   486,   487,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,    -1,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
      -1,   304,   305,   306,    -1,    -1,    -1,    -1,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,    -1,   322,
     323,   324,   325,   326,   327,    -1,   329,    -1,   331,   332,
     333,   334,   335,   336,    -1,   338,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,   352,
     353,    -1,   355,   356,   357,   358,    -1,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,    -1,    -1,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
      -1,   384,   385,   386,   387,    -1,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,   407,    -1,   409,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,    -1,    -1,   422,
     423,   424,   425,   426,    -1,   428,   429,   430,   431,   432,
     433,   434,   435,    -1,    -1,   438,   439,   440,    -1,   442,
     443,   444,   445,    -1,   447,   448,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,    -1,
      -1,   464,    -1,    -1,   467,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    -1,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
      -1,   149,   150,   151,   152,   153,    -1,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,    -1,   172,   173,    -1,   175,    -1,    -1,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,    -1,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,    -1,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,
      -1,   269,   270,   271,   272,    -1,    -1,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
      -1,    -1,    -1,   311,   312,    -1,   314,   315,   316,    -1,
     318,   319,   320,    -1,   322,   323,   324,   325,   326,   327,
      -1,   329,   330,   331,   332,   333,   334,   335,   336,    -1,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,   355,   356,   357,
      -1,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,    -1,   372,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,   382,   383,   384,   385,   386,   387,
      -1,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,    -1,   402,    -1,   404,    -1,   406,   407,
      -1,   409,   410,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,    -1,    -1,   422,   423,    -1,   425,    -1,    -1,
     428,   429,   430,   431,   432,   433,   434,   435,    -1,    -1,
     438,   439,   440,    -1,   442,   443,   444,   445,    -1,   447,
     448,   449,   450,   451,    -1,   453,    -1,   455,   456,   457,
     458,   459,   460,   461,    -1,    22,   464,    -1,    -1,   467,
     468,   469,   470,   471,   472,    32,    -1,    34,    35,    -1,
      -1,    -1,    22,    -1,    -1,    -1,   484,   485,   486,   487,
      -1,    -1,    32,    -1,    -1,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    52,    -1,    -1,    -1,    73,    -1,    -1,    -1,
      -1,    61,    -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,
      -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    96,
      -1,    98,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   109,    -1,    -1,    -1,    96,    -1,    98,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,    -1,   109,
      -1,    -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,
      -1,    -1,   139,   123,    -1,    -1,    -1,    -1,    -1,    -1,
     147,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,
      -1,    -1,    -1,    -1,    -1,    -1,   163,   147,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   163,    -1,    -1,    -1,   167,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     307,   308,   309,    -1,    -1,    -1,    -1,    -1,   315,    -1,
      -1,   318,    -1,    -1,    -1,    -1,    -1,   307,   308,   309,
      -1,    -1,    -1,    -1,    -1,   315,    -1,    -1,   318,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   356,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   347,    -1,    -1,
      -1,    -1,    -1,    -1,   371,    -1,   356,    -1,    -1,    -1,
      -1,   378,    -1,    -1,    -1,   382,    -1,    -1,    -1,    -1,
      -1,   371,    -1,    -1,    -1,   392,    -1,    -1,   378,    -1,
      -1,    -1,   382,    -1,    -1,    -1,    -1,   404,    -1,    -1,
      -1,   408,   392,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   404,    -1,    -1,    -1,   408,    -1,
      -1,   428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   441,    -1,    -1,    -1,   428,    -1,
     447,    -1,    -1,    -1,    -1,   452,    -1,    -1,    -1,   456,
      -1,   441,    -1,    -1,    -1,    -1,    -1,   447,    -1,   466,
      -1,    -1,   452,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   466,    -1,    -1,    -1,
      -1,    -1,    -1,   490,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,    -1,
     490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   504
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   307,   308,   309,   315,   318,
     347,   356,   371,   378,   382,   392,   404,   408,   428,   441,
     444,   447,   452,   466,   490,   504,   516,   517,   518,   519,
     520,   527,   538,   539,   540,   543,   544,   554,   571,   619,
     629,   632,   635,   639,   641,   644,   645,   649,   656,   660,
     667,   671,   672,   673,   680,   685,   701,   704,   705,   708,
     710,   711,   712,   713,   715,   717,   718,   722,   775,   776,
     937,   939,   940,   941,   946,   949,   955,   956,   960,   422,
     469,   938,   198,   363,   373,   408,   458,   106,   541,   938,
       3,    22,    23,    24,    25,    26,    27,    28,    29,    31,
      32,    33,    42,    43,    44,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    59,    60,    61,
      62,    63,    64,    67,    68,    69,    70,    71,    73,    74,
      75,    76,    77,    79,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    92,    93,    94,    95,    96,    97,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   114,   116,   117,   118,   119,   120,
     121,   123,   124,   125,   126,   127,   130,   131,   132,   133,
     134,   136,   137,   138,   140,   141,   142,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   156,   158,
     159,   160,   161,   163,   165,   166,   168,   169,   170,   171,
     172,   173,   175,   177,   178,   179,   180,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   195,
     196,   197,   198,   199,   200,   201,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,   214,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   229,   230,
     231,   232,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   269,   270,   271,   272,
     274,   275,   276,   277,   278,   279,   281,   282,   285,   286,
     287,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   322,   323,
     324,   325,   326,   327,   329,   330,   331,   332,   333,   334,
     335,   336,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   352,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   389,
     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   406,   407,   409,   410,   411,
     412,   413,   414,   415,   417,   418,   419,   422,   423,   424,
     425,   426,   428,   429,   430,   431,   432,   433,   434,   435,
     438,   439,   440,   442,   443,   444,   445,   447,   448,   449,
     450,   451,   452,   453,   455,   456,   457,   458,   459,   460,
     461,   464,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   547,   622,   623,   624,   846,   926,   930,
       3,   171,   242,   401,   545,   547,   622,   938,    55,   504,
     566,   173,   236,   288,   363,   369,   412,   414,   431,   437,
     440,   617,   679,     5,    30,   318,   547,   548,   925,   106,
     541,    24,    79,    95,   142,   152,   164,   169,   198,   241,
     245,   312,   327,   360,   363,   373,   376,   394,   408,   415,
     425,   431,   458,   650,   651,   654,   938,   925,    98,   456,
     504,   519,   520,   527,   543,   544,   554,   571,   619,   629,
     632,   639,   641,   644,   645,   649,   656,   663,   667,   673,
     680,   701,   704,   705,   708,   710,   937,   939,   941,   946,
     949,   955,   960,   106,    73,   209,    66,    77,    79,   154,
     227,   274,   284,   296,   313,   359,   403,   424,   426,   430,
     452,   504,   546,   547,   548,   711,   776,   778,   780,   790,
     797,   798,   846,   848,   849,   106,     5,   547,   549,   702,
     702,   547,   925,    30,   173,   236,   377,   418,   422,   547,
     947,   948,   958,   938,    30,   128,   731,   732,   173,   236,
     363,   377,   418,   950,   951,   958,   938,   547,   710,   722,
     959,   547,   797,   408,   728,   546,   168,   504,   943,   504,
     335,   723,   724,   925,   723,   711,   712,     0,   507,   456,
     661,   118,   208,   443,   143,   213,   289,   436,   734,   735,
     780,   780,   711,   713,   715,   508,    30,   418,   422,   710,
     959,   187,   546,   925,   187,   546,   187,   797,   187,   546,
     549,   502,   506,   550,   551,   504,   710,   546,   412,   414,
     412,   414,   345,   187,   546,   187,   547,   546,   169,   241,
     335,   373,   408,   458,   630,   198,    30,   925,   187,     3,
     247,   425,   105,   408,   408,   458,   366,     3,    37,    42,
      49,    54,    55,    56,    57,    69,    70,    79,    81,    87,
      99,   110,   111,   132,   160,   166,   168,   172,   187,   189,
     204,   211,   212,   214,   217,   218,   220,   230,   232,   242,
     261,   262,   263,   271,   276,   293,   295,   314,   332,   354,
     358,   372,   379,   383,   386,   401,   410,   418,   419,   430,
     436,   453,   456,   622,   625,   655,   808,   810,   812,   814,
     816,   818,   820,   821,   822,   824,   825,   826,   828,   829,
     931,   187,   547,   652,   932,   187,   922,   925,   187,   925,
     504,   659,   288,   663,     3,    37,    42,    49,    53,    54,
      55,    56,    57,    69,    70,    77,    79,    81,    87,    99,
     110,   111,   148,   154,   160,   166,   168,   171,   172,   177,
     178,   189,   204,   205,   211,   212,   214,   217,   218,   220,
     230,   232,   242,   261,   262,   263,   267,   271,   274,   276,
     292,   293,   295,   296,   313,   314,   317,   332,   354,   358,
     372,   379,   383,   386,   401,   403,   410,   418,   419,   424,
     426,   430,   452,   453,   456,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   622,   626,   664,   666,
     667,   669,   670,   661,   547,   549,   545,   702,   504,   504,
     162,   504,   711,   798,   504,   504,   546,   504,   504,   167,
     504,   504,   504,   504,   711,   776,   780,   790,   497,   550,
      40,   547,   791,   792,   791,   371,   508,   714,    37,    42,
      99,   168,   204,   220,   230,   262,   307,   314,   354,   372,
     441,   794,   792,    40,   547,   791,   793,   490,   802,   549,
     167,   493,   504,   504,   706,   948,   948,   948,   487,   219,
     506,   283,     4,     6,     7,     8,     9,    10,    39,    54,
      56,    57,    65,    69,    70,    81,   110,   111,   113,   148,
     155,   160,   177,   178,   211,   212,   214,   242,   261,   263,
     268,   273,   276,   285,   332,   358,   386,   418,   419,   427,
     453,   488,   495,   496,   497,   502,   504,   509,   510,   511,
     512,   547,   549,   711,   765,   813,   816,   819,   820,   821,
     823,   824,   825,   828,   829,   840,   842,   843,   844,   845,
     846,   847,   849,   850,   865,   866,   877,   899,   904,   912,
     913,   914,   926,   927,   928,   911,   913,   950,   950,   549,
     950,   487,   167,   420,   493,   506,   550,   646,   797,     3,
     166,   168,   456,   667,   942,   944,   166,   945,   840,   883,
     884,   723,   508,   504,   934,   505,   505,   518,   546,   167,
     288,   688,   646,    30,   128,   729,   729,    59,   729,   157,
     162,   233,   280,   740,   742,   743,   768,   770,   771,   772,
     176,   283,   446,   283,   734,   735,   504,   409,   957,   487,
     219,   148,    26,    32,   133,   287,   343,   347,   378,   449,
     532,   535,   536,   343,   148,    40,    60,   104,   197,   246,
     254,   266,   298,   343,   349,   373,   378,   392,   521,   524,
     535,   148,   343,   378,   535,   148,   343,   378,   535,    40,
     542,   840,   905,     3,    30,    34,    35,    36,    38,    39,
      40,    41,    45,    58,    65,    66,    72,    78,    80,    91,
      98,   113,   115,   122,   128,   129,   135,   139,   143,   155,
     157,   162,   164,   167,   174,   176,   181,   194,   202,   213,
     215,   227,   228,   233,   268,   273,   280,   283,   284,   288,
     289,   307,   308,   309,   310,   321,   328,   337,   351,   371,
     388,   405,   408,   416,   420,   421,   427,   436,   437,   441,
     446,   452,   454,   462,   463,   465,   466,   552,   553,   622,
     626,   628,   551,     3,    30,    37,    42,    49,    55,    79,
      81,    87,    99,   128,   166,   168,   171,   172,   189,   204,
     217,   218,   220,   230,   232,   242,   262,   271,   293,   295,
     314,   354,   372,   383,   401,   410,   430,   454,   456,   505,
     622,   627,   840,   886,   887,   929,   935,   505,   504,   606,
     363,   369,   617,   268,   633,   268,   431,    40,   458,   187,
     546,   187,   546,   621,   187,   546,   187,   546,    87,   676,
     148,   470,    88,   125,   301,   413,   455,   827,   827,   827,
     504,   815,   815,   317,   504,   817,   148,   504,    69,    70,
     827,   815,   812,   468,   490,   504,   830,   504,   830,   504,
      63,   350,   508,   653,   504,    39,   811,   504,   107,   108,
     184,   185,   248,   249,   250,   251,   252,   253,   256,   257,
     367,   368,   484,   485,   504,   831,   832,   833,   834,   835,
     836,   837,   838,   839,   815,   148,   506,   933,   508,   653,
     148,   508,   653,   148,   283,   657,   658,   840,   935,   345,
     505,   508,     4,   155,   283,   427,   495,   496,   523,   526,
     549,   662,   664,   665,   668,   928,   663,   420,   504,   561,
     565,   167,   840,   884,   504,     3,   549,   831,   832,   833,
     834,   835,   836,   837,   838,   889,   890,   792,   793,   840,
     546,   840,   891,   495,   496,   547,   841,   842,   866,   877,
     893,   504,   840,   883,   894,   840,    58,   167,   228,   421,
     840,   884,   897,   840,   505,   548,   504,   410,   748,   749,
     749,   731,   732,   780,   215,   726,    37,   220,   372,   794,
     220,   293,   795,   780,   795,   220,   794,   504,   220,   795,
     144,   195,   782,   220,   749,   504,   548,   504,   749,   290,
     547,   549,   703,   523,   668,   952,   954,   886,   810,   888,
      40,   231,   547,   504,   502,   711,   840,   903,   504,   711,
     512,   840,   504,   504,   840,   840,   840,   144,   915,   916,
     840,   884,   885,   711,   840,   883,     9,   553,   548,   867,
     868,   869,   506,   550,   906,   550,   504,   549,   504,   549,
     928,     3,     8,    11,    15,    16,    17,    18,    19,    20,
      21,    36,    40,    46,    53,    78,   172,   189,   194,   217,
     218,   232,   268,   271,   285,   288,   383,   488,   491,   492,
     493,   495,   496,   497,   498,   499,   500,   875,   876,   877,
     879,   909,   467,   851,   295,   840,   508,   726,   504,   549,
     726,     3,   113,   236,   523,   549,   829,   953,   102,   113,
     954,   113,   954,   547,    40,   547,   505,   508,   661,   508,
     505,   724,   922,   923,    40,   934,   646,   188,   345,   215,
     378,   713,   713,    30,   736,   737,   840,    59,   713,   730,
     159,   265,   756,   222,   266,   331,   381,   443,     4,     9,
      30,   751,   840,   495,   496,   752,   753,   840,   842,   768,
     769,   743,   742,   740,   741,   162,   771,   278,   773,    59,
     719,   720,   721,   783,   841,   913,   913,   740,   768,   884,
     231,   546,    72,    80,    91,   164,   187,   321,   437,   547,
     588,   598,   613,    80,    91,   709,    91,   709,   504,   420,
     504,   586,   240,   440,   586,    91,   508,   420,   546,   812,
     523,    59,   525,   523,   523,   104,   246,   254,    59,   420,
     466,   490,   522,   259,   363,   522,   524,   797,    91,   420,
     709,   363,   546,   420,   363,   547,   561,   503,   514,   886,
     886,   887,   508,   734,   735,    13,    14,   420,   547,   605,
     610,   466,   564,   546,   547,   335,   373,   408,   458,   630,
     148,    98,   571,   634,   639,   673,   960,   148,   493,   140,
     810,   546,   268,   521,   640,   268,   504,   606,    40,   268,
     606,   268,   504,   631,   187,   547,   600,   677,     3,   504,
     885,   928,   655,   888,   827,   827,    39,   811,   418,   418,
     928,   928,   547,   807,   810,   807,   502,   502,   928,   928,
     420,   420,   420,   420,   652,   552,   506,   932,   922,   925,
     925,   932,   505,   508,    13,   663,   669,     4,   928,     4,
     928,   549,   553,   563,   570,    55,   100,   119,   137,   141,
     163,   166,   182,   273,   281,   303,   329,   567,   703,    40,
     505,   840,   505,   167,   508,   505,   310,   892,   505,   841,
     841,    11,    15,    16,    19,    20,    21,   194,   217,   285,
     491,   492,   493,   495,   496,   497,   498,   499,   500,   877,
     841,   505,   799,   800,   848,   162,   167,   895,   896,   508,
     505,    40,   897,   884,   897,   897,   167,   505,    40,   791,
     504,   923,     4,     9,   547,   744,   746,   747,   913,   911,
     173,   236,   408,   412,   414,   440,   546,   727,   463,   803,
     780,   220,   780,   283,   446,   796,   780,   220,   913,   780,
     275,   275,   504,   780,   548,   804,   805,   504,   548,   804,
     508,   505,   508,   505,   508,   554,   645,   680,   707,   710,
     939,   884,   885,   462,   900,   901,   840,   840,   870,   871,
     872,   873,     8,    15,    16,    19,    20,    21,   491,   492,
     493,   495,   496,   497,   498,   499,   500,   547,   875,   880,
     505,   884,   504,   547,   345,   920,   162,   503,   505,   508,
     514,   508,   513,   497,   551,   884,   840,   839,   839,   810,
     840,   840,   840,   840,   840,   840,   840,   840,     5,   553,
     936,   418,    45,   405,   910,   932,   840,   840,   504,   711,
     898,   128,   155,   268,   273,   278,   427,   438,   840,   273,
     504,   840,   420,    53,   172,   189,   194,   232,   383,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,    30,
      38,   388,   874,   502,   506,   908,   176,   158,   852,   358,
     504,   866,   914,   167,   777,   886,   777,   504,   549,   547,
     546,   942,   538,   546,   840,   508,   505,   245,   268,   725,
     446,   648,   546,   682,   504,   547,   687,   697,   698,   700,
      41,   122,   738,   508,   446,   738,   259,   713,   358,   359,
     495,   496,   753,   755,   842,   381,   222,   284,   306,   306,
     508,   499,     4,   754,   928,   754,   358,   359,   755,   546,
     921,   272,   385,   774,   504,   923,   924,   508,   176,   446,
     194,   176,   215,   769,   741,   505,   343,   535,   504,   187,
     598,   925,   222,   268,   222,   446,   504,   591,   809,   810,
     925,   547,   187,   925,   187,   547,    26,   133,   378,   531,
     534,   553,   582,   596,   925,   553,   590,   609,   925,   532,
     925,   343,   378,   521,   535,   523,   932,   925,   523,   932,
     925,   523,   343,   378,   535,   925,   925,   925,   925,   343,
     378,   535,   925,   925,   496,   840,   905,   734,   734,   734,
     454,   887,   188,   348,   733,   840,   840,   326,   560,   505,
     508,   281,   167,   420,   555,   633,   431,   458,   546,   546,
     621,   546,   546,   546,   288,   617,   547,   547,   504,   711,
     504,   148,   148,   232,   547,   588,   598,   601,   604,   614,
     616,   466,   468,   593,   147,   710,   148,   466,   678,   148,
     505,   886,    40,   268,   283,   884,   505,   505,   653,   505,
     502,   487,   487,   505,   505,   810,   505,   508,   505,   928,
     503,   928,   505,   505,   832,   834,   835,   836,   835,   836,
     836,   653,   552,   653,   283,   653,   657,   840,   561,   497,
     504,   523,   562,   668,   845,   505,   508,    40,   559,   549,
     559,   268,   273,   329,   559,    59,   559,   810,   505,   840,
     840,   840,   895,   810,   841,   841,   841,   841,   841,   841,
     128,   268,   278,   841,   841,   841,   841,   841,   841,   841,
     841,   841,   841,   505,   508,    40,   801,   840,   840,   896,
     895,   810,   505,   505,   505,   884,   810,   923,   505,   306,
     499,   306,   359,   499,   504,   504,   726,   412,   414,   412,
     414,   546,   728,   728,   728,   840,   176,   757,   796,   780,
     840,   504,   780,   162,   504,   548,   787,   796,   810,   505,
     508,   804,   505,   952,   810,   505,   503,   840,   135,   901,
     902,   505,   514,   508,   513,   506,   505,   505,   923,   504,
     840,   917,   547,   840,   840,   867,   916,   505,   505,   487,
     841,   841,   141,   884,   167,   128,   155,   273,   278,   427,
     438,   504,   141,   880,   840,   405,   910,   840,   898,   840,
     420,   504,   711,   840,   905,   552,   504,   504,   151,   853,
     778,   779,   803,   734,   803,   928,   839,   934,   934,   245,
     504,   779,   463,   647,    40,    59,   683,   693,   700,   906,
     508,   777,   493,   489,   739,   737,   285,   875,   878,   739,
       4,   928,   755,   284,   443,   752,   508,   239,   923,   719,
      59,   913,   504,   548,    59,   259,   420,   840,   268,   613,
     504,   148,   504,   591,   198,   610,   611,   572,    40,   171,
     581,   607,   572,    26,   133,   347,   349,   378,   528,   529,
     530,   536,   537,   148,   653,   148,   653,   582,   596,   582,
     505,   508,   549,   575,   493,   506,   505,   508,   420,   363,
      91,   420,   709,   363,   420,   420,   420,   363,   514,   503,
     514,   733,   733,   733,   887,   275,   275,   505,   395,   396,
     549,   569,   605,   560,   493,   546,   640,   504,    40,   606,
     631,   633,   345,   408,   431,   547,   636,   637,   638,   549,
     642,   643,   610,   546,   546,   621,   546,   505,   508,   281,
     586,   281,   283,   585,   925,   466,   620,   546,   586,    40,
     546,   505,   408,   840,   148,   546,   505,   811,   928,   830,
     830,   811,   547,   811,   503,   503,   932,   557,   568,   668,
     563,   549,   549,   273,   610,   497,   610,   549,   497,   610,
     549,   505,   505,   896,   167,   128,   278,   504,   802,   799,
     504,   505,   505,   505,   547,   744,   803,   728,   728,   728,
     728,   546,   546,   546,    59,   181,   766,   796,   923,   504,
     784,   785,   786,   843,   926,   923,   162,    78,   806,   805,
     505,   416,   840,   139,   840,   870,   880,   505,   840,   917,
     918,   919,    40,   194,   505,   920,   839,   840,    36,    36,
     840,   505,   840,   167,   504,   888,   840,   505,   141,   841,
     841,   141,   141,   840,   840,   503,   514,   504,   907,   735,
     463,   840,   294,   857,   508,   757,   733,   757,   505,   707,
     840,   351,   691,   547,   259,   313,   113,   297,   504,   681,
     710,   505,   508,   687,   647,   840,   159,   226,   504,   739,
     284,   546,   505,   924,   176,   711,   712,   913,   924,   925,
     925,   505,   148,   611,   598,   611,   572,   600,   508,   505,
     115,   202,   266,   268,   597,   504,    33,    59,   618,   607,
      72,    78,    91,   113,   115,   202,   268,   273,   321,   337,
     437,   446,   577,   578,   592,   171,   113,   186,   268,   586,
     522,   105,   113,   171,   268,   394,   397,   524,   586,   378,
     530,   431,   925,   547,   534,     3,    37,    42,    49,    55,
      79,    81,    87,    99,   166,   168,   171,   172,   189,   204,
     217,   218,   220,   230,   232,   242,   262,   267,   271,   285,
     293,   295,   314,   354,   372,   379,   383,   401,   410,   430,
     436,   456,   495,   496,   523,   549,   573,   612,   622,   628,
     810,   878,   929,   553,   609,   925,   925,   925,   925,   925,
     925,   925,   925,   925,   925,   905,   905,   505,   505,   505,
     734,   522,   569,   547,   504,   604,   710,   678,    40,   617,
     187,   546,   493,   493,   636,   505,   508,   505,   640,   504,
      40,   595,   593,   601,    84,   659,   105,   266,   606,   710,
     631,   710,   600,   446,   675,   503,   810,   653,   505,   508,
     610,   841,   167,   504,   888,   804,   505,   508,   505,   757,
     546,   546,   546,   546,    30,   101,   177,   357,   504,   758,
     759,   760,   761,   762,   763,   764,   840,   840,   465,   854,
     505,   842,   881,   882,   194,   176,   781,   785,   504,   505,
     787,   788,   789,   932,   840,   508,   505,   547,   840,   842,
     840,   840,   840,   888,   505,   840,    36,    36,   840,   840,
     141,   505,   496,   905,   505,   886,   505,   840,   505,   504,
     547,   858,   766,   505,   766,   549,   505,   912,   452,   407,
     445,   692,   547,   686,   696,   283,   689,   493,   700,   691,
     880,    59,   505,   505,   451,   452,   716,   572,   598,   505,
     505,   466,   603,   116,   190,   200,   115,   448,   840,   113,
      40,   504,   932,   925,   841,   116,   190,   115,   273,   222,
     546,   603,    86,   618,   187,   273,   523,   840,   618,   273,
     495,   496,   526,   547,   810,   653,   653,   242,   401,   929,
     933,   493,   420,   420,   503,   503,   733,   561,   446,   556,
     558,   638,   610,   505,   620,    40,   408,   840,   408,   268,
     504,   547,     5,   549,   678,   604,   147,   710,   145,   196,
     585,   118,   133,   320,   620,   105,   678,   466,   961,    40,
     283,   547,   674,   504,   568,   841,   888,   505,   505,     9,
     344,   750,   766,   504,   380,   504,   505,   508,   547,   855,
     856,   328,   767,   508,   505,   504,   548,    59,   505,   886,
     194,   505,   788,   917,   503,   187,   505,   840,   840,   840,
     514,   503,   514,   505,   505,   547,   859,   854,   549,   854,
     508,   451,   906,   505,   508,    89,   691,   840,   505,   924,
     924,   337,   603,   504,   594,   572,   505,   186,   504,   840,
     268,   578,   603,   606,   925,    40,   148,   806,   933,   499,
     573,   925,   925,   505,   522,   120,   505,   593,   710,   710,
     546,   148,   638,    40,   505,   925,   620,    30,    83,    92,
     114,   186,   199,   394,   397,   589,   589,   359,   359,    40,
      64,    72,   236,   408,   840,   546,   504,   547,   690,   699,
     848,   505,   505,   504,   854,   884,   504,   884,   760,    40,
     508,   840,   446,   745,   842,   913,   923,   792,   734,   504,
     792,   840,   905,   905,   303,   860,   767,   767,   710,   297,
     710,   686,   283,   504,   684,   546,   572,   553,   599,   602,
     398,   460,   579,   580,   504,   574,   840,   505,   244,   615,
     186,   446,   533,   499,   431,   561,   549,   678,   585,   961,
     504,   546,   710,   593,   659,   710,    72,   286,    72,   710,
     675,   840,    78,   694,   505,   508,   694,     9,   767,   505,
     759,   505,   858,   856,   361,   505,   733,   913,   503,   503,
     503,    59,   734,   745,   745,   692,    91,   699,   129,   606,
     493,   505,   508,   521,   505,   266,   587,   168,   302,   384,
     283,   583,   584,   608,   574,   840,   431,    40,   504,   961,
     585,   620,   961,   286,   286,   504,   505,   932,   695,   932,
     678,   690,   695,   505,   745,   505,   747,   505,   505,   883,
     179,   330,   359,   861,   451,   925,   505,   269,   443,   615,
     573,   602,   505,   580,   200,   118,   443,   283,   608,   283,
     583,   710,   699,   694,   738,   803,   738,    53,   102,   433,
     840,   862,   863,   862,   862,   505,   710,   803,   378,   584,
      63,   266,   350,   378,   576,   576,   961,   505,   695,   739,
     739,   863,   358,   161,   316,   161,   316,   144,   864,   864,
     864,   698,   572,    25,   113,   273,   678,   738,    36,   102,
     176,   266,   417,   803,   803,   739,   863,   358,   291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   515,   516,   517,   517,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   518,   518,   518,   518,   518,   518,
     518,   518,   518,   518,   527,   527,   527,   527,   527,   527,
     527,   527,   528,   528,   529,   529,   530,   530,   530,   530,
     531,   531,   532,   532,   532,   532,   532,   532,   532,   532,
     532,   532,   532,   532,   532,   532,   532,   532,   532,   532,
     532,   532,   532,   532,   532,   532,   532,   532,   532,   532,
     532,   533,   533,   534,   534,   534,   534,   535,   535,   536,
     537,   537,   537,   644,   644,   644,   644,   546,   546,   547,
     547,   547,   548,   548,   549,   550,   550,   551,   552,   553,
     553,   553,   553,   708,   708,   708,   708,   708,   708,   708,
     708,   708,   708,   708,   708,   708,   709,   709,   680,   681,
     681,   681,   681,   681,   682,   682,   683,   683,   683,   684,
     684,   684,   685,   685,   686,   687,   687,   688,   688,   688,
     689,   689,   689,   690,   690,   690,   691,   691,   692,   692,
     693,   693,   694,   694,   695,   695,   696,   696,   697,   697,
     698,   698,   699,   699,   700,   641,   641,   641,   642,   642,
     643,   643,   704,   704,   704,   639,   639,   639,   640,   640,
     635,   635,   635,   636,   637,   637,   638,   638,   656,   656,
     656,   657,   657,   658,   658,   659,   659,   520,   520,   521,
     521,   522,   522,   522,   523,   523,   523,   523,   524,   524,
     524,   524,   524,   524,   524,   524,   524,   524,   524,   524,
     524,   524,   525,   525,   526,   526,   526,   937,   937,   937,
     937,   937,   937,   938,   938,   938,   940,   571,   571,   571,
     572,   572,   573,   573,   573,   573,   573,   573,   574,   574,
     575,   576,   576,   576,   576,   576,   577,   577,   577,   577,
     578,   578,   578,   578,   578,   578,   578,   578,   579,   579,
     580,   580,   581,   581,   581,   582,   583,   584,   584,   584,
     584,   584,   585,   585,   585,   585,   586,   587,   587,   588,
     588,   589,   589,   589,   589,   589,   589,   589,   589,   590,
     590,   591,   592,   592,   592,   592,   593,   593,   593,   593,
     594,   595,   595,   595,   596,   597,   597,   597,   597,   597,
     597,   598,   598,   599,   599,   600,   601,   601,   601,   602,
     602,   603,   603,   604,   604,   604,   605,   606,   606,   607,
     607,   608,   609,   609,   609,   609,   610,   610,   611,   611,
     612,   612,   612,   613,   613,   613,   613,   613,   613,   614,
     614,   615,   615,   615,   615,   616,   617,   617,   617,   617,
     617,   617,   617,   617,   618,   618,   649,   649,   649,   649,
     649,   649,   649,   649,   650,   650,   650,   650,   650,   650,
     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,
     650,   651,   651,   651,   651,   651,   651,   652,   652,   653,
     653,   653,   654,   654,   654,   655,   655,   629,   629,   629,
     629,   629,   629,   630,   630,   631,   631,   939,   554,   554,
     555,   555,   556,   556,   557,   557,   558,   558,   559,   559,
     560,   560,   561,   561,   562,   562,   562,   562,   562,   562,
     563,   564,   564,   565,   565,   566,   566,   567,   567,   567,
     567,   567,   567,   567,   567,   567,   567,   567,   567,   567,
     567,   567,   567,   568,   569,   569,   569,   570,   570,   710,
     710,   711,   711,   712,   712,   712,   712,   712,   712,   712,
     712,   713,   713,   714,   714,   715,   715,   715,   715,   715,
     715,   715,   715,   715,   715,   715,   715,   715,   715,   715,
     715,   715,   715,   715,   716,   716,   717,   717,   718,   718,
     719,   719,   719,   720,   720,   721,   721,   722,   722,   722,
     723,   723,   724,   725,   725,   725,   726,   726,   727,   727,
     727,   727,   727,   727,   727,   727,   727,   728,   728,   729,
     729,   729,   730,   731,   731,   732,   732,   733,   733,   733,
     734,   734,   735,   735,   736,   736,   737,   737,   738,   738,
     738,   739,   739,   739,   740,   740,   740,   740,   741,   741,
     742,   742,   742,   742,   743,   743,   744,   744,   744,   744,
     744,   744,   745,   745,   746,   746,   747,   747,   747,   747,
     748,   749,   749,   750,   750,   751,   751,   751,   751,   751,
     752,   753,   753,   753,   754,   754,   755,   755,   756,   756,
     757,   757,   757,   758,   758,   759,   759,   760,   760,   760,
     760,   760,   761,   762,   763,   764,   765,   765,   766,   766,
     767,   767,   768,   768,   769,   769,   770,   770,   771,   772,
     772,   772,   772,   773,   773,   774,   774,   774,   775,   775,
     776,   776,   777,   777,   778,   778,   779,   779,   780,   780,
     780,   780,   780,   780,   780,   780,   780,   780,   781,   781,
     782,   782,   782,   783,   783,   784,   784,   785,   785,   786,
     786,   787,   787,   788,   789,   789,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   791,   791,   791,
     791,   792,   792,   793,   793,   793,   793,   793,   794,   794,
     794,   794,   794,   794,   795,   795,   796,   796,   797,   797,
     797,   797,   798,   798,   799,   800,   800,   801,   801,   802,
     802,   803,   803,   804,   804,   805,   806,   806,   807,   807,
     808,   808,   809,   809,   810,   810,   810,   810,   810,   810,
     810,   810,   810,   811,   811,   811,   812,   812,   812,   812,
     812,   812,   812,   813,   813,   813,   813,   814,   815,   815,
     816,   816,   816,   816,   816,   816,   816,   816,   816,   816,
     816,   817,   817,   818,   818,   819,   819,   820,   821,   822,
     822,   823,   823,   824,   825,   826,   826,   826,   826,   826,
     826,   827,   827,   828,   828,   828,   828,   829,   830,   830,
     830,   831,   831,   832,   832,   833,   833,   834,   834,   835,
     835,   836,   836,   837,   837,   838,   838,   839,   839,   839,
     839,   839,   839,   839,   839,   839,   839,   839,   839,   839,
     839,   839,   839,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   840,   840,   840,   840,   840,   840,   840,
     840,   840,   840,   841,   841,   841,   841,   841,   841,   841,
     841,   841,   841,   841,   841,   841,   841,   841,   841,   841,
     841,   841,   841,   841,   841,   841,   841,   841,   842,   842,
     842,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   844,   844,   844,   844,   844,   844,
     845,   846,   846,   846,   846,   846,   846,   847,   847,   848,
     848,   849,   849,   849,   849,   849,   849,   849,   849,   849,
     849,   849,   849,   849,   849,   850,   850,   851,   851,   852,
     852,   852,   853,   853,   854,   854,   855,   855,   856,   857,
     857,   857,   858,   859,   859,   860,   860,   861,   861,   861,
     861,   862,   862,   863,   863,   863,   863,   863,   864,   864,
     864,   864,   864,   865,   865,   866,   866,   867,   868,   868,
     869,   869,   870,   871,   871,   872,   872,   873,   873,   874,
     874,   874,   875,   875,   876,   876,   876,   876,   876,   876,
     876,   876,   876,   876,   876,   876,   876,   876,   877,   877,
     878,   878,   879,   879,   879,   879,   879,   879,   879,   879,
     880,   880,   881,   881,   882,   882,   883,   883,   884,   884,
     885,   885,   886,   886,   887,   887,   887,   888,   888,   889,
     889,   890,   890,   890,   890,   890,   890,   890,   890,   890,
     890,   891,   891,   892,   893,   893,   894,   894,   894,   894,
     894,   894,   895,   896,   897,   897,   897,   898,   898,   899,
     900,   900,   901,   902,   902,   903,   903,   904,   904,   551,
     551,   551,   551,   905,   905,   906,   906,   907,   907,   907,
     908,   908,   908,   908,   908,   909,   909,   910,   910,   911,
     911,   912,   912,   913,   913,   914,   914,   914,   915,   915,
     916,   916,   917,   918,   918,   919,   919,   920,   920,   920,
     921,   921,   922,   922,   923,   923,   924,   924,   925,   926,
     926,   927,   927,   927,   927,   927,   927,   927,   927,   927,
     927,   927,   927,   927,   927,   928,   929,   929,   929,   930,
     930,   930,   931,   931,   931,   932,   932,   933,   933,   934,
     934,   935,   936,   936,   705,   706,   706,   707,   707,   707,
     707,   707,   632,   632,   632,   633,   633,   634,   634,   634,
     634,   673,   673,   674,   675,   675,   676,   676,   677,   677,
     678,   678,   679,   679,   519,   519,   519,   519,   519,   519,
     544,   544,   545,   545,   671,   671,   672,   660,   660,   660,
     660,   661,   661,   662,   662,   662,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   663,   663,   663,   663,
     663,   663,   663,   663,   663,   663,   664,   664,   664,   665,
     665,   666,   666,   667,   667,   668,   668,   668,   668,   669,
     670,   670,   949,   949,   949,   949,   950,   950,   950,   950,
     951,   951,   951,   951,   952,   952,   953,   953,   953,   953,
     953,   953,   953,   954,   954,   701,   701,   701,   701,   701,
     702,   702,   703,   703,   941,   941,   941,   941,   941,   942,
     942,   942,   942,   942,   943,   943,   944,   944,   945,   945,
     645,   645,   646,   646,   646,   647,   647,   648,   648,   538,
     538,   539,   540,   540,   541,   541,   542,   542,   946,   946,
     946,   946,   947,   947,   948,   948,   948,   955,   955,   955,
     955,   955,   955,   955,   955,   956,   956,   957,   957,   958,
     958,   959,   959,   543,   960,   960,   960,   960,   960,   961,
     961,   961,   961,   619,   619,   619,   620,   620,   620,   621,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   622,   622,   622,   622,   622,   622,   622,
     622,   622,   622,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   623,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     0,     4,     6,     4,     6,     4,     6,
       4,     6,     1,     2,     3,     2,     1,     3,     2,     3,
       1,     3,     2,     5,     3,     6,     4,     6,     6,     6,
       5,     5,     6,     9,     4,     5,     7,     6,     4,     8,
       4,     2,     4,     3,     6,     4,     2,     2,     2,     2,
       1,     2,     0,     1,     2,     2,     2,     1,     3,     4,
       2,     1,     0,     2,     3,     2,     3,     1,     2,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     1,
       1,     1,     1,     6,     6,     8,     6,     8,     6,     8,
       6,     8,     8,    10,     8,    10,     1,     0,     9,     1,
       4,     4,     7,     2,     1,     3,     2,     2,     0,     4,
       3,     0,     1,     0,     2,     3,     5,     2,     2,     0,
       8,     5,     0,     5,     5,     7,     2,     0,     1,     1,
       1,     3,     2,     0,     1,     0,     1,     3,     1,     3,
       1,     2,     1,     3,     2,     6,     8,     5,     1,     0,
       1,     3,     2,     4,     5,     5,     8,     7,     1,     0,
       7,    10,     9,     3,     1,     2,     0,     1,     3,     9,
      12,     1,     3,     1,     3,     3,     0,     4,     6,     1,
       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,
       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,
       1,     3,     1,     0,     1,     2,     2,     2,     2,     2,
       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,
       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,
       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,
       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,
       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,
       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,
       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,
       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,
       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,
       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,
       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,
       6,     8,     4,     6,     1,     1,     1,     1,     2,     1,
       2,     1,     2,     1,     1,     1,     1,     3,     3,     3,
       3,     2,     2,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     1,     1,     1,     1,     3,     8,    11,    10,
       7,    10,     9,     1,     1,     2,     3,     8,    11,     9,
       1,     1,     3,     0,     1,     3,     1,     0,     1,     0,
       1,     0,     1,     3,     1,     1,     1,     3,     1,     0,
       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,
       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,
       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,
       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,
       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,
       2,     5,     4,     4,     4,     4,     7,     5,     4,     7,
       6,     9,     9,     4,     1,     1,     1,     1,     1,     1,
       1,     5,     1,     1,     3,     1,     2,     2,     2,     3,
       1,     3,     7,     1,     2,     0,     2,     0,     3,     3,
       4,     4,     4,     4,     3,     2,     1,     1,     0,     1,
       1,     0,     2,     1,     5,     1,     0,     2,     2,     0,
       1,     0,     3,     5,     1,     3,     4,     3,     1,     1,
       0,     2,     2,     0,     2,     2,     1,     1,     1,     0,
       2,     4,     5,     4,     2,     3,     2,     2,     2,     2,
       1,     2,     3,     0,     1,     0,     5,     1,     4,     6,
       2,     1,     0,     4,     0,     1,     1,     2,     2,     2,
       1,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       3,     3,     0,     1,     3,     1,     2,     1,     1,     1,
       1,     1,     2,     4,     4,     5,     1,     1,     2,     0,
       2,     0,     1,     3,     1,     0,     1,     2,     3,     2,
       4,     2,     3,     2,     0,     1,     2,     0,     4,     5,
       1,     2,     2,     0,     1,     3,     1,     2,     3,     3,
       3,     3,     3,     3,     1,     4,     9,     9,     3,     0,
       2,     2,     0,     5,     3,     1,     3,     5,     3,     1,
       2,     1,     3,     5,     1,     2,     3,     4,     5,     4,
       5,     4,     6,     5,     4,     5,     5,     5,     2,     4,
       1,     1,     0,     1,     4,     5,     4,     0,     2,     2,
       2,     1,     1,     1,     1,     0,     4,     2,     1,     2,
       2,     4,     2,     6,     2,     1,     3,     4,     0,     2,
       0,     2,     0,     1,     3,     3,     2,     0,     2,     4,
       1,     1,     1,     0,     2,     3,     5,     6,     2,     3,
       5,     5,     5,     3,     4,     0,     1,     1,     1,     1,
       1,     2,     4,     1,     1,     1,     1,     2,     3,     0,
       1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
       1,     3,     0,     1,     1,     1,     1,     5,     2,     1,
       1,     1,     1,     4,     1,     2,     2,     1,     3,     3,
       2,     1,     0,     5,     2,     5,     2,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     3,     3,     5,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     2,     2,     3,     3,     2,     2,
       3,     3,     5,     4,     6,     3,     5,     4,     6,     4,
       6,     5,     7,     3,     2,     4,     3,     2,     3,     3,
       3,     3,     4,     3,     4,     3,     4,     5,     6,     6,
       7,     6,     7,     6,     7,     3,     4,     4,     6,     1,
       4,     3,     5,     1,     3,     2,     2,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     1,     1,     2,     2,     3,     1,     2,     4,     1,
       1,     2,     2,     4,     1,     1,     3,     1,     4,     1,
       3,     3,     6,     7,     9,     7,     7,     5,     1,     1,
       1,     5,     6,     6,     4,     4,     4,     4,     6,     5,
       5,     5,     4,     6,     4,     7,     9,     5,     0,     5,
       4,     0,     1,     0,     2,     0,     1,     3,     3,     2,
       2,     0,     6,     1,     0,     3,     0,     3,     3,     3,
       0,     1,     4,     2,     2,     2,     2,     2,     3,     2,
       2,     3,     0,     4,     3,     1,     5,     3,     1,     3,
       1,     2,     3,     1,     3,     1,     2,     1,     0,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
       1,     3,     1,     3,     1,     2,     1,     3,     1,     2,
       1,     0,     1,     3,     1,     3,     3,     1,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     3,     2,     3,     0,     3,     3,     2,     2,
       1,     0,     2,     2,     3,     2,     1,     1,     3,     5,
       1,     2,     4,     2,     0,     1,     0,     1,     2,     3,
       5,     7,     7,     1,     0,     0,     2,     0,     2,     3,
       3,     3,     5,     7,     7,     0,     2,     1,     0,     1,
       0,     1,     3,     1,     2,     3,     2,     1,     4,     2,
       1,     0,     3,     1,     3,     1,     2,     4,     2,     0,
       1,     3,     1,     3,     1,     2,     1,     3,     1,     1,
       2,     1,     1,     2,     1,     1,     2,     7,     2,     5,
       3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
       0,     1,     1,     1,     5,     3,     0,     1,     1,     1,
       1,     1,     4,     7,     6,     2,     0,     1,     1,     1,
       1,    13,    16,     1,     2,     0,     1,     0,     1,     0,
       2,     0,     1,     0,     6,     8,     6,     8,     6,     8,
       3,     2,     1,     0,     4,     6,     3,     2,     4,     3,
       5,     1,     0,     1,     1,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     2,     3,     3,     3,     1,     3,     3,     2,
       3,     3,     3,     3,     1,     1,     1,     1,     3,     5,
       1,     1,     1,     1,     3,     2,     2,     3,     4,     5,
       1,     1,     1,     1,     4,     6,     5,     4,     6,     1,
       1,     1,     1,     1,     1,     0,     1,     3,     1,     0,
       7,     3,     1,     2,     3,     2,     0,     2,     0,     2,
       4,     5,     3,     5,     1,     0,     2,     0,     2,     3,
       3,     3,     1,     1,     1,     2,     3,     2,     2,     2,
       2,     3,     4,     3,     1,     1,     1,     1,     0,     1,
       3,     1,     3,     2,     9,    12,    11,    12,    14,     3,
       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 496 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 512 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 524 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 43: /* stmt: %empty  */
#line 571 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18630 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 18922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 18952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 18964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 18970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 19008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 19020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19461 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19557 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* CreateSecretStmt: CREATE_P SECRET ColId TYPE_P '=' ColId opt_secret_key_val  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-4].str);
					n->secret_type = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P SECRET IF_P NOT EXISTS ColId TYPE_P '=' ColId opt_secret_key_val  */
#line 17 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-4].str);
					n->secret_type = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P OR REPLACE SECRET ColId TYPE_P '=' ColId opt_secret_key_val  */
#line 26 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->secret_name = (yyvsp[-4].str);
					n->secret_type = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* secret_key: ColId '=' SCONST  */
#line 37 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = list_make2((yyvsp[-2].str), (yyvsp[0].str)); }
#line 19854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* secret_key_val: secret_key  */
#line 41 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* secret_key_val: secret_key_val secret_key  */
#line 42 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.list) = lappend((yyvsp[-1].list),(yyvsp[0].list)); }
#line 19866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* opt_secret_key_val: %empty  */
#line 46 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                        { (yyval.list) = NULL; }
#line 19872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* opt_secret_key_val: secret_key_val  */
#line 47 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 19978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20002 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20244 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20391 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20397 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20723 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 20729 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20735 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 20741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 20747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 20753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20788 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20794 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 20800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 20806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 20812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 20818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 20824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 20830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 20836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20893 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20910 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 20916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 20922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 20928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 20946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 20970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 20982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21563 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* DropStmt: DROP TYPE_P type_name_list opt_drop_behavior  */
#line 70 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* DropStmt: DROP TYPE_P IF_P EXISTS type_name_list opt_drop_behavior  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = PG_OBJECT_TYPE;
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* drop_type_any_name: TABLE  */
#line 93 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* drop_type_any_name: SEQUENCE  */
#line 94 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* drop_type_any_name: FUNCTION  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* drop_type_any_name: MACRO  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* drop_type_any_name: MACRO TABLE  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* drop_type_any_name: VIEW  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* drop_type_any_name: INDEX  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* drop_type_any_name: FOREIGN TABLE  */
#line 101 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: COLLATION  */
#line 102 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: CONVERSION_P  */
#line 103 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: SCHEMA  */
#line 104 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: STATISTICS  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 107 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 108 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 109 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_name: ACCESS METHOD  */
#line 114 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_name: EVENT TRIGGER  */
#line 115 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_name: EXTENSION  */
#line 116 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 117 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_name: PUBLICATION  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_name: SERVER  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* any_name_list: any_name  */
#line 124 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* any_name_list: any_name_list ',' any_name  */
#line 125 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* opt_drop_behavior: CASCADE  */
#line 130 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* opt_drop_behavior: RESTRICT  */
#line 131 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* opt_drop_behavior: %empty  */
#line 132 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name_on_any_name: POLICY  */
#line 137 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name_on_any_name: RULE  */
#line 138 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name_on_any_name: TRIGGER  */
#line 139 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* type_name_list: Typename  */
#line 142 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 21797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* type_name_list: type_name_list ',' Typename  */
#line 143 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 21803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 21865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 21903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 21926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* copy_from: FROM  */
#line 53 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 21987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 451: /* copy_from: TO  */
#line 54 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 21993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 452: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 60 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* copy_delimiter: %empty  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 69 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 73 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* opt_using: USING  */
#line 80 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* opt_using: %empty  */
#line 81 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* opt_as: AS  */
#line 85 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* opt_as: %empty  */
#line 86 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* opt_program: PROGRAM  */
#line 91 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* opt_program: %empty  */
#line 92 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_options: copy_opt_list  */
#line 96 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 97 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 102 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_generic_opt_arg: NumericOnly  */
#line 103 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg: '*'  */
#line 104 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* copy_generic_opt_arg: struct_expr  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* copy_generic_opt_arg: %empty  */
#line 107 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 113 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_oids: WITH OIDS  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_oids: %empty  */
#line 124 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22129 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 129 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22135 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_opt_list: %empty  */
#line 130 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* opt_binary: BINARY  */
#line 136 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* opt_binary: %empty  */
#line 139 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_opt_item: BINARY  */
#line 145 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_opt_item: OIDS  */
#line 149 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_opt_item: FREEZE  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 157 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22187 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 161 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22195 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_opt_item: CSV  */
#line 165 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* copy_opt_item: HEADER_P  */
#line 169 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 173 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 177 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_item: FORCE QUOTE columnList  */
#line 181 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* copy_opt_item: FORCE QUOTE '*'  */
#line 185 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* copy_opt_item: PARTITION BY columnList  */
#line 189 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: PARTITION BY '*'  */
#line 193 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 197 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: FORCE NULL_P columnList  */
#line 201 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: ENCODING Sconst  */
#line 205 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 212 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_file_name: Sconst  */
#line 218 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_file_name: STDIN  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_file_name: STDOUT  */
#line 220 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 230 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 511: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 512: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22580 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22684 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22702 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22720 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 22730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 22741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 546: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 547: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 548: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 549: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 22804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 550: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 551: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 22830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 22836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 22842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 22862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 22868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22895 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 22937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 22946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 22955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 22991 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 22997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23003 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23009 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23021 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23033 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23039 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23166 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23269 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23283 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23627 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 23669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 23687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 23693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 23699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23767 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 23777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23802 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23814 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 23840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 23857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 23871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 23885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 23891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 23897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 23903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 23909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 23926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 23937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23949 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 23960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 23971 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 23993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 23999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24251 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24325 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24331 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24355 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24361 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24545 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24579 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24636 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1628 "third_party/libpg_query/grammar/statements/select.y"
                                                                               {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1634 "third_party/libpg_query/grammar/statements/select.y"
                                                     {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 782: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                                                                         {
			   (yyval.typnam) = SystemTypeName("union");
			   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
			   (yyval.typnam)->typmods = (yyvsp[-2].list);
			   (yyval.typnam)->location = (yylsp[-4]);
			}
#line 24669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 783: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1650 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 24675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1652 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 24681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_array_bounds: %empty  */
#line 1654 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 24687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* SimpleTypename: GenericType  */
#line 1658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* SimpleTypename: Numeric  */
#line 1659 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* SimpleTypename: Bit  */
#line 1660 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* SimpleTypename: Character  */
#line 1661 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* SimpleTypename: ConstDatetime  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* SimpleTypename: ConstInterval opt_interval  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 24726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1669 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 24736 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* ConstTypename: Numeric  */
#line 1688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* ConstTypename: ConstBit  */
#line 1689 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* ConstTypename: ConstCharacter  */
#line 1690 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24754 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* ConstTypename: ConstDatetime  */
#line 1691 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24760 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* GenericType: type_name_token opt_type_modifiers  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1716 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_type_modifiers: %empty  */
#line 1717 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* Numeric: INT_P  */
#line 1724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* Numeric: INTEGER  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* Numeric: SMALLINT  */
#line 1734 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* Numeric: BIGINT  */
#line 1739 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* Numeric: REAL  */
#line 1744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* Numeric: FLOAT_P opt_float  */
#line 1749 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* Numeric: DOUBLE_P PRECISION  */
#line 1754 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24845 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1759 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* Numeric: DEC opt_type_modifiers  */
#line 1765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* Numeric: BOOLEAN_P  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* opt_float: '(' Iconst ')'  */
#line 1784 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* opt_float: %empty  */
#line 1805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 24917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* Bit: BitWithLength  */
#line 1815 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* Bit: BitWithoutLength  */
#line 1819 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24933 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* ConstBit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* ConstBit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 24950 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 24963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* BitWithoutLength: BIT opt_varying  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Character: CharacterWithLength  */
#line 1872 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Character: CharacterWithoutLength  */
#line 1876 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* ConstCharacter: CharacterWithLength  */
#line 1882 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* ConstCharacter: CharacterWithoutLength  */
#line 1886 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1899 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* CharacterWithoutLength: character  */
#line 1907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* character: CHARACTER opt_varying  */
#line 1917 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* character: CHAR_P opt_varying  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* character: VARCHAR  */
#line 1921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* character: NATIONAL CHARACTER opt_varying  */
#line 1923 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25066 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* character: NATIONAL CHAR_P opt_varying  */
#line 1925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* character: NCHAR opt_varying  */
#line 1927 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* opt_varying: VARYING  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* opt_varying: %empty  */
#line 1932 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1940 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1949 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* ConstDatetime: TIME opt_timezone  */
#line 1966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* ConstInterval: INTERVAL  */
#line 1977 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1984 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25155 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1985 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* opt_timezone: %empty  */
#line 1986 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 857: /* opt_interval: year_keyword  */
#line 2015 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 858: /* opt_interval: month_keyword  */
#line 2017 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 859: /* opt_interval: day_keyword  */
#line 2019 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 860: /* opt_interval: hour_keyword  */
#line 2021 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 861: /* opt_interval: minute_keyword  */
#line 2023 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 862: /* opt_interval: second_keyword  */
#line 2025 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 863: /* opt_interval: millisecond_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 864: /* opt_interval: microsecond_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 865: /* opt_interval: year_keyword TO month_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 866: /* opt_interval: day_keyword TO hour_keyword  */
#line 2036 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 867: /* opt_interval: day_keyword TO minute_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 868: /* opt_interval: day_keyword TO second_keyword  */
#line 2047 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 869: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2054 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 870: /* opt_interval: hour_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 871: /* opt_interval: minute_keyword TO second_keyword  */
#line 2065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: %empty  */
#line 2070 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* a_expr: c_expr  */
#line 2101 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* a_expr: a_expr TYPECAST Typename  */
#line 2104 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* a_expr: a_expr COLLATE any_name  */
#line 2106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* a_expr: '+' a_expr  */
#line 2129 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25328 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* a_expr: '-' a_expr  */
#line 2131 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25334 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* a_expr: a_expr '+' a_expr  */
#line 2133 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* a_expr: a_expr '-' a_expr  */
#line 2135 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* a_expr: a_expr '*' a_expr  */
#line 2137 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* a_expr: a_expr '/' a_expr  */
#line 2139 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* a_expr: a_expr '%' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* a_expr: a_expr '^' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* a_expr: a_expr POWER_OF a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* a_expr: a_expr '<' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: a_expr '>' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: a_expr '=' a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: a_expr qual_Op a_expr  */
#line 2162 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: qual_Op a_expr  */
#line 2164 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25430 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr qual_Op  */
#line 2166 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25436 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr AND a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: a_expr OR a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: NOT a_expr  */
#line 2173 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: NOT_LA a_expr  */
#line 2175 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr GLOB a_expr  */
#line 2177 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr LIKE a_expr  */
#line 2182 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25478 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr ILIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2231 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2239 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2247 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25585 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2255 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: a_expr IS NULL_P  */
#line 2273 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25609 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: a_expr ISNULL  */
#line 2281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr IS NOT NULL_P  */
#line 2289 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr NOT NULL_P  */
#line 2297 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr NOTNULL  */
#line 2305 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2313 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 25669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2321 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 25677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: row OVERLAPS row  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr IS TRUE_P  */
#line 2341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2349 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr IS FALSE_P  */
#line 2357 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2365 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr IS UNKNOWN  */
#line 2373 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2381 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2389 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 25777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 25801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2421 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2429 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: a_expr IN_P in_expr  */
#line 2437 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 25873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2457 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 25899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2479 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 25925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: DEFAULT  */
#line 2497 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25943 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2511 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 25955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2519 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 25967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 25980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* b_expr: c_expr  */
#line 2547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 25986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* b_expr: b_expr TYPECAST Typename  */
#line 2549 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* b_expr: '+' b_expr  */
#line 2551 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* b_expr: '-' b_expr  */
#line 2553 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* b_expr: b_expr '+' b_expr  */
#line 2555 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* b_expr: b_expr '-' b_expr  */
#line 2557 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* b_expr: b_expr '*' b_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* b_expr: b_expr '/' b_expr  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* b_expr: b_expr '%' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* b_expr: b_expr '^' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* b_expr: b_expr POWER_OF b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* b_expr: b_expr '<' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* b_expr: b_expr '>' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* b_expr: b_expr '=' b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26076 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26082 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: b_expr qual_Op b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: qual_Op b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26100 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr qual_Op  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* c_expr: row  */
#line 2615 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2620 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26163 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* d_expr: columnref  */
#line 2633 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26169 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* d_expr: AexprConst  */
#line 2634 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26175 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* d_expr: '#' ICONST  */
#line 2636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* d_expr: '$' ColLabel  */
#line 2643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* d_expr: list_comprehension  */
#line 2650 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* d_expr: ARRAY select_with_parens  */
#line 2654 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2664 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* d_expr: case_expr  */
#line 2670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* d_expr: select_with_parens  */
#line 2672 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* d_expr: select_with_parens indirection  */
#line 2683 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* d_expr: EXISTS select_with_parens  */
#line 2707 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 983: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2718 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* indirection_expr: '?'  */
#line 2729 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* indirection_expr: PARAM  */
#line 2733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* indirection_expr: '(' a_expr ')'  */
#line 2740 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* indirection_expr: struct_expr  */
#line 2744 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2748 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* indirection_expr: func_expr  */
#line 2765 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2773 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* func_application: func_name '(' ')'  */
#line 2782 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2786 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26403 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2793 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26415 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2801 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2809 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26454 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* func_expr: func_expr_common_subexpr  */
#line 2876 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* func_expr_windowless: func_application  */
#line 2886 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2887 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2895 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2901 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2903 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2905 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2909 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2923 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26575 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2945 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2956 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2960 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26648 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2987 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 26680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3008 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26686 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* within_group_clause: %empty  */
#line 3009 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3013 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3014 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* filter_clause: %empty  */
#line 3015 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* export_clause: EXPORT_STATE  */
#line 3019 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 26716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* export_clause: %empty  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* window_clause: WINDOW window_definition_list  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* window_clause: %empty  */
#line 3028 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* window_definition_list: window_definition  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 26740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3034 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 26746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* window_definition: ColId AS window_specification  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* over_clause: OVER window_specification  */
#line 3047 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* over_clause: OVER ColId  */
#line 3049 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 26779 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* over_clause: %empty  */
#line 3062 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 26785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3067 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 26803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* opt_existing_window_name: ColId  */
#line 3092 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* opt_existing_window_name: %empty  */
#line 3093 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 26815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3096 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* opt_partition_clause: %empty  */
#line 3097 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3106 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26839 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3114 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26851 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3122 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* opt_frame_clause: %empty  */
#line 3130 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* frame_extent: frame_bound  */
#line 3141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 26898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3159 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3205 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3214 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* frame_bound: CURRENT_P ROW  */
#line 3223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* frame_bound: a_expr PRECEDING  */
#line 3232 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* frame_bound: a_expr FOLLOWING  */
#line 3241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3252 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3254 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3255 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* opt_window_exclusion_clause: %empty  */
#line 3256 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3270 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* qualified_row: ROW '(' ')'  */
#line 3271 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* row: qualified_row  */
#line 3274 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* row: '(' expr_list ',' a_expr ')'  */
#line 3275 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3279 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* dict_arguments: dict_arg  */
#line 3289 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3290 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* dict_arguments_opt_comma: dict_arguments  */
#line 3294 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3295 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* map_arg: a_expr ':' a_expr  */
#line 3300 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* map_arguments: map_arg  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* map_arguments: map_arguments ',' map_arg  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* map_arguments_opt_comma: map_arguments  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* map_arguments_opt_comma: map_arguments ','  */
#line 3313 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* opt_map_arguments_opt_comma: %empty  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* sub_type: ANY  */
#line 3322 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* sub_type: SOME  */
#line 3323 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* sub_type: ALL  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* all_Op: Op  */
#line 3327 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* all_Op: MathOp  */
#line 3328 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* MathOp: '+'  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27176 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* MathOp: '-'  */
#line 3332 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* MathOp: '*'  */
#line 3333 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27188 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* MathOp: '/'  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* MathOp: INTEGER_DIVISION  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27200 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* MathOp: '%'  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27206 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* MathOp: '^'  */
#line 3337 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27212 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* MathOp: POWER_OF  */
#line 3338 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* MathOp: '<'  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27224 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* MathOp: '>'  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27230 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* MathOp: '='  */
#line 3341 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27236 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* MathOp: LESS_EQUALS  */
#line 3342 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27242 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* MathOp: GREATER_EQUALS  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* MathOp: NOT_EQUALS  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* qual_Op: Op  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* qual_all_Op: all_Op  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3357 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* subquery_Op: all_Op  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27284 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3364 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* subquery_Op: LIKE  */
#line 3366 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27296 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* subquery_Op: NOT_LA LIKE  */
#line 3368 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27302 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* subquery_Op: GLOB  */
#line 3370 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27308 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* subquery_Op: NOT_LA GLOB  */
#line 3372 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* subquery_Op: ILIKE  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* subquery_Op: NOT_LA ILIKE  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* any_operator: all_Op  */
#line 3390 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* any_operator: ColId '.' any_operator  */
#line 3392 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* c_expr_list: c_expr  */
#line 3397 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* c_expr_list_opt_comma: c_expr_list  */
#line 3408 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* expr_list: a_expr  */
#line 3419 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* expr_list: expr_list ',' a_expr  */
#line 3423 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* expr_list_opt_comma: expr_list  */
#line 3430 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* expr_list_opt_comma: expr_list ','  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* opt_expr_list_opt_comma: %empty  */
#line 3446 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* func_arg_list: func_arg_expr  */
#line 3455 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3459 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* func_arg_expr: a_expr  */
#line 3465 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3478 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* type_list: Typename  */
#line 3488 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* type_list: type_list ',' Typename  */
#line 3489 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* extract_list: extract_arg FROM a_expr  */
#line 3494 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* extract_list: %empty  */
#line 3497 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* extract_arg: IDENT  */
#line 3504 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* extract_arg: year_keyword  */
#line 3505 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* extract_arg: month_keyword  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* extract_arg: day_keyword  */
#line 3507 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* extract_arg: hour_keyword  */
#line 3508 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* extract_arg: minute_keyword  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* extract_arg: second_keyword  */
#line 3510 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27536 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* extract_arg: millisecond_keyword  */
#line 3511 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* extract_arg: microsecond_keyword  */
#line 3512 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* extract_arg: Sconst  */
#line 3513 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27554 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3528 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* overlay_placing: PLACING a_expr  */
#line 3535 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* position_list: b_expr IN_P b_expr  */
#line 3541 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* position_list: %empty  */
#line 3542 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* substr_list: a_expr substr_from substr_for  */
#line 3559 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27596 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* substr_list: a_expr substr_for substr_from  */
#line 3563 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* substr_list: a_expr substr_from  */
#line 3568 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* substr_list: a_expr substr_for  */
#line 3572 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* substr_list: expr_list  */
#line 3587 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* substr_list: %empty  */
#line 3591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* substr_from: FROM a_expr  */
#line 3595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* substr_for: FOR a_expr  */
#line 3598 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3601 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 27664 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* trim_list: FROM expr_list_opt_comma  */
#line 3602 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* trim_list: expr_list_opt_comma  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* in_expr: select_with_parens  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 27687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 27693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3624 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 27707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* when_clause_list: when_clause  */
#line 3637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* when_clause_list: when_clause_list when_clause  */
#line 3638 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3643 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 27731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* case_default: ELSE a_expr  */
#line 3653 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* case_default: %empty  */
#line 3654 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* case_arg: a_expr  */
#line 3657 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27749 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* case_arg: %empty  */
#line 3658 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27755 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* columnref: ColId  */
#line 3662 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 27763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* columnref: ColId indirection  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* indirection_el: '[' a_expr ']'  */
#line 3673 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3688 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 27808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3696 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* opt_slice_bound: a_expr  */
#line 3706 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* opt_slice_bound: %empty  */
#line 3707 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* opt_indirection: %empty  */
#line 3712 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* opt_indirection: opt_indirection indirection_el  */
#line 3713 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* opt_func_arguments: %empty  */
#line 3717 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 27850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* opt_func_arguments: '(' ')'  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 27856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 27875 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* extended_indirection_el: '[' a_expr ']'  */
#line 3733 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27887 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27899 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3748 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 27912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3757 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27924 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* opt_extended_indirection: %empty  */
#line 3772 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 27930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3773 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3789 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_target_list_opt_comma: %empty  */
#line 3790 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* target_list: target_el  */
#line 3794 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 27954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* target_list: target_list ',' target_el  */
#line 3795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 27960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* target_list_opt_comma: target_list  */
#line 3799 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* target_list_opt_comma: target_list ','  */
#line 3800 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* target_el: a_expr AS ColLabelOrString  */
#line 3804 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 27984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* target_el: a_expr IDENT  */
#line 3820 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 27996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* target_el: a_expr  */
#line 3828 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28008 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3837 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* except_list: EXCLUDE ColId  */
#line 3838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28020 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_except_list: except_list  */
#line 3841 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28026 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_except_list: %empty  */
#line 3842 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28032 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1192: /* replace_list_el: a_expr AS ColId  */
#line 3845 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28038 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1193: /* replace_list: replace_list_el  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* replace_list: replace_list ',' replace_list_el  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* replace_list_opt_comma: replace_list  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* replace_list_opt_comma: replace_list ','  */
#line 3855 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3858 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* opt_replace_list: REPLACE replace_list_el  */
#line 3859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* opt_replace_list: %empty  */
#line 3860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* qualified_name_list: qualified_name  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* name_list: name  */
#line 3876 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* name_list: name_list ',' name  */
#line 3878 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* name_list_opt_comma: name_list  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* name_list_opt_comma: name_list ','  */
#line 3884 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3889 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* name: ColIdOrString  */
#line 3892 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* func_name: function_name_token  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* func_name: ColId indirection  */
#line 3907 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* AexprConst: Iconst  */
#line 3918 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* AexprConst: FCONST  */
#line 3922 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* AexprConst: Sconst opt_indirection  */
#line 3926 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28181 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* AexprConst: BCONST  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28189 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* AexprConst: XCONST  */
#line 3942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* AexprConst: func_name Sconst  */
#line 3951 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3958 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* AexprConst: ConstTypename Sconst  */
#line 3996 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4000 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4004 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* AexprConst: TRUE_P  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* AexprConst: FALSE_P  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* AexprConst: NULL_P  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* Iconst: ICONST  */
#line 4025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* type_function_name: IDENT  */
#line 4042 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* type_function_name: unreserved_keyword  */
#line 4043 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28329 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* type_function_name: type_func_name_keyword  */
#line 4044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* function_name_token: IDENT  */
#line 4047 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28341 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* function_name_token: unreserved_keyword  */
#line 4048 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28347 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* function_name_token: func_name_keyword  */
#line 4049 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28353 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* type_name_token: IDENT  */
#line 4052 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* type_name_token: unreserved_keyword  */
#line 4053 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28365 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* type_name_token: type_name_keyword  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28371 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* any_name: ColId  */
#line 4057 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* any_name: ColId attrs  */
#line 4058 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* attrs: '.' attr_name  */
#line 4062 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28389 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* attrs: attrs '.' attr_name  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28395 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4068 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* opt_name_list: %empty  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28407 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* ColLabelOrString: ColLabel  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28413 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* ColLabelOrString: SCONST  */
#line 4077 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28419 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28437 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28443 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1256: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1262: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1263: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1264: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28599 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1265: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1266: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1272: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1273: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1274: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28666 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1275: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28718 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28742 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 28816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 28830 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 28841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 28852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 28858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 28864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 28870 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 28876 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 28882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1326: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28888 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1327: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1328: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1329: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1330: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1331: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 28920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1332: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 28928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1333: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 28934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1334: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 28940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1335: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 28946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1336: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 28952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1337: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 28958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1338: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1339: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 28972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1340: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 28984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 28994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* generic_set: var_name TO DEFAULT  */
#line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* generic_set: var_name '=' DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* var_value: opt_boolean_or_string  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 29120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* var_value: NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* zone_value: Sconst  */
#line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* zone_value: IDENT  */
#line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* zone_value: ConstInterval Sconst opt_interval  */
#line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29161 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29172 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* zone_value: NumericOnly  */
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* zone_value: DEFAULT  */
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29184 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* zone_value: LOCAL  */
#line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* var_list: var_value  */
#line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29196 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* var_list: var_list ',' var_value  */
#line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29268 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29280 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29338 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29382 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29388 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29414 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29496 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29508 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29514 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29520 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29548 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29560 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* DetachStmt: DETACH opt_database IDENT  */
#line 19 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 26 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* opt_database: DATABASE  */
#line 34 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* opt_database: %empty  */
#line 35 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* opt_database_alias: AS ColId  */
#line 39 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* opt_database_alias: %empty  */
#line 40 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29615 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29633 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 29669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 29680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 29691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29726 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 29799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29863 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1438: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1439: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29911 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1440: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1441: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 29923 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 29929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 29946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 29963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 29980 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 29986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 29992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 29998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30016 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
