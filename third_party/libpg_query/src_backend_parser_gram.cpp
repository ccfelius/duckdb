/* A Bison parser, made by GNU Bison 3.8.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2021 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* DO NOT RELY ON FEATURES THAT ARE NOT DOCUMENTED in the manual,
   especially those whose name start with YY_ or yy_.  They are
   private implementation details that can be changed or removed.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output, and Bison version.  */
#define YYBISON 30802

/* Bison version string.  */
#define YYBISON_VERSION "3.8.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs

/* First part of user prologue.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp"

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static PGNode *makeNamedParamRef(char* name, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
static PGNode *makeLimitPercent(PGNode *limit_percent);


#line 241 "third_party/libpg_query/grammar/grammar_out.cpp"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

#include "include/parser/gram.hpp"
/* Symbol kind.  */
enum yysymbol_kind_t
{
  YYSYMBOL_YYEMPTY = -2,
  YYSYMBOL_YYEOF = 0,                      /* "end of file"  */
  YYSYMBOL_YYerror = 1,                    /* error  */
  YYSYMBOL_YYUNDEF = 2,                    /* "invalid token"  */
  YYSYMBOL_IDENT = 3,                      /* IDENT  */
  YYSYMBOL_FCONST = 4,                     /* FCONST  */
  YYSYMBOL_SCONST = 5,                     /* SCONST  */
  YYSYMBOL_BCONST = 6,                     /* BCONST  */
  YYSYMBOL_XCONST = 7,                     /* XCONST  */
  YYSYMBOL_Op = 8,                         /* Op  */
  YYSYMBOL_ICONST = 9,                     /* ICONST  */
  YYSYMBOL_PARAM = 10,                     /* PARAM  */
  YYSYMBOL_TYPECAST = 11,                  /* TYPECAST  */
  YYSYMBOL_DOT_DOT = 12,                   /* DOT_DOT  */
  YYSYMBOL_COLON_EQUALS = 13,              /* COLON_EQUALS  */
  YYSYMBOL_EQUALS_GREATER = 14,            /* EQUALS_GREATER  */
  YYSYMBOL_INTEGER_DIVISION = 15,          /* INTEGER_DIVISION  */
  YYSYMBOL_POWER_OF = 16,                  /* POWER_OF  */
  YYSYMBOL_LAMBDA_ARROW = 17,              /* LAMBDA_ARROW  */
  YYSYMBOL_DOUBLE_ARROW = 18,              /* DOUBLE_ARROW  */
  YYSYMBOL_LESS_EQUALS = 19,               /* LESS_EQUALS  */
  YYSYMBOL_GREATER_EQUALS = 20,            /* GREATER_EQUALS  */
  YYSYMBOL_NOT_EQUALS = 21,                /* NOT_EQUALS  */
  YYSYMBOL_ABORT_P = 22,                   /* ABORT_P  */
  YYSYMBOL_ABSOLUTE_P = 23,                /* ABSOLUTE_P  */
  YYSYMBOL_ACCESS = 24,                    /* ACCESS  */
  YYSYMBOL_ACTION = 25,                    /* ACTION  */
  YYSYMBOL_ADD_P = 26,                     /* ADD_P  */
  YYSYMBOL_ADMIN = 27,                     /* ADMIN  */
  YYSYMBOL_AFTER = 28,                     /* AFTER  */
  YYSYMBOL_AGGREGATE = 29,                 /* AGGREGATE  */
  YYSYMBOL_ALL = 30,                       /* ALL  */
  YYSYMBOL_ALSO = 31,                      /* ALSO  */
  YYSYMBOL_ALTER = 32,                     /* ALTER  */
  YYSYMBOL_ALWAYS = 33,                    /* ALWAYS  */
  YYSYMBOL_ANALYSE = 34,                   /* ANALYSE  */
  YYSYMBOL_ANALYZE = 35,                   /* ANALYZE  */
  YYSYMBOL_AND = 36,                       /* AND  */
  YYSYMBOL_ANTI = 37,                      /* ANTI  */
  YYSYMBOL_ANY = 38,                       /* ANY  */
  YYSYMBOL_ARRAY = 39,                     /* ARRAY  */
  YYSYMBOL_AS = 40,                        /* AS  */
  YYSYMBOL_ASC_P = 41,                     /* ASC_P  */
  YYSYMBOL_ASOF = 42,                      /* ASOF  */
  YYSYMBOL_ASSERTION = 43,                 /* ASSERTION  */
  YYSYMBOL_ASSIGNMENT = 44,                /* ASSIGNMENT  */
  YYSYMBOL_ASYMMETRIC = 45,                /* ASYMMETRIC  */
  YYSYMBOL_AT = 46,                        /* AT  */
  YYSYMBOL_ATTACH = 47,                    /* ATTACH  */
  YYSYMBOL_ATTRIBUTE = 48,                 /* ATTRIBUTE  */
  YYSYMBOL_AUTHORIZATION = 49,             /* AUTHORIZATION  */
  YYSYMBOL_BACKWARD = 50,                  /* BACKWARD  */
  YYSYMBOL_BEFORE = 51,                    /* BEFORE  */
  YYSYMBOL_BEGIN_P = 52,                   /* BEGIN_P  */
  YYSYMBOL_BETWEEN = 53,                   /* BETWEEN  */
  YYSYMBOL_BIGINT = 54,                    /* BIGINT  */
  YYSYMBOL_BINARY = 55,                    /* BINARY  */
  YYSYMBOL_BIT = 56,                       /* BIT  */
  YYSYMBOL_BOOLEAN_P = 57,                 /* BOOLEAN_P  */
  YYSYMBOL_BOTH = 58,                      /* BOTH  */
  YYSYMBOL_BY = 59,                        /* BY  */
  YYSYMBOL_CACHE = 60,                     /* CACHE  */
  YYSYMBOL_CALL_P = 61,                    /* CALL_P  */
  YYSYMBOL_CALLED = 62,                    /* CALLED  */
  YYSYMBOL_CASCADE = 63,                   /* CASCADE  */
  YYSYMBOL_CASCADED = 64,                  /* CASCADED  */
  YYSYMBOL_CASE = 65,                      /* CASE  */
  YYSYMBOL_CAST = 66,                      /* CAST  */
  YYSYMBOL_CATALOG_P = 67,                 /* CATALOG_P  */
  YYSYMBOL_CHAIN = 68,                     /* CHAIN  */
  YYSYMBOL_CHAR_P = 69,                    /* CHAR_P  */
  YYSYMBOL_CHARACTER = 70,                 /* CHARACTER  */
  YYSYMBOL_CHARACTERISTICS = 71,           /* CHARACTERISTICS  */
  YYSYMBOL_CHECK_P = 72,                   /* CHECK_P  */
  YYSYMBOL_CHECKPOINT = 73,                /* CHECKPOINT  */
  YYSYMBOL_CLASS = 74,                     /* CLASS  */
  YYSYMBOL_CLOSE = 75,                     /* CLOSE  */
  YYSYMBOL_CLUSTER = 76,                   /* CLUSTER  */
  YYSYMBOL_COALESCE = 77,                  /* COALESCE  */
  YYSYMBOL_COLLATE = 78,                   /* COLLATE  */
  YYSYMBOL_COLLATION = 79,                 /* COLLATION  */
  YYSYMBOL_COLUMN = 80,                    /* COLUMN  */
  YYSYMBOL_COLUMNS = 81,                   /* COLUMNS  */
  YYSYMBOL_COMMENT = 82,                   /* COMMENT  */
  YYSYMBOL_COMMENTS = 83,                  /* COMMENTS  */
  YYSYMBOL_COMMIT = 84,                    /* COMMIT  */
  YYSYMBOL_COMMITTED = 85,                 /* COMMITTED  */
  YYSYMBOL_COMPRESSION = 86,               /* COMPRESSION  */
  YYSYMBOL_CONCURRENTLY = 87,              /* CONCURRENTLY  */
  YYSYMBOL_CONFIGURATION = 88,             /* CONFIGURATION  */
  YYSYMBOL_CONFLICT = 89,                  /* CONFLICT  */
  YYSYMBOL_CONNECTION = 90,                /* CONNECTION  */
  YYSYMBOL_CONSTRAINT = 91,                /* CONSTRAINT  */
  YYSYMBOL_CONSTRAINTS = 92,               /* CONSTRAINTS  */
  YYSYMBOL_CONTENT_P = 93,                 /* CONTENT_P  */
  YYSYMBOL_CONTINUE_P = 94,                /* CONTINUE_P  */
  YYSYMBOL_CONVERSION_P = 95,              /* CONVERSION_P  */
  YYSYMBOL_COPY = 96,                      /* COPY  */
  YYSYMBOL_COST = 97,                      /* COST  */
  YYSYMBOL_CREATE_P = 98,                  /* CREATE_P  */
  YYSYMBOL_CROSS = 99,                     /* CROSS  */
  YYSYMBOL_CSV = 100,                      /* CSV  */
  YYSYMBOL_CUBE = 101,                     /* CUBE  */
  YYSYMBOL_CURRENT_P = 102,                /* CURRENT_P  */
  YYSYMBOL_CURSOR = 103,                   /* CURSOR  */
  YYSYMBOL_CYCLE = 104,                    /* CYCLE  */
  YYSYMBOL_DATA_P = 105,                   /* DATA_P  */
  YYSYMBOL_DATABASE = 106,                 /* DATABASE  */
  YYSYMBOL_DAY_P = 107,                    /* DAY_P  */
  YYSYMBOL_DAYS_P = 108,                   /* DAYS_P  */
  YYSYMBOL_DEALLOCATE = 109,               /* DEALLOCATE  */
  YYSYMBOL_DEC = 110,                      /* DEC  */
  YYSYMBOL_DECIMAL_P = 111,                /* DECIMAL_P  */
  YYSYMBOL_DECLARE = 112,                  /* DECLARE  */
  YYSYMBOL_DEFAULT = 113,                  /* DEFAULT  */
  YYSYMBOL_DEFAULTS = 114,                 /* DEFAULTS  */
  YYSYMBOL_DEFERRABLE = 115,               /* DEFERRABLE  */
  YYSYMBOL_DEFERRED = 116,                 /* DEFERRED  */
  YYSYMBOL_DEFINER = 117,                  /* DEFINER  */
  YYSYMBOL_DELETE_P = 118,                 /* DELETE_P  */
  YYSYMBOL_DELIMITER = 119,                /* DELIMITER  */
  YYSYMBOL_DELIMITERS = 120,               /* DELIMITERS  */
  YYSYMBOL_DEPENDS = 121,                  /* DEPENDS  */
  YYSYMBOL_DESC_P = 122,                   /* DESC_P  */
  YYSYMBOL_DESCRIBE = 123,                 /* DESCRIBE  */
  YYSYMBOL_DETACH = 124,                   /* DETACH  */
  YYSYMBOL_DICTIONARY = 125,               /* DICTIONARY  */
  YYSYMBOL_DISABLE_P = 126,                /* DISABLE_P  */
  YYSYMBOL_DISCARD = 127,                  /* DISCARD  */
  YYSYMBOL_DISTINCT = 128,                 /* DISTINCT  */
  YYSYMBOL_DO = 129,                       /* DO  */
  YYSYMBOL_DOCUMENT_P = 130,               /* DOCUMENT_P  */
  YYSYMBOL_DOMAIN_P = 131,                 /* DOMAIN_P  */
  YYSYMBOL_DOUBLE_P = 132,                 /* DOUBLE_P  */
  YYSYMBOL_DROP = 133,                     /* DROP  */
  YYSYMBOL_EACH = 134,                     /* EACH  */
  YYSYMBOL_ELSE = 135,                     /* ELSE  */
  YYSYMBOL_ENABLE_P = 136,                 /* ENABLE_P  */
  YYSYMBOL_ENCODING = 137,                 /* ENCODING  */
  YYSYMBOL_ENCRYPTED = 138,                /* ENCRYPTED  */
  YYSYMBOL_END_P = 139,                    /* END_P  */
  YYSYMBOL_ENUM_P = 140,                   /* ENUM_P  */
  YYSYMBOL_ESCAPE = 141,                   /* ESCAPE  */
  YYSYMBOL_EVENT = 142,                    /* EVENT  */
  YYSYMBOL_EXCEPT = 143,                   /* EXCEPT  */
  YYSYMBOL_EXCLUDE = 144,                  /* EXCLUDE  */
  YYSYMBOL_EXCLUDING = 145,                /* EXCLUDING  */
  YYSYMBOL_EXCLUSIVE = 146,                /* EXCLUSIVE  */
  YYSYMBOL_EXECUTE = 147,                  /* EXECUTE  */
  YYSYMBOL_EXISTS = 148,                   /* EXISTS  */
  YYSYMBOL_EXPLAIN = 149,                  /* EXPLAIN  */
  YYSYMBOL_EXPORT_P = 150,                 /* EXPORT_P  */
  YYSYMBOL_EXPORT_STATE = 151,             /* EXPORT_STATE  */
  YYSYMBOL_EXTENSION = 152,                /* EXTENSION  */
  YYSYMBOL_EXTERNAL = 153,                 /* EXTERNAL  */
  YYSYMBOL_EXTRACT = 154,                  /* EXTRACT  */
  YYSYMBOL_FALSE_P = 155,                  /* FALSE_P  */
  YYSYMBOL_FAMILY = 156,                   /* FAMILY  */
  YYSYMBOL_FETCH = 157,                    /* FETCH  */
  YYSYMBOL_FILTER = 158,                   /* FILTER  */
  YYSYMBOL_FIRST_P = 159,                  /* FIRST_P  */
  YYSYMBOL_FLOAT_P = 160,                  /* FLOAT_P  */
  YYSYMBOL_FOLLOWING = 161,                /* FOLLOWING  */
  YYSYMBOL_FOR = 162,                      /* FOR  */
  YYSYMBOL_FORCE = 163,                    /* FORCE  */
  YYSYMBOL_FOREIGN = 164,                  /* FOREIGN  */
  YYSYMBOL_FORWARD = 165,                  /* FORWARD  */
  YYSYMBOL_FREEZE = 166,                   /* FREEZE  */
  YYSYMBOL_FROM = 167,                     /* FROM  */
  YYSYMBOL_FULL = 168,                     /* FULL  */
  YYSYMBOL_FUNCTION = 169,                 /* FUNCTION  */
  YYSYMBOL_FUNCTIONS = 170,                /* FUNCTIONS  */
  YYSYMBOL_GENERATED = 171,                /* GENERATED  */
  YYSYMBOL_GLOB = 172,                     /* GLOB  */
  YYSYMBOL_GLOBAL = 173,                   /* GLOBAL  */
  YYSYMBOL_GRANT = 174,                    /* GRANT  */
  YYSYMBOL_GRANTED = 175,                  /* GRANTED  */
  YYSYMBOL_GROUP_P = 176,                  /* GROUP_P  */
  YYSYMBOL_GROUPING = 177,                 /* GROUPING  */
  YYSYMBOL_GROUPING_ID = 178,              /* GROUPING_ID  */
  YYSYMBOL_GROUPS = 179,                   /* GROUPS  */
  YYSYMBOL_HANDLER = 180,                  /* HANDLER  */
  YYSYMBOL_HAVING = 181,                   /* HAVING  */
  YYSYMBOL_HEADER_P = 182,                 /* HEADER_P  */
  YYSYMBOL_HOLD = 183,                     /* HOLD  */
  YYSYMBOL_HOUR_P = 184,                   /* HOUR_P  */
  YYSYMBOL_HOURS_P = 185,                  /* HOURS_P  */
  YYSYMBOL_IDENTITY_P = 186,               /* IDENTITY_P  */
  YYSYMBOL_IF_P = 187,                     /* IF_P  */
  YYSYMBOL_IGNORE_P = 188,                 /* IGNORE_P  */
  YYSYMBOL_ILIKE = 189,                    /* ILIKE  */
  YYSYMBOL_IMMEDIATE = 190,                /* IMMEDIATE  */
  YYSYMBOL_IMMUTABLE = 191,                /* IMMUTABLE  */
  YYSYMBOL_IMPLICIT_P = 192,               /* IMPLICIT_P  */
  YYSYMBOL_IMPORT_P = 193,                 /* IMPORT_P  */
  YYSYMBOL_IN_P = 194,                     /* IN_P  */
  YYSYMBOL_INCLUDE_P = 195,                /* INCLUDE_P  */
  YYSYMBOL_INCLUDING = 196,                /* INCLUDING  */
  YYSYMBOL_INCREMENT = 197,                /* INCREMENT  */
  YYSYMBOL_INDEX = 198,                    /* INDEX  */
  YYSYMBOL_INDEXES = 199,                  /* INDEXES  */
  YYSYMBOL_INHERIT = 200,                  /* INHERIT  */
  YYSYMBOL_INHERITS = 201,                 /* INHERITS  */
  YYSYMBOL_INITIALLY = 202,                /* INITIALLY  */
  YYSYMBOL_INLINE_P = 203,                 /* INLINE_P  */
  YYSYMBOL_INNER_P = 204,                  /* INNER_P  */
  YYSYMBOL_INOUT = 205,                    /* INOUT  */
  YYSYMBOL_INPUT_P = 206,                  /* INPUT_P  */
  YYSYMBOL_INSENSITIVE = 207,              /* INSENSITIVE  */
  YYSYMBOL_INSERT = 208,                   /* INSERT  */
  YYSYMBOL_INSTALL = 209,                  /* INSTALL  */
  YYSYMBOL_INSTEAD = 210,                  /* INSTEAD  */
  YYSYMBOL_INT_P = 211,                    /* INT_P  */
  YYSYMBOL_INTEGER = 212,                  /* INTEGER  */
  YYSYMBOL_INTERSECT = 213,                /* INTERSECT  */
  YYSYMBOL_INTERVAL = 214,                 /* INTERVAL  */
  YYSYMBOL_INTO = 215,                     /* INTO  */
  YYSYMBOL_INVOKER = 216,                  /* INVOKER  */
  YYSYMBOL_IS = 217,                       /* IS  */
  YYSYMBOL_ISNULL = 218,                   /* ISNULL  */
  YYSYMBOL_ISOLATION = 219,                /* ISOLATION  */
  YYSYMBOL_JOIN = 220,                     /* JOIN  */
  YYSYMBOL_JSON = 221,                     /* JSON  */
  YYSYMBOL_KEY = 222,                      /* KEY  */
  YYSYMBOL_LABEL = 223,                    /* LABEL  */
  YYSYMBOL_LANGUAGE = 224,                 /* LANGUAGE  */
  YYSYMBOL_LARGE_P = 225,                  /* LARGE_P  */
  YYSYMBOL_LAST_P = 226,                   /* LAST_P  */
  YYSYMBOL_LATERAL_P = 227,                /* LATERAL_P  */
  YYSYMBOL_LEADING = 228,                  /* LEADING  */
  YYSYMBOL_LEAKPROOF = 229,                /* LEAKPROOF  */
  YYSYMBOL_LEFT = 230,                     /* LEFT  */
  YYSYMBOL_LEVEL = 231,                    /* LEVEL  */
  YYSYMBOL_LIKE = 232,                     /* LIKE  */
  YYSYMBOL_LIMIT = 233,                    /* LIMIT  */
  YYSYMBOL_LISTEN = 234,                   /* LISTEN  */
  YYSYMBOL_LOAD = 235,                     /* LOAD  */
  YYSYMBOL_LOCAL = 236,                    /* LOCAL  */
  YYSYMBOL_LOCATION = 237,                 /* LOCATION  */
  YYSYMBOL_LOCK_P = 238,                   /* LOCK_P  */
  YYSYMBOL_LOCKED = 239,                   /* LOCKED  */
  YYSYMBOL_LOGGED = 240,                   /* LOGGED  */
  YYSYMBOL_MACRO = 241,                    /* MACRO  */
  YYSYMBOL_MAP = 242,                      /* MAP  */
  YYSYMBOL_MAPPING = 243,                  /* MAPPING  */
  YYSYMBOL_MATCH = 244,                    /* MATCH  */
  YYSYMBOL_MATERIALIZED = 245,             /* MATERIALIZED  */
  YYSYMBOL_MAXVALUE = 246,                 /* MAXVALUE  */
  YYSYMBOL_METHOD = 247,                   /* METHOD  */
  YYSYMBOL_MICROSECOND_P = 248,            /* MICROSECOND_P  */
  YYSYMBOL_MICROSECONDS_P = 249,           /* MICROSECONDS_P  */
  YYSYMBOL_MILLISECOND_P = 250,            /* MILLISECOND_P  */
  YYSYMBOL_MILLISECONDS_P = 251,           /* MILLISECONDS_P  */
  YYSYMBOL_MINUTE_P = 252,                 /* MINUTE_P  */
  YYSYMBOL_MINUTES_P = 253,                /* MINUTES_P  */
  YYSYMBOL_MINVALUE = 254,                 /* MINVALUE  */
  YYSYMBOL_MODE = 255,                     /* MODE  */
  YYSYMBOL_MONTH_P = 256,                  /* MONTH_P  */
  YYSYMBOL_MONTHS_P = 257,                 /* MONTHS_P  */
  YYSYMBOL_MOVE = 258,                     /* MOVE  */
  YYSYMBOL_NAME_P = 259,                   /* NAME_P  */
  YYSYMBOL_NAMES = 260,                    /* NAMES  */
  YYSYMBOL_NATIONAL = 261,                 /* NATIONAL  */
  YYSYMBOL_NATURAL = 262,                  /* NATURAL  */
  YYSYMBOL_NCHAR = 263,                    /* NCHAR  */
  YYSYMBOL_NEW = 264,                      /* NEW  */
  YYSYMBOL_NEXT = 265,                     /* NEXT  */
  YYSYMBOL_NO = 266,                       /* NO  */
  YYSYMBOL_NONE = 267,                     /* NONE  */
  YYSYMBOL_NOT = 268,                      /* NOT  */
  YYSYMBOL_NOTHING = 269,                  /* NOTHING  */
  YYSYMBOL_NOTIFY = 270,                   /* NOTIFY  */
  YYSYMBOL_NOTNULL = 271,                  /* NOTNULL  */
  YYSYMBOL_NOWAIT = 272,                   /* NOWAIT  */
  YYSYMBOL_NULL_P = 273,                   /* NULL_P  */
  YYSYMBOL_NULLIF = 274,                   /* NULLIF  */
  YYSYMBOL_NULLS_P = 275,                  /* NULLS_P  */
  YYSYMBOL_NUMERIC = 276,                  /* NUMERIC  */
  YYSYMBOL_OBJECT_P = 277,                 /* OBJECT_P  */
  YYSYMBOL_OF = 278,                       /* OF  */
  YYSYMBOL_OFF = 279,                      /* OFF  */
  YYSYMBOL_OFFSET = 280,                   /* OFFSET  */
  YYSYMBOL_OIDS = 281,                     /* OIDS  */
  YYSYMBOL_OLD = 282,                      /* OLD  */
  YYSYMBOL_ON = 283,                       /* ON  */
  YYSYMBOL_ONLY = 284,                     /* ONLY  */
  YYSYMBOL_OPERATOR = 285,                 /* OPERATOR  */
  YYSYMBOL_OPTION = 286,                   /* OPTION  */
  YYSYMBOL_OPTIONS = 287,                  /* OPTIONS  */
  YYSYMBOL_OR = 288,                       /* OR  */
  YYSYMBOL_ORDER = 289,                    /* ORDER  */
  YYSYMBOL_ORDINALITY = 290,               /* ORDINALITY  */
  YYSYMBOL_OTHERS = 291,                   /* OTHERS  */
  YYSYMBOL_OUT_P = 292,                    /* OUT_P  */
  YYSYMBOL_OUTER_P = 293,                  /* OUTER_P  */
  YYSYMBOL_OVER = 294,                     /* OVER  */
  YYSYMBOL_OVERLAPS = 295,                 /* OVERLAPS  */
  YYSYMBOL_OVERLAY = 296,                  /* OVERLAY  */
  YYSYMBOL_OVERRIDING = 297,               /* OVERRIDING  */
  YYSYMBOL_OWNED = 298,                    /* OWNED  */
  YYSYMBOL_OWNER = 299,                    /* OWNER  */
  YYSYMBOL_PARALLEL = 300,                 /* PARALLEL  */
  YYSYMBOL_PARSER = 301,                   /* PARSER  */
  YYSYMBOL_PARTIAL = 302,                  /* PARTIAL  */
  YYSYMBOL_PARTITION = 303,                /* PARTITION  */
  YYSYMBOL_PASSING = 304,                  /* PASSING  */
  YYSYMBOL_PASSWORD = 305,                 /* PASSWORD  */
  YYSYMBOL_PERCENT = 306,                  /* PERCENT  */
  YYSYMBOL_PERMANENT = 307,                /* PERMANENT  */
  YYSYMBOL_PIVOT = 308,                    /* PIVOT  */
  YYSYMBOL_PIVOT_LONGER = 309,             /* PIVOT_LONGER  */
  YYSYMBOL_PIVOT_WIDER = 310,              /* PIVOT_WIDER  */
  YYSYMBOL_PLACING = 311,                  /* PLACING  */
  YYSYMBOL_PLANS = 312,                    /* PLANS  */
  YYSYMBOL_POLICY = 313,                   /* POLICY  */
  YYSYMBOL_POSITION = 314,                 /* POSITION  */
  YYSYMBOL_POSITIONAL = 315,               /* POSITIONAL  */
  YYSYMBOL_PRAGMA_P = 316,                 /* PRAGMA_P  */
  YYSYMBOL_PRECEDING = 317,                /* PRECEDING  */
  YYSYMBOL_PRECISION = 318,                /* PRECISION  */
  YYSYMBOL_PREPARE = 319,                  /* PREPARE  */
  YYSYMBOL_PREPARED = 320,                 /* PREPARED  */
  YYSYMBOL_PRESERVE = 321,                 /* PRESERVE  */
  YYSYMBOL_PRIMARY = 322,                  /* PRIMARY  */
  YYSYMBOL_PRIOR = 323,                    /* PRIOR  */
  YYSYMBOL_PRIVILEGES = 324,               /* PRIVILEGES  */
  YYSYMBOL_PROCEDURAL = 325,               /* PROCEDURAL  */
  YYSYMBOL_PROCEDURE = 326,                /* PROCEDURE  */
  YYSYMBOL_PROGRAM = 327,                  /* PROGRAM  */
  YYSYMBOL_PUBLICATION = 328,              /* PUBLICATION  */
  YYSYMBOL_QUALIFY = 329,                  /* QUALIFY  */
  YYSYMBOL_QUOTE = 330,                    /* QUOTE  */
  YYSYMBOL_RANGE = 331,                    /* RANGE  */
  YYSYMBOL_READ_P = 332,                   /* READ_P  */
  YYSYMBOL_REAL = 333,                     /* REAL  */
  YYSYMBOL_REASSIGN = 334,                 /* REASSIGN  */
  YYSYMBOL_RECHECK = 335,                  /* RECHECK  */
  YYSYMBOL_RECURSIVE = 336,                /* RECURSIVE  */
  YYSYMBOL_REF = 337,                      /* REF  */
  YYSYMBOL_REFERENCES = 338,               /* REFERENCES  */
  YYSYMBOL_REFERENCING = 339,              /* REFERENCING  */
  YYSYMBOL_REFRESH = 340,                  /* REFRESH  */
  YYSYMBOL_REINDEX = 341,                  /* REINDEX  */
  YYSYMBOL_RELATIVE_P = 342,               /* RELATIVE_P  */
  YYSYMBOL_RELEASE = 343,                  /* RELEASE  */
  YYSYMBOL_RENAME = 344,                   /* RENAME  */
  YYSYMBOL_REPEATABLE = 345,               /* REPEATABLE  */
  YYSYMBOL_REPLACE = 346,                  /* REPLACE  */
  YYSYMBOL_REPLICA = 347,                  /* REPLICA  */
  YYSYMBOL_RESET = 348,                    /* RESET  */
  YYSYMBOL_RESPECT_P = 349,                /* RESPECT_P  */
  YYSYMBOL_RESTART = 350,                  /* RESTART  */
  YYSYMBOL_RESTRICT = 351,                 /* RESTRICT  */
  YYSYMBOL_RETURNING = 352,                /* RETURNING  */
  YYSYMBOL_RETURNS = 353,                  /* RETURNS  */
  YYSYMBOL_REVOKE = 354,                   /* REVOKE  */
  YYSYMBOL_RIGHT = 355,                    /* RIGHT  */
  YYSYMBOL_ROLE = 356,                     /* ROLE  */
  YYSYMBOL_ROLLBACK = 357,                 /* ROLLBACK  */
  YYSYMBOL_ROLLUP = 358,                   /* ROLLUP  */
  YYSYMBOL_ROW = 359,                      /* ROW  */
  YYSYMBOL_ROWS = 360,                     /* ROWS  */
  YYSYMBOL_RULE = 361,                     /* RULE  */
  YYSYMBOL_SAMPLE = 362,                   /* SAMPLE  */
  YYSYMBOL_SAVEPOINT = 363,                /* SAVEPOINT  */
  YYSYMBOL_SCHEMA = 364,                   /* SCHEMA  */
  YYSYMBOL_SCHEMAS = 365,                  /* SCHEMAS  */
  YYSYMBOL_SCOPE = 366,                    /* SCOPE  */
  YYSYMBOL_SCROLL = 367,                   /* SCROLL  */
  YYSYMBOL_SEARCH = 368,                   /* SEARCH  */
  YYSYMBOL_SECOND_P = 369,                 /* SECOND_P  */
  YYSYMBOL_SECONDS_P = 370,                /* SECONDS_P  */
  YYSYMBOL_SECRET = 371,                   /* SECRET  */
  YYSYMBOL_SECURITY = 372,                 /* SECURITY  */
  YYSYMBOL_SELECT = 373,                   /* SELECT  */
  YYSYMBOL_SEMI = 374,                     /* SEMI  */
  YYSYMBOL_SEQUENCE = 375,                 /* SEQUENCE  */
  YYSYMBOL_SEQUENCES = 376,                /* SEQUENCES  */
  YYSYMBOL_SERIALIZABLE = 377,             /* SERIALIZABLE  */
  YYSYMBOL_SERVER = 378,                   /* SERVER  */
  YYSYMBOL_SESSION = 379,                  /* SESSION  */
  YYSYMBOL_SET = 380,                      /* SET  */
  YYSYMBOL_SETOF = 381,                    /* SETOF  */
  YYSYMBOL_SETS = 382,                     /* SETS  */
  YYSYMBOL_SHARE = 383,                    /* SHARE  */
  YYSYMBOL_SHOW = 384,                     /* SHOW  */
  YYSYMBOL_SIMILAR = 385,                  /* SIMILAR  */
  YYSYMBOL_SIMPLE = 386,                   /* SIMPLE  */
  YYSYMBOL_SKIP = 387,                     /* SKIP  */
  YYSYMBOL_SMALLINT = 388,                 /* SMALLINT  */
  YYSYMBOL_SNAPSHOT = 389,                 /* SNAPSHOT  */
  YYSYMBOL_SOME = 390,                     /* SOME  */
  YYSYMBOL_SQL_P = 391,                    /* SQL_P  */
  YYSYMBOL_STABLE = 392,                   /* STABLE  */
  YYSYMBOL_STANDALONE_P = 393,             /* STANDALONE_P  */
  YYSYMBOL_START = 394,                    /* START  */
  YYSYMBOL_STATEMENT = 395,                /* STATEMENT  */
  YYSYMBOL_STATISTICS = 396,               /* STATISTICS  */
  YYSYMBOL_STDIN = 397,                    /* STDIN  */
  YYSYMBOL_STDOUT = 398,                   /* STDOUT  */
  YYSYMBOL_STORAGE = 399,                  /* STORAGE  */
  YYSYMBOL_STORED = 400,                   /* STORED  */
  YYSYMBOL_STRICT_P = 401,                 /* STRICT_P  */
  YYSYMBOL_STRIP_P = 402,                  /* STRIP_P  */
  YYSYMBOL_STRUCT = 403,                   /* STRUCT  */
  YYSYMBOL_SUBSCRIPTION = 404,             /* SUBSCRIPTION  */
  YYSYMBOL_SUBSTRING = 405,                /* SUBSTRING  */
  YYSYMBOL_SUMMARIZE = 406,                /* SUMMARIZE  */
  YYSYMBOL_SYMMETRIC = 407,                /* SYMMETRIC  */
  YYSYMBOL_SYSID = 408,                    /* SYSID  */
  YYSYMBOL_SYSTEM_P = 409,                 /* SYSTEM_P  */
  YYSYMBOL_TABLE = 410,                    /* TABLE  */
  YYSYMBOL_TABLES = 411,                   /* TABLES  */
  YYSYMBOL_TABLESAMPLE = 412,              /* TABLESAMPLE  */
  YYSYMBOL_TABLESPACE = 413,               /* TABLESPACE  */
  YYSYMBOL_TEMP = 414,                     /* TEMP  */
  YYSYMBOL_TEMPLATE = 415,                 /* TEMPLATE  */
  YYSYMBOL_TEMPORARY = 416,                /* TEMPORARY  */
  YYSYMBOL_TEXT_P = 417,                   /* TEXT_P  */
  YYSYMBOL_THEN = 418,                     /* THEN  */
  YYSYMBOL_TIES = 419,                     /* TIES  */
  YYSYMBOL_TIME = 420,                     /* TIME  */
  YYSYMBOL_TIMESTAMP = 421,                /* TIMESTAMP  */
  YYSYMBOL_TO = 422,                       /* TO  */
  YYSYMBOL_TRAILING = 423,                 /* TRAILING  */
  YYSYMBOL_TRANSACTION = 424,              /* TRANSACTION  */
  YYSYMBOL_TRANSFORM = 425,                /* TRANSFORM  */
  YYSYMBOL_TREAT = 426,                    /* TREAT  */
  YYSYMBOL_TRIGGER = 427,                  /* TRIGGER  */
  YYSYMBOL_TRIM = 428,                     /* TRIM  */
  YYSYMBOL_TRUE_P = 429,                   /* TRUE_P  */
  YYSYMBOL_TRUNCATE = 430,                 /* TRUNCATE  */
  YYSYMBOL_TRUSTED = 431,                  /* TRUSTED  */
  YYSYMBOL_TRY_CAST = 432,                 /* TRY_CAST  */
  YYSYMBOL_TYPE_P = 433,                   /* TYPE_P  */
  YYSYMBOL_TYPES_P = 434,                  /* TYPES_P  */
  YYSYMBOL_UNBOUNDED = 435,                /* UNBOUNDED  */
  YYSYMBOL_UNCOMMITTED = 436,              /* UNCOMMITTED  */
  YYSYMBOL_UNENCRYPTED = 437,              /* UNENCRYPTED  */
  YYSYMBOL_UNION = 438,                    /* UNION  */
  YYSYMBOL_UNIQUE = 439,                   /* UNIQUE  */
  YYSYMBOL_UNKNOWN = 440,                  /* UNKNOWN  */
  YYSYMBOL_UNLISTEN = 441,                 /* UNLISTEN  */
  YYSYMBOL_UNLOGGED = 442,                 /* UNLOGGED  */
  YYSYMBOL_UNPIVOT = 443,                  /* UNPIVOT  */
  YYSYMBOL_UNTIL = 444,                    /* UNTIL  */
  YYSYMBOL_UPDATE = 445,                   /* UPDATE  */
  YYSYMBOL_USE_P = 446,                    /* USE_P  */
  YYSYMBOL_USER = 447,                     /* USER  */
  YYSYMBOL_USING = 448,                    /* USING  */
  YYSYMBOL_VACUUM = 449,                   /* VACUUM  */
  YYSYMBOL_VALID = 450,                    /* VALID  */
  YYSYMBOL_VALIDATE = 451,                 /* VALIDATE  */
  YYSYMBOL_VALIDATOR = 452,                /* VALIDATOR  */
  YYSYMBOL_VALUE_P = 453,                  /* VALUE_P  */
  YYSYMBOL_VALUES = 454,                   /* VALUES  */
  YYSYMBOL_VARCHAR = 455,                  /* VARCHAR  */
  YYSYMBOL_VARIADIC = 456,                 /* VARIADIC  */
  YYSYMBOL_VARYING = 457,                  /* VARYING  */
  YYSYMBOL_VERBOSE = 458,                  /* VERBOSE  */
  YYSYMBOL_VERSION_P = 459,                /* VERSION_P  */
  YYSYMBOL_VIEW = 460,                     /* VIEW  */
  YYSYMBOL_VIEWS = 461,                    /* VIEWS  */
  YYSYMBOL_VIRTUAL = 462,                  /* VIRTUAL  */
  YYSYMBOL_VOLATILE = 463,                 /* VOLATILE  */
  YYSYMBOL_WHEN = 464,                     /* WHEN  */
  YYSYMBOL_WHERE = 465,                    /* WHERE  */
  YYSYMBOL_WHITESPACE_P = 466,             /* WHITESPACE_P  */
  YYSYMBOL_WINDOW = 467,                   /* WINDOW  */
  YYSYMBOL_WITH = 468,                     /* WITH  */
  YYSYMBOL_WITHIN = 469,                   /* WITHIN  */
  YYSYMBOL_WITHOUT = 470,                  /* WITHOUT  */
  YYSYMBOL_WORK = 471,                     /* WORK  */
  YYSYMBOL_WRAPPER = 472,                  /* WRAPPER  */
  YYSYMBOL_WRITE_P = 473,                  /* WRITE_P  */
  YYSYMBOL_XML_P = 474,                    /* XML_P  */
  YYSYMBOL_XMLATTRIBUTES = 475,            /* XMLATTRIBUTES  */
  YYSYMBOL_XMLCONCAT = 476,                /* XMLCONCAT  */
  YYSYMBOL_XMLELEMENT = 477,               /* XMLELEMENT  */
  YYSYMBOL_XMLEXISTS = 478,                /* XMLEXISTS  */
  YYSYMBOL_XMLFOREST = 479,                /* XMLFOREST  */
  YYSYMBOL_XMLNAMESPACES = 480,            /* XMLNAMESPACES  */
  YYSYMBOL_XMLPARSE = 481,                 /* XMLPARSE  */
  YYSYMBOL_XMLPI = 482,                    /* XMLPI  */
  YYSYMBOL_XMLROOT = 483,                  /* XMLROOT  */
  YYSYMBOL_XMLSERIALIZE = 484,             /* XMLSERIALIZE  */
  YYSYMBOL_XMLTABLE = 485,                 /* XMLTABLE  */
  YYSYMBOL_YEAR_P = 486,                   /* YEAR_P  */
  YYSYMBOL_YEARS_P = 487,                  /* YEARS_P  */
  YYSYMBOL_YES_P = 488,                    /* YES_P  */
  YYSYMBOL_ZONE = 489,                     /* ZONE  */
  YYSYMBOL_NOT_LA = 490,                   /* NOT_LA  */
  YYSYMBOL_NULLS_LA = 491,                 /* NULLS_LA  */
  YYSYMBOL_WITH_LA = 492,                  /* WITH_LA  */
  YYSYMBOL_493_ = 493,                     /* '<'  */
  YYSYMBOL_494_ = 494,                     /* '>'  */
  YYSYMBOL_495_ = 495,                     /* '='  */
  YYSYMBOL_POSTFIXOP = 496,                /* POSTFIXOP  */
  YYSYMBOL_497_ = 497,                     /* '+'  */
  YYSYMBOL_498_ = 498,                     /* '-'  */
  YYSYMBOL_499_ = 499,                     /* '*'  */
  YYSYMBOL_500_ = 500,                     /* '/'  */
  YYSYMBOL_501_ = 501,                     /* '%'  */
  YYSYMBOL_502_ = 502,                     /* '^'  */
  YYSYMBOL_UMINUS = 503,                   /* UMINUS  */
  YYSYMBOL_504_ = 504,                     /* '['  */
  YYSYMBOL_505_ = 505,                     /* ']'  */
  YYSYMBOL_506_ = 506,                     /* '('  */
  YYSYMBOL_507_ = 507,                     /* ')'  */
  YYSYMBOL_508_ = 508,                     /* '.'  */
  YYSYMBOL_509_ = 509,                     /* ';'  */
  YYSYMBOL_510_ = 510,                     /* ','  */
  YYSYMBOL_511_ = 511,                     /* '#'  */
  YYSYMBOL_512_ = 512,                     /* '$'  */
  YYSYMBOL_513_ = 513,                     /* '?'  */
  YYSYMBOL_514_ = 514,                     /* '{'  */
  YYSYMBOL_515_ = 515,                     /* '}'  */
  YYSYMBOL_516_ = 516,                     /* ':'  */
  YYSYMBOL_YYACCEPT = 517,                 /* $accept  */
  YYSYMBOL_stmtblock = 518,                /* stmtblock  */
  YYSYMBOL_stmtmulti = 519,                /* stmtmulti  */
  YYSYMBOL_stmt = 520,                     /* stmt  */
  YYSYMBOL_AlterObjectSchemaStmt = 521,    /* AlterObjectSchemaStmt  */
  YYSYMBOL_AlterSeqStmt = 522,             /* AlterSeqStmt  */
  YYSYMBOL_SeqOptList = 523,               /* SeqOptList  */
  YYSYMBOL_opt_with = 524,                 /* opt_with  */
  YYSYMBOL_NumericOnly = 525,              /* NumericOnly  */
  YYSYMBOL_SeqOptElem = 526,               /* SeqOptElem  */
  YYSYMBOL_opt_by = 527,                   /* opt_by  */
  YYSYMBOL_SignedIconst = 528,             /* SignedIconst  */
  YYSYMBOL_AlterTableStmt = 529,           /* AlterTableStmt  */
  YYSYMBOL_alter_identity_column_option_list = 530, /* alter_identity_column_option_list  */
  YYSYMBOL_alter_column_default = 531,     /* alter_column_default  */
  YYSYMBOL_alter_identity_column_option = 532, /* alter_identity_column_option  */
  YYSYMBOL_alter_generic_option_list = 533, /* alter_generic_option_list  */
  YYSYMBOL_alter_table_cmd = 534,          /* alter_table_cmd  */
  YYSYMBOL_alter_using = 535,              /* alter_using  */
  YYSYMBOL_alter_generic_option_elem = 536, /* alter_generic_option_elem  */
  YYSYMBOL_alter_table_cmds = 537,         /* alter_table_cmds  */
  YYSYMBOL_alter_generic_options = 538,    /* alter_generic_options  */
  YYSYMBOL_opt_set_data = 539,             /* opt_set_data  */
  YYSYMBOL_AnalyzeStmt = 540,              /* AnalyzeStmt  */
  YYSYMBOL_AttachStmt = 541,               /* AttachStmt  */
  YYSYMBOL_DetachStmt = 542,               /* DetachStmt  */
  YYSYMBOL_opt_database = 543,             /* opt_database  */
  YYSYMBOL_opt_database_alias = 544,       /* opt_database_alias  */
  YYSYMBOL_CallStmt = 545,                 /* CallStmt  */
  YYSYMBOL_CheckPointStmt = 546,           /* CheckPointStmt  */
  YYSYMBOL_opt_col_id = 547,               /* opt_col_id  */
  YYSYMBOL_qualified_name = 548,           /* qualified_name  */
  YYSYMBOL_ColId = 549,                    /* ColId  */
  YYSYMBOL_ColIdOrString = 550,            /* ColIdOrString  */
  YYSYMBOL_Sconst = 551,                   /* Sconst  */
  YYSYMBOL_indirection = 552,              /* indirection  */
  YYSYMBOL_indirection_el = 553,           /* indirection_el  */
  YYSYMBOL_attr_name = 554,                /* attr_name  */
  YYSYMBOL_ColLabel = 555,                 /* ColLabel  */
  YYSYMBOL_CopyStmt = 556,                 /* CopyStmt  */
  YYSYMBOL_copy_database_flag = 557,       /* copy_database_flag  */
  YYSYMBOL_copy_from = 558,                /* copy_from  */
  YYSYMBOL_copy_delimiter = 559,           /* copy_delimiter  */
  YYSYMBOL_copy_generic_opt_arg_list = 560, /* copy_generic_opt_arg_list  */
  YYSYMBOL_opt_using = 561,                /* opt_using  */
  YYSYMBOL_opt_as = 562,                   /* opt_as  */
  YYSYMBOL_opt_program = 563,              /* opt_program  */
  YYSYMBOL_copy_options = 564,             /* copy_options  */
  YYSYMBOL_copy_generic_opt_arg = 565,     /* copy_generic_opt_arg  */
  YYSYMBOL_copy_generic_opt_elem = 566,    /* copy_generic_opt_elem  */
  YYSYMBOL_opt_oids = 567,                 /* opt_oids  */
  YYSYMBOL_copy_opt_list = 568,            /* copy_opt_list  */
  YYSYMBOL_opt_binary = 569,               /* opt_binary  */
  YYSYMBOL_copy_opt_item = 570,            /* copy_opt_item  */
  YYSYMBOL_copy_generic_opt_arg_list_item = 571, /* copy_generic_opt_arg_list_item  */
  YYSYMBOL_copy_file_name = 572,           /* copy_file_name  */
  YYSYMBOL_copy_generic_opt_list = 573,    /* copy_generic_opt_list  */
  YYSYMBOL_CreateStmt = 574,               /* CreateStmt  */
  YYSYMBOL_ConstraintAttributeSpec = 575,  /* ConstraintAttributeSpec  */
  YYSYMBOL_def_arg = 576,                  /* def_arg  */
  YYSYMBOL_OptParenthesizedSeqOptList = 577, /* OptParenthesizedSeqOptList  */
  YYSYMBOL_generic_option_arg = 578,       /* generic_option_arg  */
  YYSYMBOL_key_action = 579,               /* key_action  */
  YYSYMBOL_ColConstraint = 580,            /* ColConstraint  */
  YYSYMBOL_ColConstraintElem = 581,        /* ColConstraintElem  */
  YYSYMBOL_GeneratedColumnType = 582,      /* GeneratedColumnType  */
  YYSYMBOL_opt_GeneratedColumnType = 583,  /* opt_GeneratedColumnType  */
  YYSYMBOL_GeneratedConstraintElem = 584,  /* GeneratedConstraintElem  */
  YYSYMBOL_generic_option_elem = 585,      /* generic_option_elem  */
  YYSYMBOL_key_update = 586,               /* key_update  */
  YYSYMBOL_key_actions = 587,              /* key_actions  */
  YYSYMBOL_OnCommitOption = 588,           /* OnCommitOption  */
  YYSYMBOL_reloptions = 589,               /* reloptions  */
  YYSYMBOL_opt_no_inherit = 590,           /* opt_no_inherit  */
  YYSYMBOL_TableConstraint = 591,          /* TableConstraint  */
  YYSYMBOL_TableLikeOption = 592,          /* TableLikeOption  */
  YYSYMBOL_reloption_list = 593,           /* reloption_list  */
  YYSYMBOL_ExistingIndex = 594,            /* ExistingIndex  */
  YYSYMBOL_ConstraintAttr = 595,           /* ConstraintAttr  */
  YYSYMBOL_OptWith = 596,                  /* OptWith  */
  YYSYMBOL_definition = 597,               /* definition  */
  YYSYMBOL_TableLikeOptionList = 598,      /* TableLikeOptionList  */
  YYSYMBOL_generic_option_name = 599,      /* generic_option_name  */
  YYSYMBOL_ConstraintAttributeElem = 600,  /* ConstraintAttributeElem  */
  YYSYMBOL_columnDef = 601,                /* columnDef  */
  YYSYMBOL_def_list = 602,                 /* def_list  */
  YYSYMBOL_index_name = 603,               /* index_name  */
  YYSYMBOL_TableElement = 604,             /* TableElement  */
  YYSYMBOL_def_elem = 605,                 /* def_elem  */
  YYSYMBOL_opt_definition = 606,           /* opt_definition  */
  YYSYMBOL_OptTableElementList = 607,      /* OptTableElementList  */
  YYSYMBOL_columnElem = 608,               /* columnElem  */
  YYSYMBOL_opt_column_list = 609,          /* opt_column_list  */
  YYSYMBOL_ColQualList = 610,              /* ColQualList  */
  YYSYMBOL_key_delete = 611,               /* key_delete  */
  YYSYMBOL_reloption_elem = 612,           /* reloption_elem  */
  YYSYMBOL_columnList = 613,               /* columnList  */
  YYSYMBOL_columnList_opt_comma = 614,     /* columnList_opt_comma  */
  YYSYMBOL_func_type = 615,                /* func_type  */
  YYSYMBOL_ConstraintElem = 616,           /* ConstraintElem  */
  YYSYMBOL_TableElementList = 617,         /* TableElementList  */
  YYSYMBOL_key_match = 618,                /* key_match  */
  YYSYMBOL_TableLikeClause = 619,          /* TableLikeClause  */
  YYSYMBOL_OptTemp = 620,                  /* OptTemp  */
  YYSYMBOL_generated_when = 621,           /* generated_when  */
  YYSYMBOL_CreateAsStmt = 622,             /* CreateAsStmt  */
  YYSYMBOL_opt_with_data = 623,            /* opt_with_data  */
  YYSYMBOL_create_as_target = 624,         /* create_as_target  */
  YYSYMBOL_unreserved_keyword = 625,       /* unreserved_keyword  */
  YYSYMBOL_col_name_keyword = 626,         /* col_name_keyword  */
  YYSYMBOL_func_name_keyword = 627,        /* func_name_keyword  */
  YYSYMBOL_type_name_keyword = 628,        /* type_name_keyword  */
  YYSYMBOL_other_keyword = 629,            /* other_keyword  */
  YYSYMBOL_type_func_name_keyword = 630,   /* type_func_name_keyword  */
  YYSYMBOL_reserved_keyword = 631,         /* reserved_keyword  */
  YYSYMBOL_CreateFunctionStmt = 632,       /* CreateFunctionStmt  */
  YYSYMBOL_macro_alias = 633,              /* macro_alias  */
  YYSYMBOL_param_list = 634,               /* param_list  */
  YYSYMBOL_CreateSchemaStmt = 635,         /* CreateSchemaStmt  */
  YYSYMBOL_OptSchemaEltList = 636,         /* OptSchemaEltList  */
  YYSYMBOL_schema_stmt = 637,              /* schema_stmt  */
  YYSYMBOL_CreateSecretStmt = 638,         /* CreateSecretStmt  */
  YYSYMBOL_opt_secret_name = 639,          /* opt_secret_name  */
  YYSYMBOL_secret_key = 640,               /* secret_key  */
  YYSYMBOL_secret_key_val = 641,           /* secret_key_val  */
  YYSYMBOL_scope_list_val_item = 642,      /* scope_list_val_item  */
  YYSYMBOL_scope_list_val = 643,           /* scope_list_val  */
  YYSYMBOL_opt_persist = 644,              /* opt_persist  */
  YYSYMBOL_CreateSeqStmt = 645,            /* CreateSeqStmt  */
  YYSYMBOL_OptSeqOptList = 646,            /* OptSeqOptList  */
  YYSYMBOL_CreateTypeStmt = 647,           /* CreateTypeStmt  */
  YYSYMBOL_opt_enum_val_list = 648,        /* opt_enum_val_list  */
  YYSYMBOL_enum_val_list = 649,            /* enum_val_list  */
  YYSYMBOL_DeallocateStmt = 650,           /* DeallocateStmt  */
  YYSYMBOL_DeleteStmt = 651,               /* DeleteStmt  */
  YYSYMBOL_relation_expr_opt_alias = 652,  /* relation_expr_opt_alias  */
  YYSYMBOL_where_or_current_clause = 653,  /* where_or_current_clause  */
  YYSYMBOL_using_clause = 654,             /* using_clause  */
  YYSYMBOL_DropStmt = 655,                 /* DropStmt  */
  YYSYMBOL_drop_type_any_name = 656,       /* drop_type_any_name  */
  YYSYMBOL_drop_type_name = 657,           /* drop_type_name  */
  YYSYMBOL_any_name_list = 658,            /* any_name_list  */
  YYSYMBOL_opt_drop_behavior = 659,        /* opt_drop_behavior  */
  YYSYMBOL_drop_type_name_on_any_name = 660, /* drop_type_name_on_any_name  */
  YYSYMBOL_DropSecretStmt = 661,           /* DropSecretStmt  */
  YYSYMBOL_ExecuteStmt = 662,              /* ExecuteStmt  */
  YYSYMBOL_execute_param_expr = 663,       /* execute_param_expr  */
  YYSYMBOL_execute_param_list = 664,       /* execute_param_list  */
  YYSYMBOL_execute_param_clause = 665,     /* execute_param_clause  */
  YYSYMBOL_ExplainStmt = 666,              /* ExplainStmt  */
  YYSYMBOL_opt_verbose = 667,              /* opt_verbose  */
  YYSYMBOL_explain_option_arg = 668,       /* explain_option_arg  */
  YYSYMBOL_ExplainableStmt = 669,          /* ExplainableStmt  */
  YYSYMBOL_NonReservedWord = 670,          /* NonReservedWord  */
  YYSYMBOL_NonReservedWord_or_Sconst = 671, /* NonReservedWord_or_Sconst  */
  YYSYMBOL_explain_option_list = 672,      /* explain_option_list  */
  YYSYMBOL_analyze_keyword = 673,          /* analyze_keyword  */
  YYSYMBOL_opt_boolean_or_string = 674,    /* opt_boolean_or_string  */
  YYSYMBOL_explain_option_elem = 675,      /* explain_option_elem  */
  YYSYMBOL_explain_option_name = 676,      /* explain_option_name  */
  YYSYMBOL_ExportStmt = 677,               /* ExportStmt  */
  YYSYMBOL_ImportStmt = 678,               /* ImportStmt  */
  YYSYMBOL_IndexStmt = 679,                /* IndexStmt  */
  YYSYMBOL_access_method = 680,            /* access_method  */
  YYSYMBOL_access_method_clause = 681,     /* access_method_clause  */
  YYSYMBOL_opt_concurrently = 682,         /* opt_concurrently  */
  YYSYMBOL_opt_index_name = 683,           /* opt_index_name  */
  YYSYMBOL_opt_reloptions = 684,           /* opt_reloptions  */
  YYSYMBOL_opt_unique = 685,               /* opt_unique  */
  YYSYMBOL_InsertStmt = 686,               /* InsertStmt  */
  YYSYMBOL_insert_rest = 687,              /* insert_rest  */
  YYSYMBOL_insert_target = 688,            /* insert_target  */
  YYSYMBOL_opt_by_name_or_position = 689,  /* opt_by_name_or_position  */
  YYSYMBOL_opt_conf_expr = 690,            /* opt_conf_expr  */
  YYSYMBOL_opt_with_clause = 691,          /* opt_with_clause  */
  YYSYMBOL_insert_column_item = 692,       /* insert_column_item  */
  YYSYMBOL_set_clause = 693,               /* set_clause  */
  YYSYMBOL_opt_or_action = 694,            /* opt_or_action  */
  YYSYMBOL_opt_on_conflict = 695,          /* opt_on_conflict  */
  YYSYMBOL_index_elem = 696,               /* index_elem  */
  YYSYMBOL_returning_clause = 697,         /* returning_clause  */
  YYSYMBOL_override_kind = 698,            /* override_kind  */
  YYSYMBOL_set_target_list = 699,          /* set_target_list  */
  YYSYMBOL_opt_collate = 700,              /* opt_collate  */
  YYSYMBOL_opt_class = 701,                /* opt_class  */
  YYSYMBOL_insert_column_list = 702,       /* insert_column_list  */
  YYSYMBOL_set_clause_list = 703,          /* set_clause_list  */
  YYSYMBOL_set_clause_list_opt_comma = 704, /* set_clause_list_opt_comma  */
  YYSYMBOL_index_params = 705,             /* index_params  */
  YYSYMBOL_set_target = 706,               /* set_target  */
  YYSYMBOL_LoadStmt = 707,                 /* LoadStmt  */
  YYSYMBOL_file_name = 708,                /* file_name  */
  YYSYMBOL_repo_path = 709,                /* repo_path  */
  YYSYMBOL_PragmaStmt = 710,               /* PragmaStmt  */
  YYSYMBOL_PrepareStmt = 711,              /* PrepareStmt  */
  YYSYMBOL_prep_type_clause = 712,         /* prep_type_clause  */
  YYSYMBOL_PreparableStmt = 713,           /* PreparableStmt  */
  YYSYMBOL_RenameStmt = 714,               /* RenameStmt  */
  YYSYMBOL_opt_column = 715,               /* opt_column  */
  YYSYMBOL_SelectStmt = 716,               /* SelectStmt  */
  YYSYMBOL_select_with_parens = 717,       /* select_with_parens  */
  YYSYMBOL_select_no_parens = 718,         /* select_no_parens  */
  YYSYMBOL_select_clause = 719,            /* select_clause  */
  YYSYMBOL_opt_select = 720,               /* opt_select  */
  YYSYMBOL_simple_select = 721,            /* simple_select  */
  YYSYMBOL_value_or_values = 722,          /* value_or_values  */
  YYSYMBOL_pivot_keyword = 723,            /* pivot_keyword  */
  YYSYMBOL_unpivot_keyword = 724,          /* unpivot_keyword  */
  YYSYMBOL_pivot_column_entry = 725,       /* pivot_column_entry  */
  YYSYMBOL_pivot_column_list_internal = 726, /* pivot_column_list_internal  */
  YYSYMBOL_pivot_column_list = 727,        /* pivot_column_list  */
  YYSYMBOL_with_clause = 728,              /* with_clause  */
  YYSYMBOL_cte_list = 729,                 /* cte_list  */
  YYSYMBOL_common_table_expr = 730,        /* common_table_expr  */
  YYSYMBOL_opt_materialized = 731,         /* opt_materialized  */
  YYSYMBOL_into_clause = 732,              /* into_clause  */
  YYSYMBOL_OptTempTableName = 733,         /* OptTempTableName  */
  YYSYMBOL_opt_table = 734,                /* opt_table  */
  YYSYMBOL_all_or_distinct = 735,          /* all_or_distinct  */
  YYSYMBOL_by_name = 736,                  /* by_name  */
  YYSYMBOL_distinct_clause = 737,          /* distinct_clause  */
  YYSYMBOL_opt_all_clause = 738,           /* opt_all_clause  */
  YYSYMBOL_opt_ignore_nulls = 739,         /* opt_ignore_nulls  */
  YYSYMBOL_opt_sort_clause = 740,          /* opt_sort_clause  */
  YYSYMBOL_sort_clause = 741,              /* sort_clause  */
  YYSYMBOL_sortby_list = 742,              /* sortby_list  */
  YYSYMBOL_sortby = 743,                   /* sortby  */
  YYSYMBOL_opt_asc_desc = 744,             /* opt_asc_desc  */
  YYSYMBOL_opt_nulls_order = 745,          /* opt_nulls_order  */
  YYSYMBOL_select_limit = 746,             /* select_limit  */
  YYSYMBOL_opt_select_limit = 747,         /* opt_select_limit  */
  YYSYMBOL_limit_clause = 748,             /* limit_clause  */
  YYSYMBOL_offset_clause = 749,            /* offset_clause  */
  YYSYMBOL_sample_count = 750,             /* sample_count  */
  YYSYMBOL_sample_clause = 751,            /* sample_clause  */
  YYSYMBOL_opt_sample_func = 752,          /* opt_sample_func  */
  YYSYMBOL_tablesample_entry = 753,        /* tablesample_entry  */
  YYSYMBOL_tablesample_clause = 754,       /* tablesample_clause  */
  YYSYMBOL_opt_tablesample_clause = 755,   /* opt_tablesample_clause  */
  YYSYMBOL_opt_repeatable_clause = 756,    /* opt_repeatable_clause  */
  YYSYMBOL_select_limit_value = 757,       /* select_limit_value  */
  YYSYMBOL_select_offset_value = 758,      /* select_offset_value  */
  YYSYMBOL_select_fetch_first_value = 759, /* select_fetch_first_value  */
  YYSYMBOL_I_or_F_const = 760,             /* I_or_F_const  */
  YYSYMBOL_row_or_rows = 761,              /* row_or_rows  */
  YYSYMBOL_first_or_next = 762,            /* first_or_next  */
  YYSYMBOL_group_clause = 763,             /* group_clause  */
  YYSYMBOL_group_by_list = 764,            /* group_by_list  */
  YYSYMBOL_group_by_list_opt_comma = 765,  /* group_by_list_opt_comma  */
  YYSYMBOL_group_by_item = 766,            /* group_by_item  */
  YYSYMBOL_empty_grouping_set = 767,       /* empty_grouping_set  */
  YYSYMBOL_rollup_clause = 768,            /* rollup_clause  */
  YYSYMBOL_cube_clause = 769,              /* cube_clause  */
  YYSYMBOL_grouping_sets_clause = 770,     /* grouping_sets_clause  */
  YYSYMBOL_grouping_or_grouping_id = 771,  /* grouping_or_grouping_id  */
  YYSYMBOL_having_clause = 772,            /* having_clause  */
  YYSYMBOL_qualify_clause = 773,           /* qualify_clause  */
  YYSYMBOL_for_locking_clause = 774,       /* for_locking_clause  */
  YYSYMBOL_opt_for_locking_clause = 775,   /* opt_for_locking_clause  */
  YYSYMBOL_for_locking_items = 776,        /* for_locking_items  */
  YYSYMBOL_for_locking_item = 777,         /* for_locking_item  */
  YYSYMBOL_for_locking_strength = 778,     /* for_locking_strength  */
  YYSYMBOL_locked_rels_list = 779,         /* locked_rels_list  */
  YYSYMBOL_opt_nowait_or_skip = 780,       /* opt_nowait_or_skip  */
  YYSYMBOL_values_clause = 781,            /* values_clause  */
  YYSYMBOL_values_clause_opt_comma = 782,  /* values_clause_opt_comma  */
  YYSYMBOL_from_clause = 783,              /* from_clause  */
  YYSYMBOL_from_list = 784,                /* from_list  */
  YYSYMBOL_from_list_opt_comma = 785,      /* from_list_opt_comma  */
  YYSYMBOL_table_ref = 786,                /* table_ref  */
  YYSYMBOL_opt_pivot_group_by = 787,       /* opt_pivot_group_by  */
  YYSYMBOL_opt_include_nulls = 788,        /* opt_include_nulls  */
  YYSYMBOL_single_pivot_value = 789,       /* single_pivot_value  */
  YYSYMBOL_pivot_header = 790,             /* pivot_header  */
  YYSYMBOL_pivot_value = 791,              /* pivot_value  */
  YYSYMBOL_pivot_value_list = 792,         /* pivot_value_list  */
  YYSYMBOL_unpivot_header = 793,           /* unpivot_header  */
  YYSYMBOL_unpivot_value = 794,            /* unpivot_value  */
  YYSYMBOL_unpivot_value_list = 795,       /* unpivot_value_list  */
  YYSYMBOL_joined_table = 796,             /* joined_table  */
  YYSYMBOL_alias_clause = 797,             /* alias_clause  */
  YYSYMBOL_opt_alias_clause = 798,         /* opt_alias_clause  */
  YYSYMBOL_func_alias_clause = 799,        /* func_alias_clause  */
  YYSYMBOL_join_type = 800,                /* join_type  */
  YYSYMBOL_join_outer = 801,               /* join_outer  */
  YYSYMBOL_join_qual = 802,                /* join_qual  */
  YYSYMBOL_relation_expr = 803,            /* relation_expr  */
  YYSYMBOL_func_table = 804,               /* func_table  */
  YYSYMBOL_rowsfrom_item = 805,            /* rowsfrom_item  */
  YYSYMBOL_rowsfrom_list = 806,            /* rowsfrom_list  */
  YYSYMBOL_opt_col_def_list = 807,         /* opt_col_def_list  */
  YYSYMBOL_opt_ordinality = 808,           /* opt_ordinality  */
  YYSYMBOL_where_clause = 809,             /* where_clause  */
  YYSYMBOL_TableFuncElementList = 810,     /* TableFuncElementList  */
  YYSYMBOL_TableFuncElement = 811,         /* TableFuncElement  */
  YYSYMBOL_opt_collate_clause = 812,       /* opt_collate_clause  */
  YYSYMBOL_colid_type_list = 813,          /* colid_type_list  */
  YYSYMBOL_RowOrStruct = 814,              /* RowOrStruct  */
  YYSYMBOL_opt_Typename = 815,             /* opt_Typename  */
  YYSYMBOL_Typename = 816,                 /* Typename  */
  YYSYMBOL_qualified_typename = 817,       /* qualified_typename  */
  YYSYMBOL_opt_array_bounds = 818,         /* opt_array_bounds  */
  YYSYMBOL_SimpleTypename = 819,           /* SimpleTypename  */
  YYSYMBOL_ConstTypename = 820,            /* ConstTypename  */
  YYSYMBOL_GenericType = 821,              /* GenericType  */
  YYSYMBOL_opt_type_modifiers = 822,       /* opt_type_modifiers  */
  YYSYMBOL_Numeric = 823,                  /* Numeric  */
  YYSYMBOL_opt_float = 824,                /* opt_float  */
  YYSYMBOL_Bit = 825,                      /* Bit  */
  YYSYMBOL_ConstBit = 826,                 /* ConstBit  */
  YYSYMBOL_BitWithLength = 827,            /* BitWithLength  */
  YYSYMBOL_BitWithoutLength = 828,         /* BitWithoutLength  */
  YYSYMBOL_Character = 829,                /* Character  */
  YYSYMBOL_ConstCharacter = 830,           /* ConstCharacter  */
  YYSYMBOL_CharacterWithLength = 831,      /* CharacterWithLength  */
  YYSYMBOL_CharacterWithoutLength = 832,   /* CharacterWithoutLength  */
  YYSYMBOL_character = 833,                /* character  */
  YYSYMBOL_opt_varying = 834,              /* opt_varying  */
  YYSYMBOL_ConstDatetime = 835,            /* ConstDatetime  */
  YYSYMBOL_ConstInterval = 836,            /* ConstInterval  */
  YYSYMBOL_opt_timezone = 837,             /* opt_timezone  */
  YYSYMBOL_year_keyword = 838,             /* year_keyword  */
  YYSYMBOL_month_keyword = 839,            /* month_keyword  */
  YYSYMBOL_day_keyword = 840,              /* day_keyword  */
  YYSYMBOL_hour_keyword = 841,             /* hour_keyword  */
  YYSYMBOL_minute_keyword = 842,           /* minute_keyword  */
  YYSYMBOL_second_keyword = 843,           /* second_keyword  */
  YYSYMBOL_millisecond_keyword = 844,      /* millisecond_keyword  */
  YYSYMBOL_microsecond_keyword = 845,      /* microsecond_keyword  */
  YYSYMBOL_opt_interval = 846,             /* opt_interval  */
  YYSYMBOL_a_expr = 847,                   /* a_expr  */
  YYSYMBOL_b_expr = 848,                   /* b_expr  */
  YYSYMBOL_c_expr = 849,                   /* c_expr  */
  YYSYMBOL_d_expr = 850,                   /* d_expr  */
  YYSYMBOL_indirection_expr = 851,         /* indirection_expr  */
  YYSYMBOL_struct_expr = 852,              /* struct_expr  */
  YYSYMBOL_func_application = 853,         /* func_application  */
  YYSYMBOL_func_expr = 854,                /* func_expr  */
  YYSYMBOL_func_expr_windowless = 855,     /* func_expr_windowless  */
  YYSYMBOL_func_expr_common_subexpr = 856, /* func_expr_common_subexpr  */
  YYSYMBOL_list_comprehension = 857,       /* list_comprehension  */
  YYSYMBOL_within_group_clause = 858,      /* within_group_clause  */
  YYSYMBOL_filter_clause = 859,            /* filter_clause  */
  YYSYMBOL_export_clause = 860,            /* export_clause  */
  YYSYMBOL_window_clause = 861,            /* window_clause  */
  YYSYMBOL_window_definition_list = 862,   /* window_definition_list  */
  YYSYMBOL_window_definition = 863,        /* window_definition  */
  YYSYMBOL_over_clause = 864,              /* over_clause  */
  YYSYMBOL_window_specification = 865,     /* window_specification  */
  YYSYMBOL_opt_existing_window_name = 866, /* opt_existing_window_name  */
  YYSYMBOL_opt_partition_clause = 867,     /* opt_partition_clause  */
  YYSYMBOL_opt_frame_clause = 868,         /* opt_frame_clause  */
  YYSYMBOL_frame_extent = 869,             /* frame_extent  */
  YYSYMBOL_frame_bound = 870,              /* frame_bound  */
  YYSYMBOL_opt_window_exclusion_clause = 871, /* opt_window_exclusion_clause  */
  YYSYMBOL_qualified_row = 872,            /* qualified_row  */
  YYSYMBOL_row = 873,                      /* row  */
  YYSYMBOL_dict_arg = 874,                 /* dict_arg  */
  YYSYMBOL_dict_arguments = 875,           /* dict_arguments  */
  YYSYMBOL_dict_arguments_opt_comma = 876, /* dict_arguments_opt_comma  */
  YYSYMBOL_map_arg = 877,                  /* map_arg  */
  YYSYMBOL_map_arguments = 878,            /* map_arguments  */
  YYSYMBOL_map_arguments_opt_comma = 879,  /* map_arguments_opt_comma  */
  YYSYMBOL_opt_map_arguments_opt_comma = 880, /* opt_map_arguments_opt_comma  */
  YYSYMBOL_sub_type = 881,                 /* sub_type  */
  YYSYMBOL_all_Op = 882,                   /* all_Op  */
  YYSYMBOL_MathOp = 883,                   /* MathOp  */
  YYSYMBOL_qual_Op = 884,                  /* qual_Op  */
  YYSYMBOL_qual_all_Op = 885,              /* qual_all_Op  */
  YYSYMBOL_subquery_Op = 886,              /* subquery_Op  */
  YYSYMBOL_any_operator = 887,             /* any_operator  */
  YYSYMBOL_c_expr_list = 888,              /* c_expr_list  */
  YYSYMBOL_c_expr_list_opt_comma = 889,    /* c_expr_list_opt_comma  */
  YYSYMBOL_expr_list = 890,                /* expr_list  */
  YYSYMBOL_expr_list_opt_comma = 891,      /* expr_list_opt_comma  */
  YYSYMBOL_opt_expr_list_opt_comma = 892,  /* opt_expr_list_opt_comma  */
  YYSYMBOL_func_arg_list = 893,            /* func_arg_list  */
  YYSYMBOL_func_arg_expr = 894,            /* func_arg_expr  */
  YYSYMBOL_type_list = 895,                /* type_list  */
  YYSYMBOL_extract_list = 896,             /* extract_list  */
  YYSYMBOL_extract_arg = 897,              /* extract_arg  */
  YYSYMBOL_overlay_list = 898,             /* overlay_list  */
  YYSYMBOL_overlay_placing = 899,          /* overlay_placing  */
  YYSYMBOL_position_list = 900,            /* position_list  */
  YYSYMBOL_substr_list = 901,              /* substr_list  */
  YYSYMBOL_substr_from = 902,              /* substr_from  */
  YYSYMBOL_substr_for = 903,               /* substr_for  */
  YYSYMBOL_trim_list = 904,                /* trim_list  */
  YYSYMBOL_in_expr = 905,                  /* in_expr  */
  YYSYMBOL_case_expr = 906,                /* case_expr  */
  YYSYMBOL_when_clause_list = 907,         /* when_clause_list  */
  YYSYMBOL_when_clause = 908,              /* when_clause  */
  YYSYMBOL_case_default = 909,             /* case_default  */
  YYSYMBOL_case_arg = 910,                 /* case_arg  */
  YYSYMBOL_columnref = 911,                /* columnref  */
  YYSYMBOL_opt_slice_bound = 912,          /* opt_slice_bound  */
  YYSYMBOL_opt_indirection = 913,          /* opt_indirection  */
  YYSYMBOL_opt_func_arguments = 914,       /* opt_func_arguments  */
  YYSYMBOL_extended_indirection_el = 915,  /* extended_indirection_el  */
  YYSYMBOL_opt_extended_indirection = 916, /* opt_extended_indirection  */
  YYSYMBOL_opt_asymmetric = 917,           /* opt_asymmetric  */
  YYSYMBOL_opt_target_list_opt_comma = 918, /* opt_target_list_opt_comma  */
  YYSYMBOL_target_list = 919,              /* target_list  */
  YYSYMBOL_target_list_opt_comma = 920,    /* target_list_opt_comma  */
  YYSYMBOL_target_el = 921,                /* target_el  */
  YYSYMBOL_except_list = 922,              /* except_list  */
  YYSYMBOL_opt_except_list = 923,          /* opt_except_list  */
  YYSYMBOL_replace_list_el = 924,          /* replace_list_el  */
  YYSYMBOL_replace_list = 925,             /* replace_list  */
  YYSYMBOL_replace_list_opt_comma = 926,   /* replace_list_opt_comma  */
  YYSYMBOL_opt_replace_list = 927,         /* opt_replace_list  */
  YYSYMBOL_qualified_name_list = 928,      /* qualified_name_list  */
  YYSYMBOL_name_list = 929,                /* name_list  */
  YYSYMBOL_name_list_opt_comma = 930,      /* name_list_opt_comma  */
  YYSYMBOL_name_list_opt_comma_opt_bracket = 931, /* name_list_opt_comma_opt_bracket  */
  YYSYMBOL_name = 932,                     /* name  */
  YYSYMBOL_func_name = 933,                /* func_name  */
  YYSYMBOL_AexprConst = 934,               /* AexprConst  */
  YYSYMBOL_Iconst = 935,                   /* Iconst  */
  YYSYMBOL_type_function_name = 936,       /* type_function_name  */
  YYSYMBOL_function_name_token = 937,      /* function_name_token  */
  YYSYMBOL_type_name_token = 938,          /* type_name_token  */
  YYSYMBOL_any_name = 939,                 /* any_name  */
  YYSYMBOL_attrs = 940,                    /* attrs  */
  YYSYMBOL_opt_name_list = 941,            /* opt_name_list  */
  YYSYMBOL_param_name = 942,               /* param_name  */
  YYSYMBOL_ColLabelOrString = 943,         /* ColLabelOrString  */
  YYSYMBOL_TransactionStmt = 944,          /* TransactionStmt  */
  YYSYMBOL_opt_transaction = 945,          /* opt_transaction  */
  YYSYMBOL_UpdateStmt = 946,               /* UpdateStmt  */
  YYSYMBOL_UseStmt = 947,                  /* UseStmt  */
  YYSYMBOL_VacuumStmt = 948,               /* VacuumStmt  */
  YYSYMBOL_vacuum_option_elem = 949,       /* vacuum_option_elem  */
  YYSYMBOL_opt_full = 950,                 /* opt_full  */
  YYSYMBOL_vacuum_option_list = 951,       /* vacuum_option_list  */
  YYSYMBOL_opt_freeze = 952,               /* opt_freeze  */
  YYSYMBOL_VariableResetStmt = 953,        /* VariableResetStmt  */
  YYSYMBOL_generic_reset = 954,            /* generic_reset  */
  YYSYMBOL_reset_rest = 955,               /* reset_rest  */
  YYSYMBOL_VariableSetStmt = 956,          /* VariableSetStmt  */
  YYSYMBOL_set_rest = 957,                 /* set_rest  */
  YYSYMBOL_generic_set = 958,              /* generic_set  */
  YYSYMBOL_var_value = 959,                /* var_value  */
  YYSYMBOL_zone_value = 960,               /* zone_value  */
  YYSYMBOL_var_list = 961,                 /* var_list  */
  YYSYMBOL_VariableShowStmt = 962,         /* VariableShowStmt  */
  YYSYMBOL_show_or_describe = 963,         /* show_or_describe  */
  YYSYMBOL_opt_tables = 964,               /* opt_tables  */
  YYSYMBOL_var_name = 965,                 /* var_name  */
  YYSYMBOL_table_id = 966,                 /* table_id  */
  YYSYMBOL_ViewStmt = 967,                 /* ViewStmt  */
  YYSYMBOL_opt_check_option = 968          /* opt_check_option  */
};
typedef enum yysymbol_kind_t yysymbol_kind_t;




#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

/* Work around bug in HP-UX 11.23, which defines these macros
   incorrectly for preprocessor constants.  This workaround can likely
   be removed in 2023, as HPE has promised support for HP-UX 11.23
   (aka HP-UX 11i v2) only through the end of 2022; see Table 2 of
   <https://h20195.www2.hpe.com/V2/getpdf.aspx/4AA4-7673ENW.pdf>.  */
#ifdef __hpux
# undef UINT_LEAST8_MAX
# undef UINT_LEAST16_MAX
# define UINT_LEAST8_MAX 255
# define UINT_LEAST16_MAX 65535
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))


/* Stored state numbers (used for stacks). */
typedef yytype_int16 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif


#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YY_USE(E) ((void) (E))
#else
# define YY_USE(E) /* empty */
#endif

/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
#if defined __GNUC__ && ! defined __ICC && 406 <= __GNUC__ * 100 + __GNUC_MINOR__
# if __GNUC__ * 100 + __GNUC_MINOR__ < 407
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")
# else
#  define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                           \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# endif
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if !defined yyoverflow

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* !defined yyoverflow */

#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE) \
             + YYSIZEOF (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  695
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   69404

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  517
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  452
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2073
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  3469

/* YYMAXUTOK -- Last valid token kind.  */
#define YYMAXUTOK   749


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK                     \
   ? YY_CAST (yysymbol_kind_t, yytranslate[YYX])        \
   : YYSYMBOL_YYUNDEF)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   511,   512,   501,     2,     2,
     506,   507,   499,   497,   510,   498,   508,   500,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   516,   509,
     493,   495,   494,   513,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   504,     2,   505,   502,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   514,     2,   515,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   496,   503
};

#if YYDEBUG
/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_int16 yyrline[] =
{
       0,   499,   499,   515,   527,   536,   537,   538,   539,   540,
     541,   542,   543,   544,   545,   546,   547,   548,   549,   550,
     551,   552,   553,   554,   555,   556,   557,   558,   559,   560,
     561,   562,   563,   564,   565,   566,   567,   568,   569,   570,
     571,   572,   573,   574,   576,     9,    18,    27,    36,    45,
      54,    63,    72,    85,    87,    93,    94,    99,   103,   107,
     118,   126,   130,   139,   148,   157,   166,   175,   184,   192,
     200,   209,   218,   227,   236,   253,   262,   271,   280,   290,
     303,   318,   327,   335,   350,   358,   368,   378,   385,   392,
     400,   407,   418,   419,   424,   428,   433,   438,   446,   447,
     452,   456,   457,   458,     7,    13,    19,    25,     9,    13,
      44,    45,    46,    50,    51,    55,    59,    60,    64,    70,
      75,    76,    77,    78,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     9,
      23,    29,    36,    42,    49,    59,    63,    71,    72,    73,
      77,    86,    95,   102,   103,   108,   120,   125,   150,   155,
     160,   166,   176,   186,   192,   203,   214,   229,   230,   236,
     237,   242,   243,   249,   250,   254,   255,   260,   262,   268,
     269,   273,   274,   277,   278,   283,     7,    16,    25,    46,
      47,    50,    54,     7,    14,    22,     9,    19,    29,    42,
      43,     7,    16,    25,    37,    38,    43,    44,    45,    49,
      50,    55,    59,    60,    65,    66,    67,     7,    14,    31,
      51,    55,    65,    69,    75,    76,     9,    17,    29,    30,
      34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
      64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
     105,   112,   113,   117,   118,   119,     7,    14,     2,     9,
      15,    21,    28,    35,    45,    46,    47,     2,     7,    21,
      36,    56,    57,    84,    85,    86,    87,    88,    89,    93,
      94,    99,   104,   105,   106,   107,   108,   113,   120,   121,
     122,   139,   146,   153,   163,   173,   185,   193,   202,   220,
     221,   225,   226,   230,   239,   262,   276,   283,   288,   290,
     292,   294,   297,   300,   301,   302,   303,   308,   312,   313,
     318,   325,   330,   331,   332,   333,   334,   335,   336,   337,
     343,   344,   348,   353,   360,   367,   374,   386,   387,   388,
     389,   393,   398,   399,   400,   405,   410,   411,   412,   413,
     414,   415,   420,   440,   469,   470,   474,   478,   479,   480,
     484,   488,   496,   497,   502,   503,   504,   508,   516,   517,
     522,   523,   527,   532,   536,   540,   545,   553,   554,   558,
     559,   563,   564,   570,   581,   594,   608,   622,   636,   650,
     673,   677,   684,   688,   696,   701,   708,   718,   719,   720,
     721,   722,   729,   736,   737,   742,   743,     9,    19,    29,
      39,    49,    59,    73,    74,    75,    76,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    95,    96,    97,    98,    99,   100,   105,   106,   111,
     112,   113,   118,   119,   120,     8,    20,    33,    46,    58,
      70,    86,    87,    91,    95,     7,     1,    30,    49,    61,
      62,    63,    67,    68,    73,    77,    82,    86,    94,    95,
      99,   100,   105,   106,   110,   111,   116,   117,   118,   119,
     120,   121,   126,   134,   138,   143,   144,   149,   153,   158,
     162,   166,   170,   174,   178,   182,   186,   190,   194,   198,
     202,   206,   210,   214,   218,   226,   231,   232,   233,   238,
     242,    47,    48,    52,    53,    68,    69,    76,    84,    92,
     100,   108,   116,   127,   128,   155,   160,   168,   184,   201,
     218,   235,   236,   255,   259,   263,   267,   271,   280,   290,
     299,   308,   318,   328,   339,   353,   370,   370,   374,   374,
     378,   378,   382,   388,   395,   399,   400,   404,   405,   419,
     426,   433,   443,   444,   447,   460,   461,   462,   466,   477,
     485,   490,   495,   500,   505,   513,   521,   526,   531,   538,
     539,   543,   544,   545,   549,   556,   557,   561,   562,   566,
     567,   568,   572,   573,   577,   578,   594,   595,   598,   607,
     618,   619,   620,   623,   624,   625,   629,   630,   631,   632,
     636,   637,   641,   643,   659,   661,   666,   669,   677,   681,
     685,   689,   693,   697,   704,   709,   716,   717,   721,   726,
     730,   734,   742,   749,   750,   755,   756,   760,   761,   766,
     768,   770,   775,   795,   796,   798,   803,   804,   808,   809,
     812,   813,   838,   839,   844,   848,   849,   853,   854,   858,
     859,   860,   861,   862,   866,   879,   886,   893,   900,   901,
     905,   906,   910,   911,   915,   916,   920,   921,   925,   926,
     930,   941,   942,   943,   944,   948,   949,   954,   955,   956,
     965,   971,   980,   981,   994,   995,   999,  1000,  1004,  1005,
    1011,  1017,  1025,  1034,  1042,  1051,  1060,  1064,  1069,  1079,
    1092,  1093,  1096,  1097,  1098,  1101,  1109,  1119,  1120,  1123,
    1131,  1140,  1144,  1151,  1152,  1156,  1165,  1169,  1194,  1198,
    1211,  1225,  1240,  1252,  1265,  1279,  1293,  1306,  1321,  1340,
    1346,  1351,  1357,  1364,  1365,  1373,  1377,  1381,  1387,  1394,
    1399,  1400,  1401,  1402,  1403,  1404,  1408,  1409,  1421,  1422,
    1427,  1434,  1441,  1448,  1480,  1491,  1504,  1509,  1510,  1513,
    1514,  1517,  1518,  1523,  1524,  1529,  1533,  1539,  1560,  1568,
    1581,  1584,  1588,  1588,  1591,  1592,  1594,  1599,  1606,  1611,
    1617,  1622,  1628,  1632,  1639,  1646,  1656,  1657,  1661,  1663,
    1666,  1670,  1671,  1672,  1673,  1674,  1675,  1680,  1700,  1701,
    1702,  1703,  1714,  1728,  1729,  1735,  1740,  1745,  1750,  1755,
    1760,  1765,  1770,  1776,  1782,  1788,  1795,  1817,  1826,  1830,
    1838,  1842,  1850,  1862,  1883,  1887,  1893,  1897,  1910,  1918,
    1928,  1930,  1932,  1934,  1936,  1938,  1943,  1944,  1951,  1960,
    1968,  1977,  1988,  1996,  1997,  1998,  2002,  2002,  2005,  2005,
    2008,  2008,  2011,  2011,  2014,  2014,  2017,  2017,  2020,  2020,
    2023,  2023,  2026,  2028,  2030,  2032,  2034,  2036,  2038,  2040,
    2042,  2047,  2052,  2058,  2065,  2070,  2076,  2082,  2113,  2115,
    2117,  2125,  2140,  2142,  2144,  2146,  2148,  2150,  2152,  2154,
    2156,  2158,  2160,  2162,  2164,  2166,  2168,  2170,  2173,  2175,
    2177,  2180,  2182,  2184,  2186,  2188,  2193,  2198,  2205,  2210,
    2217,  2222,  2229,  2234,  2242,  2250,  2258,  2266,  2284,  2292,
    2300,  2308,  2316,  2324,  2332,  2336,  2352,  2360,  2368,  2376,
    2384,  2392,  2400,  2404,  2408,  2412,  2416,  2424,  2432,  2440,
    2448,  2468,  2490,  2501,  2508,  2522,  2530,  2538,  2558,  2560,
    2562,  2564,  2566,  2568,  2570,  2572,  2574,  2576,  2578,  2580,
    2582,  2584,  2586,  2588,  2590,  2592,  2594,  2596,  2598,  2600,
    2604,  2608,  2612,  2626,  2627,  2631,  2645,  2646,  2647,  2654,
    2658,  2662,  2665,  2676,  2681,  2683,  2694,  2718,  2729,  2740,
    2744,  2751,  2755,  2759,  2776,  2784,  2793,  2797,  2804,  2812,
    2820,  2831,  2851,  2887,  2898,  2899,  2906,  2912,  2914,  2916,
    2920,  2929,  2934,  2941,  2956,  2963,  2967,  2971,  2975,  2979,
    2989,  2998,  3020,  3021,  3025,  3026,  3027,  3031,  3032,  3039,
    3040,  3044,  3045,  3050,  3058,  3060,  3074,  3077,  3104,  3105,
    3108,  3109,  3117,  3125,  3133,  3142,  3152,  3170,  3216,  3225,
    3234,  3243,  3252,  3264,  3265,  3266,  3267,  3268,  3282,  3283,
    3286,  3287,  3291,  3301,  3302,  3306,  3307,  3311,  3318,  3319,
    3324,  3325,  3330,  3331,  3334,  3335,  3336,  3339,  3340,  3343,
    3344,  3345,  3346,  3347,  3348,  3349,  3350,  3351,  3352,  3353,
    3354,  3355,  3356,  3359,  3361,  3366,  3368,  3373,  3375,  3377,
    3379,  3381,  3383,  3385,  3387,  3401,  3403,  3408,  3412,  3419,
    3424,  3430,  3434,  3441,  3446,  3453,  3458,  3466,  3470,  3476,
    3480,  3489,  3500,  3501,  3505,  3509,  3516,  3517,  3518,  3519,
    3520,  3521,  3522,  3523,  3524,  3525,  3535,  3539,  3546,  3553,
    3554,  3570,  3574,  3579,  3583,  3598,  3603,  3607,  3610,  3613,
    3614,  3615,  3618,  3625,  3635,  3649,  3650,  3654,  3665,  3666,
    3669,  3670,  3673,  3677,  3684,  3692,  3700,  3708,  3718,  3719,
    3724,  3725,  3729,  3730,  3731,  3735,  3744,  3752,  3760,  3769,
    3784,  3785,  3790,  3791,  3801,  3802,  3806,  3807,  3811,  3812,
    3815,  3831,  3839,  3849,  3850,  3853,  3854,  3857,  3861,  3862,
    3866,  3867,  3870,  3871,  3872,  3882,  3883,  3887,  3889,  3895,
    3896,  3900,  3901,  3904,  3915,  3918,  3929,  3933,  3937,  3949,
    3953,  3962,  3969,  4007,  4011,  4015,  4019,  4023,  4027,  4031,
    4037,  4054,  4055,  4056,  4059,  4060,  4061,  4064,  4065,  4066,
    4069,  4070,  4073,  4075,  4080,  4081,  4084,  4088,  4089,     7,
      18,    19,    23,    24,    25,    26,    27,     7,    26,    50,
      73,    80,    85,    86,    87,    88,     8,    33,    62,    66,
      67,    72,    73,    78,    79,    83,    84,    89,    90,     7,
      16,    25,    34,    43,    52,     5,    12,    22,    23,     7,
      19,    33,     9,    16,    26,    33,    44,    45,    50,    51,
      52,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    90,    91,    92,    97,    98,   103,   107,   115,   116,
     121,   122,   123,   129,   134,   142,   143,    10,    16,    22,
      28,    38,    39,    47,    58,    70,    78,    89,    95,    99,
     103,   118,   125,   126,   127,   131,   132,     7,    15,    22,
      29,    36,    45,    46,    48,    49,     8,    22,    36,    48,
      56,    70,    71,    72,    73,    74,    87,    88,    93,    94,
      98,    99,     7,    18,    31,    35,    42,    53,    54,    60,
      61,     9,    19,     7,    16,    28,    35,    44,    45,    49,
      50,     2,     7,    12,    17,    26,    33,    43,    44,    51,
       3,    10,    17,    24,    31,    38,    45,    52,    61,    61,
      63,    63,    65,    66,    70,    71,     6,     8,    21,    34,
      47,    65,    87,    88,    89,    90,    11,    24,    37,    54,
      55,    56,    61,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    74,    74,    74,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
      75,    75,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
      77,    77,    77,    77,    77,    77,    77,    77,    77,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
      79,    79,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
      80,    80,    80,    80
};
#endif

/** Accessing symbol of state STATE.  */
#define YY_ACCESSING_SYMBOL(State) YY_CAST (yysymbol_kind_t, yystos[State])

#if YYDEBUG || 0
/* The user-facing name of the symbol whose (internal) number is
   YYSYMBOL.  No bounds checking.  */
static const char *yysymbol_name (yysymbol_kind_t yysymbol) YY_ATTRIBUTE_UNUSED;

/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "\"end of file\"", "error", "\"invalid token\"", "IDENT", "FCONST",
  "SCONST", "BCONST", "XCONST", "Op", "ICONST", "PARAM", "TYPECAST",
  "DOT_DOT", "COLON_EQUALS", "EQUALS_GREATER", "INTEGER_DIVISION",
  "POWER_OF", "LAMBDA_ARROW", "DOUBLE_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANTI", "ANY", "ARRAY", "AS",
  "ASC_P", "ASOF", "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH",
  "ATTRIBUTE", "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN",
  "BIGINT", "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P",
  "CALLED", "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN",
  "CHAR_P", "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT",
  "CLASS", "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION",
  "COLUMN", "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED",
  "COMPRESSION", "CONCURRENTLY", "CONFIGURATION", "CONFLICT", "CONNECTION",
  "CONSTRAINT", "CONSTRAINTS", "CONTENT_P", "CONTINUE_P", "CONVERSION_P",
  "COPY", "COST", "CREATE_P", "CROSS", "CSV", "CUBE", "CURRENT_P",
  "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
  "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
  "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
  "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
  "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
  "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
  "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
  "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE", "EXTENSION", "EXTERNAL",
  "EXTRACT", "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
  "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
  "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
  "GRANTED", "GROUP_P", "GROUPING", "GROUPING_ID", "GROUPS", "HANDLER",
  "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P",
  "IGNORE_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P", "IMPORT_P",
  "IN_P", "INCLUDE_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL", "INSTEAD", "INT_P",
  "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL",
  "ISOLATION", "JOIN", "JSON", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
  "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
  "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCATION", "LOCK_P", "LOCKED",
  "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE",
  "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OTHERS", "OUT_P", "OUTER_P",
  "OVER", "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER",
  "PARALLEL", "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD",
  "PERCENT", "PERMANENT", "PIVOT", "PIVOT_LONGER", "PIVOT_WIDER",
  "PLACING", "PLANS", "POLICY", "POSITION", "POSITIONAL", "PRAGMA_P",
  "PRECEDING", "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY",
  "PRIOR", "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM",
  "PUBLICATION", "QUALIFY", "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN",
  "RECHECK", "RECURSIVE", "REF", "REFERENCES", "REFERENCING", "REFRESH",
  "REINDEX", "RELATIVE_P", "RELEASE", "RENAME", "REPEATABLE", "REPLACE",
  "REPLICA", "RESET", "RESPECT_P", "RESTART", "RESTRICT", "RETURNING",
  "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW",
  "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCOPE",
  "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECRET", "SECURITY",
  "SELECT", "SEMI", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE",
  "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
  "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
  "STORAGE", "STORED", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE",
  "TABLES", "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY",
  "TEXT_P", "THEN", "TIES", "TIME", "TIMESTAMP", "TO", "TRAILING",
  "TRANSACTION", "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P",
  "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED",
  "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN",
  "UNLOGGED", "UNPIVOT", "UNTIL", "UPDATE", "USE_P", "USER", "USING",
  "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
  "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
  "VIEWS", "VIRTUAL", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P",
  "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P",
  "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS",
  "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT",
  "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE",
  "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'",
  "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'",
  "'.'", "';'", "','", "'#'", "'$'", "'?'", "'{'", "'}'", "':'", "$accept",
  "stmtblock", "stmtmulti", "stmt", "AlterObjectSchemaStmt",
  "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
  "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "AnalyzeStmt", "AttachStmt", "DetachStmt", "opt_database",
  "opt_database_alias", "CallStmt", "CheckPointStmt", "opt_col_id",
  "qualified_name", "ColId", "ColIdOrString", "Sconst", "indirection",
  "indirection_el", "attr_name", "ColLabel", "CopyStmt",
  "copy_database_flag", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "CreateStmt", "ConstraintAttributeSpec",
  "def_arg", "OptParenthesizedSeqOptList", "generic_option_arg",
  "key_action", "ColConstraint", "ColConstraintElem",
  "GeneratedColumnType", "opt_GeneratedColumnType",
  "GeneratedConstraintElem", "generic_option_elem", "key_update",
  "key_actions", "OnCommitOption", "reloptions", "opt_no_inherit",
  "TableConstraint", "TableLikeOption", "reloption_list", "ExistingIndex",
  "ConstraintAttr", "OptWith", "definition", "TableLikeOptionList",
  "generic_option_name", "ConstraintAttributeElem", "columnDef",
  "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
  "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
  "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
  "func_type", "ConstraintElem", "TableElementList", "key_match",
  "TableLikeClause", "OptTemp", "generated_when", "CreateAsStmt",
  "opt_with_data", "create_as_target", "unreserved_keyword",
  "col_name_keyword", "func_name_keyword", "type_name_keyword",
  "other_keyword", "type_func_name_keyword", "reserved_keyword",
  "CreateFunctionStmt", "macro_alias", "param_list", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "CreateSecretStmt", "opt_secret_name",
  "secret_key", "secret_key_val", "scope_list_val_item", "scope_list_val",
  "opt_persist", "CreateSeqStmt", "OptSeqOptList", "CreateTypeStmt",
  "opt_enum_val_list", "enum_val_list", "DeallocateStmt", "DeleteStmt",
  "relation_expr_opt_alias", "where_or_current_clause", "using_clause",
  "DropStmt", "drop_type_any_name", "drop_type_name", "any_name_list",
  "opt_drop_behavior", "drop_type_name_on_any_name", "DropSecretStmt",
  "ExecuteStmt", "execute_param_expr", "execute_param_list",
  "execute_param_clause", "ExplainStmt", "opt_verbose",
  "explain_option_arg", "ExplainableStmt", "NonReservedWord",
  "NonReservedWord_or_Sconst", "explain_option_list", "analyze_keyword",
  "opt_boolean_or_string", "explain_option_elem", "explain_option_name",
  "ExportStmt", "ImportStmt", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "InsertStmt", "insert_rest",
  "insert_target", "opt_by_name_or_position", "opt_conf_expr",
  "opt_with_clause", "insert_column_item", "set_clause", "opt_or_action",
  "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
  "set_target_list", "opt_collate", "opt_class", "insert_column_list",
  "set_clause_list", "set_clause_list_opt_comma", "index_params",
  "set_target", "LoadStmt", "file_name", "repo_path", "PragmaStmt",
  "PrepareStmt", "prep_type_clause", "PreparableStmt", "RenameStmt",
  "opt_column", "SelectStmt", "select_with_parens", "select_no_parens",
  "select_clause", "opt_select", "simple_select", "value_or_values",
  "pivot_keyword", "unpivot_keyword", "pivot_column_entry",
  "pivot_column_list_internal", "pivot_column_list", "with_clause",
  "cte_list", "common_table_expr", "opt_materialized", "into_clause",
  "OptTempTableName", "opt_table", "all_or_distinct", "by_name",
  "distinct_clause", "opt_all_clause", "opt_ignore_nulls",
  "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
  "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
  "limit_clause", "offset_clause", "sample_count", "sample_clause",
  "opt_sample_func", "tablesample_entry", "tablesample_clause",
  "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
  "select_offset_value", "select_fetch_first_value", "I_or_F_const",
  "row_or_rows", "first_or_next", "group_clause", "group_by_list",
  "group_by_list_opt_comma", "group_by_item", "empty_grouping_set",
  "rollup_clause", "cube_clause", "grouping_sets_clause",
  "grouping_or_grouping_id", "having_clause", "qualify_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "values_clause_opt_comma",
  "from_clause", "from_list", "from_list_opt_comma", "table_ref",
  "opt_pivot_group_by", "opt_include_nulls", "single_pivot_value",
  "pivot_header", "pivot_value", "pivot_value_list", "unpivot_header",
  "unpivot_value", "unpivot_value_list", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "opt_Typename", "Typename",
  "qualified_typename", "opt_array_bounds", "SimpleTypename",
  "ConstTypename", "GenericType", "opt_type_modifiers", "Numeric",
  "opt_float", "Bit", "ConstBit", "BitWithLength", "BitWithoutLength",
  "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "d_expr", "indirection_expr", "struct_expr",
  "func_application", "func_expr", "func_expr_windowless",
  "func_expr_common_subexpr", "list_comprehension", "within_group_clause",
  "filter_clause", "export_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "opt_window_exclusion_clause", "qualified_row", "row",
  "dict_arg", "dict_arguments", "dict_arguments_opt_comma", "map_arg",
  "map_arguments", "map_arguments_opt_comma",
  "opt_map_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
  "qual_all_Op", "subquery_Op", "any_operator", "c_expr_list",
  "c_expr_list_opt_comma", "expr_list", "expr_list_opt_comma",
  "opt_expr_list_opt_comma", "func_arg_list", "func_arg_expr", "type_list",
  "extract_list", "extract_arg", "overlay_list", "overlay_placing",
  "position_list", "substr_list", "substr_from", "substr_for", "trim_list",
  "in_expr", "case_expr", "when_clause_list", "when_clause",
  "case_default", "case_arg", "columnref", "opt_slice_bound",
  "opt_indirection", "opt_func_arguments", "extended_indirection_el",
  "opt_extended_indirection", "opt_asymmetric",
  "opt_target_list_opt_comma", "target_list", "target_list_opt_comma",
  "target_el", "except_list", "opt_except_list", "replace_list_el",
  "replace_list", "replace_list_opt_comma", "opt_replace_list",
  "qualified_name_list", "name_list", "name_list_opt_comma",
  "name_list_opt_comma_opt_bracket", "name", "func_name", "AexprConst",
  "Iconst", "type_function_name", "function_name_token", "type_name_token",
  "any_name", "attrs", "opt_name_list", "param_name", "ColLabelOrString",
  "TransactionStmt", "opt_transaction", "UpdateStmt", "UseStmt",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "VariableResetStmt", "generic_reset", "reset_rest",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "VariableShowStmt", "show_or_describe", "opt_tables",
  "var_name", "table_id", "ViewStmt", "opt_check_option", YY_NULLPTR
};

static const char *
yysymbol_name (yysymbol_kind_t yysymbol)
{
  return yytname[yysymbol];
}
#endif

#define YYPACT_NINF (-2954)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-2002)

#define yytable_value_is_error(Yyn) \
  ((Yyn) == YYTABLE_NINF)

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
static const int yypact[] =
{
    6109,   513,   987, -2954, -2954,   659,   513, 47557, 62152,   513,
     256,  4176, 49505, -2954,   227,  6814,   513, 52427, 68881,   277,
     233, 30993,   292, 52914, 52914, -2954, -2954, -2954, 62152, 52427,
   53401,   513,   321, 62639, -2954,   513, 32941, 49992,     0, -2954,
   52427,    58,    75, 53888, 52427,   697,   597,   291, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954,   211, -2954, -2954, -2954, -2954,   132, -2954, -2954, -2954,
   -2954, -2954,   124, -2954,    89,   142, 30993, 30993,  1852,   366,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, 32454, -2954,
   -2954, -2954, -2954, 54375, 52427, 54862, 50479, 55349, -2954,   522,
     884, -2954,   160, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954,   191, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954,   192, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954,   228, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954,   634,   230, -2954,
   -2954, -2954,   477, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954,   849,   697, 52427,   316,   551,   664, -2954,
   55836, -2954,   666, 52427, -2954, -2954,   854,   672,   890, -2954,
   -2954, 50966, -2954, -2954, -2954,   895,  1095,   894, -2954, -2954,
     679, -2954,   112, -2954, -2954,   734,   741, -2954, -2954, -2954,
   -2954, 62152, -2954, -2954, -2954, -2954,   865, -2954, -2954, -2954,
   63126, 56323, 56810, -2954,   657,  2002,  7087, 68898, 30017, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954,   211, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, 52914, 62152, 52914,   688,   739,  1089,   769, 31480,   790,
   33429,   802,   814,  1136,   818,   828,   871,   883,    75, 30505,
     853,   634, -2954, 57297, 57297,   -77,  1959, -2954, 57297, 57784,
   -2954,   856, -2954,   884, -2954, -2954, -2954,  1231, -2954,  -114,
     915, -2954, 58271, 58271, 58271,   955,  1243, -2954, -2954, -2954,
     852, -2954, -2954,  1183, 19916, 19916, 63613, 63613,   884, 63613,
     985, -2954, -2954,   364, -2954, -2954, -2954,  1852,   904,   634,
   -2954, -2954, 49992, -2954, -2954,   312,  1318, 19916, 52427,   979,
   -2954,   997,   979,   986,  1011, -2954,  6109, -2954, 52427,  1358,
    1234, 49992,   322,   322,  1475,   322,  1060,  1348,  2512,  1928,
   -2954,  1520, -2954,  1032,  1133,  1093,  1378, -2954,   904,  1484,
     906,  1290,  1490,  5684,  1492,  1193,  1494,  1281,  1506,  1618,
   19916, 45122,   634, -2954, 11231, 62152,  1153,  1158, -2954, -2954,
   -2954, -2954,    72,  1400, -2954,  1630, -2954, -2954,  1220, 58758,
   59245, 59732, 60219, 64100,  1608, -2954, -2954,  1552, -2954, -2954,
   -2954,  1230, -2954, -2954, -2954,  1525,   163,  1578,  1223,   117,
   -2954,  1588,   118, -2954,  1590,  1463, 14303, -2954,  1403, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,    75,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954,   645, -2954, -2954, 42242,
   68898,  1338,  1264, -2954,  1624, 19916, 19916,  1287,  2668, 57297,
   57784, 19916, 52427, -2954, 19916, 24524,  1289, 19916, 19916, 11743,
   19916, 29043, 57297,  1959,  1301, -2954,   735, 52427,  1309, -2954,
    1406,  1406,   321, 30993,  1605, -2954,   923,  1604,  1532, -2954,
   30993,  1532,   954,  1324,  1612,  1532, -2954,   394,  1613,  1406,
   33916,  1328, -2954,  1406,  1550, -2954, -2954, 52914, 19916, 14303,
   66535,  1801, -2954, -2954, -2954, -2954,  1619, 62152,  1345, -2954,
   -2954, -2954, -2954, -2954, -2954,   562,  1857,   144,  1859, 19916,
     144,   144,  1359,   231,   231, -2954,  1548,  1366, -2954,   234,
    1369,  1370,  1872,  1877,   162,   153,   706,   144, 19916, -2954,
     231,  1379,  1878,  1384,  1886,   168,   171, -2954,   236, 19916,
   19916, 19916,  1748, 19916, 10719,  1885, 45122, -2954, 52427,   707,
   -2954,   634,  1389,   884, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954,  1390, -2954,   214,  6799, -2954, -2954, -2954, -2954,  1429,
   -2954, -2954, -2954, -2954,  1609, 19916, -2954, -2954,  1387,  1605,
   -2954,   237, -2954, -2954,  1605, -2954, -2954, -2954, -2954, -2954,
     261,  1797, 19916, 19916, 62152,   634, -2954, 64587, -2954, -2954,
   -2954, -2954, -2954, -2954,   665, -2954,   211, 43960,  1396,  1401,
     979, 52427, 52427,  1867, -2954, -2954, -2954,   997, 49992,   197,
    1695,  1531, -2954, -2954,  1852,  1852, 15308,   888,   198,   686,
   15820, 20428,  1752,  1632,   199,   528,  1757, -2954,  1639,  1862,
   24524, 19916, 19916,  1060,  1348, 19916, -2954, -2954, -2954,  1698,
   52427, 48044,   793,   924,  1419,  1508,  1425,    31,  1841, -2954,
    1427, -2954,  1512, 52427, 68438,   270, -2954,  1876,   270,   270,
     259,  1880,  1518,   281,  1688,    20,   -98,  2206, -2954,  1427,
   49992,   202,   166,  1427, 52427,  1521,   587,  1427,  1842, 62152,
    1264, 39869,  1433, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954,   155, 14303, -2954,  1116,  1168,  1355,   336,
     172,  1392,  1417, 14303,  1436,  1579,   177,  1591,  1670,  1672,
    1676,  1684,  1692,  1694,  1716,   131,  1721,  1728,  1741,  1743,
    1750,  1753, -2954,  1755,   188,  1759,   193, 14303,  1763, -2954,
     207, -2954, 43960,   -17, -2954, -2954,  1767,  1528,  1529, 62152,
    1485, 52427,  1160,  1586,  1818,  1869, 67007, 52427,  1705,  2206,
    1706,  1469,  1936,  1710,  1158,  1711,  1474,  1714, -2954,  1480,
   -2954, 65074,  1985, -2954,  1849, -2954, -2954, -2954, -2954, 62152,
   45122,  1495, -2954, -2954, 62152, -2954, 52427, 52427, -2954, 52427,
   62152, -2954,   777, 43960,  1980,    90, 68898, 46583, -2954, -2954,
   -2954, -2954,   608,   851, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954,   884, 45122, -2954,  3476, 52914, 42846,  1491,
   19916, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954,  1497,  1835, -2954,
   -2954,  6296,  1498, 43137,  1499, 24524, 24524,   634,  2015, -2954,
   -2954, 24524,  1500, 47070, 42766,  1501,  1502, 43274, 16332, 19916,
   16332, 16332, 43357, -2954,  1503, 43461, 57297,  1507, 52427, 51453,
   -2954, -2954, -2954, 19916, 19916,  1959, 51940,  1543, -2954, 30993,
   -2954,  1795, 30993, -2954, -2954,  2530, -2954, 30993,  1798, 19916,
   30993, -2954,  1742,  1745,  1522, 30993, -2954, 52427,  1526, 52427,
   -2954, -2954, -2954, -2954, -2954, 43960, -2954,  1523,   811,  1530,
   -2954, -2954, -2954, -2954, -2954,  1582, -2954,  1582,  1582, -2954,
   -2954, -2954, -2954,  1535,  1535,  1536, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,  1541,
     706, -2954,  1582, -2954,  1535, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, 68438, -2954, -2954, -2954, -2954,   699,   824, -2954,
    1544, -2954, -2954, -2954, -2954,  1546, -2954,  1547,  2010, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,  4378,   826,
    1535,  1845, -2954, -2954, 19916, 19916, -2954, -2954,  1551, 43960,
    1587, -2954, -2954, 19916, 19916, -2954, -2954, -2954, -2954,  2044,
   -2954, 19916,  1582,  1582, -2954,  6923, -2954, 38787, 16844,  1634,
    1636,  2044, -2954,  2044, -2954,  6923,  2048,  2048, 36351, -2954,
    1717, 43645, -2954,  1557,    91,  7391,  1560, -2954, -2954,  1556,
   -2954,  1563,  1562, 40781,   200,   634,   634, 19916, -2954,  2044,
   19916,  2801,  2801, -2954,   180, 66535, 19916, 19916, 19916, 19916,
   19916, 19916, 19916, 19916, 44635,  1647,   150, 62152, 19916, 19916,
    1569,  1059, -2954, 19916,  1806, -2954,  1574, 19916,  1659,  1117,
   19916, 19916, 19916, 19916, 19916, 19916, 19916, 19916, 19916, -2954,
   -2954, 27065,   216,   719,  1906,  1925,   -92,   343, 19916,  1918,
   11231, -2954,  1918, -2954, -2954, -2954, -2954, -2954,   238, -2954,
   -2954,  1523,  1523, -2954, 62152, -2954, 52427,   312, 49018, 19916,
   -2954, -2954,  1576,  1580,   660, -2954,  1640, -2954, -2954, 52427,
   36838,  1884, -2954,   731,  1589, -2954, 42726,  1830,  1884,  1852,
   -2954, -2954, 25548,  1707,  1879,  1816, -2954, -2954,  1796,  1799,
   -2954,  1593, 44154, 20940, 20940, -2954,   557, 43960,  1424, -2954,
   -2954, -2954, -2954, -2954, -2954,   703, -2954, 52427,    69, 34403,
   -2954,  1596,    62, -2954,  3014,  1932,  1896,  1752,   528,  1606,
   -2954,  1615,  1610, 65561, 52427,  1898,  1858,  1903,   -76, 66535,
   -2954, -2954, -2954, -2954, 52427, 62152, 60706, 66048, 45609, 52427,
   45122, -2954, -2954, -2954, -2954, 52427,  1124, 52427,  6326, -2954,
   -2954, -2954, -2954,   270, -2954, -2954, -2954, -2954, -2954, 62152,
   52427, -2954, -2954,   270, 62152, 52427,   270, -2954,  1641, 52427,
   52427, 52427, 52427,  1696, 52427, 52427,   884, -2954, -2954, -2954,
   21452,   -14,   -14,  1839, 12255,   125, -2954, 19916, 19916, 62152,
    1802, -2954, -2954,   834,  1854,   113, -2954,  1673, 52427, 52427,
   52427, 52427, 62152, 52427,  1182, -2954, -2954, -2954, -2954, -2954,
    1633, -2954,  1635,  1988,  2206, -2954,  1995, 48531,   842,  3183,
    1996,  1678,  2003, 12767,  2116,  2009, 62152,  1897, -2954, -2954,
    1881, -2954, -2954,   117, -2954, 45122, -2954,   118, -2954,  1883,
     167, -2954, 14303, 19916, -2954, -2954, -2954, -2954, -2954, -2954,
    1264, 27563, -2954,   840, -2954, -2954,  2130,   884,  2130,   498,
   -2954, -2954,  2130, -2954,  2112,  2130, -2954, -2954, 66535, -2954,
    7595, -2954, 19916, 19916, -2954, 19916,  2006, -2954,  2165,  2165,
   66535, 24524, 24524, 24524, 24524, 24524, 24524,   556,  1379, 24524,
   24524, 24524, 24524, 24524, 24524, 24524, 24524, 24524, 26060,   350,
   -2954, -2954,   860,  2137, 19916, 19916,  2016,  2006, 19916, -2954,
   66535,  1674, -2954,  1675,  1679, 19916, -2954, 66535, -2954, 52427,
    1685,   -19,   -22, -2954,  1677,  1687, -2954,  1605, -2954,   846,
     967, 52427,  2659,  5086,  5345, -2954, -2954, 19916,  2004,  2530,
   30993, -2954, 19916,  1690, -2954, -2954, 30993,  2023, -2954, -2954,
   -2954, 34890,  2530, 66535,   868, -2954, 52427, 66535,   869, 19916,
   -2954, 14303,  2188, 66535,  2155, 62152, 62152,  2194,  1697,  1699,
    2044,  1776, -2954,  1782,  1785,  1786, -2954, -2954, -2954, -2954,
   -2954, 66535, -2954, -2954, -2954, -2954, -2954, -2954, -2954,  1703,
    1708, 19916, 19916,    76, -2954,  7636,  1709,  1713,  4566, -2954,
    1704, -2954,  1700, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
    1715, -2954,  1727, -2954,  1730,  1733,  1735,  1737,  1740, 52427,
   -2954, 21964, -2954, 62152, -2954, -2954, 19916, 19916, 52427, -2954,
    1748, -2954,  1744,  1746,  7979, -2954, -2954, -2954,   275,   934,
    3714,   343,  3287,  3287,  3287,  6923, -2954, -2954, -2954,  1760,
   -2954, 24524, 24524, -2954,  3639,  1729, 10719, -2954, -2954,  2050,
   -2954,   859, -2954,  1751, -2954, -2954,  4031, -2954, 38787,  7301,
   19916,   154, -2954, 19916,  1569, 19916,  1813,  3287,  3287,  3287,
     411,   411,   275,   275,   275,   934,   343, -2954, -2954, -2954,
    1754, 19916, 45122, -2954,  1758,  1762,  2097,  1384, 19916, -2954,
   -2954, 30993,  1543,   -17,  1543,  2044,  2801, -2954,   997, -2954,
   -2954,   997, 43960, 52427, -2954, -2954,  2005,  1764, 30993,  1787,
    2214,  2199, 62152, -2954, -2954,  1749,  1918,  1774, -2954, -2954,
    1780, 19916,  1216,  1780, -2954,  1884,   -29,  1989,  1076,  1076,
     557,  1992, -2954, -2954,  1827, -2954, -2954, -2954, 19916, 13279,
    1428, -2954,  1437, -2954, -2954, -2954, -2954, -2954,  1768, -2954,
    2041, -2954, 52427, -2954, -2954, 24524,  2222, 19916, 35377,  2223,
    2025, -2954, -2954, -2954,  1865,  1427, 19916,  2021, -2954,   137,
    1788,  2144,    44,  2095, 62152, -2954,   241,   280, -2954,   797,
    2148,   167,  2149,   167, 45122, 45122, 45122,   881, -2954, -2954,
   -2954,   884, -2954,  -109,   886, -2954, -2954, -2954, -2954,  1882,
     590,  2206,  1427, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
     232,   614,  1427,  1887, -2954,  1889, -2954,  1890,   694,  1427,
   -2954, -2954,  1618,  9179, 43960,   512,   125,   125,   125, 14303,
   -2954,  2026,  2030,  1791, 43960, 43960,  1809, -2954,   182, -2954,
   62152, -2954, -2954, -2954,  1802,  1869, 52427,  2206,  1810,  2267,
    1158,  1474,  1814, -2954,  1962,   792,   752, -2954, 62152, 52427,
   52427, 52427, 61193, -2954, -2954, -2954,  1812,  1811, -2954,   -23,
    2043,  2039, 52427,  1860, 52427,  1425,  2286, 52427, -2954,   903,
   17356, 62152, 37812, -2954,   948,  2181, 52427, -2954, -2954, -2954,
   62152, -2954, -2954, 43960, -2954, -2954, 46096, -2954, -2954, -2954,
   -2954, -2954, 45122, -2954,   884, -2954,   884,  2057, 62152, 41268,
     884, 41755,   884,  1824, -2954, 43960,  8351, 43960,  2016, -2954,
     127,  2165,   500,   500,   500,  3244,  2168,   175,  1833,   500,
     500,   500,   393,   393,   127,   127,   127,  2165,   350,   856,
   47070,  1834, -2954, 43960, 43960, -2954, -2954,  1829, -2954, -2954,
   -2954, -2954,  1837,  1838, -2954, -2954, -2954, -2954, -2954, -2954,
   62152,  1200,  1543,     0,     0,     0,     0, -2954, 52427, 52427,
   52427, 43960,  2282,  2161, -2954,  2530, 43960, 52427, -2954, 28552,
   52427, -2954,  2186, -2954,  2271, -2954, 52427,   968, -2954, -2954,
   -2954,   984,  1846,  1699, 66535,  1001,  1002, -2954,  2044,   157,
    1847,  1545,  1302,  1015,   650, -2954, -2954, -2954,  1848, 43775,
   19916, -2954,  2213, -2954, -2954, -2954, 19916, 19916, -2954, 38787,
   -2954, -2954, -2954, -2954,   478,   478,  1850, 10719, 43865, -2954,
    2159,  8476, 43960, -2954,  1717, -2954, -2954,  2801, 19916,   547,
    3064, 19916,  1856, 19916,  2197, -2954, -2954,  1855, -2954, -2954,
   66535, 19916,  1861,  4956, 24524, 24524,  5723, -2954,  5763, 19916,
   10719, -2954, 39909,  1851,  1863,  1839, 17868, -2954,  2071,  1864,
   -2954,  2004,   125,  2004,  1868, -2954, -2954, -2954, -2954,  1845,
   -2954, 19916,  2020, 62152,   101,  2356,  1006, -2954,   634, 36838,
    1787, 19916,   209, -2954, -2954,  1873, -2954,  1780, -2954, -2954,
   -2954,  2096, -2954, -2954, -2954, 52427, -2954,  1875, -2954, 34403,
    2208, 10719, -2954, 34403, 52427, 52427,  8540,  2237, -2954, 62152,
   62152, 62152, -2954, 62152,  1888,  1894,   962,  1899,   515, -2954,
    2059,   962,  2218,   204,  1425,   281,  2565,   430, -2954, -2954,
   -2954,  1957, 52427, -2954, 62152, -2954, -2954, -2954, -2954, -2954,
   45609, -2954, -2954, 38299, 45122, -2954, 45122, 52427, 52427, 52427,
   52427, 52427, 52427, 52427, 52427, 52427, 52427,  1264, 19916, -2954,
   19916,  1900,  1901,  1902,  1839, -2954, -2954, -2954,   164, -2954,
   -2954, -2954, -2954,   -98, -2954,   182,  1905, -2954, 48531,   697,
    1678,  2354, 62152,  1869,   863, 61665, -2954,  1910,  1912,  1020,
    2206,  1907,  2355, -2954,   842, 48531, -2954, -2954, -2954,  2312,
   -2954,   657,   178, -2954,  1158, -2954,   697,  1474, -2954,   697,
   43960,  1921, -2954,  2399, -2954, -2954, 62152, 62152,  1964,   167,
    1022, -2954, -2954, -2954, -2954, -2954, 62152,  1920, -2954,  1920,
   -2954, -2954,  1920, -2954, -2954, -2954, -2954, 24524,  2261,  1926,
   66535, -2954, -2954, 52427, -2954, -2954, -2954,  1029,  1924,  2004,
   52427, 52427, 52427, 52427, -2954, -2954, -2954, 18380, 19916,  1969,
   -2954,  1933, 14815,  2245, -2954, 28061, -2954,   242,  1938, 34890,
   62152, -2954, -2954, -2954, -2954,  2044, -2954, -2954, 62152, -2954,
    1941, -2954,  1943, -2954, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, 19916, 43960, -2954, 43960, -2954, -2954, -2954, -2954,
   -2954,  6868, -2954,  1940,  1944, 62152, 19916, -2954, -2954, -2954,
     380, 19916, 19916,  3639, -2954,  8412, 19916, 66535,  1033,  3639,
     219, 19916,  3625,  3864, 19916, 19916,  6149, 39282, -2954, 22476,
   13791, -2954,  1946, 19916, 39322, 37325, -2954, 30993,  2161,  1947,
    2161,   884,  1949, 43960, 19916, -2954, -2954, -2954, -2954,  2007,
     462, 32941,  2175, -2954,  1968, 62152, -2954,  2020, 43960, -2954,
   -2954, 38787, -2954, -2954, -2954, -2954, -2954,  2400,  1680,  1958,
    1963, -2954,  1350, -2954, -2954, 62152,  1966, -2954,  1970,   962,
   -2954, 62152,  1998, -2954,   215,  2275,   146, -2954, 19916, -2954,
    2363,  2438,  2059,  1973, 62152, 52427, 24524, -2954,   297,   179,
   -2954,  2258, 52427,  1998,  2395, -2954, -2954, -2954,   515, -2954,
    2295,  2210, -2954,   270, -2954, 19916,   515,  2211,   194, 62152,
   -2954, -2954,  1718, -2954, 66535,   167,   167, -2954,  1530,  1978,
    1981,  1987,  1993,  1994,  2011,  2012,  2013,  2014,  2017, -2954,
    2018,  2019,  2022,  2024,  2032,  2033,  2035,  2036,  1541,  2037,
   -2954,  2042,  1873,  2047,  2051,  2054,  2058,  2063, 67479,  2067,
    2070,  2074,  2077,  1544,  2078,   608,   851, -2954, -2954, -2954,
   -2954,  2083, -2954, -2954, -2954,  1223,  2001, -2954, -2954, -2954,
    2075, -2954,  2081, -2954, -2954, -2954, -2954, -2954, -2954,  2053,
    2060, -2954, -2954, -2954,   125,  1986,  1999,  1264,    94, 62152,
    2031,  1860,  2460, 18892,  1041,   803,  2243,  2086, -2954,   884,
    1678, -2954, 48531,  3543,   730,  2039, -2954,   196,  1860, -2954,
    2413,  1678,  2056,  2489, -2954, 62152, -2954, -2954,   716, -2954,
    2310, 62152,  2089, -2954, -2954, 46096,  1920,  4216, 24524, 66535,
    1042,  1092, -2954,  2589,  2254,  2161, -2954, -2954, -2954, -2954,
   -2954,  2098,   -40,  2100, 10207,  2091, -2954, -2954, -2954, -2954,
   -2954, -2954, 43960, 43960, 62152,  2273, -2954, -2954,  2093,  2101,
   35864,  2551,  2105, -2954, 14303, -2954,  2419, -2954, 29530, -2954,
    1699,  2109,  1699, 66535,  1699, -2954, -2954, 43960, 19916, -2954,
   -2954, 39949,  2428,  3639,  3639,  8412,  1120, -2954,  3639, 19916,
   19916,  3639,  3639, 19916, -2954,  9693,   618, -2954,  1129, -2954,
   39362, -2954, 67951, -2954, -2954,  1969,   884,  1969, -2954, -2954,
    2106, -2954, -2954, -2954,  2166, -2954, -2954,  1139,  2531,  2020,
   19916, -2954, -2954,  2114, 34403, -2954, -2954, -2954, -2954, 34403,
     962, -2954,  2284,  1998,  2118, -2954, -2954, -2954, -2954, -2954,
   -2954, 39402, -2954,    27, 19916, -2954,   143,  3244, -2954, -2954,
   -2954, -2954,  1998,  1158, -2954, 52427,  2588,  2483, -2954, -2954,
   43960, -2954, -2954,  2044,  2044, -2954, -2954,  2271, -2954, -2954,
    2124, -2954, -2954,  1223,   449, 38299, 52427, 52427, -2954, -2954,
    2127, -2954, -2954, -2954, -2954,   -98,  2515,  1141,   842, -2954,
     697,   697, 43960, -2954, 52427,  2492, 48531, -2954,  2597,  2134,
   52427,  1860,  1096,  1096, -2954,  2288, -2954,  2289, -2954, -2954,
    2602,   264, -2954, 19404,  1143, -2954,  2399, 52427, -2954, -2954,
   31967, -2954,  4216,  1145, -2954, -2954,  2145,  2150, -2954,  1969,
   19916,  2151, 19916, -2954, 22988,  2614,  2152, -2954, 19916,  2212,
   26572, -2954, 19916, -2954, 52427, 57297,   -14,  2157, 57297, -2954,
   -2954, -2954, -2954, -2954, 19916, -2954,  3639,  3639,  3639, 19916,
   -2954, 19916, -2954, -2954, -2954,  2358,  2273, -2954,  2273, 19916,
     697,   634,  3552, 62152,   -15, -2954, 43960, -2954, -2954, -2954,
   52427, -2954, 45122, -2954,   962,   -38,  2162, 19916, 39442,  2394,
   -2954, -2954,  2430, -2954,  2486, -2954,  2229,   480,  2246, -2954,
   -2954, -2954, -2954,  1264,   884,  1678,  2039,  2056, -2954,  2177,
   52427,   697,   842,   657, -2954, -2954, -2954, -2954, -2954, -2954,
   -2954, -2954, -2954, -2954, -2954, -2954, -2954,   697,  2609,  2398,
    2617,   697, 43960, -2954, -2954,  1964, 19916,    86, -2954,  1152,
    2608, -2954, -2954,  2681,  2273,  2184, 22988,  2185, -2954,  2187,
   62152, 43960,  2332, -2954, -2954,  2190, -2954, -2954,   125, 19916,
   -2954, 40297,  2195,  2196,  2636,  1839,  2212,  2212, -2954,   462,
   -2954, -2954,  2611, 31967,  2574,  1158,   962,  2216,  1159, -2954,
   -2954, -2954, -2954, -2954,  2206, -2954, 39789,  2442,   763,  2429,
    2162, 19916, -2954,  2280, -2954, -2954, -2954,  2675, -2954, -2954,
   48531,  2215,  2056,  2039,  1860,  2056,  2433, -2954,  2439, -2954,
    2221, 39829, 62152, 62152,  1678, 31967, 62152,  2217,  2212, -2954,
    2224, -2954, -2954, -2954, 51453, -2954,  2226,  2228, -2954, -2954,
   -2954, 19916,   176, -2954, -2954,  2285, 52427,  1169,    50,  2430,
   38299, -2954, 45122,  1377,   -38,  2528, -2954, -2954, -2954, -2954,
     174,  2457, -2954,  2458, -2954, 43960, -2954,   697, 48531, -2954,
   -2954, -2954, -2954, -2954, -2954, 31967,  2608, -2954,   731, -2954,
    1543, -2954,   731, -2954, -2954, -2954, -2954,   884, -2954,  1501,
   23500, 23500, 23500,  2238,   697, -2954,  1543, -2954,  2364,  2429,
   -2954, -2954, -2954, -2954, -2954,   658,   658,  2628, -2954,  2302,
   -2954,  2056,  1171, 62152,  1780, -2954,  1780, 25036,  2390,   138,
   42806,  2607, -2954,  2607,  2607, -2954, -2954, -2954, 36838, -2954,
   -2954,  2727, -2954,   165, -2954, -2954, -2954,  1678,   731, -2954,
   -2954,  2717, -2954, -2954, -2954, -2954, -2954,   122, -2954, -2954,
   -2954,  1543,   962, -2954, -2954, -2954,  1543,  1780, 24012,  2396,
   -2954,  2465, -2954, -2954, -2954, -2954, -2954, -2954, -2954
};

/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
   Performed when YYTABLE does not specify something else to do.  Zero
   means the default is an error.  */
static const yytype_int16 yydefact[] =
{
     154,   266,     0,  1349,  1348,  1418,   266,     0,  1298,   266,
     488,   404,     0,  1439,  1418,     0,   266,     0,   154,     0,
       0,     0,     0,     0,     0,   548,   551,   549,     0,     0,
       0,   266,   588,     0,  1438,   266,     0,     0,   580,   550,
       0,  1397,     0,     0,     0,     0,     0,     2,     4,     5,
       6,     7,     8,     9,    22,    10,    11,    12,    18,    13,
      14,    15,    16,    17,    19,    20,    21,    24,    23,    25,
      26,  1307,    27,    28,    29,    30,     0,    31,    32,    33,
      34,    35,   524,   511,   593,   523,     0,     0,   153,   692,
     531,    36,    37,    38,    39,    40,    41,    42,  1437,    43,
     265,   264,   258,     0,     0,     0,     0,     0,  1417,     0,
       0,   259,   110,  1463,  1464,  1465,  1466,  1467,  1468,  1469,
    1470,  1471,  1472,  1473,  1832,  1474,  1475,  1476,  1477,  1478,
    1833,  1479,  1480,  1481,  1778,  1779,  1834,  1780,  1781,  1482,
    1483,  1484,  1485,  1486,  1487,  1488,  1489,  1782,  1783,  1490,
    1491,  1492,  1493,  1494,  1784,  1835,  1785,  1495,  1496,  1497,
    1498,  1499,  1836,  1500,  1501,  1502,  1503,  1504,  1505,  1506,
    1507,  1508,  1837,  1509,  1510,  1511,  1512,  1513,  1514,  1515,
    1516,  1517,  1518,  1786,  1787,  1519,  1520,  1521,  1522,  1523,
    1524,  1525,  1526,  1527,  1528,  1529,  1530,  1531,  1532,  1533,
    1534,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,  1543,
    1544,  1545,  1546,  1788,  1547,  1548,  1549,  1550,  1551,  1789,
    1552,  1553,  1554,  1790,  1555,  1556,  1557,  1838,  1839,  1558,
    1559,  1791,  1841,  1560,  1561,  1792,  1793,  1562,  1563,  1564,
    1565,  1566,  1567,  1568,  1569,  1570,  1842,  1571,  1572,  1573,
    1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,  1582,  1843,
    1794,  1583,  1584,  1585,  1586,  1587,  1795,  1796,  1797,  1588,
    1844,  1845,  1589,  1846,  1590,  1591,  1592,  1593,  1594,  1595,
    1596,  1847,  1597,  1848,  1598,  1599,  1600,  1601,  1602,  1603,
    1604,  1605,  1798,  1606,  1607,  1608,  1609,  1610,  1611,  1612,
    1613,  1614,  1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,
    1623,  1799,  1850,  1800,  1624,  1625,  1626,  1801,  1627,  1628,
    1851,  1629,  1802,  1630,  1803,  1631,  1632,  1633,  1634,  1635,
    1636,  1637,  1638,  1639,  1640,  1804,  1852,  1641,  1853,  1805,
    1642,  1643,  1644,  1645,  1646,  1647,  1648,  1649,  1650,  1651,
    1652,  1653,  1654,  1806,  1854,  1655,  1656,  1807,  1657,  1658,
    1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,  1667,  1668,
    1808,  1669,  1670,  1671,  1672,  1673,  1674,  1675,  1676,  1677,
    1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,  1687,
    1855,  1688,  1689,  1690,  1809,  1691,  1692,  1693,  1694,  1695,
    1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1704,  1705,
    1706,  1707,  1708,  1709,  1810,  1710,  1711,  1712,  1856,  1713,
    1714,  1811,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,  1812,  1728,  1813,  1729,  1730,
    1731,  1732,  1858,  1733,  1734,  1735,  1736,  1737,  1738,  1814,
    1815,  1739,  1740,  1816,  1741,  1817,  1742,  1743,  1818,  1744,
    1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,  1754,
    1755,  1756,  1757,  1758,  1759,  1760,  1819,  1820,  1761,  1859,
    1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,  1771,
    1772,  1773,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,
    1829,  1830,  1831,  1774,  1775,  1776,  1777,     0,   111,   112,
    1246,  1446,     0,  1224,   110,  1791,  1798,  1812,  1296,  1297,
     111,   261,   487,     0,     0,     0,     0,     0,     0,   216,
       0,   398,   397,     0,  1287,   403,     0,     0,     0,   114,
     106,  1657,   113,  1223,   104,  1417,     0,     0,   422,   423,
       0,   433,     0,   415,   420,   416,     0,   442,   435,   443,
     424,     0,   414,   436,   425,   413,     0,   444,   430,   418,
       0,     0,     0,   262,   225,   404,     0,   154,     0,  1311,
    1312,  1313,  1314,  1315,  1316,  1321,  1317,  1318,  1319,  1320,
    1322,  1323,  1324,  1325,  1326,  1302,  1307,  1327,  1328,  1329,
    1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,
    1340,     0,  1298,     0,     0,  1784,  1835,  1789,     0,  1802,
       0,  1805,  1806,  1691,  1813,  1816,  1817,  1818,  1819,     0,
     760,   113,   108,   744,     0,   526,   696,   706,   744,   749,
    1014,   772,  1015,     0,   115,  1383,  1382,  1378,  1377,   193,
    1261,  1426,  1560,  1600,  1708,  1814,  1739,  1442,  1427,  1421,
    1425,   263,   587,   585,     0,  1195,  1560,  1600,  1695,  1708,
    1814,  1357,  1361,     0,   260,  1444,  1431,     0,  1432,   113,
     532,   579,     0,   267,  1396,     0,  1401,     0,  1671,   559,
     562,  1255,   560,   524,     0,     1,   154,  1306,  1411,     0,
     160,     0,   583,   583,     0,   583,     0,   516,     0,     0,
     524,   519,   523,   693,  1441,  1814,  1739,  1430,  1433,  1569,
       0,     0,  1569,     0,  1569,     0,  1569,     0,     0,  1420,
    1179,     0,  1225,   116,     0,     0,     0,   369,   402,   401,
     400,   399,   404,  1569,  1271,     0,   451,   452,     0,     0,
       0,     0,     0,   204,  1282,   107,   105,     0,  1415,   431,
     432,     0,   421,   417,   419,   256,     0,  1569,  1250,   441,
     437,  1569,   441,  1217,  1569,     0,     0,   217,     0,   397,
    1304,  1341,  1889,  1890,  1891,  1892,  1893,  1894,  1895,  1896,
    1898,  1897,  1899,  1900,  1901,  1902,  1903,  1904,  1905,  1906,
    1907,  1908,  1909,  1910,  1911,  1912,  1913,  1914,  1915,  1916,
    1917,  1920,  1918,  1919,  1921,  1922,  1923,  1924,  1925,  1926,
    1927,  1928,  1929,  1930,  1931,  1932,  1933,  1935,  1934,  1936,
    1937,  1938,  1939,  1940,  1941,  1942,  1943,  1944,  1945,  1946,
    1947,  1948,  1949,  1950,  1951,  1952,  1953,  1954,  1955,  1956,
    1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,
    1967,  1968,  1969,  1342,  1343,  1355,     0,  1356,  1346,  1310,
     154,     0,   486,  1295,  1379,     0,     0,     0,  1135,   744,
     749,     0,     0,   762,     0,  1150,     0,  1156,     0,     0,
       0,   744,   531,     0,   706,   761,   109,     0,   742,   743,
     634,   634,   588,     0,   569,   754,     0,     0,   757,   755,
       0,   757,     0,     0,     0,   757,   753,   714,     0,   634,
       0,   742,   745,   634,     0,   764,  1301,     0,     0,     0,
       0,     0,  1424,  1422,  1423,  1428,     0,     0,     0,  1227,
    1229,  1230,  1103,  1240,  1000,     0,  1779,  1780,  1781,  1171,
    1782,  1783,  1785,  1786,  1787,   954,  1534,  1788,  1238,  1790,
    1792,  1793,  1795,  1796,  1797,  1798,  1799,  1800,     0,  1239,
    1803,  1636,  1808,  1809,  1811,  1814,  1815,  1237,  1820,     0,
       0,     0,  1206,  1126,     0,     0,     0,   999,     0,  1172,
    1180,   995,     0,     0,   808,   809,   830,   831,   810,   836,
     837,   839,   811,     0,  1202,   888,   983,  1190,  1002,  1033,
    1004,  1013,   991,  1070,   984,     0,   994,   986,  1198,   569,
    1196,     0,   987,  1226,   569,  1194,  1360,  1358,  1364,  1359,
       0,     0,     0,     0,     0,   109,  1403,  1404,  1395,  1393,
    1394,  1392,  1391,  1398,     0,  1400,  1307,  1121,  1123,     0,
     561,     0,     0,     0,   514,   513,     3,  1255,     0,     0,
       0,     0,   581,   582,     0,     0,     0,     0,     0,     0,
       0,     0,   677,   608,   609,   611,   674,   678,   686,     0,
       0,     0,     0,     0,   520,     0,  1440,  1436,  1434,     0,
       0,     0,   138,   138,     0,     0,     0,     0,     0,    98,
      47,    91,     0,     0,     0,     0,   239,   252,     0,     0,
       0,     0,     0,   249,     0,     0,   232,   226,   228,    49,
       0,   138,     0,    45,     0,     0,     0,    51,  1418,     0,
     486,  1178,     0,   120,  2002,  2003,  2004,  2005,  2006,  2007,
    2008,  2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,
    2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,  2026,  2027,
    2028,  2029,  2030,  2031,  2032,  2033,  2034,  2035,  2036,  2037,
    2038,  2039,  2040,  2041,  2042,  2043,  2044,  2045,  2046,  2047,
    2048,  2049,  2050,  2051,  2052,  2053,  2054,  2055,  2056,  2057,
    2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,  2066,  2067,
    2068,  1956,  2069,  2070,  2071,  2072,  2073,   118,   119,   122,
     121,   123,   117,   110,     0,  1970,  1832,  1833,  1834,  1835,
    1785,  1836,  1837,     0,  1838,  1839,  1791,  1841,  1842,  1843,
    1844,  1845,  1846,  1847,  1848,  1798,  1850,  1851,  1852,  1853,
    1854,  1855,  1996,  1856,  1812,  1858,  1818,     0,  1859,  1006,
     111,  1243,  1129,   593,  1127,  1256,     0,     0,     0,     0,
     484,     0,     0,     0,     0,  1267,     0,     0,  1569,   200,
    1569,   369,     0,  1569,   369,  1569,     0,  1569,   205,     0,
    1281,  1284,     0,   434,     0,   429,   427,   426,   428,     0,
       0,  1251,   439,   440,     0,   408,     0,     0,   410,     0,
       0,   222,     0,   220,     0,   404,   154,     0,   233,  1351,
    1352,  1350,     0,     0,  1309,   236,  1345,  1354,  1344,  1353,
    1308,   253,  1303,     0,     0,  1299,   474,     0,     0,     0,
       0,  1136,   860,   861,   862,   863,   870,   871,   868,   869,
     864,   865,   858,   859,   866,   867,   856,   857,  1145,  1137,
    1138,  1139,  1140,  1141,  1142,  1143,  1144,     0,     0,   705,
     703,     0,     0,     0,     0,     0,     0,  1172,     0,   958,
     984,     0,     0,     0,  1121,  1155,     0,     0,     0,     0,
       0,     0,  1121,  1161,     0,     0,   728,   740,     0,   627,
     633,   704,   702,     0,  1195,   697,     0,   774,   754,     0,
     753,     0,     0,   756,   750,     0,   751,     0,     0,     0,
       0,   752,     0,     0,     0,     0,   700,     0,   740,     0,
     701,   771,  1385,  1384,  1380,  1367,  1375,   194,     0,  1247,
    1860,  1861,  1862,   818,  1863,   847,   825,   847,   847,  1864,
    1865,  1866,  1867,   814,   814,   827,  1868,  1869,  1870,  1871,
    1872,   815,   816,   852,  1873,  1874,  1875,  1876,  1877,     0,
       0,  1878,   847,  1879,   814,  1880,  1881,  1882,   819,  1883,
     782,  1884,     0,  1885,   817,   783,  1886,   855,   855,  1887,
       0,   842,  1888,  1248,  1249,     0,  1132,   792,   800,   801,
     802,   803,   828,   829,   804,   834,   835,   805,   887,     0,
     814,   154,  1429,  1443,     0,  1126,   992,   846,   833,  1170,
       0,   841,   840,     0,  1126,   823,   822,   821,   997,     0,
     820,  1083,   847,   847,   845,   913,   824,     0,     0,     0,
       0,     0,   851,     0,   849,   914,   892,   893,     0,  1205,
    1214,  1121,  1125,     0,   995,  1121,     0,   988,   989,     0,
    1073,  1075,     0,     0,  1173,  1228,   996,     0,  1233,     0,
       0,   887,   887,  1201,  1103,     0,  1093,  1096,     0,     0,
    1100,  1101,  1102,     0,     0,     0,  1193,     0,  1111,  1113,
       0,     0,   929,  1109,     0,   932,     0,     0,     0,     0,
    1097,  1098,  1099,  1089,  1090,  1091,  1092,  1094,  1095,  1107,
    1088,   910,     0,   985,     0,  1036,     0,   909,  1199,   695,
       0,  1231,   695,  1369,  1373,  1374,  1372,  1368,     0,  1363,
    1362,  1365,  1366,  1445,     0,  1405,  1389,     0,  1386,  1124,
     690,   563,  1219,     0,   567,  1412,  1410,   159,   158,     0,
       0,   536,   535,   602,   594,   596,   602,     0,   534,     0,
     650,   651,     0,     0,     0,     0,   683,   681,  1227,  1240,
     638,   612,   637,     0,     0,   616,     0,   642,   888,   676,
     518,   606,   607,   610,   517,     0,   679,     0,   689,     0,
     555,   557,   540,   554,   552,   537,   545,   677,   611,     0,
    1435,     0,     0,     0,     0,     0,  1569,     0,     0,   785,
      82,    63,   321,   137,     0,     0,     0,     0,     0,     0,
       0,    90,    87,    88,    89,     0,     0,     0,     0,  1247,
     237,   238,   251,     0,   242,   243,   240,   244,   245,     0,
       0,   230,   231,     0,     0,     0,     0,   229,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1419,  1413,  1174,
    1179,   593,   593,   593,     0,   591,   592,     0,     0,     0,
     473,   367,   377,     0,     0,     0,  1271,     0,     0,     0,
       0,     0,   204,     0,   404,  1272,  1270,  1274,  1273,  1275,
    1540,   188,     0,     0,   199,   196,     0,   366,   340,     0,
       0,  1286,     0,     0,     0,     0,     0,  1569,   356,  1283,
       0,  1416,   257,   441,  1252,     0,   438,   441,  1218,     0,
     441,   224,     0,     0,  1305,  1347,   234,   254,   235,   255,
     486,   481,   509,     0,   489,   494,   471,     0,   471,     0,
     491,   495,   471,   490,     0,   471,   485,  1381,     0,  1029,
       0,  1019,     0,     0,   763,     0,     0,  1020,   960,   961,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   978,   977,
    1021,   767,     0,   770,     0,     0,  1153,  1154,     0,  1022,
       0,     0,  1160,     0,     0,     0,  1027,     0,   707,     0,
       0,     0,   622,   626,   629,     0,   632,   569,   525,  1560,
    1600,     0,   580,   580,   580,   578,   568,     0,   654,     0,
       0,   729,     0,     0,   731,   733,     0,     0,   736,   713,
     712,     0,     0,     0,     0,   775,     0,  1223,     0,     0,
     195,     0,     0,     0,   800,     0,     0,     0,   790,   786,
       0,   872,   873,   874,   875,   876,   877,   878,   879,   806,
    1260,     0,   812,  1265,  1266,  1263,  1259,  1262,  1264,     0,
       0,     0,     0,  1169,  1165,     0,     0,     0,     0,  1078,
    1080,  1082,     0,   844,   843,  1087,  1093,  1096,  1100,  1101,
    1102,  1097,  1098,  1099,  1089,  1090,  1091,  1092,  1094,  1095,
       0,  1115,     0,  1069,     0,     0,     0,     0,     0,     0,
    1204,     0,   956,     0,   990,  1001,     0,     0,  1076,  1005,
    1206,  1181,     0,     0,     0,  1236,  1235,   889,   898,   901,
     933,   934,   905,   906,   907,   911,  1258,  1257,  1200,     0,
    1192,     0,     0,   890,   915,   920,     0,  1162,   950,     0,
     938,     0,   928,     0,   936,   940,   916,   931,     0,   912,
       0,  1193,  1112,  1114,     0,  1110,     0,   902,   903,   904,
     894,   895,   896,   897,   899,   900,   908,  1086,  1084,  1085,
       0,  1179,     0,  1191,     0,     0,  1038,     0,     0,   935,
    1197,     0,   774,   593,   774,     0,   887,  1406,  1255,  1399,
    1388,  1255,  1122,  1220,  1254,   565,     0,     0,     0,  1408,
     145,   149,     0,  1180,   179,   181,   695,     0,   600,   601,
     605,     0,     0,   605,   584,   533,  1809,  1691,     0,     0,
       0,     0,   643,   684,     0,   675,   640,   641,     0,   639,
    1227,   644,  1226,   645,   648,   649,   617,  1215,   685,   687,
       0,   680,     0,  1221,   539,   558,     0,     0,     0,     0,
       0,   522,   521,   691,     0,    48,     0,  1569,    65,     0,
       0,     0,     0,     0,     0,   271,     0,   371,   271,   103,
    1569,   441,  1569,   441,  1467,  1535,  1709,     0,    61,   345,
      94,     0,   131,   374,     0,   330,    84,    99,   124,     0,
       0,   227,    50,   241,   246,   127,   250,   247,  1291,   248,
     138,     0,    46,     0,   125,     0,  1289,     0,     0,    52,
     129,  1293,  1420,     0,  1178,     0,   591,   591,   591,     0,
    1128,     0,     0,     0,  1130,  1131,   459,   472,     0,   368,
       0,   483,   462,   463,   473,  1269,     0,   200,   369,     0,
     369,     0,     0,  1271,     0,     0,   190,   186,     0,     0,
       0,     0,   367,   359,   357,   390,     0,   364,   358,     0,
       0,   316,     0,  1461,     0,     0,     0,     0,   453,     0,
       0,   204,     0,   209,     0,     0,     0,   407,  1253,   409,
       0,   411,   223,   221,  1300,   478,     0,   477,   482,   476,
     480,   475,     0,   470,     0,   504,     0,     0,     0,     0,
       0,     0,     0,     0,  1016,  1134,     0,  1148,  1147,   959,
     966,   969,   973,   974,   975,  1149,     0,     0,     0,   970,
     971,   972,   962,   963,   964,   965,   967,   968,   976,   772,
       0,     0,   766,  1158,  1157,  1151,  1152,     0,  1024,  1025,
    1026,  1159,     0,     0,   741,   620,   618,   621,   623,   619,
       0,     0,   774,   580,   580,   580,   580,   577,     0,     0,
       0,   773,     0,   671,   735,     0,   759,     0,   732,     0,
       0,   723,     0,   730,   779,   746,     0,     0,   748,  1376,
     796,     0,   791,   787,     0,     0,     0,   797,     0,     0,
       0,     0,     0,     0,     0,  1133,   586,   993,     0,     0,
       0,  1166,     0,   955,   813,   826,     0,  1081,  1003,     0,
    1104,  1068,   854,   853,   855,   855,     0,     0,     0,  1213,
       0,  1122,  1072,  1074,  1214,   998,   838,   887,     0,     0,
       0,     0,     0,     0,     0,   939,   930,     0,   937,   941,
       0,     0,     0,   924,     0,     0,   922,   951,   918,     0,
       0,   952,  1178,     0,  1182,     0,     0,  1037,  1046,   698,
     694,   654,   591,   654,     0,  1370,  1390,  1387,   566,   154,
    1409,     0,   168,     0,     0,     0,     0,   171,   185,   182,
    1408,     0,     0,   595,   597,     0,  1105,   605,   599,   647,
     646,     0,   615,   682,   613,     0,   688,     0,   556,     0,
     542,     0,   716,     0,     0,     0,     0,     0,   320,     0,
       0,     0,   271,     0,   379,     0,   386,     0,     0,   371,
     352,    83,     0,     0,     0,    57,   102,    75,    67,    53,
      81,     0,     0,    86,     0,    79,    96,    97,    95,   100,
       0,   281,   306,     0,     0,   317,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   486,  1179,  1175,
    1179,     0,     0,     0,   593,   589,   590,  1007,     0,   458,
     507,   508,   506,   232,   378,     0,     0,   198,   366,     0,
    1286,     0,     0,  1268,   404,     0,   191,     0,   189,     0,
     200,   369,     0,   344,   340,   365,   338,   337,   339,     0,
    1462,   225,     0,  1456,   369,  1285,     0,     0,   454,     0,
     448,     0,   206,     0,   207,   201,     0,     0,  1280,   441,
       0,   466,   505,   510,   492,   497,     0,   503,   499,   498,
     493,   501,   500,   496,  1017,  1028,  1146,     0,     0,     0,
       0,   765,   768,     0,  1023,  1018,   739,     0,     0,   654,
       0,     0,     0,     0,   571,   570,   576,     0,     0,  1040,
     734,     0,     0,     0,   721,   711,   717,     0,     0,     0,
       0,   777,   776,   747,   800,     0,   780,   800,     0,   800,
       0,   798,     0,   807,   880,   881,   882,   883,   884,   885,
     886,   832,     0,  1168,  1164,  1077,  1079,  1116,   850,   848,
    1203,  1121,  1208,  1210,     0,     0,     0,  1071,   957,  1234,
     891,     0,     0,   921,  1163,   942,     0,     0,     0,   917,
    1104,     0,     0,     0,     0,     0,   926,     0,  1186,  1179,
       0,  1185,     0,     0,     0,     0,  1012,   699,   671,     0,
     671,     0,     0,  1407,     0,  1402,   146,   147,   148,     0,
       0,     0,   163,   140,     0,     0,   180,   168,   156,   603,
     604,     0,   598,   614,  1216,  1222,   541,     0,   995,     0,
       0,   538,     0,   132,   271,     0,     0,    64,     0,   388,
     332,   380,   363,   347,     0,     0,     0,   272,     0,   405,
       0,     0,   353,     0,     0,     0,     0,   333,     0,     0,
     292,     0,     0,   363,     0,   370,   288,   289,     0,    56,
      76,     0,    72,     0,   101,     0,     0,     0,     0,     0,
      59,    71,     0,    54,     0,   441,   441,    62,  1247,  1860,
    1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1869,  1980,
    1870,  1871,  1872,  1873,  1874,  1875,  1876,  1877,  1989,  1878,
     278,  1879,  1636,  1880,  1881,  1882,  1883,  1884,     0,  1885,
     783,  1886,  1887,  2065,  1888,  1089,  1090,   276,   277,   373,
     273,  1248,   274,   381,   275,     0,   376,   331,   128,  1292,
       0,   126,     0,  1290,   135,   133,   130,  1294,  1414,     0,
       0,  1010,  1011,  1008,   591,     0,     0,   486,   465,     0,
       0,  1461,     0,     0,     0,     0,  1569,     0,   187,     0,
    1286,   197,   366,     0,   396,   316,   391,     0,  1461,  1459,
       0,  1286,  1455,     0,   445,     0,   211,   212,     0,   210,
       0,     0,     0,   412,   479,     0,   502,   979,     0,     0,
       0,     0,   630,     0,   636,   671,   575,   574,   573,   572,
     653,  1510,  1792,  1690,     0,   657,   652,   655,   660,   662,
     661,   663,   659,   670,     0,   673,   758,  1117,  1119,     0,
       0,     0,     0,   722,     0,   724,     0,   726,     0,   778,
     794,     0,   795,     0,   793,   788,   799,  1167,  1211,  1212,
    1207,     0,   888,   948,   946,   943,     0,   944,   925,     0,
       0,   923,   919,     0,   953,     0,     0,  1183,     0,  1032,
       0,  1035,  1049,  1045,  1044,  1040,  1007,  1040,  1371,   564,
     167,   144,   170,   169,     0,  1180,   177,     0,     0,   168,
       0,   172,   455,     0,     0,   553,   715,   546,   547,     0,
     384,    66,     0,   363,     0,   271,   349,   348,   351,   346,
     350,     0,   406,     0,     0,   290,     0,   297,   335,   336,
     334,   291,   363,   369,   293,     0,     0,     0,    68,    58,
      55,    60,    69,     0,     0,    70,    73,   779,    85,    78,
    1247,  1989,  1998,     0,     0,     0,     0,     0,  1177,  1176,
       0,   461,   460,   457,   468,   232,     0,     0,   340,  1458,
       0,     0,   450,   203,     0,     0,   366,   192,     0,     0,
       0,  1461,     0,     0,   268,     0,   313,     0,   218,  1460,
       0,     0,  1447,     0,     0,   208,     0,     0,  1278,  1279,
       0,   467,   980,     0,   981,   769,     0,     0,   628,  1040,
       0,     0,     0,   664,   658,     0,  1039,  1041,     0,   625,
    1120,   718,     0,   720,     0,   744,   593,     0,   744,   727,
     789,   781,  1209,  1030,     0,   945,   949,   947,   927,  1179,
    1187,  1179,  1184,  1034,  1048,  1051,   673,  1232,   673,     0,
       0,   155,     0,     0,   152,   139,   157,  1106,   543,   544,
       0,   271,     0,   362,   385,   302,   280,     0,     0,     0,
     287,   294,   395,   296,     0,    77,    93,     0,     0,   375,
     136,   134,  1009,   486,     0,  1286,   316,  1455,   447,     0,
       0,     0,   340,   225,  1457,   329,   322,   323,   324,   325,
     326,   327,   328,   343,   342,   314,   315,     0,     0,     0,
       0,     0,   449,   202,   213,  1280,     0,   174,   183,     0,
     174,   982,   631,     0,   673,     0,     0,     0,   656,     0,
       0,   672,     0,   529,  1118,     0,   710,   708,   591,     0,
     709,     0,     0,     0,     0,   593,   625,   625,   141,     0,
     142,   178,     0,     0,     0,   369,   387,   361,     0,   354,
     300,   299,   301,   305,     0,   303,     0,   319,     0,   312,
     280,     0,    80,     0,   382,   456,   464,     0,   270,  1449,
     366,     0,  1455,   316,  1461,  1455,     0,  1452,     0,   446,
       0,     0,     0,   176,  1286,     0,   176,     0,   625,   666,
       0,   665,  1043,  1042,   627,   719,     0,     0,  1031,  1189,
    1188,     0,  1055,   528,   527,     0,     0,     0,     0,   395,
       0,   341,     0,     0,   302,     0,   295,   392,   393,   394,
       0,   308,   298,   309,    74,    92,   383,     0,   366,  1450,
     269,   219,  1448,  1453,  1454,     0,   174,   173,   602,   175,
     774,   184,   602,   635,   530,   667,   624,     0,   725,  1050,
       0,     0,     0,     0,     0,   151,   774,   162,     0,   312,
     360,   355,   279,   304,   318,     0,     0,     0,   310,     0,
     311,  1455,     0,   176,   605,  1276,   605,  1778,  1511,  1746,
       0,  1067,  1056,  1067,  1067,  1047,   143,   150,     0,   271,
     284,     0,   283,     0,   372,   307,  1451,  1286,   602,   164,
     165,     0,  1060,  1059,  1058,  1062,  1061,     0,  1054,  1052,
    1053,   774,   389,   282,   286,   285,   774,   605,     0,     0,
    1064,     0,  1065,   161,  1277,   166,  1057,  1063,  1066
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2954, -2954, -2954,  2069,    93,    95,  -715, -1073,  -832, -1097,
   -2954,   -59,    96, -2954, -2954,   240, -2954,  1052, -2954,   229,
    -572,   601, -2954,  1144, -2954, -2954,    32,   565,    97,    98,
    2167,  3501,  2540,  3572,   796,  -504,  -719, -1202,  -927,    18,
   -2954, -2954, -2954, -2954, -2954,  -652,   544, -1103, -2954,   488,
   -2954, -2954, -2954, -2954,  -153,   210, -2954,     4, -2110, -2826,
    -516, -2954,  -620, -2954,  -269, -2954,  -566, -2954,  -754,  -570,
    -608, -2726, -1047, -2954,  1712,  -319, -2954,   639, -2954, -2459,
   -2954, -2954,   621, -2954, -1051, -2954, -2186,   205,  -555, -2559,
   -2511, -2105,  -725,   285,  -556,   260, -2070,  -899, -2954,   648,
   -2954,  -540, -2954,  -703, -2034,    99, -2693, -1632,    -7, -2954,
   -2954, -2954,  -547, -2954, -2460,   100,  1561, -2047,   102, -1627,
   -2954, -2954, -1641,   206, -2378,  -314, -2954,  2072,     5, -2045,
     105, -2954, -2954,   106,    19,  -485,   338, -2954,   107, -2954,
   -2954,  1539,  -731, -2954, -2954,   108,  1013, -2954, -2482, -2954,
    -442, -2954,  -488,  -486, -2954, -2954,     8,  -808,  1527, -2954,
   -2954, -2954,     6, -2954,  -416, -2954, -2954, -2493, -2954,    22,
   -2954, -2954, -2954, -2954, -2954,  -353,   353, -2954, -2954,  -489,
   -2520,  -440, -2954, -2915, -2953, -2954, -2954,  -591, -2935, -2017,
     109,    92,  1514,   110,   111, -2954,   373,   115, -1043,    30,
     289,   -44,   -43, -2954,   -34, -2954, -2954, -2954,   698, -2954,
   -2954,    16,    57,  1793, -2954,  -954, -2954, -1456,   911, -2954,
    1945,  1948, -2144,  -701,   -63, -2954,   738, -1617, -2053,  -532,
    1166,  1781,  1783,   506, -2489, -2954,  -476, -2954,   134, -2954,
   -2954,   732,  1207, -1512, -1494, -2954, -2124, -2954,  -395,  -280,
   -2954, -2954, -2954, -2954, -2954, -2443, -2291,  -518,  1178, -2954,
    1790, -2954, -2954, -2954, -2954,    36, -1450,  2848,   772,    46,
   -2954, -2954, -2954, -2954,   208, -2954,   950,  -104, -2954,  2247,
    -548,  -627,  1997,    84,   327, -1752,    34,  2257,   548, -2954,
   -2954,   550, -1923, -1367,   505,  -194,   951, -2954, -2954, -1198,
   -2954, -1865, -1079, -2954, -2954,  -791,  1430, -2954, -2954, -2954,
    1616,  1667, -2954, -2954,  2391,  2593, -2954,  -767,  3271,   496,
    -932,  2027,  -846,  2028,  -823,  -836,  -815,  2029,  2034, -1486,
    5117,  -751,  2811, -2142, -2954,  1063,    26, -2954, -1338,    61,
   -2954, -2954, -2954, -2954, -2672, -2954,  -372, -2954,  -370, -2954,
   -2954, -2954, -1581, -2905, -1611, -2954,  3567,   882, -2954, -2954,
     484, -2954, -2954, -2954, -2954, -1476, -2954,  5894,   781, -2954,
   -1964, -2954, -2954,  -870,  -546,  -552,  -914, -1185, -1856, -2954,
   -2954, -2954, -2954, -2954, -2954, -1302, -1720,  -125,   843, -2954,
   -2954,   931, -2954, -2954, -2954, -1702, -2039, -2954, -2954, -2954,
     848,  1509,   156,  -662, -1572, -2954,   891, -2300, -2954, -2954,
     487, -2954,  -481, -1024, -2353,  2274,    17, -2954,  -398, -2462,
   -2954, -2954,  -561, -2613, -1001,  -723, -2954,   120,  1602,    23,
   -2954,   121,  1286, -2954, -2954, -2954,   126, -2954,   638,   129,
     635, -2954,   993, -2954,   795,   130, -2954, -2954,    85,  2816,
       7, -2912
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
       0,    46,    47,    48,   579,   580,  1784,  1733,  2867,  1118,
    1723,  1315,   581,  2527,  2528,  2529,  2177,  1099,  3302,  2178,
    1100,  1101,  2531,    52,    53,    54,   110,  1130,   582,   583,
     518,   630,   989,   632,   990,  1556,   733,  1207,  1208,   584,
    2569,  2234,  3095,  2620,  3096,  2294,  2228,  1325,  2288,  1822,
    1765,  1326,   525,  1836,  2621,  2573,  1823,   585,  2516,  2869,
    3295,  2542,  3434,  2805,  2806,  3292,  3293,  2519,  2180,  3361,
    3362,  2600,  1714,  3356,  2253,  3233,  2184,  2165,  2807,  2261,
    3193,  2914,  2181,  2787,  2254,  3288,  1799,  2255,  3289,  3045,
    2256,  1762,  1788,  2520,  3363,  2185,  1763,  2515,  2870,  1702,
    2257,  3299,  2258,   536,  2791,   586,  2603,  1272,   520,   509,
     510,  1484,  1210,  1251,  1211,   587,   752,  1794,   588,  1265,
    1776,    62,  1279,  2273,  2274,  2927,  2928,   537,   589,  1785,
     590,  2587,  2588,   591,   592,  1036,  2472,  2099,   593,   570,
     571,   769,  1295,   572,    68,   594,  1301,  1302,   777,    70,
     698,  1317,   595,  1318,  1319,   866,    71,  2622,   868,   869,
      72,    73,   597,  3129,  2932,  1281,  1800,  2266,   538,   598,
    2752,  2101,  2475,  3284,    76,  3026,  2104,  1060,  3029,  3248,
    2745,  3024,  2476,  3323,  3378,  3027,  2105,  2106,  3249,  2107,
     599,   647,  1424,   600,   601,   931,  1956,   602,  1705,   603,
     991,    83,    84,   904,    85,  3039,    86,    87,  1680,  1681,
    1682,   677,   689,   690,  2097,  1397,  1906,   682,  1064,  1649,
     664,   665,  2223,   706,  1756,  1644,  1645,  2110,  2483,  1673,
    1674,  1073,  1074,  1894,  3263,  1895,  1896,  1390,  1391,  3138,
    1661,  1665,  1666,  2131,  2121,  1652,  2363,  2955,  2956,  2957,
    2958,  2959,  2960,  2961,   992,  2659,  3149,  1669,  1670,  1076,
    1077,  1078,  1678,  2141,    89,    90,  2082,  2459,  2460,   636,
    2972,  1414,  1683,  2663,  2664,  2665,  2976,  2977,  2978,   637,
     899,   900,   923,   918,  1404,  1914,   638,   639,  1871,  1872,
    2332,   925,  1908,  1924,  1925,  2671,  2385,  1485,  2166,  1486,
    1487,  1939,  1488,   993,  1489,  1515,   994,  1520,  1491,   995,
     996,   997,  1494,   998,   999,  1000,  1001,  1508,  1002,  1003,
    1532,  1941,  1942,  1943,  1944,  1945,  1946,  1947,  1948,  1949,
    1047,  1684,  1005,  1006,  1007,  1008,  1009,  1010,   641,  1011,
    1012,  1605,  2076,  2458,  2965,  3146,  3147,  2736,  3014,  3175,
    3275,  3393,  3421,  3422,  3448,  1013,  1014,  1550,  1551,  1552,
    1969,  1970,  1971,  1972,  2070,  1599,  1600,  1015,  2874,  1602,
    1992,  2968,  2969,  1048,  1383,  1543,  1253,  1254,  1499,  1357,
    1358,  1364,  1846,  1372,  1376,  1876,  1877,  1384,  2038,  1016,
    1963,  1964,  2402,  1510,  1017,  1132,  1555,  2731,  2073,  1603,
    2032,  1024,  1018,  1025,  1020,  1539,  1540,  2419,  2703,  2704,
    2002,  2138,  1632,  2143,  2144,   773,  1021,  1022,  1023,  1255,
     513,  1500,  3379,  1291,  1053,  1256,  2028,   604,   102,   605,
      93,   606,  1043,   686,  1044,  1046,   607,   658,   659,   608,
     671,   672,  1426,  1619,  1427,   609,    98,  1087,   660,   678,
     610,  3122
};

/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule whose
   number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     508,   694,  1019,   732,    58,    63,    74,    99,  1117,   770,
    1083,   919,  1260,  1212,   508,  1428,    88,  1375,    57,    66,
    1737,   707,    75,    92,   512,  1720,   596,  1748,  1633,  2113,
      81,   864,  1350,   511,    88,  1873,  2080,  1314,   512,  1262,
    1701,  1298,  1353,  1736,  1534,   711,   546,   640,  2215,  1711,
    1707,  1991,  1928,  1304,   712,  1352,  1635,   634,  2521,  1548,
    2488,  1320,  1753,  1354,  2478,  1609,   676,  2900,  1781,  2383,
    1612,   680,  2561,  2562,  2563,  2015,  2016,  2381,  1741,   508,
     508,  2875,   642,  2872,  2442,  2477,   901,  2902,  1804,   780,
     772,   922,   865,    49,  2514,    50,    51,    55,    56,    59,
      60,   692,    61,   512,   512,    64,    65,    67,    69,    77,
      78,    79,   640,   640,  1546,    80,   648,  2702,   673,  2918,
      91,    94,   634,   634,  -512,  2574,    95,   896,   717,    96,
      97,  2242,   708,   709,  1368,  2915, -1849,  2239,  1850,  2235,
     725,  1049,  -515,  1852, -1989, -1989,  2766,   642,   642,  -847,
    2771,  1119,  2133,  1123,   870,  1127,  2335,  2364, -1849,  2461,
   -1244,  2463,  2084,  1516,  3322, -1244,   943,  -852, -1241, -1241,
    2373,  -852,  2136,  -855,  1072,  1035,  -855,  1212,  2589,  1526,
    1292,  1292, -1840,  1511,  1512, -1975, -1975,   644,  1075,  3114,
   -1980, -1980,  2577, -1857,  2581,  2030, -1840, -1849,  1616,  2030,
    1524, -1998, -1998,   943,  2904, -1225, -2000, -2000,  3099,  1692,
   -1087,  2400, -1245,  3196,  -469,  2793,  1061,   761, -1087,   644,
   -1242, -1242,  -512,   943,  3459,  3118,   684,  2666,  2627,  2629,
    1292,  2632,   702, -1857,  -524, -1245,  -814,  3032,  2146,  -827,
    -515,  -842,   644,   644,  3064,   526,  2067,   644,  -524, -1108,
     699,  1285,  1359,  -524,  2068,  -648,  2796, -1108,  2596,  3209,
    1712,  3049,  3084,   526,  1613,  1308,   644,  2077,  3282,  2895,
     943,  1712,   704,  1721,  1308,   704,  1724,  1725,  3454,   943,
    2232,  2517,  1703,  2919,  2347,  -232,  1565,  2345,  1286,    82,
    -232,  1567,  3405,  1739,  3060,  3015,   902,  3017,  3460,  3443,
    1751,  1695,   703,  2638,  -524,  3309,   612,    82,   527,  1752,
     633,   522,  1703,  2221,  3115,  1038,  1212,  2809,  2739,  3397,
    -784,  1575,   864,  2549,  -524,    82,   527,  2780,  3238,  3116,
    1329,  3046,   922,   545,   693,  3326,  3239,  2738,  2348,  2740,
     700,  2139,  3141,  3176,   901,  3178,     3,     4,  3347, -1974,
   -1974,   662,  1062,  1577,  1565,  3390,  1068,  1650,  1566,  1567,
    2747,  1850,  3290,  1726,  1890,  1851,  1852,  2017,  2759,  2453,
    1731,  -524,  2163,  3382,  1614,   633,   633,   710,   704,   529,
    -524,   928,  1322,   611,  1735,  1637,  2543,    82,  3461,  1575,
    2810,  1565,   929,  1934,  1732,  1890,  3083,  1821,   643,  2544,
    3369,  3109,  2779,  3372,  1850,  3047,  1712,  -512,  1851,  1852,
     681,  3199,  2518,  3058,  2078,  2748,  2800,  3108,  3224,  1685,
    1686,  1577,  1565,   523,  3291,  -515,  1566,  1567,  3120,  2649,
    2164,  2930,  1070,   903,  2762,  2760,  1261,  1542,  3455,  2514,
    3412,  2514,   613,  -214,  2920,  2697,  2358,  2359,  2360,   663,
    1063,  -784,  3061,  2639,  1261,  3444,  2140,  1575,  1577,  1697,
    3438,  3413,  1713,  1651,  1287,  2801,  -668,  3254,  1293,  1293,
    3207,  1321,  2811,  1713,  2222,  1453,  -512,  1528,  1039,  2349,
    1040,  2802,  2346,  1710,  3191,  1554,   531,  3059,   532,  1577,
    3308,  3283,  2163,  1754,  -515,  3398,  1931,  1615,   877,  3436,
    3240,  2167,  3139,  3201,   531,  1727,   779,  3391,   942,  3185,
    2147,  1850,  3441,  1728,   535,  1851,  1852,  3117,  1293, -2002,
   -2002, -2002,   762,  2666,  3400,  2945,  1710,   705,  2896,  -524,
    1742,  1031,   535,  3197,   694,  2233,  3392,  1710,  1412,  1689,
    1962,  3462,  3094,  1638,  2308,  2911,  1534,  3124,  2789,  1791,
    2511,  1687,  1755,  3466,   736,   942,  2936,  2031,  1850,  2377,
    2923,  2444,  1851,  1852,   685,  1688,  1853,  1854,  1855,  2220,
   -1087,   863,  1991,  1636,  2790,  2336,  1698,   701,  1288,  2570,
    2571,   687,  2803,  2711,  2718,   694,   867,  3370,  2636,  1413,
     730,  2804,  -512,    88,   731,   730,  3050,   695,  1054,   731,
    2465,  1507,  1262,  2278,  1628,  1562,  2069,  2133,  1713, -1108,
    -515,   508,  1816,  2660,  1848,  1849,  2583,   943,  2592,  3406,
    1869,  3371,   508,  2875,  1740,  2872,  2491,  1294,  1297,  1867,
    2611,  -512,  1321,  -512,   711,   512,  2486, -1849,  1529,  3216,
    2303,  1529,  2158,   712,   640,  1521,   512,  2027,  1084,  -515,
    -847,  -515,  2309,  1516,  2550,   640,  2480,   508,   508, -1849,
    1530, -1244,  2681,  1530,  3040,   892, -1244,  1521,  -852,   697,
    1511,  1512,  1710,  1526,  1531,   893,  2574,  1533,  1513,   642,
     508,  3188,  2337, -1840,  2316,  1068,  3189,  1737,  3162,  2342,
     642,  3073,  3074,  1042, -1857,  1524,  2083, -1840, -1849,   890,
      58,    63,    74,    99,   730,   874, -1225,  1321,   731,  1952,
    1321,  1321,    88, -1245,    57,    66,  1037,  2284,    75,    92,
    1560,  3430,  3307,   508,  1209,  2374,    81,  1250,   770,  2374,
     738,  1897,   739,  1806, -1857,  1037, -1245,  1514,  3031,  1810,
    1519,  3314,  -842,  1610,  2085,  1050,  2220,  1917,  2974,  1731,
    3090,   673,   673,  2395,   673,  1973,  1974,   644,  1312,  1313,
     864,  1070,   524,  3313,  1857,   108,  2297,  1312,  1313,  1250,
    1041,  2298,  2108,  1732,  3066,  1522,  1523,  1598,  -232,  -232,
    2525,  2179,  3071,  2183,  2940,  1858,  1032,  3343,  3344,    49,
     728,    50,    51,    55,    56,    59,    60,  3033,    61,  2900,
     696,    64,    65,    67,    69,    77,    78,    79,  1071,  2980,
    2822,    80,  2982,    82,  2984,  1807,    91,    94,  1814,   646,
     646,   865,    95,  2522,  2317,    96,    97,  1712,  2299,  3097,
    1712,  3380,  1858,  1882,  2318,  1212,  2011,  1212,  1888,  3384,
    1593,  1594,  1595,  1596,  1597,  1598,   109,  1862,  1863,  1864,
    1865,  1866,  1867,  2109,  1712,  1818,  2889,  3109,  2890,  1033,
     943,  2996,   863,  1554,    21,  2343,    82,   693,   508,   508,
    2454,  3022,   937,  1703,   508,  3112,   713,   508,   508,  2269,
     508,   508,   508,   508,  1704,  3276,    88,  3277,  2875,   644,
    2872,  2193,  1864,  1865,  1866,  1867,   508,  2650,  2651,  2652,
    2653,  2196,  2343,   508,  2199,  2095,   729,   879,  1653,  3023,
    1595,  1596,  1597,  1598,  1817,  1819,  2134,  2135,   891,    21,
     512,   508,  1250,  1483,  3431,  1653,  3113,   512,  2096,   640,
    2523,  3357,  1091,  1991,  1712,  3194,   640,   100,  1092,   634,
     694,  2709,   508,  2352,  3456,  1565,   634,  1647,  1529,  1395,
    3208,  1745,  1654,  1960,  2548,   735,  1405,  1805,  1959,  1542,
    1398,   508,  1966,  3328,   642,   740,   710,   741,  1542,  1654,
    1530,   642,   508,   508,   508,  2416,   508,   508,  2552,  1209,
    1575,  3303,  1994,   734,   101,    82,  3181,  2434,  1805,  2287,
    1401,  1398,  1873, -2002, -2002, -2002,  1408,  1862,  1863,  1864,
    1865,  1866,  1867,  2191,  1703,    25,    26,    27,   508,  3432,
     742,  2012,  1577,  2289,  2435,  1706,  2033,  2559,  1655,  1344,
    1345,  1641,  1642,   746,  1648,   508,   508,  3006,  2560,  1713,
     712,   712,  1713,   712,  2564,  1392,   526,  -215,  3433,  1093,
    1859,  1860,  1861,   753,  1862,  1863,  1864,  1865,  1866,  1867,
    2216,  2217,  2218,  1416,  2167,    21,  1713,  1420,  2556,   508,
      25,    26,    27,   508,   508,  3358,  1505,  2486,    45,  1656,
      32,  2245,  2277,   508,   508,   508,  2279,  2783,   508,  2281,
    2489,  3286,   757,  3133,  1094,   943,  1656,  2466,   754,  1304,
    2467,   908,  1037,  1710,  1737,   747,  1710,  1483,   758,   527,
    2310,  2311,  2312,  2313,  2314,  2315,   760,    37,  2319,  2320,
    2321,  2322,  2323,  2324,  2325,  2326,  2327,  2328,  2497,  2155,
    1710,  1967,   908,  3170,  3336,    32,  3225,   909,   748, -1971,
   -1971,  1657,  2436,  1997,  3171,  1998,  1713,  2437,   730,  1767,
      39,   759,   731,  1399,   763,  2524,  2192,  2525,  1657,  3359,
    1091,    42,  1306,   911,  1738,  1307,  1092,  2551,   909,    82,
    1746,  2013,    37,   776,  2784,    43,  2202,   749,  2194,  1529,
    2051,  2209,  1626,  2197,  1407,  1627,  2296,  2526,  1768,  3226,
    2300, -1972, -1972,  2302,   911,   103,  2676,  2039,  3227,    44,
     748,  1530,   633,  1094,   875,    39,    25,    26,    27,   633,
    1710,   764,  2585,    45,  1891,  1531,    42,  1250,  1546,  1892,
    3228,   730,  2597,  3104,  2040,  1553,  1250,  1068,  2605,  1091,
      43,  3125,  1069,  2071,  1975,  1092,  3126,  2072,  2785,   749,
    2786,  1976,  1977,   766,  1506,  1978,  1979,  1980,  1406,   730,
    1250, -1225,  1411,   731,    44,   876,  1518,  2179,  2179,  2179,
    1095,   877,   751,  1881,  1096,  1883,  1884,  1093,    45,  1483,
    2353,    32,  2354,  1770,   750,  2132,  2132,  1340,  1341,  1775,
    1777,  1778,  1779,  1544,   864,   878,  2941,   531,   915,   779,
    2429,  2430,  3229,  1209,  1811,  1991,  1097,  1812,  2438,  2052,
     932,   933,   934,  1070,  1529,  3230,   881,  1400,    37,  2439,
     863,  1026,  1027,   886,  1029,   535,  2053,  1091,   884,   915,
    2259,  2054,  2260,  1092,   751,   867,  1530,  1209,  1930,  3452,
     885,  1931,    88,   508,   887,  1321,  1093,  2041,  1400,   746,
    1533,    39,  2042,  1950,   888,  1321,  1951,  2043,  1321,  2341,
    1071,  2229,    42,  2661,  2230,  2873,  2668,  2291,   924,  2055,
    2292,   104,   895,   710,   710,   526,   710,  1098,   508,   508,
     937,  3439,   105,  3440,   508,  1821,   508,  2329, -1973, -1973,
    2330,   508,   508,   508,   508,  2375,  2378,   889,  2376,  2376,
   -1288,  2355,  2462,  2356,  1344,  1345,   508,   508,  2539,   890,
     512,  2540,   508,  2545,    45,   508,  2546,   106,   927,   640,
     508,   747,   508,   508,  3465, -1976, -1976,   872,   508,   646,
    2608,  1094,  1034,  1931,  1093,  2398,   512,  1104,   527,   512,
    2536,   930,  2538,  1321,   512,   640,  1498,   512,   640,  2820,
   -1977, -1977,   512,   640,   642,   634,   640,  1105,   634,   926,
    2533,   640,  2535,   634,   935,  1909,   634,   107,  1911, -1978,
   -1978,   634,  2813,  1915,  2888,  2615,  1918,  3415,  2616,  2777,
     642,  1922,   936,   642,  1028,  1483,   938,  3272,   642,  3273,
    2244,   642,  1096,  3427,  1030,  2673,   642,  2812,  2376,  2821,
    1094,  1106,  2698,  2699,  1045,  2500,  1334,  1335,  2044,  1051,
    2432,  2674,  3231,  1054,  1951,  3232,  1767,   508,   508,  2045,
    2897,  2485,  2056,  1052,  1097,  -592,   508,   508,  2677,  2679,
    -592,  2678,  2678,  2754,   508,  2580,  2755,    88,  1055,  1953,
    1954,   508,  1059,  1955,  1958,  1058,  1618,  2910,  3463,  2934,
    2230,  1957,  2935,  3464,  1066,  1768,  2942,  1121,  1085,  2943,
    2997,  1096,  2390,  1951,  1086,  2684,  1209,  1546,  3103,  3134,
     508,  2616,  1951,   508,  1340,  1341,  2686,  2688,  1483,   508,
     508,   508,   508,   508,   508,   508,   508,  1209,  1094,  2685,
    1769,   508,   508,  1122,  1107,  1098,   508,  2687,  2689,  2690,
     508,  -592,  1088,   508,   508,   508,   508,   508,   508,   508,
     508,   508, -1979, -1979,   508,    82,   531,  1089,   779,  3135,
    1498,   508,  2376,  1250, -1981, -1981,  2115,  2080,   111,  2486,
    2776,   521,  2778,  2179,  1065,   712,  1067,  2876,   573,  2183,
    1770,   534,   508,  1108,   535,  1125,  3077,  3165,  -592,  1096,
    1951,  1109,  1090,   661,  1102,  1042,  3172,   674,  1103,  1931,
    1120,  1091,  1124,  1110,  1098,   508,  3182,  1092,  3215,  3183,
    3243,  2230,  3251,  2616,  1128,  1951,   508,   508,  1129,  3324,
    1258,  1126,  3325,   702,  1259,  1316,  3351,  1091,  1264,  3352,
    1266,  1344,  1345,  1092,  1348,  1111,  3396,  -593,  3437,  3325,
    1267,  3325,  -593, -1982, -1982, -1983, -1983,  2464,   633, -1984,
   -1984,   633,  1483,  2722,  2723,  1280,   633, -1985, -1985,   633,
    1282,  1209,  1283,  1209,   633, -1986, -1986, -1987, -1987,  1981,
    1982,  1983,  1284,  1984,  1985,  1986,  1987,  1988,  1989,  2619,
    2490,  2490,  1091,  1423,  3041,  2820,  1289,  1113,  1092, -1988,
   -1988,  1290,  1098,   703, -1990, -1990,  1296,  1564,  1299,   864,
    1565, -1991, -1991,   508,  1566,  1567,  1300,  1250,  1093,  1305,
     508,   508,  1114,  -593, -1992, -1992, -1993, -1993,  1104,  2011,
    1323,  3414,  1498, -1994, -1994,  3416, -1995, -1995, -1997, -1997,
    1324,  1116, -1999, -1999,  1093,  1575, -2001, -2001,  1105,  1934,
    1757,  1758, -2002,  -643,  -643,  3161,  1250,  -647,  -647,  1558,
      82,  1327,  3250,  1330,  3093,  1373,  -646,  -646,  1209,  1561,
    -593,  1342,  1343,  3037,  3038,  1250,   508,  1577,  1386,   704,
    3423,  3424,  3449,  3450,   863,  1388,  3008,  1611,  1389,  2263,
    1396,  3457,  1106,  -524,  1402,  1403,  1617,  1621,  1622,  1093,
    1409,  1483,  1410,  1415,  1419,   508,   508,  -524,   508,  2770,
    1421,  1501,  -524,  1483,   508,   508,   508,   508,   508,   508,
    1502,  1504,   508,   508,   508,   508,   508,   508,   508,   508,
     508,   508,  -818,  2894,  -825,  1513,  1517,   508,   508,  2037,
    2431,   508,    45,  1483,  2486,  -668,  -669,  -815,   508,  2921,
    1483,  2905,  -816,  -819,  3402,  1527,  2937,  2873,  2933,  2816,
    1528,  -817,  1538,  -524,  1547,  1557,  1559,  1608,  1604,  1620,
     508, -2002,  1094,   508,  1606,   508,  1629,  1634,  1630,   508,
    1639,  1640,  1071,  -524,  1069,  1107,  1483,  1677, -2002,  1675,
    1483,  1679,   508, -2002,  1250,  1708,  1483,   512,  1094,  1690,
    1709,  1710,  1715,   512,  1717,  1722,   640,  1716,   710,  1729,
    1730,    10,   640,  1744,  1483,  3250,   634,  1734,   108,  1750,
    1759,  1760,   634,  1764,   508,   508,  2365,  1772,   705,  2154,
    -524, -2002,  2368,  1096,  1108,   905,  1773,  1774,  1498,  -524,
     906,   642,  1109,  1783,  1786,  1787,  1789,   642,  1790,  1792,
    1793,  3069,  1795,  1094,  1110,  2200,  1796,  3250,  1801,  1096,
    2680,  2682,   694,  1813,   508,  1097,   905,  1802,  1839,   508,
     508,   906,  1842,  1805,  1841,  1844,  1847,  1870,  1907,  1879,
    1886,  1878,    21,  1889,  1586,  1910,  1111,  1919,  1916,    21,
    1920,  2201,  3213,   942,   508,   508,  1850,   907,  1921,   508,
    1851,  1852,  1926,  1929,  1853,  1854,  1855,  3250,  1932,  1507,
    2207,  1514,  1519,   508,  1096,  3057,   508,  1933,   508,  1938,
    1935,  1962,  1936,   943,  1995,  1937,  1996,  1961,   907,  1565,
    3156,  1498,  2004,  2001,   508,  1209,  1098,  2029,  1113,  2247,
    2006,   508,  2007,  2008,   508,  2036,  2208,  2009,    82,  2047,
    2048,  2050,  2074,  2075,  1546,  2081,  2093,  2094,  2098,  2114,
    2123,   508,  1098,  1114,  3078,  3079,   908,   703,   512,  2111,
    2125,  2124,  2126,  2128,   508,  2127,  2145,   640,  2149,  2979,
    3305,  2150,  1116,  2153, -2002,   512,  2156,   634,  -524,  1820,
    2160,   508,   508,  1423,   640,  2162,  2161,   908,   704,  2227,
    3266,  2793,   909,  2236,   634,  2231,  2249,  2794,   508,  2246,
     508,  2248,   642,  2250,  2264,  1321,  2265,  1098,   910,   508,
    2795,  2267,  2873,    25,    26,    27,  2270,  2271,   911,   642,
      25,    26,    27,   909,  2276,  2275,  2280,  1209,  1209,  1209,
    2293,  2301,  2796,  1875,  2797,   526,  1850,  2331,  1874,   910,
    2362,  2338,  2339,  2350,   730,  2369,  2340,  3132,   731,   911,
     912,  2380,  2344,  2351,  2382,  1498,  2367,  2387,  2391,   633,
   -1288,  2388,   694,  2389,  2392,   633,   508,  2393,  2394,  1856,
    2396,  1082,  1250,  2397,  2407,  2408,  2404,  2433,    32, -2002,
    2405,   912,  2412,  2409,  2413,    32,  1593,  1594,  1595,  1596,
    1597,  1598,  1857,  3055,  2410,  2449,   913,  2411,   527,  1775,
    1777,  1778,  1779,   914,  2414,  1483,  1104,  2415,  2457,  2428,
    2468,  2425,  2471,  2426,  2473,    37,  1737,  2440,  2474,  2479,
    2450,  2798,    37,   508,  2455,  3287,  1105,   913,  2456,  2481,
    2469,  2482,  2493,  -649,   914,    38,  2492,  2981,  2495,   863,
    2496,  2499,  2503,   915,  2504,  1209,   544,  2505,    39,  2507,
     778,   574,  2510,  2513,  2509,    39,  2532,  2534,  2567,    42,
    1858,  2565,   916,   650,  2547,  2566,    42,  2579,  2584,  2553,
    1106,  2554,  2555,    43,   915,  2568,  2578,   691,   691,  2594,
    2582,  2595,  2599,   508,  2598,  1544,  2606,  2799,  2602,  2617,
    2626,  2634,  2800,   916,  1498,  2637,  2644,    44,  3202,  2640,
    2643,  2657,  2658,  2037,  2645,  2646,  1498,   512,  2669,  2670,
    2675,    45,  2694,  2706,  2683,  2691,   640,  2700,    45,  2451,
    1490,  2717,   508,  2714,  2716,  2735,   530,  2729,  2720,  2730,
     633,   917,  2744,   694,  2737,  2741,  1498,  1483,   721,  2761,
    2763,  2801,  2765,  1498,  2767,  2775,  2667,   633,   864,  2808,
    2824,   642,  2732,   508,  2903,  2913,  2917,  2802,  2781,   508,
     508,  2782,   917,  1107,  2926,  2788,   694,  2891,  2892,  2893,
     508,  2899,  2931,  2912,  2086,  1321,   531,  2908,   779,  1498,
    1321,   508,  2909,  1498,   508,  3287,   508,  2925,  2938,  1498,
    2230,  2944,  2939,  1483,   508,   533,  2964,   508,   508,  2970,
    2966,   534,   508,   508,   535,  2975,  2985,  1498,  2986,   508,
    2988,  2989,  1108,  3009,  3016,  3268,  3019,  2769,  3028,  3034,
    1109,  3021,  2011,  3030,   508,  3035,  3044,  1817,  1819,  2749,
    3036,  3389,  1110,  3042,   508,  3048,  3052,  3043,  3053,  3054,
    3062,  3065,  3067,  3068,  3072,    88, -1970,  1953,  1954, -1971,
    3265,  1955,  1958,  3091,   508, -1972,  3085,  3086,  2803,  1957,
    3100, -1973, -1974,  3087,  1111,  2753,  3092,  2804,  1859,  1860,
    1861,  3105,  1862,  1863,  1864,  1865,  1866,  1867,  3119, -1975,
   -1976, -1977, -1978,    21,  3121, -1979, -1981, -1982,  3267,  3123,
   -1983,  3270, -1984,  1209,  1490,   693,  2871,  1209,  3098,  1209,
   -1985, -1986,  2212, -1987, -1988, -1990,  1492,   507,   519,   905,
   -1991,   508,   542,   508,   906, -1992,  1113,   542,  3088, -1993,
    3349,   631, -1994,   645,   645,  3089, -1995,   905,   649,   542,
     657, -1996,   906,   657,  3342, -1997,   675,   679, -1998,  3353,
     679,  1114, -1999,   542,   542, -2000, -2001,  1775,  1777,  1778,
    1779, -1242,  3106,  3127,  3255,  3130,  3257,  1493,  3136,  3137,
    1116,  3144,  3148,  3150,  3140,  1104,  3142,  3337,  3151,  2901,
    3154,   907,  3155,  3157,  3160,  3164,  3179,  1316,   694,  3180,
    3184,  3187,  3190,  2295,  3192,  1105,   631,   631,  3204,   907,
     508,  3205, -1241,  1483,  3212,  3214,  2922,  3221,   675,  2924,
    3220,  3222,  3237,   679,   542,   679,   679,   679,  3235,  3236,
     508,   508,  3252,  2750,  3259,   508,  3253,  3256,   508, -1734,
    3262,  3274,  3260,  3269,    25,    26,    27,  3061,  3294,  1106,
    2814,  1331,  3300,   644,  3298,  1817,  1819,  3301,  2815,  3304,
     908,  3316,  2667,  3310,  3317,   508,  3322,  1321,  1079,  3318,
    3327,  3329,  3331,  3012,  3334,  3341,  1490,  3335,   908,   508,
    3339,  3340,  3346,  3348,   508,   508,  1544,   694,  3355,   508,
    1483,  3350,  3360,  3366,   508,  3367,   909,   508,   508,  3373,
    1492,  3368,   508,  1250,  3383,  3374,   508,  3375,  3404,    32,
     508,  3385,   910,  3387,   909,  3388,  2816,   508,  3394,  1544,
    3407,  3409,   911,   732,  3428,  3425,  3405,  3406,  1498,  3442,
     910,  3447,  3453,  3458,   512,  3467,  3468, -1734,    82,  3075,
     911,  3377,  1107,   640,    82,  1056,    37,  2823,  2187,  2827,
    2530,  1493,  2090,   634,   912,  1332,  1333,  2557,  2575,   873,
    2623,   508,  3131,  1395,  3364,  2898,  3435,  3200,  3403,   508,
    2768,  3429,   912,  3410,  3234,  1080,  2537,  3401,   642,    39,
    2916,  2512, -1734,  1700,  2792,  3408,  2877,  2508,   508,  3399,
      42,  1108,  3244,  1912,  1263,   756, -1734,  1483,  2757,  1109,
     913, -1734,  2929,  1771,    43,  2282, -1734,   914,  1803,  3320,
    3281,  1110,  2756,  2817,  1815, -1734,  3381,  3451,   913,  3345,
   -1734,  1837,  2742,  2498,  1631,   914,   775,  1393,    44,  2484,
    1394,  2871,  1334,  1335,  2152,  1672,  1671,  2648,  3386,  2120,
    2494,  3330,  2751,  1111,  3258,  2151,  1676,   915,    82,   635,
    2470,  2372, -1734,  2973,  3159,   880,   894,  1360,  2642,  2641,
    1498,  2672,  1492,  3206,  2290,   915,   916,  2386,  3333,  3332,
    2423,  2696, -1734,  2487,  2401,    82,   508,  2447,    82,  2445,
    3020,  2424,  1490,  1898,   916,  1349,  1351,  1355,  1332,  1333,
     694,  2708,  1356,  2089,   718,  1113,  1336,  1337,  1338,  1339,
    1340,  1341,  2379,     0,  1342,  1343,     0,     0,   863,     0,
       0,   508,  1483,  1493,     0,     0,  1498,     0,     0, -1734,
    1114,     0, -1734,  3111,     0,     0,     0,   508, -1734,     0,
       0,  1544,  1321,     0,     0,   917,     0,     0,     0,  1116,
    1081,  2818,   691,     0,  2819,     0,     0,  1250,     0,     0,
       0,     0,     0,   917,     0,     0,  1483,  2541,  1913,     0,
       0,   508,     0,     0,     0,  1334,  1335,     0, -1734,     0,
       0,     0,   508,   508,     0,  1490,   508,     0,   508,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1734,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   942,   508,  2572,  1850,   633,     0,     0,  1851,
    1852,     0,     0,  1853,  1854,  1855,     0,  1344,  1345,  1498,
     693,     0,  2586,     0,     0,     0,     0,   508,     0,  1336,
    1337,  1338,  1339,  1340,  1341,     0,     0,  1342,  1343,     0,
       0,     0,     0,     0,     0,   679,     0,     0,     0,   681,
     679,  1710,   942,   679,     0,  1850,     0,     0,  2871,  1851,
    1852,   542,  1316,  1853,  1854,  1855,     0,     0,  1492,     0,
    2624,     0,  2625,     0,     0,     0,  2630, -1734,  2633,     0,
    2712,   765,     0,     0,     0,     0,     0, -1734,     0,     0,
     768,   542,   542,     0,     0,     0,   508,     0,     0,     0,
       0,     0,     0,   508, -1734,     0, -1734, -1734,     0,  1490,
    3217,  3218,     0,   508,     0,   508,  1498,   508,     0,  1493,
       0,   508,     0,   508,     0,   508,     0,   512,     0,     0,
       0,   871,   519,   645,  1346,  1347,   640,   508,   507,     0,
     679,     0,   508, -1734,   508,     0, -1734, -1734, -1734,   631,
    1344,  1345,   508,   898,   898,     0,     0,     0,   898,   921,
       0,  1492,     0,     0,     0,  1209,     0,     0,     0,     0,
     508,   642,   657,   657,   657,     0,     0,     0,     0,     0,
       0,     0,    82,     0,     0,     0,   657,   657,  2148,   657,
    3278,     0,  3280,  1498,     0,     0,     0,     0,     0,     0,
       0,     0,   679,     0,     0,     0,     0,     0,   542,     0,
       0,  1857,  1493,     0,     0,     0,     0,     0,   679,   508,
       0,   679,     0,  1544,     0,     0,     0,     0,     0,   508,
       0,  3312,   942,     0,     0,  1850,     0,     0,     0,  1851,
    1852,     0,   508,  1853,  1854,  1855,     0,  3315,  1490,     0,
       0,  3319,     0,     0,     0,  1257,   508,     0,     0,     0,
    1490,  1857,     0,     0,     0,     0,     0,  1346,  1347,   679,
     679,   679,   679,  1278,   508,  1564,     0,     0,  1565,  1858,
     512,     0,  1566,  1567,     0,     0, -2002, -2002, -2002,   640,
    1490,     0,     0,     0,     0,  1492,     0,  1490,   508,     0,
    1498,  1495,     0,     0,     0,   691,     0,     0,     0,     0,
    2262,     0,     0,  1575,   508,     0,     0,     0,     0,  2868,
    1576,     0,   512,  2871,   642,  1209,     0,     0,     0,  1858,
      21,   640,     0,  1490,  1498,     0,     0,  1490,     0,     0,
       0,     0,     0,  1490,     0,  1577,  1493,     0,   508,     0,
       0,  2572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1490,     0,   508,   508,   508,   642,     0,     0,    82,
      82,     0,   512,     0,     0,     0,     0,  3411,     0,     0,
       0,   640,     0,     0,     0,     0,     0,     0,     0,     0,
     508,     0,     0,     0,     0,     0,     0,     0,     0,   898,
     921,     0,   679,     0,  3426,  1367,     0,     0,     0,     0,
       0,   898,   898,     0,     0,  1498,   642,   542,     0,     0,
       0,     0,     0,   631,     0,     0,     0,     0,     0,     0,
     631,   508,     0,     0,  1492,     0,     0,     0,     0,  1578,
     542,  1857,     0,  1611,     0,     0,  1492,  1422,     0,    82,
       0,    82,     0,     0,     0,     0,  1579,  1503,     0,  1498,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,    27,     0,  1495,  1492,     0,     0,     0,
       0,     0,     0,  1492,     0,  1493,     0,  1859,  1860,  1861,
      82,  1862,  1863,  1864,  1865,  1866,  1867,  1493,     0,  1583,
       0,     0,     0,  1496,     0,     0,    82,     0,   542,  1858,
      82,  1824,     0,     0,     0,     0,     0,  3018,     0,  1492,
       0,   683,     0,  1492,     0,     0,     0,  1493,     0,  1492,
       0,     0,     0,     0,  1493,     0,    32,  1859,  1860,  1861,
       0,  1862,  1863,  1864,  1865,  1866,  1867,  1492,     0,     0,
       0,  1808,  1586,  1809,  1623,     0,  1825,  1625,     0,     0,
       0,  1498,     0,     0,   543,     0,     0,     0,     0,   543,
    1493,   542,   542,    37,  1493,  1826,     0,     0,   679,     0,
    1493,   543,     0,     0,   720,     0,   723,     0,   727,     0,
       0,     0,     0,  1827,     0,   543,   543,  1828,  1493,     0,
    1367,     0,     0,     0,     0,     0,    39,     0,     0,     0,
     679,  1699,     0,   942,     0,     0,  1850,    42,     0,  1829,
    1851,  1852,  1830,   679,  1853,  1854,  1855,  1564,     0,     0,
    1565,    43,     0,     0,  1566,  1567,    82,  1495,  1831,     0,
     679,  2999,     0,     0,   679,     0,     0,     0,     0,  1747,
       0,     0,  1588,     0,     0,    44,   543,     0,     0,     0,
       0,     0,  1490,    82,     0,  1575,     0,     0,     0,    45,
    3110,     0, -2002,     0,     0,     0,  1369,  1496,     0,     0,
       0,     0,     0,     0,     0,  3107,     0,     0,     0,     0,
      21,     0,     0,     0,     0,     0,     0,  1577,     0,    21,
       0,     0,  1564,     0,     0,  1565,     0,     0,     0,  1566,
    1567,  1316,     0,  1570,  1571,  1572,     0,  1859,  1860,  1861,
       0,  1862,  1863,  1864,  1865,  1866,  1867,     0,     0,  1832,
    1573,     0,     0,     0,     0,     0,     0,  1833,     0,     0,
    1575,     0,     0,     0,     0,     0,     0,  1576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1589,     0,  1834,
   -2002, -2002, -2002,     0,  1593,  1594,  1595,  1596,  1597,  1598,
       0,     0,  1577,     0,     0,     0,     0,     0,     0,  1761,
       0,   679,     0,     0,     0,     0,  1835,   679,     0,     0,
       0, -2002,  3177,     0,  1490,     0,     0,     0,     0,     0,
       0,  1798,     0,     0,     0,     0,     0,     0, -2002,   768,
       0,     0,     0, -2002,   768,     0,   542,   542,     0,   542,
     768,     0,  1857,     0,     0,     0,  1498,     0,     0,  3279,
       0,    25,    26,    27,     0,     0,     0,     0,     0,  1496,
      25,    26,    27,  1495,     0,     0,     0,  1422,  1492,     0,
    1490, -2002,   942,     0,     0,  1850,     0,     0,     0,  1851,
    1852,  2868,  1668,  1853,  1854,  1855,  1578,     0,     0,     0,
       0,  1369,     0,     0,     0,     0,     0,     0,     0,     0,
    3000,     0,     0,  1579,     0,  1367,  1367,     0,  1580,     0,
    1858,  1367,     0,   507,     0,     0,    32,     0,     0,  1493,
       0,     0,     0,     0,  1586,    32,   898,     0,   542,  1893,
       0,  1581,  1582,     0,     0,     0,   679,     0,     0,   631,
       0,     0,   631,     0,     0,     0,  1583,   631,     0,     0,
     631,     0,     0,    37,     0,   631,  1495,   542,     0,   542,
       0,     0,    37,     0,     0,     0,     0,     0,  2159,     0,
       0,     0,     0,  1490,     0,     0,     0,     0,  2168,     0,
    2171,     0,  1584,  2182,     0,  1585,    39,     0,     0,  2186,
       0,  2188,     0,     0,     0,    39,     0,    42,     0,  1586,
    1492,     0,  1587,     0,  2195,     0,    42,     0,     0,  2198,
    3306,    43,     0,  2203,  2204,  2205,  2206,     0,  2210,  2211,
      43,     0,     0,     0, -2002,     0,   737,     0,     0,     0,
       0,   744,     0,     0,   745,    44,     0,     0,     0,  1564,
       0,     0,  1565,     0,    44,     0,  1566,  1567,     0,    45,
       0,  1493,     0,     0,     0,     0,  1492,     0,    45,     0,
       0,     0,     0,     0,     0,  1496,     0,  1990,     0,     0,
    1490,     0,     0,     0,     0,     0,     0,  1575,  2000,     0,
       0,  1857,     0,     0, -2002,     0,     0,     0,     0,     0,
    1495,     0,     0,     0,     0,     0,     0,     0,     0,  1588,
       0,     0,     0,     0,     0,     0,     0,  1493,     0,  1577,
       0,     0,     0,   543,     0,     0,     0,   768,  1859,  1860,
    1861,   883,  1862,  1863,  1864,  1865,  1866,  1867,     0, -2002,
       0,     0,     0,     0,     0,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,   543,   543,     0,  2868,  1490,     0,  1858,
       0,     0,     0,     0,     0,     0,     0,     0,  1496,  1492,
       0,     0,     0,     0,  2087,     0,   679,     0,   679,     0,
       0,     0,  2441,     0,     0,     0,  1369,  1369,     0,   679,
    2103,     0,  1369,  3177,     0,     0,     0,     0,     0,     0,
       0,     0,  1367,     0,     0,     0,     0,     0,     0,  1057,
       0,  1497,     0, -2002,  1589,     0,     0,  1590,  1591,  1592,
    1493,  1593,  1594,  1595,  1596,  1597,  1598,   679,     0,   542,
   -2002,     0,     0,     0,   942, -2002,     0,  1850,     0,  1495,
       0,  1851,  1852,  1699,   542,  1853,  1854,  1855,     0,     0,
       0,  1495,     0,     0,   542,  2169,   542,  2173,     0,   542,
    1269,  1271,  1274,  1276,  1490,   542,  1492,   542,     0,     0,
     543,     0,     0, -2002,     0,     0,     0,     0,     0,   768,
     542,  1495,     0,     0,   768,   542,     0,     0,  1495,   542,
     542,   542,   542,     0,   542,   542,     0,     0,  1490,     0,
       0,     0,  1496,     0,     0,     0,     0,     0,     0,  2226,
       0,     0,     0,     0,     0,     0,     0,  1493,   679,   679,
     679,   679,  1278,   679,  1495,     0,  1586,     0,  1495,     0,
       0,     0,     0,     0,  1495,     0,     0,  2252,     0,     0,
       0,     0,     0,  1492,     0,     0,  2272,     0,     0,     0,
       0,     0,  1495,     0,     0,     0,     0,     0,     0,   526,
       0,     0,     0,     0,     0,     0,     0,  1859,  1860,  1861,
       0,  1862,  1863,  1864,  1865,  1866,  1867,  1808,     0,  1490,
       0,     0,     0,     0, -1288,  1497,     0,     0,     0,     0,
       0,     0,     0,  1362,  1493,     0,     0,     0,     0,     0,
       0,  1367,  1367,  1367,  1367,  1367,  1367,     0,     0,  1367,
    1367,  1367,  1367,  1367,  1367,  1367,  1367,  1367,  1367,     0,
       0,     0,   527,  1490,     0,     0, -2002,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   542,
       0,  1496,     0, -2002,     0,     0,     0,     0,     0,     0,
    1492,   679,     0,  1496,     0,     0,     0,     0,     0,     0,
     631,     0,  1370,     0,     0,     0,   631,     0,     0,     0,
       0,   542,     0,  2122,   528,     0,   542,     0,     0,  1387,
       0,     0,     0,  1496,  1492,  2384,  2384,     0,     0,     0,
    1496,     0,     0,   529,     0,  1332,  1333,     0,     0,     0,
       0,  1493,  1418,     0,     0,     0,     0,     0,     0,     0,
       0,  1858,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1490,  1496,     0,     0,     0,
    1496, -2002,     0,     0,     0,  1493,  1496,     0,  1593,  1594,
    1595,  1596,  1597,  1598,     0,     0,  2601,  1497,     0,   542,
     530,     0,     0,  2420,  1496,     0,     0,  -214,   542,     0,
       0,     0,     0,     0,     0,  1492,     0,     0,     0,     0,
    1549,     0,  1334,  1335,     0,     0,     0,     0,     0,     0,
       0,  1367,  1367,     0,  1564,     0,     0,  1565,     0,     0,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1990,     0,
     531,  1691,   532,     0,     0,     0,     0,     0,     0,  1492,
       0,     0,  1573,     0,  1718,     0,  1493,     0,     0,   533,
       0,     0,  1575,     0,     0,   534,     0,     0,   535,  1576,
       0,   631,     0,   543,   543,  1743,  1336,  1337,  1338,  1339,
    1340,  1341,     0,   542,  1342,  1343,     0,     0,   631,     0,
       0,     0,  2103,  1495,  1577,     0,     0,  1370,     0,     0,
    1493,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1369,  1369,  1369,  1369,  1369,  1369,     0,     0,
    1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,  1369,
       0,     0,   542,     0,     0,  1367,     0,     0,   542,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1492,     0,     0,  1761,     0,     0,     0,     0,  1859,
    1860,  1861,     0,  1862,  1863,  1864,  1865,  1866,  1867,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,     0,     0,  1497,     0,     0,     0,  1344,  1345,     0,
       0,     0,  1493,     0,     0,  1579,     0,     0,     0,     0,
    1580,     0,  1766,     0,     0,     0,     0,     0,  1782,     0,
    1761,     0,     0,     0,     0,  1495,   679,     0,  2772,  2773,
    1490,     0,     0,  1581,  1582,     0,     0,     0,  1761,   679,
     679,   679,     0,     0,     0,     0,     0,     0,  1583,     0,
       0,     0,   542,     0,   679,     0,  2825,   679,     0,     0,
       0,  1278,  2614,     0,     0,     0,   679,     0,     0,     0,
     768,  2878,  2879,  2880,  2881,  2882,  2883,  2884,  2885,  2886,
    2887,  1495,     0,     0,  1584,     0,  1497,  1585,  1761,  1761,
       0,  1761,  1369,  1369,     0,  1496,     0,     0,     0,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1346,  1347,     0,     0,   543,   543,
     507,   543,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1940,     0,     0,     0,     0,     0,
    2647,     0,     0,     0,     0,     0,     0,  1905,   679,   679,
     679,     0,     0,     0,     0,     0,     0,   542,     0,  1367,
     542,     0,     0,     0,     0,     0,   542,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1370,  1370,  1495,     0,     0,     0,  1370,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1990,
       0,  1588,     0,     0,     0,     0,  1369,     0,     0,     0,
     543,     0,     0,     0,  1564,     0,  1492,  1565,     0,     0,
    1497,  1566,  1567,     0,     0,     0,     0,  1496,     0,     0,
       0,     0,     0,     0,  1367,  1367,     0,     0,     0,  1923,
       0,  1927,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,     0,     0,     0,     0,     0, -2002,
       0,     0,     0,  2746,     0,     0,     0,  1493,     0,  2103,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1495,     0,  1496,  1577,   679,     0,     0,     0,   542,
       0,     0,     0,   542,   542,   542,     0,     0,     0,  1761,
    1699,  1761,     0,  1798,     0,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,  3056,
       0,     0,   542,     0,  2826,     0,     0,     0,     0,     0,
       0,     0,  2406,     0,     0,     0, -1736,   542,   542,   542,
     542,   542,   542,   542,   542,   542,   542,  2721,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1495,  1497,
       0,     0,     0,     0,     0,     0,     0,     0,  2252,     0,
       0,  1497,  2272,     0,     0,   679,     0,  2088, -2002,  2091,
       0,     0,     0,     0,     0,  1699,  1496,     0,     0,     0,
    2100,     0,     0,     0,     0, -2002,     0,     0,     0,     0,
   -2002,  1497,     0,     0,     0,     0,  2272,  1798,  1497,     0,
       0,     0,     0,     0,     0,     0,  1761,     0,     0,     0,
       0,     0,     0,  2079,     0,     0,     0,  1367,  2137,     0,
       0,     0,     0,   542, -1736,     0,     0,     0, -2002,     0,
     679,   679,   679,   679,  1497,     0,     0,     0,  1497,     0,
       0,     0,  1367,     0,  1497,  1367,     0,     0,     0,   542,
     768,     0,     0,     0,     0,  1495,     0,     0,  2983,  1370,
       0,     0,  1497,     0,     0,     0,     0,     0,     0, -1736,
       0,     0,     0,  1496,     0,     0,     0,     0,     0,     0,
       0,  1586,     0, -1736,     0,  2990,     0,     0, -1736,  1495,
       0,   543,     0, -1736,     0,  1369,  1369,     0,     0,     0,
       0,     0, -1736,     0,     0,     0,   543, -1736,     0,  2237,
    2238,  2240,  2241,     0,  2243,  3013,   543,   631,   543,     0,
       0,   543,     0,     0,     0,     0,     0,   543,     0,   543,
       0,  3025,     0,     0,     0,  2103,     0,     0,     0, -1736,
       0,  1990,   543,     0,     0,     0,     0,   543,     0,     0,
    1496,   543,   543,   543,   543,  1699,   543,   543,     0, -1736,
       0,  1761,     0,     0,     0,     0,     0,     0,     0,     0,
    1495,     0,     0,     0,   768,   542,  1367,     0,     0,  3203,
       0, -2002,   679,     0,     0, -1751,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3076,
    3210,  3211,     0,     0,     0,     0, -1736,     0,     0, -1736,
       0,     0,     0,     0,  1495, -1736,     0,     0,     0,     0,
       0,     0,     0,     0,  3223,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2357,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0, -1736,     0,  1496,  1370,  1370,
    1370,  1370,  1370,  1370,     0,     0,  1370,  1370,  1370,  1370,
    1370,  1370,  1370,  1370,  1370,  1370,     0,     0, -1736,  1761,
       0,     0,     0, -1751,     0,     0, -2002,     0,  1369,     0,
       0,  1496,  2252,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,   543,     0,     0,     0,  2272,     0,     0,     0,     0,
       0,  3128,     0,  2967,     0,     0,  1495,     0,  1367,     0,
       0,     0,     0,     0,     0,     0,     0,     0, -1751,     0,
       0,     0,     0,  2371,     0,     0,   681,     0,  1927,     0,
       0,     0, -1751,     0,  3145,     0,     0, -1751,     0,     0,
     542,     0, -1751,     0,     0,     0,     0,  2992,   542,     0,
       0, -1751,     0,  1497, -1736,     0, -1751,     0,     0,     0,
       0,     0,  1496,     0, -1736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0, -1736,  3174, -1736, -1736,     0,     0,     0, -1751,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   543,     0,     0,   542,     0,  1496,     0, -1751,   542,
    1549,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   -1736,     0,     0, -1736, -1736, -1736,     0,     0,  1370,  1370,
       0,     0,     0,     0,     0,   542,     0,  1369,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3395,     0,     0,     0,     0, -1751,   542,   542, -1751,     0,
       0,     0,     0,     0, -1751,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   679,     0,  1699,     0,     0,     0,
     542,     0,     0,     0,     0,  1497,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   543,     0,   679,     0,     0,
    3247,     0,     0,     0, -1751,     0,     0,     0,  1496,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1367,     0,     0,     0,   542,   898,     0, -1751,   898,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1091,  1497,  1370,     0,   543,     0,  1092,     0,     0,     0,
    2502,     0,     0,  3025,  1104,     0,     0,     0,     0,     0,
     679,  1564,     0,     0,  1565,     0,     0,  2576,  1566,  1567,
       0,  1495,     0,     0,  1105,     0,     0,     0,     0,  1369,
    2590,  2591,  2593,     0,     0,   681,     0,     0,     0,     0,
     679,     0,     0,     0,     0,  2604,     0,     0,  2607,  1575,
       0,  1564,     0,     0,  1565,     0, -2002,  2618,  1566,  1567,
       0,  1004,  1004, -1751,     0,     0,     0,     0,  1106,     0,
       0,     0,     0, -1751,     0,     0,     0,     0,     0,     0,
    3145,  1577,     0,     0,     0,     0,     0,     0,     0,  1575,
   -1751,     0, -1751, -1751,  1497,     0, -2002,  1093,     0,     0,
       0,     0,     0,  3247,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   543,     0,     0,     0,     0,     0,
       0,  1577,     0,     0,     0,     0,     0,  1131,     0, -1751,
    1699,  1252, -1751, -1751, -1751,     0,     0,     0,     0,  2654,
    2655,  2656,   768,   768,  2724,  3247,   768,     0,     0,     0,
       0,     0,     0,     0,  1893,     0,     0,     0,     0,     0,
       0,  1107,     0,     0,     0,     0,   542,     0,     0,     0,
       0,     0,     0,  1303,     0, -2002,     0,     0,     0,     0,
       0,     0,     0,     0,  2725,     0,     0,     0,  1699,     0,
       0,  1497, -2002,     0,     0,  3247,     0, -2002,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1108,     0,     0,     0,     0, -2002,     0,     0,  1109,   543,
       0,     0,   543,  1496,     0,     0,     0,     0,  1923,     0,
    1110,     0, -2002,   768,     0, -2002,     0, -2002,     0,     0,
       0,  3264,     0,     0,     0,     0,     0,     0,  2103,     0,
       0,  1094,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1111,     0,     0,     0,     0,     0,  1497,     0,
       0,     0,  1328,     0,     0, -2002,  2764,     0,  1361,     0,
       0,  1363,     0,     0,  1374,  1377,  1382,  1385,  1586,     0,
       0,  1370,  1370,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1112,     0,
       0,     0,  1096,     0,  1113,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1425,  1252,     0,  1586,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1114,
       0,     0,     0,     0,  1115,     0,  1509,     0,     0,     0,
       0,   543,     0,     0,     0,   543,   543,   543,  1116,     0,
       0,     0,     0,     0,     0,  1525,  2907,     0,     0,     0,
       0,     0,     0,     0,     0,  1497,  1535,  1536,  1537,     0,
    1541,  1545,     0,     0,   543,     0,     0,     0, -2002,   -44,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   543,
     543,   543,   543,   543,   543,   543,   543,   543,   543,  1497,
       0,     1,  1607,     0,     0,  1098,     0,     0,     0,     0,
       0,     2,     0,     3,     4,     0,     0,     0, -2002,  1425,
    1425,  2946,  2947,  2948,  2949,     0,     5,  1564,     0,     0,
    1565,     6,     0,     0,  1566,  1567,     0,     0,     0,     0,
       7,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     8,  1646,     0,     0,     0,  1662,  1667,     0,
       0,     0,     0,     9,     0,  1575,     0,     0,  1004,  1004,
       0,     0, -2002,     0,  1370,    10,     0,    11,     0,     0,
    1497,     0,     0, -2002,     0,  1923,     0,     0,    12,     0,
    1593,  1594,  1595,  1596,  1597,  1598,     0,  1577,     0,  1370,
       0,     0,    13,    14,     0,     0,     0,     0,     0,     0,
       0,  2371,    15,     0,     0,     0,     0,     0,    16,     0,
       0,     0,     0, -2002,  1497,     0,    17,     0,    18,    19,
    1593,  1594,  1595,  1596,  1597,  1598,     0,     0,     0,     0,
       0,     0,    20,     0,     0,     0,    21,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3003,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    22,  3063,  1564,     0,     0,  1565,     0,     0,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,    23,     0,
       0, -2002,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1252,  1573,     0,     0,     0,     0,     0, -2002,     0,
    1252,     0,  1575, -2002,    24,     0,     0,     0,     0,  1576,
       0,     0,  1091,     0,     0,     0,  1497,     0,  1092,     0,
       0,     0,     0,  1370,  1252,     0,  1104,   543,     0,     0,
       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,
       0, -2002,     0,     0,     0,     0,  1105,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    25,    26,    27,
       0,     0,     0,     0,     0,    28,     0,     0,    29,     0,
    1106,     0,     0,     0,  1586,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1840,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    30,     0,  1093,
       0,     0,     0,     0,     0,     0,    31,     0,  1578,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    32,     0,     0,  1579,     0,     0,     0,    33,
    1580,     0,     0,    34,     0,  1382,     0,  1382,  1382,     0,
       0,     0,     0,    35,     0,  1370,     0,     0,     0,     0,
    1004,  1004,     0,  1581,  1582,    36,     0,     0,     0,    37,
       0,     0,     0,  1107,     0,     0,  1004,     0,  1583,     0,
       0,     0,     0,     0, -2002,     0,     0,     0,     0,    38,
       0,     0,  3153,     0,     0,     0,     0,     0,     0,     0,
    2371,     0,    39,     0,     0,    40,     0,     0,    41,     0,
       0,     0,     0,    42,  1584,     0,     0,  1585,     0,     0,
       0,     0,  1108,     0,     0,     0,     0,    43,     0,     0,
    1109,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,  1110,     0,     0,     0,     0,     0,     0,     0,
       0,    44,     0,     0,     0,  3219,   543,     0,     0,     0,
       0,   543,     0,  1094,     0,    45,     0,     0,   -44,     0,
       0,  1497,     0,     0,  1111,     0,     0,     0,  3245,     0,
    1965,     0,     0,     0,     0,     0,     0,   543,  1968, -2002,
       0,     0,     0,     0,     0,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,     0,     0,     0,     0,   543,   543,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2189,     0,     0,     0,  1096,     0,  1113,  2014,     0,     0,
       0,  1588,   543,  2018,  2019,  2020,  2021,  2022,  2023,  2024,
    2025,  3285,     0,     0,     0,  2034,  2035,     0,     0,     0,
    2046,  1114,     0,     0,  2049,     0,  2190,  2057,  2058,  2059,
    2060,  2061,  2062,  2063,  2064,  2065,     0,  1370,  2066,     0,
    1116,  3311,     0,     0,     0,  1004,   543,  1252,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2092,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1098,     0,  1371,
    1536,  1537,     0,     0,     0,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,     0,  1563,     0,     0,     0,  1843,  1564,     0,     0,
    1565,     0,     0,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,     0,   547,  1574,
       0,     0,     0,     0,     0,  1575,     0,     0,     0,     0,
       0,     0,  1576,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2214,     0,     0,
       0,  1252,     0,     0,  2224,  2225,  1564,  1577,     0,  1565,
       0,     0,     0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,
       0,     0,     0,   548,     0,     0,     0,     0,  1601,     0,
       0,     0,     0,     0,  1573,     0,     0,     0,  2705,   549,
    1252,     0,     0,     0,  1575,     0,     0,     0,   543,     0,
       0,  1576,     0,     0,     0,     0,     0,     0,     0,  1303,
    2283,  1564,     0,     0,  1565,     0,     0,     0,  1566,  1567,
       0,  1601,  1570,  1571,  1572,     0,  1577,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   550,     0,     0,  2305,
    2306,     0,  2307,     0,     0,     0,   551,     0,     0,  1575,
       0,  1578,     0,     0,  1371,     0,  1576,     0,   552,     0,
       0,     0,     0,   553,     0,     0,     0,     0,  1579,     0,
       0,  2333,  2334,  1580,     0,  2092,     0,     0,     0,     0,
       0,  1577,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   554,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,  2361,  1601,     0,     0,     0,  2366,
       0,  1583,     0,     0,     0,     0,     0,     0,     0,     0,
    1578,     0,     0,     0,     0,     0,  1425,     0,  1252,     0,
       0,     0,     0,     0,     0,   555,     0,  1579,     0,   556,
       0,     0,  1580,     0,     0,     0,     0,  1584,     0,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,     0,  2399,
       0,     0,     0,     0,  1586,  1581,  1582,  1587,     0,     0,
       0,     0,     0,     0,     0,  1578,     0,     0,     0,     0,
    1583,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   547,  1579,     0,     0,     0,     0,  1580,  2418,     0,
       0,     0,     0,  2421,  2422,     0,     0,   557,     0,     0,
       0,     0,     0,     0,     0,     0,  1584,     0,     0,  1585,
    1581,  1582,   558,     0,     0,     0,  1601,     0,     0,     0,
       0,     0,     0,  1586,     0,  1583,  1587,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   548,  2443,     0,     0,
    2446,     0,  2448,     0,     0,   559,     0,     0,   560,     0,
       0,     0,   549,     0,  1588,   561,     0,     0,  2452,   562,
       0,  1584,   563,     0,  1585,     0,     0,  1601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1586,     0,
     564,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,   565,     0,     0,     0,  1646,   550,
       0,   566,     0,     0,     0,     0,     0,     0,     0,   551,
       0,   567,     0,     0,     0,  1667,  2064,   568,     0,     0,
       0,   552,     0,  1588,     0,  1601,   553,  1601,     0,  1371,
    1371,     0,  1868,     0,  1004,  1371,     0,     0,  1601,     0,
       0,  1601,     0,  2506,   569,     0,  1601,     0,     0,  1601,
       0,     0,     0,     0,     0,   554,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,     0,     0,     0,     0,  1588,  1564,
       0,     0,  1565,     0,     0,     0,  1566,  1567,     0,  1601,
    1570,  1571,  1572,     0,     0,     0,     0,     0,   555,     0,
    1537,     0,   556,     0,     0,     0,  1252,  1573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
       0,     0,     0,     0,  1576,     0,     0,     0,  1589,     0,
       0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,
    1598,     0,     0,     0,     0,  2005,     0,     0,     0,  1577,
       0,     0,     0,     0,     0,     0,     0,  2610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1564,
     557,     0,  1565,  1601,     0,     0,  1566,  1567,  1568,  1569,
    1570,  1571,  1572,  1589,     0,   558,  1590,  1591,  1592,  1601,
    1593,  1594,  1595,  1596,  1597,  1598,     0,  1573,     0,  1601,
    1601,  1601,     0,     0,     0,  1601,     0,  1575,     0,  1601,
       0,     0,     0,     0,  1576,     0,     0,     0,   559,     0,
       0,   560,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   562,     0,     0,   563,     0,     0,     0,  1577,
       0,     0,     0,  1578,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   564,     0,     0,     0,     0,     0,     0,
    1579,     0,     0,     0,     0,  1580,     0,   565,     0,     0,
       0,  1601,     0,     0,   566,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   567,     0,     0,  2693,  1581,  1582,
     568,     0,     0,  2695,  1968,     0,     0,     0,     0,     0,
       0,     0,     0,  1583,  2701,     0,     0,     0,     0,     0,
    1601,     0,     0,     0,     0,  2710,     0,   569,  2713,     0,
    2715,     0,     0,     0,     0,     0,  1601,     0,  2719,     0,
       0,  1601,     0,  1578,     0,     0,  2726,  2727,     0,  1584,
       0,     0,  1585,  2734,     0,     0,     0,     0,  1868,     0,
    1579,     0,     0,     0,     0,  1580,  1586,     0,  2743,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2758,     0,
       0,     0,     0,  1564,     0,     0,  1565,     0,  1581,  1582,
    1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,  1004,     0,
       0,     0,     0,  1583,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,     0,  1564,     0,     0,  1565,  1576,     0,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,  1584,
       0,     0,  1585,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,  1577,     0,  2214,  1586,  2214,     0,  1587,
       0,     0,  1575,     0,     0,     0,  1588,     0,     0,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,     0,     0,     0,
       0,     0,  1868,  1868,     0,  1371,  1371,  1371,  1371,  1371,
    1371,     0,     0,  1371,  1371,  1371,  1371,  1371,  1371,  1371,
    1371,  1371,  1371,  1868,     0,     0,     0,  1578,     0,     0,
       0,     0,     0,     0,  2962,  2963,  1588,     0,     0,     0,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,  1580,
       0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,  1594,
    1595,  1596,  1597,  1598,     0,     0,     0,     0,  1578,  2987,
       0,     0,  1581,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2991,     0,  1579,     0,  1583,  2993,  2994,
    1580,     0,     0,  2995,     0,     0,     0,     0,  2998,     0,
       0,  3001,  3002,     0,     0,     0,  2214,  1252,     0,     0,
    3010,     0,     0,  1581,  1582,     0,     0,     0,     0,  1601,
       0,  1004,  1601,  1584,     0,     0,  1585,     0,  1583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1586,  1589,     0,  1587,  1590,  1591,  1592,     0,  1593,  1594,
    1595,  1596,  1597,  1598,     0,     0,     0,     0,  2005,     0,
       0,     0,     0,     0,  1584,  3051,     0,  1585,  1601,     0,
       0,     0,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
       0,  1586,     0,     0,  1587,  1371,  1371,     0,  1601,  1601,
       0,     0,  3070,     0,     0,     0,     0,     0,     0,     0,
    1601,     0,     0,  1601,     0,     0,     0,     0,     0,     0,
       0,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,  1601,
    1601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1588,     0,     0,     0,     0,     0,  1601,  1564,     0,     0,
    1565,     0,     0,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1573,     0,     0,     0,     0,
    3102,  1588,     0,     0,     0,  1575,     0,     0,     0,     0,
       0,     0,  1576,     0,     0,     0,     0,     0,     0,  1371,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1545,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1589,     0,     0,  1590,  1591,
    1592,  1252,  1593,  1594,  1595,  1596,  1597,  1598,     0,     0,
       0,     0,  2304,     0,     0,  2418,     0,     0,  1601,     0,
       0,     0,     0,     0,     0,     0,  3166,  3167,  1601,  1601,
    3168,     0,  1537,     0,     0,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,     0,     0,  2403,     0,     0,     0,  3186,     0,     0,
       0,  1578,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1579,     0,
       0,  3198,     0,  1580,     0,     0,     0,  1601,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,  1582,     0,  1601,
    1601,  1601,     0,     0,  1868,  1868,  1868,  1868,  1868,  1868,
       0,  1583,     0,  1868,  1868,  1868,  1868,  1868,  1868,  1868,
    1868,  1868,  1868,     0,     0,     0,     0,  1601,  1601,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3242,     0,     0,     0,     0,     0,     0,  1584,     0,     0,
    1585,     0,     0,     0,     0,  1601,     0,     0,     0,     0,
    1601,  2962,     0,     0,  1586,  3261,     0,  1587,     0,  1004,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3271,     0,     0,     0,     0,  2214,     0,  2214,     0,
       0,     0,     0,  1601,     0,     0,  1004,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,  3296,  1601,  1601,     0,     0,     0,
       0,     0,     0,  1868,  1868,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1601,  1371,  1371,
    1601,     0,  1601,     0,     0,     0,  1601,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1564,
       0,     0,  1565,  3321,  1588,     0,  1566,  1567,  1568,  1569,
    1570,  1571,  1572,  2962,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1004,  1573,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1575,     0,     0,
    1601,     0,     0,     0,  1576,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  3365,     0,
    1564,     0,     0,  1565,     0,     0,     0,  1566,  1567,  1577,
       0,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,     0,     0,  1576,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,  1564,     0,  2427,  1565,     0,     0,
    1577,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,
       0,     0,     0,     0,  1601,     0,     0,  3420,  3420,  3420,
       0,     0,  1573,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1575,  1578,     0,     0,     0,     0,     0,  1576,
       0,  1371,     0,     0,  3420,     0,     0,     0,     0,     0,
    1579,     0,     0,     0,     0,  1580,     0,     0,  1564,     0,
       0,  1565,     0,     0,  1577,  1566,  1567,  1568,  1569,  1570,
    1571,  1572,     0,     0,     0,     0,     0,     0,  1581,  1582,
       0,     0,     0,     0,     0,  3420,  1573,     0,     0,     0,
       0,     0,     0,  1583,  1578,     0,  1575,  1601,     0,  1601,
       0,     0,     0,  1576,     0,  1601,     0,     0,     0,     0,
       0,  1579,     0,     0,  1601,     0,  1580,  1601,     0,  1601,
       0,     0,     0,  1601,     0,     0,  1868,  1868,  1577,  1584,
    1601,  1601,  1585,     0,     0,     0,     0,     0,  1601, -2002,
   -2002,     0,     0,     0,     0,     0,  1586,  1601,     0,  1587,
       0,     0,     0,     0,  1583,     0,     0,     0,  1578,     0,
       0,     0,  1601,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,     0,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0, -2002,     0,     0,     0,     0,     0,     0,
    1371,     0,     0,  1581,  1582,     0,     0,  1586,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1583,     0,
       0,     0,  1578,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1579,
       0,     0,     0,     0,  1580,     0,  1588,     0,     0,     0,
       0,     0,     0,     0,  1584,     0,     0,  1585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1581,  1582,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,  1583,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,  1585,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1586,     0,     0,  1587,     0,
       0,  1868,  1371,     0,     0,     0,     0,     0,     0,     0,
       0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,  1594,
    1595,  1596,  1597,  1598,     0,     0,  1601,  1601,  2635,     0,
       0,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1601,     0,     0,     0,  1601,     0,  1601,  1601,  1601,
       0,     0,  1601,     0,     0,  1601,  1601,     0,     0,     0,
       0,     0,  1589,     0,  1601,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1588,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,     0,     0,
       0,  1868,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1601,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,     0,     0,  2707,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1868,     0,     0,     0,
    1589,     0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,
    1596,  1597,  1598,     0,     0,     0,     0,  2774,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1601,  1601,  1601,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1601,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1601,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   112,   939,   644,   940,   941,   942,   943,   944,
    1601,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,  1601,     0,     0,   945,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   946,   136,   947,   948,     0,   139,   140,
     141,   142,   143,   144,   949,   614,   145,   146,   950,   951,
     149,     0,   150,   151,   152,   153,   615,     0,   616,  1601,
     952,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   953,
     954,   185,   955,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   956,   201,   202,  1601,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   957,   214,   215,
     216,   217,   218,   617,   958,   220,     0,   221,   222,   959,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,   960,   961,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,   265,
     962,   963,     0,   964,     0,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,     0,   280,   281,
     282,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   965,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     966,   312,   967,   314,   315,   316,   317,   968,   318,   319,
     320,   321,   969,   619,   323,   970,   325,   326,   327,     0,
     328,   329,     0,     0,   971,   331,   332,     0,     0,   333,
     334,   335,   336,   337,   338,   621,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   622,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   972,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   973,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   974,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   624,   438,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,     0,   448,   975,
     976,     0,     0,   451,   452,   625,   454,   626,   977,   456,
     457,   627,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   978,     0,   478,   479,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   979,
       0,     0,     0,     0,     0,     0,   980,   981,   982,     0,
       0,     0,     0,   983,     0,   984,     0,     0,     0,     0,
     985,   986,   987,   988,     0,  2558,   112,   939,   644,   940,
     941,   942,   943,   944,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,   945,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   946,   136,   947,
     948,     0,   139,   140,   141,   142,   143,   144,   949,   614,
     145,   146,   950,   951,   149,     0,   150,   151,   152,   153,
     615,     0,   616,     0,   952,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   953,   954,   185,   955,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   956,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   957,   214,   215,   216,   217,   218,   617,   958,   220,
       0,   221,   222,   959,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
     960,   961,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,   265,   962,   963,     0,   964,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,     0,   280,   281,   282,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   965,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   966,   312,   967,   314,   315,   316,
     317,   968,   318,   319,   320,   321,   969,   619,   323,   970,
     325,   326,   327,     0,   328,   329,     0,     0,   971,   331,
     332,     0,     0,   333,   334,   335,   336,   337,   338,   621,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   622,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   972,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   973,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   974,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   624,   438,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,     0,   448,   975,   976,     0,     0,   451,   452,   625,
     454,   626,   977,   456,   457,   627,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   978,     0,
     478,   479,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   979,     0,     0,     0,     0,     0,     0,
     980,   981,   982,     0,     0,     0,     0,   983,     0,   984,
       0,     0,     0,     0,   985,   986,   987,   988,     0,  3169,
     112,   939,   644,   940,   941,   942,   943,   944,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,   945,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   946,   136,   947,   948,     0,   139,   140,   141,   142,
     143,   144,   949,   614,   145,   146,   950,   951,   149,     0,
     150,   151,   152,   153,   615,     0,   616,     0,   952,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   953,   954,   185,
     955,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   956,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   957,   214,   215,   216,   217,
     218,   617,   958,   220,     0,   221,   222,   959,   224,     0,
     225,     0,   226,   227,    21,   228,   229,   230,   231,   232,
     233,     0,   234,     0,   960,   961,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,   265,   962,   963,
       0,   964,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,     0,   280,   281,   282,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   965,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   966,   312,
     967,   314,   315,   316,   317,   968,   318,   319,   320,   321,
     969,   619,   323,   970,   325,   326,   327,     0,   328,   329,
       0,     0,   971,   331,   332,     0,     0,   333,   334,   335,
     336,   337,   338,   621,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    25,    26,    27,     0,   351,
     352,   622,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     972,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   973,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      32,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   974,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   624,   438,     0,   439,   440,    37,   441,   442,
     443,   444,   445,   446,   447,     0,   448,   975,   976,     0,
       0,   451,   452,   625,   454,   626,   977,   456,   457,   627,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
      39,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   628,   978,     0,   478,   479,   480,   481,   482,   483,
     484,     0,     0,   485,     0,    43,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   979,     0,    44,
       0,     0,     0,     0,   980,   981,   982,     0,     0,     0,
       0,   983,     0,   984,  3143,     0,     0,     0,   985,   986,
     987,   988,   112,   939,   644,   940,   941,   942,   943,   944,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,   945,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   946,   136,   947,   948,     0,   139,   140,
     141,   142,   143,   144,   949,   614,   145,   146,   950,   951,
     149,     0,   150,   151,   152,   153,   615,     0,   616,     0,
     952,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   953,
     954,   185,   955,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   956,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   957,   214,   215,
     216,   217,   218,   617,   958,   220,     0,   221,   222,   959,
     224,     0,   225,     0,   226,   227,    21,   228,   229,   230,
     231,   232,   233,     0,   234,     0,   960,   961,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,   265,
     962,   963,     0,   964,     0,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,     0,   280,   281,
     282,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   965,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     966,   312,   967,   314,   315,   316,   317,   968,   318,   319,
     320,   321,   969,   619,   323,   970,   325,   326,   327,     0,
     328,   329,     0,     0,   971,   331,   332,     0,     0,   333,
     334,   335,   336,   337,   338,   621,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    25,    26,    27,
       0,   351,   352,   622,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   972,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   973,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    32,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   974,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   624,   438,     0,   439,   440,    37,
     441,   442,   443,   444,   445,   446,   447,     0,   448,   975,
     976,     0,     0,   451,   452,   625,   454,   626,   977,   456,
     457,   627,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,    39,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   628,   978,     0,   478,   479,   480,   481,
     482,   483,   484,     0,     0,   485,     0,    43,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   979,
       0,    44,     0,     0,     0,     0,   980,   981,   982,     0,
       0,     0,     0,   983,     0,   984,     0,     0,     0,     0,
     985,   986,   987,   988,  1213,   939,   644,   940,   941,   942,
     943,   944,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,  1214,   121,   122,   123,     0,     0,     0,  1215,     0,
     945,     0,     0,  1216,   125,   126,     0,   127,   128,   129,
    1217,   131,   132,   133,   134,   946,  1218,   947,   948,     0,
     139,   140,   141,   142,   143,   144,   949,   614,   145,   146,
     950,   951,   149,     0,   150,   151,   152,   153,   615,     0,
    1219,     0,  1220,   157,   158,   159,   160,   161,  1221,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
    1222,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   953,   954,   185,   955,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,  1223,
       0,   198,   199,   956,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   957,
     214,   215,   216,   217,   218,   617,   958,   220,     0,   221,
     222,   959,   224,     0,   225,     0,   226,  1224,     0,  1225,
     229,   230,  1226,  1227,   233,     0,   234,     0,   960,   961,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
    1228,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,  1229,   260,   261,   262,   263,
     264,   265,   962,   963,     0,   964,     0,   269,  1230,  1231,
     272,  1232,   274,   275,   276,   277,   278,   279,     0,     0,
     280,  1233,   282,  1234,     0,   284,   285,   286,   287,   288,
     289,   290,   291,  1235,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   966,  1236,   967,   314,   315,   316,   317,   968,
     318,   319,  1237,   321,   969,   619,   323,   970,   325,   326,
     327,     0,   328,   329,     0,     0,   971,   331,   332,     0,
       0,   333,   334,   335,  1238,   337,  1239,   621,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   622,  1240,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   972,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,  1241,   391,   392,   393,
     973,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,  1242,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,  1243,   419,   420,   974,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,  1244,   436,   624,   438,     0,   439,
     440,     0,   441,  1245,   443,   444,   445,   446,   447,     0,
     448,   975,   976,     0,     0,   451,   452,   625,   454,   626,
     977,   456,   457,  1246,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   978,  1247,   478,  1248,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   979,     0,     0,     0,     0,     0,     0,   980,   981,
     982,     0,     0,     0,     0,   983,     0,   984,  1249,     0,
       0,     0,   985,   986,   987,   988,   112,   939,   644,   940,
     941,   942,   943,   944,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,   945,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   946,   136,   947,
     948,  1378,   139,   140,   141,   142,   143,   144,   949,   614,
     145,   146,   950,   951,   149,     0,   150,   151,   152,   153,
     615,     0,   616,     0,   952,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   953,   954,   185,   955,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   956,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   957,   214,   215,   216,   217,   218,   617,   958,   220,
       0,   221,   222,   959,   224,     0,   225,     0,   226,   227,
    1379,   228,   229,   230,   231,   232,   233,     0,   234,     0,
     960,   961,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,   265,   962,   963,     0,   964,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
       0,  1380,   280,   281,   282,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   965,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   966,   312,   967,   314,   315,   316,
     317,   968,   318,   319,   320,   321,   969,   619,   323,   970,
     325,   326,   327,     0,   328,   329,     0,     0,   971,   331,
     332,     0,     0,   333,   334,   335,   336,   337,   338,   621,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   622,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   972,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   973,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   974,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   624,   438,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,     0,   448,   975,   976,     0,  1381,   451,   452,   625,
     454,   626,   977,   456,   457,   627,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   978,     0,
     478,   479,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   979,     0,     0,     0,     0,     0,     0,
     980,   981,   982,     0,     0,     0,     0,   983,     0,   984,
       0,     0,     0,     0,   985,   986,   987,   988,  1213,   939,
     644,   940,   941,   942,   943,   944,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,  1215,     0,   945,     0,     0,  1216,   125,   126,
       0,   127,   128,   129,  1217,   131,   132,   133,   134,   946,
    1218,   947,   948,     0,   139,   140,   141,   142,   143,   144,
     949,   614,   145,   146,   950,   951,   149,     0,   150,   151,
     152,   153,   615,     0,  1219,     0,  1220,   157,   158,   159,
     160,   161,  1221,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,  1222,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   953,   954,   185,   955,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   956,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   957,   214,   215,   216,   217,   218,   617,
     958,   220,     0,   221,   222,   959,   224,     0,   225,     0,
     226,  1224,     0,  1225,   229,   230,  1226,  1227,   233,     0,
     234,     0,   960,   961,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,  1228,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,  1229,
     260,   261,   262,   263,   264,   265,   962,   963,     0,   964,
       0,   269,  1230,  1231,   272,  1232,   274,   275,   276,   277,
     278,   279,     0,     0,   280,  1233,   282,  1234,     0,   284,
     285,   286,   287,   288,   289,   290,   291,  1235,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   966,  1236,   967,   314,
     315,   316,   317,   968,   318,   319,  1237,   321,   969,   619,
     323,   970,   325,   326,   327,     0,   328,   329,     0,     0,
     971,   331,   332,     0,     0,   333,   334,   335,  1238,   337,
    1239,   621,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   622,
    1240,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   972,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
    1241,   391,   392,   393,   973,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,  1242,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
    1243,   419,   420,   974,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,  1244,   436,
     624,   438,     0,   439,   440,     0,   441,  1245,   443,   444,
     445,   446,   447,     0,   448,   975,   976,     0,     0,   451,
     452,   625,   454,   626,   977,   456,   457,  1246,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     978,  2219,   478,  1248,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   979,     0,     0,     0,     0,
       0,     0,   980,   981,   982,     0,     0,     0,     0,   983,
       0,   984,     0,     0,     0,     0,   985,   986,   987,   988,
    1213,   939,   644,   940,   941,   942,   943,   944,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,  1215,     0,   945,     0,     0,  1216,
     125,   126,     0,   127,   128,   129,  1217,   131,   132,   133,
     134,   946,  1218,   947,   948,     0,   139,   140,   141,   142,
     143,   144,   949,   614,   145,   146,   950,   951,   149,     0,
     150,   151,   152,   153,   615,     0,  1219,     0,  1220,   157,
     158,   159,   160,   161,  1221,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,  1222,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   953,   954,   185,
     955,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   956,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   957,   214,   215,   216,   217,
     218,   617,   958,   220,     0,   221,   222,   959,   224,     0,
     225,     0,   226,  1224,     0,  1225,   229,   230,  1226,  1227,
     233,     0,   234,     0,   960,   961,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,  1228,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,  1229,   260,   261,   262,   263,   264,   265,   962,   963,
       0,   964,     0,   269,  1230,  1231,   272,  1232,   274,   275,
     276,   277,   278,   279,     0,     0,   280,  1233,   282,  1234,
       0,   284,   285,   286,   287,   288,   289,   290,   291,  1235,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   966,  1236,
     967,   314,   315,   316,   317,   968,   318,   319,  1237,   321,
     969,   619,   323,   970,   325,   326,   327,     0,   328,   329,
       0,     0,   971,   331,   332,     0,     0,   333,   334,   335,
    1238,   337,  1239,   621,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   622,  1240,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     972,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,  1241,   391,   392,   393,   973,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,  1242,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,  1243,   419,   420,   974,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
    1244,   436,   624,   438,     0,   439,   440,     0,   441,  1245,
     443,   444,   445,   446,   447,     0,   448,   975,   976,     0,
       0,   451,   452,   625,   454,   626,   977,   456,   457,  1246,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   978,     0,   478,  1248,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   979,     0,     0,
       0,     0,     0,     0,   980,   981,   982,     0,     0,     0,
       0,   983,     0,   984,  2268,     0,     0,     0,   985,   986,
     987,   988,   112,   939,   644,   940,   941,   942,   943,   944,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120, -1094,
     121,   122,   123,     0,     0,     0,     0, -1094,   945,     0,
       0,   124,   125,   126,     0,   127,   128,   129,   130,   131,
     132,   133,   134,   946,   136,   947,   948,     0,   139,   140,
     141,   142,   143,   144,   949,   614,   145,   146,   950,   951,
     149,     0,   150,   151,   152,   153,   615,     0,   616,     0,
     952,   157,   158,   159,   160,   161,   162,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,   172,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   953,
     954,   185,   955,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   956,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   957,   214,   215,
     216,   217,   218,   617,   958,   220,     0,   221,   222,   959,
     224,     0,   225,     0,   226,   227,     0,   228,   229,   230,
     231,   232,   233,     0,   234,     0,   960,   961,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,   259,   260,   261,   262,   263,   264,   265,
     962,   963,     0,   964,     0,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,     0,     0,   280,   281,
     282,   283,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   965,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     966,   312,   967,   314,   315,   316,   317,   968,   318,   319,
     320,   321,   969,   619,   323,   970,   325,   326,   327,     0,
     328,   329,     0,     0,   971,   331,   332,     0,     0,   333,
     334,   335,   336,   337,   338,   621,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   622,   354,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   972,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,   390,   391,   392,   393,   973,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   974,   422, -1094,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   624,   438,     0,   439,   440,     0,
     441,   442,   443,   444,   445,   446,   447,     0,   448,   975,
     976,     0,     0,   451,   452,   625,   454,   626,   977,   456,
     457,   627,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   978,     0,   478,   479,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   979,
       0,     0,     0,     0,     0,     0,   980,   981,   982,     0,
       0,     0,     0,   983,     0,   984,     0,     0,     0,     0,
     985,   986,   987,   988,  1213,   939,   644,   940,   941,   942,
     943,   944,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,  1215,     0,
     945,     0,     0,  1216,   125,   126,     0,   127,   128,   129,
    1217,   131,   132,   133,   134,   946,  1218,   947,   948,     0,
     139,   140,   141,   142,   143,   144,   949,   614,   145,   146,
     950,   951,   149,     0,   150,   151,   152,   153,   615,     0,
    1219,     0,  1220,   157,   158,   159,   160,   161,  1221,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
    1222,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   953,   954,   185,   955,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   956,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   957,
     214,   215,   216,   217,   218,   617,   958,   220,     0,   221,
     222,   959,   224,     0,   225,     0,   226,  1224,     0,  1225,
     229,   230,  1226,  1227,   233,     0,   234,     0,   960,   961,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
    1228,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,  1229,   260,   261,   262,   263,
     264,   265,   962,   963,     0,   964,     0,   269,  1230,  1231,
     272,  1232,   274,   275,   276,   277,   278,   279,     0,     0,
     280,  1233,   282,  1234,     0,   284,   285,   286,   287,   288,
     289,   290,   291,  1235,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   966,  1236,   967,   314,   315,   316,   317,   968,
     318,   319,  1237,   321,   969,   619,   323,   970,   325,   326,
     327,     0,   328,   329,     0,     0,   971,   331,   332,     0,
       0,   333,   334,   335,  1238,   337,  1239,   621,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   622,  1240,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   972,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,  1241,   391,   392,   393,
     973,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,  1242,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,  1243,   419,   420,   974,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,  1244,   436,   624,   438,     0,   439,
     440,     0,   441,  1245,   443,   444,   445,   446,   447,     0,
     448,   975,   976,     0,     0,   451,   452,   625,   454,   626,
     977,   456,   457,  1246,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   978,     0,   478,  1248,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   979,     0,     0,     0,     0,     0,     0,   980,   981,
     982,     0,     0,     0,     0,   983,     0,   984,  3007,     0,
       0,     0,   985,   986,   987,   988,  1213,   939,   644,   940,
     941,   942,   943,   944,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    1215,     0,   945,     0,     0,  1216,   125,   126,     0,   127,
     128,   129,  1217,   131,   132,   133,   134,   946,  1218,   947,
     948,     0,   139,   140,   141,   142,   143,   144,   949,   614,
     145,   146,   950,   951,   149,     0,   150,   151,   152,   153,
     615,     0,  1219,     0,  1220,   157,   158,   159,   160,   161,
    1221,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,  1222,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   953,   954,   185,   955,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   956,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   957,   214,   215,   216,   217,   218,   617,   958,   220,
       0,   221,   222,   959,   224,     0,   225,     0,   226,  1224,
       0,  1225,   229,   230,  1226,  1227,   233,     0,   234,     0,
     960,   961,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,  1228,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,  1229,   260,   261,
     262,   263,   264,   265,   962,   963,     0,   964,     0,   269,
    1230,  1231,   272,  1232,   274,   275,   276,   277,   278,   279,
       0,     0,   280,  1233,   282,  1234,     0,   284,   285,   286,
     287,   288,   289,   290,   291,  1235,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   966,  1236,   967,   314,   315,   316,
     317,   968,   318,   319,  1237,   321,   969,   619,   323,   970,
     325,   326,   327,     0,   328,   329,     0,     0,   971,   331,
     332,     0,     0,   333,   334,   335,  1238,   337,  1239,   621,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   622,  1240,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   972,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,  1241,   391,
     392,   393,   973,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,  1242,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,  1243,   419,
     420,   974,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,  1244,   436,   624,   438,
       0,   439,   440,     0,   441,  1245,   443,   444,   445,   446,
     447,     0,   448,   975,   976,     0,     0,   451,   452,   625,
     454,   626,   977,   456,   457,  1246,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   978,     0,
     478,  1248,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   979,     0,     0,     0,     0,     0,     0,
     980,   981,   982,     0,     0,     0,     0,   983,     0,   984,
       0,     0,     0,     0,   985,   986,   987,   988,   112,   939,
     644,   940,   941,     0,   943,   944,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,   945,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,   946,
     136,   947,   948,     0,   139,   140,   141,   142,   143,   144,
     949,   614,   145,   146,   950,   951,   149,     0,   150,   151,
     152,   153,   615,     0,   616,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   953,   954,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   956,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   957,   214,   215,   216,   217,   218,   617,
     958,   220,     0,   221,   222,   959,   224,     0,   225,     0,
     226,   227,    21,   228,   229,   230,   231,   232,   233,     0,
     234,     0,   960,   961,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,   265,   962,   963,     0,   964,
       0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,     0,     0,   280,   281,   282,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   965,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   966,   312,   967,   314,
     315,   316,   317,     0,   318,   319,   320,   321,   969,   619,
     323,   970,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,   336,   337,
     338,   621,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    25,    26,    27,     0,   351,   352,   622,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   972,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   973,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    32,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   974,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     624,   438,     0,   439,   440,    37,   441,   442,   443,   444,
     445,   446,   447,     0,   448,   975,   976,     0,     0,   451,
     452,   625,   454,   626,   977,   456,   457,   627,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,    39,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   628,
     978,     0,   478,   479,   480,   481,   482,   483,   484,     0,
       0,   485,     0,    43,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,     0,     0,    44,     0,     0,
       0,   112,   939,   644,   940,   941,   942,   943,   944,   983,
       0,   984,     0,     0,     0,     0,   985,   986,   987,   988,
     113,   114,   115,   116,   117,   118,   119,   120,  1643,   121,
     122,   123,     0,     0,     0,     0,     0,   945,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   946,   136,   947,   948,     0,   139,   140,   141,
     142,   143,   144,   949,   614,   145,   146,   950,   951,   149,
       0,   150,   151,   152,   153,   615,     0,   616,     0,   952,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   953,   954,
     185,   955,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   957,   214,   215,   216,
     217,   218,   617,   958,   220,     0,   221,   222,   959,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   960,   961,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   962,
     963,     0,   964,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,     0,   280,   281,   282,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     965,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   966,
     312,   967,   314,   315,   316,   317,   968,   318,   319,   320,
     321,   969,   619,   323,   970,   325,   326,   327,     0,   328,
     329,     0,     0,   971,   331,   332,     0,     0,   333,   334,
     335,   336,   337,   338,   621,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   622,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   972,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   973,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   974,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   624,   438,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,     0,   448,   975,   976,
       0,     0,   451,   452,   625,   454,   626,   977,   456,   457,
     627,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   978,     0,   478,   479,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   979,     0,
       0,     0,     0,     0,     0,   980,   981,   982,     0,     0,
       0,     0,   983,     0,   984,     0,     0,     0,     0,   985,
     986,   987,   988,   112,  1658,   644,   940,   941,   942,  1659,
     944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
    1660,   121,   122,   123,     0,     0,     0,     0,     0,   945,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   946,   136,   947,   948,     0,   139,
     140,   141,   142,   143,   144,   949,   614,   145,   146,   950,
     951,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   952,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     953,   954,   185,   955,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   956,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   957,   214,
     215,   216,   217,   218,   617,   958,   220,     0,   221,   222,
     959,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   960,   961,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   962,   963,     0,   964,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   965,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   966,   312,   967,   314,   315,   316,   317,   968,   318,
     319,   320,   321,   969,   619,   323,   970,   325,   326,   327,
       0,   328,   329,     0,     0,   971,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   972,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   973,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   974,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     975,   976,     0,     0,   451,   452,   625,   454,   626,   977,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   978,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     979,     0,     0,     0,     0,     0,     0,   980,   981,   982,
       0,     0,     0,     0,   983,     0,   984,     0,     0,     0,
       0,   985,   986,   987,   988,   112,   939,   644,   940,   941,
     942,   943,   944,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,   614,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   615,
       0,   616,     0,   952,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,   955,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   617,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,  1379,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   965,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
     968,   318,   319,   320,   321,   969,   619,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   971,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   621,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   622,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   973,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   624,   438,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   625,   454,
     626,   977,   456,   457,   627,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   979,     0,     0,     0,     0,     0,     0,   980,
     981,   982,     0,     0,     0,     0,   983,     0,   984,     0,
       0,     0,     0,   985,   986,   987,   988,   112,   939,   644,
     940,   941,   942,   943,   944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,   945,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,   946,   136,
     947,   948,     0,   139,   140,   141,   142,   143,   144,   949,
     614,   145,   146,   950,   951,   149,     0,   150,   151,   152,
     153,   615,     0,   616,     0,   952,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   953,   954,   185,   955,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   956,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   957,   214,   215,   216,   217,   218,   617,   958,
     220,     0,   221,   222,   959,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   960,   961,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,   265,   962,   963,     0,   964,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,     0,   280,   281,   282,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   965,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   966,   312,   967,   314,   315,
     316,   317,   968,   318,   319,   320,   321,   969,   619,   323,
     970,   325,   326,   327,     0,   328,   329,     0,     0,   971,
     331,   332,     0,     0,   333,   334,   335,   336,   337,   338,
     621,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   622,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   972,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   973,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   974,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   624,
     438,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,     0,   448,   975,   976,     0,     0,   451,   452,
     625,   454,   626,   977,   456,   457,   627,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   978,
       0,   478,   479,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   979,     0,     0,     0,     0,     0,
       0,   980,   981,   982,     0,     0,     0,     0,   983,     0,
     984,  1993,     0,     0,     0,   985,   986,   987,   988,   112,
     939,   644,   940,   941,   942,   943,   944,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,   945,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
     946,   136,   947,   948,     0,   139,   140,   141,   142,   143,
     144,   949,   614,   145,   146,   950,   951,   149,     0,   150,
     151,   152,   153,   615,     0,   616,     0,   952,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   953,   954,   185,   955,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   956,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   957,   214,   215,   216,   217,   218,
     617,   958,   220,     0,   221,   222,   959,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   960,   961,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,   265,   962,   963,     0,
     964,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,     0,   280,   281,   282,   283,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   965,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   966,   312,   967,
     314,   315,   316,   317,   968,   318,   319,   320,   321,   969,
     619,   323,   970,   325,   326,   327,     0,   328,   329,     0,
       0,   971,   331,   332,     0,     0,   333,   334,   335,   336,
     337,   338,   621,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     622,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   972,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   973,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   974,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   624,   438,     0,   439,   440,  2609,   441,   442,   443,
     444,   445,   446,   447,     0,   448,   975,   976,     0,     0,
     451,   452,   625,   454,   626,   977,   456,   457,   627,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   978,     0,   478,   479,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   979,     0,     0,     0,
       0,     0,     0,   980,   981,   982,     0,     0,     0,     0,
     983,     0,   984,     0,     0,     0,     0,   985,   986,   987,
     988,   112,   939,   644,   940,   941,   942,   943,   944,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   945,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   946,   136,   947,   948,     0,   139,   140,   141,
     142,   143,   144,   949,   614,   145,   146,   950,   951,   149,
       0,   150,   151,   152,   153,   615,     0,   616,     0,   952,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   953,   954,
     185,   955,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   957,   214,   215,   216,
     217,   218,   617,   958,   220,     0,   221,   222,   959,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   960,   961,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   962,
     963,     0,   964,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,     0,   280,   281,   282,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     965,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   966,
     312,   967,   314,   315,   316,   317,   968,   318,   319,   320,
     321,   969,   619,   323,   970,   325,   326,   327,     0,   328,
     329,     0,     0,   971,   331,   332,     0,     0,   333,   334,
     335,   336,   337,   338,   621,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   622,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   972,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   973,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   974,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   624,   438,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,     0,   448,   975,   976,
       0,     0,   451,   452,   625,   454,   626,   977,   456,   457,
     627,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   978,     0,   478,   479,   480,   481,   482,
     483,   484,     0,  2733,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   979,     0,
       0,     0,     0,     0,     0,   980,   981,   982,     0,     0,
       0,     0,   983,     0,   984,     0,     0,     0,     0,   985,
     986,   987,   988,   112,   939,   644,   940,   941,   942,   943,
     944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
    2950,   121,   122,   123,     0,     0,     0,     0,     0,   945,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   946,   136,   947,   948,     0,   139,
     140,   141,   142,   143,   144,   949,   614,   145,   146,   950,
     951,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   952,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,  2951,   175,   176,   177,   178,   179,   180,   181,   182,
     953,   954,   185,   955,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   956,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   957,   214,
     215,   216,   217,   218,   617,   958,   220,     0,   221,   222,
     959,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,  2952,   961,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   962,   963,     0,   964,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   965,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   966,   312,   967,   314,   315,   316,   317,   968,   318,
     319,   320,   321,   969,   619,   323,   970,   325,   326,   327,
       0,   328,   329,     0,     0,   971,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   972,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,  2953,   973,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   974,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     975,   976,     0,     0,   451,   452,   625,   454,   626,   977,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   978,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     979,     0,     0,     0,     0,     0,     0,   980,   981,   982,
       0,     0,     0,     0,   983,     0,  2954,     0,     0,     0,
       0,   985,   986,   987,   988,   112,   939,   644,   940,   941,
     942,   943,   944,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,   614,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   615,
       0,   616,     0,   952,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,   955,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   617,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   965,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
     968,   318,   319,   320,   321,   969,   619,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   971,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   621,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   622,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   973,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   624,   438,     0,
     439,   440,  3101,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   625,   454,
     626,   977,   456,   457,   627,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   979,     0,     0,     0,     0,     0,     0,   980,
     981,   982,     0,     0,     0,     0,   983,     0,   984,     0,
       0,     0,     0,   985,   986,   987,   988,   112,   939,   644,
     940,   941,   942,   943,   944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,   945,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,   946,   136,
     947,   948,     0,   139,   140,   141,   142,   143,   144,   949,
     614,   145,   146,   950,   951,   149,     0,   150,   151,   152,
     153,   615,     0,   616,     0,   952,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   953,   954,   185,   955,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   956,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   957,   214,   215,   216,   217,   218,   617,   958,
     220,     0,   221,   222,   959,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   960,   961,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,   265,   962,   963,     0,   964,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,     0,   280,   281,   282,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   965,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   966,   312,   967,   314,   315,
     316,   317,   968,   318,   319,   320,   321,   969,   619,   323,
     970,   325,   326,   327,     0,   328,   329,     0,     0,   971,
     331,   332,     0,     0,   333,   334,   335,   336,   337,   338,
     621,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   622,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   972,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   973,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   974,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   624,
     438,     0,   439,   440,  3241,   441,   442,   443,   444,   445,
     446,   447,     0,   448,   975,   976,     0,     0,   451,   452,
     625,   454,   626,   977,   456,   457,   627,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   978,
       0,   478,   479,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   979,     0,     0,     0,     0,     0,
       0,   980,   981,   982,     0,     0,     0,     0,   983,     0,
     984,     0,     0,     0,     0,   985,   986,   987,   988,   112,
     939,   644,   940,   941,   942,   943,   944,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,   945,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
     946,   136,   947,   948,     0,   139,   140,   141,   142,   143,
     144,   949,   614,   145,   146,   950,   951,   149,     0,   150,
     151,   152,   153,   615,     0,   616,     0,   952,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   953,   954,   185,   955,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   956,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   957,   214,   215,   216,   217,   218,
     617,   958,   220,     0,   221,   222,   959,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   960,   961,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,   265,   962,   963,     0,
     964,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,     0,   280,   281,   282,   283,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   965,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   966,   312,   967,
     314,   315,   316,   317,   968,   318,   319,   320,   321,   969,
     619,   323,   970,   325,   326,   327,     0,   328,   329,     0,
       0,   971,   331,   332,     0,     0,   333,   334,   335,   336,
     337,   338,   621,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     622,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   972,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   973,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   974,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   624,   438,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,     0,   448,   975,   976,     0,     0,
     451,   452,   625,   454,   626,   977,   456,   457,   627,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   978,     0,   478,   479,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   979,     0,     0,     0,
       0,     0,     0,   980,   981,   982,     0,     0,     0,     0,
     983,     0,   984,     0,     0,     0,     0,   985,   986,   987,
     988,   112,   939,   644,   940,   941,   942,   943,   944,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   945,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   946,   136,   947,   948,     0,   139,   140,   141,
     142,   143,   144,   949,   614,   145,   146,   950,   951,   149,
       0,   150,   151,   152,   153,   615,     0,   616,     0,   952,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   953,   954,
     185,   955,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   957,   214,   215,   216,
     217,   218,   617,   958,   220,     0,   221,   222,   959,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   960,   961,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   962,
     963,     0,   964,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,     0,   280,   281,   282,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     965,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   966,
     312,   967,   314,   315,   316,   317,   968,   318,   319,   320,
     321,   969,   619,   323,   970,   325,   326,   327,     0,   328,
     329,     0,     0,   971,   331,   332,     0,     0,   333,   334,
     335,   336,   337,   338,   621,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   622,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   972,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   973,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   974,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   624,   438,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,     0,   448,   975,   976,
       0,     0,   451,   452,   625,   454,   626,   977,   456,   457,
     627,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   978,     0,   478,   479,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   979,     0,
       0,     0,     0,     0,     0,  1663,  1664,   982,     0,     0,
       0,     0,   983,     0,   984,     0,     0,     0,     0,   985,
     986,   987,   988,   112,  2130,   644,   940,   941,   942,   943,
     944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,   945,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   946,   136,   947,   948,     0,   139,
     140,   141,   142,   143,   144,   949,   614,   145,   146,   950,
     951,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   952,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     953,   954,   185,   955,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   956,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   957,   214,
     215,   216,   217,   218,   617,   958,   220,     0,   221,   222,
     959,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   960,   961,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   962,   963,     0,   964,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   965,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   966,   312,   967,   314,   315,   316,   317,   968,   318,
     319,   320,   321,   969,   619,   323,   970,   325,   326,   327,
       0,   328,   329,     0,     0,   971,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   972,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   973,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   974,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     975,   976,     0,     0,   451,   452,   625,   454,   626,   977,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   978,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     979,     0,     0,     0,     0,     0,     0,   980,   981,   982,
       0,     0,     0,     0,   983,     0,   984,     0,     0,     0,
       0,   985,   986,   987,   988,   112,   939,   644,   940,   941,
     942,   943,   944,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,   614,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   615,
       0,   616,     0,   952,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,   955,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   617,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   965,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
     968,   318,   319,   320,   321,   969,   619,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   971,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   621,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   622,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   973,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   624,   438,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   625,   454,
     626,   977,   456,   457,   627,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   979,     0,     0,     0,     0,     0,     0,   980,
    2213,   982,     0,     0,     0,     0,   983,     0,   984,     0,
       0,     0,     0,   985,   986,   987,   988,   112,   939,   644,
     940,   941,   942,   943,   944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,   945,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,   946,   136,
     947,   948,     0,   139,   140,   141,   142,   143,   144,   949,
     614,   145,   146,   950,   951,   149,     0,   150,   151,   152,
     153,   615,     0,   616,     0,   952,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   953,   954,   185,   955,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   956,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   957,   214,   215,   216,   217,   218,   617,   958,
     220,     0,   221,   222,   959,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   960,   961,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,   265,   962,   963,     0,   964,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,     0,   280,   281,   282,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   965,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   966,   312,   967,   314,   315,
     316,   317,   968,   318,   319,   320,   321,   969,   619,   323,
     970,   325,   326,   327,     0,   328,   329,     0,     0,   971,
     331,   332,     0,     0,   333,   334,   335,   336,   337,   338,
     621,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   622,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   972,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   973,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   974,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   624,
     438,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,     0,   448,   975,   976,     0,     0,   451,   452,
     625,   454,   626,   977,   456,   457,   627,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   978,
       0,   478,   479,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   979,     0,     0,     0,     0,     0,
       0,   980,   981,   982,     0,     0,     0,     0,   983,     0,
    2417,     0,     0,     0,     0,   985,   986,   987,   988,   112,
     939,   644,   940,   941,   942,   943,   944,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,   945,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133,   134,
     946,   136,   947,   948,     0,   139,   140,   141,   142,   143,
     144,   949,   614,   145,   146,   950,   951,   149,     0,   150,
     151,   152,   153,   615,     0,   616,     0,   952,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   953,   954,   185,   955,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   956,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   957,   214,   215,   216,   217,   218,
     617,   958,   220,     0,   221,   222,   959,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231,   232,   233,
       0,   234,     0,   960,   961,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,   265,   962,   963,     0,
     964,     0,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,     0,     0,   280,   281,   282,   283,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   965,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   966,   312,   967,
     314,   315,   316,   317,   968,   318,   319,   320,   321,   969,
     619,   323,   970,   325,   326,   327,     0,   328,   329,     0,
       0,   971,   331,   332,     0,     0,   333,   334,   335,   336,
     337,   338,   621,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     622,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   972,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   973,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,   418,   419,   420,   974,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   624,   438,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,     0,   448,   975,   976,     0,     0,
     451,   452,   625,   454,   626,   977,   456,   457,   627,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   978,     0,   478,   479,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   979,     0,     0,     0,
       0,     0,     0,   980,  3005,   982,     0,     0,     0,     0,
     983,     0,   984,     0,     0,     0,     0,   985,   986,   987,
     988,   112,   939,   644,   940,   941,   942,   943,   944,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   945,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   946,   136,   947,   948,     0,   139,   140,   141,
     142,   143,   144,   949,   614,   145,   146,   950,   951,   149,
       0,   150,   151,   152,   153,   615,     0,   616,     0,   952,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,  2951,
     175,   176,   177,   178,   179,   180,   181,   182,   953,   954,
     185,   955,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   957,   214,   215,   216,
     217,   218,   617,   958,   220,     0,   221,   222,   959,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,  2952,   961,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   962,
     963,     0,   964,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,     0,   280,   281,   282,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     965,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   966,
     312,   967,   314,   315,   316,   317,   968,   318,   319,   320,
     321,   969,   619,   323,   970,   325,   326,   327,     0,   328,
     329,     0,     0,   971,   331,   332,     0,     0,   333,   334,
     335,   336,   337,   338,   621,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   622,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   972,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,  2953,   973,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   974,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   624,   438,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,     0,   448,   975,   976,
       0,     0,   451,   452,   625,   454,   626,   977,   456,   457,
     627,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   978,     0,   478,   479,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   979,     0,
       0,     0,     0,     0,     0,   980,   981,   982,     0,     0,
       0,     0,   983,     0,  2954,     0,     0,     0,     0,   985,
     986,   987,   988,   112,   939,   644,   940,   941,   942,   943,
     944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,   945,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,  3417,   946,   136,   947,   948,     0,   139,
     140,   141,   142,   143,   144,   949,   614,   145,   146,   950,
     951,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   952,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,  3418,   176,   177,   178,   179,   180,   181,   182,
     953,   954,   185,   955,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   956,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   957,   214,
     215,   216,   217,   218,   617,   958,   220,     0,   221,   222,
     959,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   960,   961,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   962,   963,     0,   964,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   965,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   966,   312,   967,   314,   315,   316,   317,   968,   318,
     319,   320,   321,   969,   619,   323,   970,   325,   326,   327,
       0,   328,   329,     0,     0,   971,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   972,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   973,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   974,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     975,   976,     0,     0,   451,   452,   625,   454,   626,   977,
     456,   457,   627,   459,   460,  3419,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   978,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     979,     0,     0,     0,     0,     0,     0,   980,   981,   982,
       0,     0,     0,     0,   983,     0,   984,     0,     0,     0,
       0,   985,   986,   987,   988,   112,   939,   644,   940,   941,
     942,   943,   944,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,   614,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   615,
       0,   616,     0,   952,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,  3418,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,   955,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   617,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   965,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
     968,   318,   319,   320,   321,   969,   619,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   971,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   621,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   622,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   973,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   624,   438,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   625,   454,
     626,   977,   456,   457,   627,   459,   460,  3419,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   979,     0,     0,     0,     0,     0,     0,   980,
     981,   982,     0,     0,     0,     0,   983,     0,   984,     0,
       0,     0,     0,   985,   986,   987,   988,   112,   939,   644,
     940,   941,   942,   943,   944,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,   945,     0,     0,   124,   125,   126,     0,
     127,   128,   129,   130,   131,   132,   133,   134,   946,   136,
     947,   948,     0,   139,   140,   141,   142,   143,   144,   949,
     614,   145,   146,   950,   951,   149,     0,   150,   151,   152,
     153,   615,     0,   616,     0,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   953,   954,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   956,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   957,   214,   215,   216,   217,   218,   617,   958,
     220,     0,   221,   222,   959,   224,     0,   225,     0,   226,
     227,     0,   228,   229,   230,   231,   232,   233,     0,   234,
       0,   960,   961,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,   259,   260,
     261,   262,   263,   264,   265,   962,   963,     0,   964,     0,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,     0,     0,   280,   281,   282,   283,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   965,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   966,   312,   967,   314,   315,
     316,   317,     0,   318,   319,   320,   321,   969,   619,   323,
     970,   325,   326,   327,     0,   328,   329,     0,     0,   971,
     331,   332,     0,     0,   333,   334,   335,   336,   337,   338,
     621,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   622,   354,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   972,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   973,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   974,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   624,
     438,     0,   439,   440,     0,   441,   442,   443,   444,   445,
     446,   447,     0,   448,   975,   976,     0,     0,   451,   452,
     625,   454,   626,   977,   456,   457,   627,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   978,
       0,   478,   479,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,     0,     0,     0,     0,     0,     0,
       0,  1365,  1366,     0,     0,     0,     0,     0,   983,     0,
     984,     0,     0,     0,     0,   985,   986,   987,   988,   112,
     939,   644,   940,   941,   942,   943,   944,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,   945,     0,     0,   124,   125,
     126,     0,   127,   128,   129,   130,   131,   132,   133, -2002,
     946,   136,   947,   948,     0,   139,   140,   141,   142,   143,
     144,   949,   614,   145,   146,   950,   951,   149,     0,   150,
     151,   152,   153,   615,     0,   616,     0,   952,   157,   158,
     159,   160,   161,   162,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   172,   173,   174,  3418,   176,
     177,   178,   179,   180,   181,   182,   953,   954,   185,   955,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   956,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   957,   214,   215,   216,   217,   218,
     617,   958,   220,     0,   221,   222,   959,   224,     0,   225,
       0,   226,   227,     0,   228,   229,   230,   231, -2002,   233,
       0,   234,     0,   960,   961,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245, -2002,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     259,   260,   261,   262,   263,   264,   265,   962,   963,     0,
     964,     0,   269,     0,     0,   272,   273,   274,   275,   276,
     277,   278,   279,     0,     0,   280,   281,   282, -2002,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   965,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   966,   312,   967,
     314,   315,   316,   317,     0,   318,   319,     0,   321,   969,
     619,   323,   970,   325,   326,   327,     0,   328,   329,     0,
       0,   971,   331,   332,     0,     0,   333,   334,   335,   336,
     337,   338,   621,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     622,   354,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   972,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   390,   391,   392,   393,   973,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417, -2002,   419,   420,   974,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   624,   438,     0,   439,   440,     0,   441,   442,   443,
     444,   445,   446,   447,     0,   448,   975,   976,     0,     0,
     451,   452,   625,   454,   626,   977,   456,   457,   627,   459,
     460,  3419,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   978,     0,   478,   479,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506, -2002,     0,     0,     0,
       0,     0,     0,   980,   981,   982,     0,     0,     0,     0,
     983,     0,   984,     0,     0,     0,     0,   985,   986,   987,
     988,   112,   939,   644,   940,   941,     0,   943,   944,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,   945,     0,     0,
     124,   125,   126,     0,   127,   128,   129,   130,   131,   132,
     133,   134,   946,   136,   947,   948,     0,   139,   140,   141,
     142,   143,   144,   949,   614,   145,   146,   950,   951,   149,
       0,   150,   151,   152,   153,   615,     0,   616,     0,   156,
     157,   158,   159,   160,   161,   162,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   953,   954,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   957,   214,   215,   216,
     217,   218,   617,   958,   220,     0,   221,   222,   959,   224,
       0,   225,     0,   226,   227,     0,   228,   229,   230,   231,
     232,   233,     0,   234,     0,   960,   961,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   962,
     963,     0,   964,     0,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,     0,     0,   280,   281,   282,
     283,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     965,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   966,
     312,   967,   314,   315,   316,   317,     0,   318,   319,   320,
     321,   969,   619,   323,   970,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,   336,   337,   338,   621,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   622,   354,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   972,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,  2116,  2117,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   974,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   624,   438,     0,   439,   440,     0,   441,
     442,   443,   444,   445,   446,   447,     0,   448,   975,   976,
       0,     0,   451,   452,   625,   454,   626,   977,   456,   457,
     627,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   978,     0,   478,   479,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,     0,     0,
       0,     0,     0,     0,     0,  2118,  2119,     0,     0,     0,
       0,     0,   983,     0,   984,     0,     0,     0,     0,   985,
     986,   987,   988,   112,   939,   644,   940,   941,   942,   943,
     944,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,   945,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   946,   136,   947,   948,     0,   139,
     140,   141,   142,   143,   144,   949,   614,   145,   146,   950,
     951,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     953,   954,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   956,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   957,   214,
     215,   216,   217,   218,   617,   958,   220,     0,   221,   222,
     959,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   960,   961,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   962,   963,     0,   964,     0,   269,     0,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   965,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   966,   312,   967,   314,   315,   316,   317,     0,   318,
     319,   320,   321,   969,   619,   323,   970,   325,   326,   327,
       0,   328,   329,     0,     0,   971,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   972,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   973,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   974,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     975,   976,     0,     0,   451,   452,   625,   454,   626,   977,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   978,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
       0,     0,     0,     0,     0,     0,     0,  1365,  1366,     0,
       0,     0,     0,     0,   983,     0,   984,     0,     0,     0,
       0,   985,   986,   987,   988,   112,   939,   644,   940,   941,
       0,   943,   944,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,   614,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   615,
       0,   616,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   617,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   965,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
       0,   318,   319,   320,   321,   969,   619,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   621,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   622,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   973,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   624,   438,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   625,   454,
     626,   977,   456,   457,   627,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,     0,     0,   112,   939,
     644,   940,   941,   942,   943,   944,   983,     0,   984,     0,
       0,     0,     0,   985,   986,   987,   988,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,   945,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,     0,   946,
     136,   947,   948,     0,   139,   140,   141,   142,   143,   144,
     949,   614,   145,   146,   950,   951,   149,     0,   150,   151,
     152,   153,   615,     0,   616,     0,   952,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   953,   954,   185,   955,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   956,   201,   202,
       0,   203,   204,   205,     0,   206,     0,   208,     0,   209,
     210,   211,   212,   957,   214,   215,   216,   217,   218,   617,
     958,   220,     0,   221,   222,   959,   224,     0,   225,     0,
     226,   227,     0,   228,   229,   230,   231,     0,   233,     0,
     234,     0,   960,   961,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,   265,   962,   963,     0,   964,
       0,   269,     0,     0,   272,   273,   274,   275,   276,   277,
     278,   279,     0,     0,   280,   281,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   965,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   966,   312,   967,   314,
     315,   316,   317,     0,   318,   319,     0,   321,   969,   619,
     323,   970,   325,   326,   327,     0,   328,   329,     0,     0,
     971,   331,   332,     0,     0,   333,   334,   335,   336,   337,
     338,   621,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   622,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   972,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   973,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   974,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     624,   438,     0,   439,   440,     0,   441,   442,   443,   444,
     445,   446,   447,     0,   448,   975,   976,     0,     0,   451,
     452,   625,   454,   626,   977,   456,   457,   627,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     978,     0,   478,   479,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,     0,     0,     0,     0,     0,
       0,     0,   980,   981,   982,     0,   781,  1308,   644,   983,
       0,   984,   943,     0,     0,     0,   985,   986,   987,   988,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
     782,     0,     0,     0,     0,   783,   125,   126,     0,   127,
     128,   129,   784,   131,   132,   133,   785,   786,   787,   788,
     789,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   790,   791,   149,     0,   150,   151,   152,   153,
     792,     0,   793,     0,   794,   157,   158,   159,   160,   161,
     795,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   796,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   797,   798,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   799,   214,   215,   216,   217,   218,   800,  1309,   220,
       0,   221,   222,   801,   224,     0,   225,     0,   226,   802,
       0,   803,   229,   230,   804,   805,   233,     0,   234,     0,
     806,   807,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   808,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   809,   810,   261,
     262,   263,   264,   265,   811,   812,     0,   813,     0,   269,
     814,   815,   272,   816,   274,   275,   276,   277,   278,   279,
       0,     0,   280,   817,   282,   818,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   819,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   820,   821,   822,   314,   315,   316,
     823,     0,   318,   319,   824,   321,     0,   825,   323,   826,
     325,   326,   327,     0,   328,   329,  1310,     0,   330,   331,
     332,     0,     0,   333,   334,   827,   828,   337,   829,   830,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   831,   832,   355,
     356,   833,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   834,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   835,   391,
     392,   393,   836,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   837,   408,   409,
     410,   411,   412,   413,   838,   415,   416,   417,   839,   419,
     420,   840,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   841,   436,   842,   438,
       0,   439,   440,     0,   441,   843,   443,   444,   445,   446,
     447,     0,   448,   844,   845,     0,     0,   451,   452,   846,
     454,   847,  1311,   456,   457,   848,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,  1201,   850,     0,
     478,   851,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   503,
     504,   505,   506,     0,     0,     0,     0,     0,     0,     0,
    1312,  1313,  2285,     0,   112,   939,   644,   940,   941,  2286,
     943,     0,     0,     0,     0,     0,     0,   988,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
     945,     0,     0,   124,   125,   126,     0,   127,   128,   129,
     130,   131,   132,   133,   134,   946,   136,   947,   948,     0,
     139,   140,   141,   142,   143,   144,   949,     0,   145,   146,
     950,   951,   149,     0,   150,   151,   152,   153,   154,     0,
     155,     0,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   953,   954,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   956,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   957,
     214,   215,   216,   217,   218,   219,   958,   220,     0,   221,
     222,   959,   224,     0,   225,     0,   226,   227,     0,   228,
     229,   230,   231,   232,   233,     0,   234,  2971,   960,   961,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,   259,   260,   261,   262,   263,
     264,   265,   962,   963,     0,   964,     0,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,     0,     0,
     280,   281,   282,   283,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   966,   312,   967,   314,   315,   316,   317,     0,
     318,   319,   320,   321,   969,   322,   323,   970,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   972,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   974,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,     0,   439,
     440,     0,   441,   442,   443,   444,   445,   446,   447,     0,
     448,   975,   976,     0,     0,   451,   452,   453,   454,   455,
     977,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   978,     0,   478,   479,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,     0,     0,     0,     0,   112,   939,   644,   940,   941,
       0,   943,     0,     0,     0,   983,     0,  2662,     0,     0,
       0,     0,   985,   986,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,   945,     0,     0,   124,   125,   126,     0,   127,   128,
     129,   130,   131,   132,   133,   134,   946,   136,   947,   948,
       0,   139,   140,   141,   142,   143,   144,   949,     0,   145,
     146,   950,   951,   149,     0,   150,   151,   152,   153,   154,
       0,   155,     0,   156,   157,   158,   159,   160,   161,   162,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   953,   954,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   956,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     957,   214,   215,   216,   217,   218,   219,   958,   220,     0,
     221,   222,   959,   224,     0,   225,     0,   226,   227,     0,
     228,   229,   230,   231,   232,   233,     0,   234,     0,   960,
     961,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   259,   260,   261,   262,
     263,   264,   265,   962,   963,     0,   964,     0,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   281,   282,   283,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   966,   312,   967,   314,   315,   316,   317,
       0,   318,   319,   320,   321,   969,   322,   323,   970,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,   354,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   972,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     974,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,   438,     0,
     439,   440,     0,   441,   442,   443,   444,   445,   446,   447,
       0,   448,   975,   976,     0,     0,   451,   452,   453,   454,
     455,   977,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   978,     0,   478,
     479,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,     0,     0,     0,     0,   514,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   983,     0,  2662,     0,
       0,     0,     0,   985,   986,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,   897,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,  -524,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
    -524,   221,   222,   223,   224,  -524,   225,     0,   226,     0,
       0,     0,   229,   230,   515,     0,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,     0,   260,   261,
     262,   263,   264,   265,   266,   267,  -524,   268,     0,   269,
       0,     0,   272,     0,   274,   275,   276,   277,   278,   279,
       0,     0,   280,     0,   282,     0,  -524,   284,   285,   286,
     287,   288,   289,   290,   291,   516,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   313,   314,   315,   316,
     317,     0,   318,   319,     0,   321,     0,   322,   323,   324,
     325,   326,   327,  -524,   328,   329,     0,     0,   330,   331,
     332,     0,  -524,   333,   334,   335,     0,   337,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   517,   436,   437,   438,
       0,   439,   440,     0,   441,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,     0,     0,   451,   452,   453,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
     463,  -524,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,     0,
     478,     0,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   514,     0,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1054,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   515,     0,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,     0,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,     0,     0,   272,
       0,   274,   275,   276,   277,   278,   279,     0,     0,   280,
       0,   282,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   516,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   313,   314,   315,   316,   317,     0,   318,
     319,     0,   321,     0,   322,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,     0,   337,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   517,   436,   437,   438,     0,   439,   440,
       0,   441,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   453,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,     0,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     781,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2370,  3158,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     3,     4,     0,   782,     0,     0,     0,     0,   783,
     125,   126,     0,   127,   128,   129,   784,   131,   132,   133,
     785,   786,   787,   788,   789,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   790,   791,   149,     0,
     150,   151,   152,   153,   792,     0,   793,     0,   794,   157,
     158,   159,   160,   161,   795,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   796,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   797,   798,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   799,   214,   215,   216,   217,
     218,   800,     0,   220,     0,   221,   222,   801,   224,     0,
     225,     0,   226,   802,    21,   803,   229,   230,   804,   805,
     233,     0,   234,     0,   806,   807,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   808,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   809,   810,   261,   262,   263,   264,   265,   811,   812,
       0,   813,     0,   269,   814,   815,   272,   816,   274,   275,
     276,   277,   278,   279,     0,     0,   280,   817,   282,   818,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   819,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   820,   821,
     822,   314,   315,   316,   823,     0,   318,   319,   824,   321,
       0,   825,   323,   826,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   827,
     828,   337,   829,   830,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    25,    26,    27,     0,   351,
     352,   831,   832,   355,   356,   833,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     834,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   835,   391,   392,   393,   836,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      32,   837,   408,   409,   410,   411,   412,   413,   838,   415,
     416,   417,   839,   419,   420,   840,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     841,   436,   842,   438,     0,   439,   440,    37,   441,   843,
     443,   444,   445,   446,   447,     0,   448,   844,   845,     0,
       0,   451,   452,   846,   454,   847,     0,   456,   457,   848,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
      39,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   849,   850,     0,   478,   851,   480,   481,   482,   483,
     484,     0,     0,   485,     0,    43,   486,   487,   488,   489,
     490,   491,   852,   853,   854,   855,   856,   857,   858,   859,
     860,   861,   862,   503,   504,   505,   506,     0,   112,    44,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    45,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,   124,   125,   126,
       0,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,   614,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   615,     0,   616,     0,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   617,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,   227,    21,   228,   229,   230,   231,   232,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   618,     0,   280,   281,   282,   283,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,     0,   318,   319,   320,   321,     0,   619,
     323,   324,   325,   326,   327,     0,   328,   329,     0,   620,
     330,   331,   332,     0,     0,   333,   334,   335,   336,   337,
     338,   621,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    25,    26,    27,     0,   351,   352,   622,
     354,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
     390,   391,   392,   393,   394,   623,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    32,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     624,   438,     0,   439,   440,    37,   441,   442,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   625,   454,   626,     0,   456,   457,   627,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,    39,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   628,
     477,     0,   478,   479,   480,   481,   482,   483,   484,     0,
       0,   485,     0,    43,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,     0,   112,    44,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   629,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,   124,   125,   126,     0,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,   614,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     615,     0,   616,     0,   156,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   172,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   617,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,   227,
       0,   228,   229,   230,   231,   232,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,     0,   268,     0,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
     618,     0,   280,   281,   282,   283,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
     317,     0,   318,   319,   320,   321,     0,   619,   323,   324,
     325,   326,   327,     0,   328,   329,     0,   620,   330,   331,
     332,     0,     0,   333,   334,   335,   336,   337,   338,   621,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   622,   354,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   623,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   624,   438,
       0,   439,   440,     0,   441,   442,   443,   444,   445,   446,
     447,     0,   448,   449,   450,     0,     0,   451,   452,   625,
     454,   626,     0,   456,   457,   627,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   628,   477,     0,
     478,   479,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   112,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   629,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,   614,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   617,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   320,   321,     0,   619,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     623,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   625,   454,   626,     0,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    45,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,   614,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   615,     0,   616,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   617,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,     0,   280,   281,   282,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   619,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
     336,   337,   338,   621,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   622,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   624,   438,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   625,   454,   626,     0,   456,   457,   627,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3246,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,   714,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,    21,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    25,    26,    27,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    32,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,    37,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   715,   450,     0,     0,   716,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,    39,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   628,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,    43,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,    44,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      45,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,    21,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    25,
      26,    27,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    32,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,    37,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,     0,     0,   451,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,    39,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   628,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,    43,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,     0,   514,    44,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     515,     0,   233,     0,   234,     0,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,     0,   260,   261,   262,   263,   264,   265,
     266,   267,     0,   268,     0,   269,     0,     0,   272,     0,
     274,   275,   276,   277,   278,   279,     0,     0,   280,     0,
     282,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   516,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,     0,
     328,   329,     0,     0,   330,   331,   332,     0,     0,   333,
     334,   335,     0,   337,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,   419,   420,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   517,   436,   437,   438,     0,   439,   440,     0,
     441,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,     0,     0,   451,   452,   453,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,     0,   478,     0,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   514,
       0,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   882,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   515,     0,   233,
       0,   234,     0,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
       0,   260,   261,   262,   263,   264,   265,   266,   267,     0,
     268,     0,   269,     0,     0,   272,     0,   274,   275,   276,
     277,   278,   279,     0,     0,   280,     0,   282,     0,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   516,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   313,
     314,   315,   316,   317,     0,   318,   319,     0,   321,     0,
     322,   323,   324,   325,   326,   327,     0,   328,   329,     0,
       0,   330,   331,   332,     0,     0,   333,   334,   335,     0,
     337,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   419,   420,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   517,
     436,   437,   438,     0,   439,   440,     0,   441,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,     0,     0,
     451,   452,   453,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,     0,   478,     0,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   514,     0,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1417,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   515,     0,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,     0,   260,   261,
     262,   263,   264,   265,   266,   267,     0,   268,     0,   269,
       0,     0,   272,     0,   274,   275,   276,   277,   278,   279,
       0,     0,   280,     0,   282,     0,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   516,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   313,   314,   315,   316,
     317,     0,   318,   319,     0,   321,     0,   322,   323,   324,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,   335,     0,   337,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   517,   436,   437,   438,
       0,   439,   440,     0,   441,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,     0,     0,   451,   452,   453,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,     0,
     478,     0,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   514,     0,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2142,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   515,     0,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,     0,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,     0,     0,   272,
       0,   274,   275,   276,   277,   278,   279,     0,     0,   280,
       0,   282,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   516,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   313,   314,   315,   316,   317,     0,   318,
     319,     0,   321,     0,   322,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,     0,   337,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   517,   436,   437,   438,     0,   439,   440,
       0,   441,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   453,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,     0,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     514,     0,   539,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2370,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   515,     0,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,     0,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,     0,     0,   272,     0,   274,   275,
     276,   277,   278,   279,     0,     0,   280,     0,   282,     0,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   516,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
       0,   337,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     517,   436,   437,   438,     0,   439,   440,     0,   441,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,     0,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,   539,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2501,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,     0,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,     0,     0,   451,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3152,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,     0,     0,   451,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1999,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   514,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2102,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   514,     0,  2612,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3012,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   515,     0,   233,     0,   234,     0,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,     0,   260,   261,   262,
     263,   264,   265,   266,   267,     0,   268,     0,   269,     0,
       0,   272,     0,   274,   275,   276,   277,   278,   279,     0,
       0,   280,     0,   282,     0,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   516,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   313,   314,   315,   316,   317,
       0,   318,   319,     0,   321,     0,   322,   323,   324,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,     0,   337,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   419,   420,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   517,   436,   437,   438,     0,
     439,   440,     0,   441,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,     0,     0,   451,   452,   453,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,     0,   478,
       0,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,  2828,  1308,   644,     0,     0,  1975,   943,     0,
       0,     0,     0,     0,  1976,  1977,  2613,     0,  1978,  1979,
    1980,   113,   114,   115,   116,   117,   118,   119,   120,  1134,
     121,   122,   123,  1135,  1136,  1137,  2829,  1138,  1139,  1140,
    1141,  2830,   125,   126,  1142,   127,   128,   129,  2831,   131,
     132,   133,     0,  1433,  2832,  1435,  1436,  1143,   139,   140,
     141,   142,   143,   144,  1144,  1145,   145,   146,  1437,  1438,
     149,  1146,   150,   151,   152,   153,     0,  1147,  2833,  1148,
    2834,   157,   158,   159,   160,   161,  2835,   163,   164,   165,
    1149,   166,   167,   168,   169,   170,   171,  1150,  2836,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,  1443,
    1444,   185,  1151,   186,  1152,   187,   188,   189,   190,   191,
     192,  1153,   193,   194,   195,   196,   197,  1154,  1155,   198,
     199,   956,   201,   202,  1156,   203,   204,   205,  1157,   206,
     207,   208,  1158,   209,   210,   211,   212,     0,   214,   215,
     216,   217,   218,     0,  1159,   220,  1160,   221,   222,  1445,
     224,  1161,   225,  1162,   226,  2837,  1163,  2838,   229,   230,
    2839,  2840,   233,  1164,   234,  1165,     0,     0,   237,   238,
    1166,   239,   240,   241,   242,   243,   244,   245,  2841,   247,
     248,   249,   250,  1167,   251,   252,   253,   254,   255,   256,
     257,  1168,   258,  2842,     0,   261,   262,   263,   264,   265,
    1451,  1452,  1169,  1453,  1170,   269,  2843,  2844,   272,  2845,
     274,   275,   276,   277,   278,   279,  1171,  1172,   280,  2846,
     282,  2847,  1173,   284,   285,   286,   287,   288,   289,   290,
     291,  2848,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
    1460,  2849,  1462,   314,   315,   316,  2850,  1174,   318,   319,
    2851,   321,  1175,     0,   323,  1464,   325,   326,   327,  1176,
     328,   329,  1177,  1178,  2852,   331,   332,  1179,  1180,   333,
     334,     0,  2853,   337,  2854,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,  1181,  1182,  1183,
    1184,   351,   352,     0,  2855,   355,   356,     0,   358,   359,
     360,  1185,   361,   362,   363,   364,   365,   366,  1186,   367,
     368,   369,  1468,   371,   372,   373,   374,  1187,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,  1188,   388,   389,  2856,   391,   392,   393,  1470,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,  1189,  2857,   408,   409,   410,   411,   412,   413,
    2858,   415,   416,   417,  2859,   419,   420,  1474,   422,  1190,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,  2860,   436,     0,   438,  1191,   439,   440,  1192,
     441,  2861,   443,   444,   445,   446,   447,  1193,   448,  1477,
    1478,  1194,  1195,   451,   452,     0,   454,     0,  1196,   456,
     457,  2862,   459,   460,   461,   462,   463,  2863,  1198,   464,
     465,   466,  1199,   467,   468,   469,   470,  1200,   471,   472,
     473,   474,   475,     0,  1481,  1202,   478,  2864,   480,   481,
     482,   483,   484,  1203,  1204,   485,  1205,  1206,   486,   487,
     488,   489,   490,   491,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,   504,   505,   506,     0,
     514,     0,  1981,  1982,  1983,  1975,  2865,  2866,  1986,  1987,
    1988,  1989,  1976,  1977,     0,     0,  1978,  1979,  1980,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   515,     0,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,     0,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,     0,     0,   272,     0,   274,   275,
     276,   277,   278,   279,     0,     0,   280,     0,   282,     0,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   516,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
       0,   337,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     517,   436,   437,   438,     0,   439,   440,     0,   441,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,     0,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,     0,     0,     0,
    1981,  1982,  1983,     0,  1984,  1985,  1986,  1987,  1988,  1989,
    1564,     0,     0,  1565,     0,     0,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
    1564,     0,     0,  1565,     0,  1576,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
    1564,     0,     0,  1565,     0,  1576,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
    1564,     0,     0,  1565,     0,  1576,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
    1564,     0,     0,  1565,  1578,  1576,     0,  1566,  1567,  1568,
    1569,  1570,  1571,  1572,     0,     0,     0,     0,     0,     0,
       0,  1579,     0,     0,     0,     0,  1580,     0,  1573,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,  1575,     0,
       0,     0,     0,     0,  1578,  1576,     0,     0,     0,  1581,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1579,     0,     0,  1583,     0,  1580,     0,     0,     0,
    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1578,     0,     0,     0,     0,  1581,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1584,  1579,     0,  1585,  1583,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1586,     0,     0,
    1587,     0,     0,     0,  1578,     0,     0,     0,     0,  1581,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1584,  1579,     0,  1585,  1583,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1586,     0,     0,
    1587,     0,     0,     0,  1578,     0,     0,     0,     0,  1581,
    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1584,  1579,     0,  1585,  1583,     0,  1580,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1586,     0,     0,
    1587,     0,     0,     0,     0,     0,     0,     0,     0,  1581,
    1582,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
    1584,     0,     0,  1585,  1583,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1586,     0,     0,
    1587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
    1584,     0,     0,  1585,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1586,     0,     0,
    1587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1588,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,     0,     0,  1588,     0,  3004,
       0,     0,     0,     0,     0,     0,     0,  1564,     0,     0,
    1565,     0,     0,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,  1573,     0,  1588,     0,  3011,
       0,     0,     0,     0,     0,  1575,     0,  1564,     0,     0,
    1565,     0,  1576,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,  1573,     0,  1577,     0,  3173,
       0,     0,     0,     0,     0,  1575,     0,  1564,     0,     0,
    1565,     0,  1576,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,  1573,     0,  1577,     0,  3195,
       0,     0,     0,     0,     0,  1575,     0,  1564,     0,     0,
    1565,     0,  1576,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,
    1594,  1595,  1596,  1597,  1598,  1573,     0,  1577,     0,  3297,
       0,     0,     0,     0,     0,  1575,     0,  1564,     0,     0,
    1565,  1578,  1576,     0,  1566,  1567,  1568,  1569,  1570,  1571,
    1572,     0,     0,     0,     0,     0,     0,     0,  1579,     0,
       0,     0,     0,  1580,     0,  1573,     0,  1577,     0,     0,
       0,     0,     0,     0,     0,  1575,     0,     0,     0,     0,
       0,  1578,  1576,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1579,     0,
       0,  1583,     0,  1580,     0,     0,     0,  1577,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1578,     0,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1584,  1579,     0,
    1585,  1583,     0,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,  1587,     0,     0,
       0,  1578,     0,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1584,  1579,     0,
    1585,  1583,     0,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,  1587,     0,     0,
       0,  1578,     0,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1584,  1579,     0,
    1585,  1583,     0,  1580,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,  1581,  1582,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,  1584,     0,     0,
    1585,  1583,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,  1584,     0,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1586,     0,     0,  1587,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1588,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,  1588,     0,  3354,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,     0,  1565,     0,
       0,     0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,  1573,  1588,     0,  3376,     0,     0,     0,
       0,     0,     0,  1575,     0,     0,     0,     0,     0,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,  1749,  1577,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,  2728,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1589,
       0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,
    1597,  1598,     0,     0,  3163,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1579,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,  1582,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1583,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,     0,  1585,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1586,     0,     0,  1587,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1133,     0,     0,  1589,     0,     0,
    1590,  1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,
       0,     0,  3338,   113,   114,   115,   116,   117,   118,   119,
     120,  1134,   121,   122,   123,  1135,  1136,  1137,   782,  1138,
    1139,  1140,  1141,   783,   125,   126,  1142,   127,   128,   129,
     784,   131,   132,   133,   785,   786,   787,   788,   789,  1143,
     139,   140,   141,   142,   143,   144,  1144,  1145,   145,   146,
     790,   791,   149,  1146,   150,   151,   152,   153,   792,  1147,
     793,  1148,   794,   157,   158,   159,   160,   161,   795,   163,
     164,   165,  1149,   166,   167,   168,   169,   170,   171,  1150,
     796,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   797,   798,   185,  1151,   186,  1152,   187,   188,   189,
     190,   191,   192,  1153,   193,   194,   195,   196,   197,  1154,
    1155,   198,   199,   200,   201,   202,  1156,   203,   204,   205,
    1157,   206,   207,   208,  1158,   209,   210,   211,   212,   799,
     214,   215,   216,   217,   218,   800,  1159,   220,  1160,   221,
     222,   801,   224,  1161,   225,  1162,   226,   802,  1163,   803,
     229,   230,   804,   805,   233,  1164,   234,  1165,   806,   807,
     237,   238,  1166,   239,   240,   241,   242,   243,   244,   245,
     808,   247,   248,   249,   250,  1167,   251,   252,   253,   254,
     255,   256,   257,  1168,   258,   809,   810,   261,   262,   263,
     264,   265,   811,   812,  1169,   813,  1170,   269,   814,   815,
     272,   816,   274,   275,   276,   277,   278,   279,  1171,  1172,
     280,   817,   282,   818,  1173,   284,   285,   286,   287,   288,
     289,   290,   291,   819,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   820,   821,   822,   314,   315,   316,   823,  1174,
     318,   319,   824,   321,  1175,   825,   323,   826,   325,   326,
     327,  1176,   328,   329,  1177,  1178,   330,   331,   332,  1179,
    1180,   333,   334,   827,   828,   337,   829,   830,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,  1181,
    1182,  1183,  1184,   351,   352,   831,   832,   355,   356,   833,
     358,   359,   360,  1185,   361,   362,   363,   364,   365,   366,
    1186,   367,   368,   369,   834,   371,   372,   373,   374,  1187,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,  1188,   388,   389,   835,   391,   392,   393,
     836,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,  1189,   837,   408,   409,   410,   411,
     412,   413,   838,   415,   416,   417,   839,   419,   420,   840,
     422,  1190,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   841,   436,   842,   438,  1191,   439,
     440,  1192,   441,   843,   443,   444,   445,   446,   447,  1193,
     448,   844,   845,  1194,  1195,   451,   452,   846,   454,   847,
    1196,   456,   457,   848,   459,   460,   461,   462,   463,  1197,
    1198,   464,   465,   466,  1199,   467,   468,   469,   470,  1200,
     471,   472,   473,   474,   475,  1201,   850,  1202,   478,   851,
     480,   481,   482,   483,   484,  1203,  1204,   485,  1205,  1206,
     486,   487,   488,   489,   490,   491,   852,   853,   854,   855,
     856,   857,   858,   859,   860,   861,   862,   503,   504,   505,
     506,   514,     0,     0,     0,     0,     0,     0,     0,     0,
    2010,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   514,     0,
       0,     0,     0,     0,     0,     0,     0,  2628,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   781,  1308,   644,     0,     0,
       0,   943,     0,     0,  2631,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,   782,
       0,     0,     0,     0,   783,   125,   126,     0,   127,   128,
     129,   784,   131,   132,   133,   785,   786,   787,   788,   789,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   790,   791,   149,     0,   150,   151,   152,   153,   792,
       0,   793,     0,   794,   157,   158,   159,   160,   161,   795,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,   796,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   797,   798,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     799,   214,   215,   216,   217,   218,   800,  1309,   220,     0,
     221,   222,   801,   224,     0,   225,     0,   226,   802,     0,
     803,   229,   230,   804,   805,   233,     0,   234,     0,   806,
     807,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,   808,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,   809,   810,   261,   262,
     263,   264,   265,   811,   812,     0,   813,     0,   269,   814,
     815,   272,   816,   274,   275,   276,   277,   278,   279,     0,
       0,   280,   817,   282,   818,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   819,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   820,   821,   822,   314,   315,   316,   823,
       0,   318,   319,   824,   321,     0,   825,   323,   826,   325,
     326,   327,     0,   328,   329,  1310,     0,   330,   331,   332,
       0,     0,   333,   334,   827,   828,   337,   829,   830,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   831,   832,   355,   356,
     833,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   834,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   835,   391,   392,
     393,   836,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,   837,   408,   409,   410,
     411,   412,   413,   838,   415,   416,   417,   839,   419,   420,
     840,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   841,   436,   842,   438,     0,
     439,   440,     0,   441,   843,   443,   444,   445,   446,   447,
       0,   448,   844,   845,     0,     0,   451,   452,   846,   454,
     847,  1311,   456,   457,   848,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,  1201,   850,     0,   478,
     851,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   503,   504,
     505,   506,     0,     0,  1564,     0,     0,  1565,     0,  1312,
    1313,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,     0,     0,     0,  2108,     0,     0,
       0,     0,  1575,     0,  1564,     0,     0,  1565,     0,  1576,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,  1577,     0,     0,     0,     0,     0,
       0,     0,  1575,     0,  1564,     0,     0,  1565,     0,  1576,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,  1577,     0,     0,     0,  2109,     0,
       0,     0,  1575,     0,  1564,     0,     0,  1565,     0,  1576,
       0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1573,     0,  1577,     0,  1838,     0,     0,     0,
       0,     0,  1575,     0,     0,     0,     0,     0,  1578,  1576,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,     0,     0,
    1580,     0,     0,     0,  1577,     0,     0,     0,  1874,     0,
       0,     0,     0,  1875,     0,     0,     0,     0,  1578,     0,
       0,     0,     0,  1581,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1579,     0,     0,  1583,     0,
    1580,     0,     0,     0,     0,     0,     0,  3445,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,
       0,     0,     0,  1581,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1584,  1579,     0,  1585,  1583,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,  1578,     0,
       0,     0,     0,  1581,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1584,  1579,     0,  1585,  1583,     0,
    1580,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,  1581,  1582,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1584,     0,     0,  1585,  1583,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1588,     0,     0,  1584,     0,     0,  1585,     0,     0,
       0,     0,     0,  3446,     0,     0,     0,     0,     0,     0,
       0,  1586,     0,     0,  1587,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,     0,  1565,     0,
       0,  1588,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,  2112,     0,     0,     0,     0,     0,
       0,     0,     0,  1575,     0,     0,     0,     0,     0,     0,
    1576,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1577,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,  1588,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1564,     0,     0,  1565,     0,     0,     0,  1566,
    1567,  1568,  1569,  1570,  1571,  1572,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,  1578,
    1573,     0,     0,     0,  1880,     0,     0,     0,     0,     0,
    1575,     0,     0,     0,     0,     0,  1579,  1576,     0,     0,
       0,  1580,     0,     0,     0,     0,  1589,     0,     0,  1590,
    1591,  1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,
       0,     0,  1577,     0,  1581,  1582,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1564,     0,     0,  1565,  1583,
       0,     0,  1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1573,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1575,     0,  1584,     0,     0,  1585,     0,
    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1586,     0,     0,  1587,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1577,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,     0,  1845,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,     0,     0,     0,     0,  1580,  1564,
       0,     0,  1565,     0,     0,     0,  1566,  1567,  1568,  1569,
    1570,  1571,  1572,     0,     0,     0,     0,     0,     0,     0,
       0,  1581,  1582,     0,     0,     0,     0,  1573,     0,     0,
       0,  1887,     0,     0,     0,     0,  1583,  1575,     0,     0,
       0,     0,     0,     0,  1576,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,  1885,     0,     0,     0,     0,  1578,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,
       0,     0,  1584,     0,     0,  1585,  1579,     0,     0,     0,
       0,  1580,     0,     0,     0,     0,     0,     0,     0,  1586,
       0,     0,  1587,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1581,  1582,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1583,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1584,     0,  1589,  1585,     0,
    1590,  1591,  1592,  1578,  1593,  1594,  1595,  1596,  1597,  1598,
       0,     0,  1586,     0,     0,  1587,     0,     0,     0,     0,
    1579,     0,     0,  1564,     0,  1580,  1565,     0,     0,  1588,
    1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1581,  1582,
       0,  1573,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1575,     0,  1583,     0,     0,     0,     0,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,     0,     0,  1584,
       0,     0,  1585,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1588,     0,     0,     0,  1586,     0,     0,  1587,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1589,     0,     0,  1590,  1591,  1592,
       0,  1593,  1594,  1595,  1596,  1597,  1598,     0,     0,     0,
       0,     0,     0,  1564,     0,     0,  1565,     0,     0,     0,
    1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2003,     0,     0,
       0,  1573,     0,     0,     0,     0,     0,  1578,     0,     0,
       0,  1575,     0,     0,     0,     0,     0,     0,  1576,     0,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,  1580,
       0,     0,     0,     0,     0,     0,  1588,  1589,     0,     0,
    1590,  1591,  1592,  1577,  1593,  1594,  1595,  1596,  1597,  1598,
       0,     0,  1581,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1564,     0,     0,  1565,  1583,     0,     0,
    1566,  1567,  1568,  1569,  1570,  1571,  1572,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1573,     0,     0,     0,  2705,     0,     0,     0,     0,
       0,  1575,     0,  1584,     0,     0,  1585,     0,  1576,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1586,     0,     0,  1587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1577,     0,     0,     0,  1578,     0,     0,
       0,  1589,     0,     0,  1590,  1591,  1592,     0,  1593,  1594,
    1595,  1596,  1597,  1598,  1579,     0,     0,     0,  1564,  1580,
       0,  1565,     0,     0,     0,  1566,  1567,  1568,  1569,  1570,
    1571,  1572,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,  1582,     0,     0,  1573,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1575,  1583,     0,     0,
       0,     0,     0,  1576,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1588,     0,     0,     0,     0,     0,     0,  1578,  1577,     0,
       0,     0,     0,  1584,     0,     0,  1585,     0,     0,     0,
       0,     0,     0,     0,  1579,     0,     0,     0,     0,  1580,
    1586,     0,     0,  1587,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1581,  1582,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1578,  1584,     0,  1589,  1585,     0,  1590,  1591,
    1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,  1579,
    1586,     0,     0,  1587,  1580,     0,     0,     0,     0,     0,
    1588,     0,  1564,     0,     0,  1565,     0,     0,     0,  1566,
    1567,  1568,  1569,  1570,  1571,  1572,     0,  1581,  1582,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1573,     0,  1583,  2692,     0,     0,     0,     0,     0,     0,
    1575,     0,     0,     0,     0,     0,     0,  1576,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1584,     0,
       0,  1585,  1577,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1586,     0,     0,  1587,     0,
    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1589,     0,     0,  1590,  1591,
    1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1578,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1579,     0,  1588,     0,     0,  1580,     0,
       0,     0,     0,     0,     0,  1589,     0,     0,  1590,  1591,
    1592,     0,  1593,  1594,  1595,  1596,  1597,  1598,     0,     0,
       0,  1581,  1582,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1583,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1584,     0,     0,  1585,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1586,
       0,     0,  1587,     0,     0,     0,     0,     0,     0,     0,
    1589,     0,     0,  1590,  1591,  1592,     0,  1593,  1594,  1595,
    1596,  1597,  1598,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1588,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1133,     0,
    2026,     0,     0,     0,  1589,     0,     0,  1590,  1591,  1592,
       0,  1593,  1594,  1595,  1596,  2129,  1598,   113,   114,   115,
     116,   117,   118,   119,   120,  1134,   121,   122,   123,  1135,
    1136,  1137,   782,  1138,  1139,  1140,  1141,   783,   125,   126,
    1142,   127,   128,   129,   784,   131,   132,   133,   785,   786,
     787,   788,   789,  1143,   139,   140,   141,   142,   143,   144,
    1144,  1145,   145,   146,   790,   791,   149,  1146,   150,   151,
     152,   153,   792,  1147,   793,  1148,   794,   157,   158,   159,
     160,   161,   795,   163,   164,   165,  1149,   166,   167,   168,
     169,   170,   171,  1150,   796,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   797,   798,   185,  1151,   186,
    1152,   187,   188,   189,   190,   191,   192,  1153,   193,   194,
     195,   196,   197,  1154,  1155,   198,   199,   200,   201,   202,
    1156,   203,   204,   205,  1157,   206,   207,   208,  1158,   209,
     210,   211,   212,   799,   214,   215,   216,   217,   218,   800,
    1159,   220,  1160,   221,   222,   801,   224,  1161,   225,  1162,
     226,   802,  1163,   803,   229,   230,   804,   805,   233,  1164,
     234,  1165,   806,   807,   237,   238,  1166,   239,   240,   241,
     242,   243,   244,   245,   808,   247,   248,   249,   250,  1167,
     251,   252,   253,   254,   255,   256,   257,  1168,   258,   809,
     810,   261,   262,   263,   264,   265,   811,   812,  1169,   813,
    1170,   269,   814,   815,   272,   816,   274,   275,   276,   277,
     278,   279,  1171,  1172,   280,   817,   282,   818,  1173,   284,
     285,   286,   287,   288,   289,   290,   291,   819,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   820,   821,   822,   314,
     315,   316,   823,  1174,   318,   319,   824,   321,  1175,   825,
     323,   826,   325,   326,   327,  1176,   328,   329,  1177,  1178,
     330,   331,   332,  1179,  1180,   333,   334,   827,   828,   337,
     829,   830,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,  1181,  1182,  1183,  1184,   351,   352,   831,
     832,   355,   356,   833,   358,   359,   360,  1185,   361,   362,
     363,   364,   365,   366,  1186,   367,   368,   369,   834,   371,
     372,   373,   374,  1187,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,  1188,   388,   389,
     835,   391,   392,   393,   836,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,  1189,   837,
     408,   409,   410,   411,   412,   413,   838,   415,   416,   417,
     839,   419,   420,   840,   422,  1190,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   841,   436,
     842,   438,  1191,   439,   440,  1192,   441,   843,   443,   444,
     445,   446,   447,  1193,   448,   844,   845,  1194,  1195,   451,
     452,   846,   454,   847,  1196,   456,   457,   848,   459,   460,
     461,   462,   463,  1197,  1198,   464,   465,   466,  1199,   467,
     468,   469,   470,  1200,   471,   472,   473,   474,   475,  1201,
     850,  1202,   478,   851,   480,   481,   482,   483,   484,  1203,
    1204,   485,  1205,  1206,   486,   487,   488,   489,   490,   491,
     852,   853,   854,   855,   856,   857,   858,   859,   860,   861,
     862,   503,   504,   505,   506,  1133,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,  1134,   121,   122,   123,  1135,  1136,  1137,   782,
    1138,  1139,  1140,  1141,   783,   125,   126,  1142,   127,   128,
     129,   784,   131,   132,   133,   785,   786,   787,   788,   789,
    1143,   139,   140,   141,   142,   143,   144,  1144,  1145,   145,
     146,   790,   791,   149,  1146,   150,   151,   152,   153,   792,
    1147,   793,  1148,   794,   157,   158,   159,   160,   161,   795,
     163,   164,   165,  1149,   166,   167,   168,   169,   170,   171,
    1150,   796,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   797,   798,   185,  1151,   186,  1152,   187,   188,
     189,   190,   191,   192,  1153,   193,   194,   195,   196,   197,
    1154,  1155,   198,   199,   200,   201,   202,  1156,   203,   204,
     205,  1157,   206,   207,   208,  1158,   209,   210,   211,   212,
     799,   214,   215,   216,   217,   218,   800,  1159,   220,  1160,
     221,   222,   801,   224,  1161,   225,  1162,   226,   802,  1163,
     803,   229,   230,   804,   805,   233,  1164,   234,  1165,   806,
     807,   237,   238,  1166,   239,   240,   241,   242,   243,   244,
     245,   808,   247,   248,   249,   250,  1167,   251,   252,   253,
     254,   255,   256,   257,  1168,   258,   809,   810,   261,   262,
     263,   264,   265,   811,   812,  1169,   813,  1170,   269,   814,
     815,   272,   816,   274,   275,   276,   277,   278,   279,  1171,
    1172,   280,   817,   282,   818,  1173,   284,   285,   286,   287,
     288,   289,   290,   291,   819,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   820,   821,   822,   314,   315,   316,   823,
    1174,   318,   319,   824,   321,  1175,   825,   323,   826,   325,
     326,   327,  1176,   328,   329,  1177,  1178,   330,   331,   332,
    1179,  1180,   333,   334,   827,   828,   337,   829,   830,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
    1181,  1182,  1183,  1184,   351,   352,   831,   832,   355,   356,
     833,   358,   359,   360,  1185,   361,   362,   363,   364,   365,
     366,  1186,   367,   368,   369,   834,   371,   372,   373,   374,
    1187,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,  1188,   388,   389,   835,   391,   392,
     393,   836,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,  1189,   837,   408,   409,   410,
     411,   412,   413,   838,   415,   416,   417,   839,   419,   420,
     840,   422,  1190,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   841,   436,   842,   438,  1191,
     439,   440,  1192,   441,   843,   443,   444,   445,   446,   447,
    1193,   448,   844,   845,  1194,  1195,   451,   452,   846,   454,
     847,  1196,   456,   457,   848,   459,   460,   461,   462,   463,
    1197,  1198,   464,   465,   466,  1199,   467,   468,   469,   470,
    1200,   471,   472,   473,   474,   475,  1201,   850,  1202,   478,
     851,   480,   481,   482,   483,   484,  1203,  1204,   485,  1205,
    1206,   486,   487,   488,   489,   490,   491,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   503,   504,
     505,   506,  1133,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,  2174,   118,   119,   120,  1134,
     121,   122,   123,  1135,  1136,  1137,   782,  1138,  1139,  1140,
    1141,   783,   125,   126,  1142,   127,   128,   129,   784,   131,
     132,   133,   785,   786,   787,   788,   789,  1143,   139,   140,
     141,   142,   143,   144,  1144,  1145,   145,   146,   790,   791,
     149,  1146,   150,   151,   152,   153,   792,  1147,   793,  1148,
     794,   157,   158,   159,   160,   161,   795,   163,   164,   165,
    1149,   166,   167,   168,   169,   170,   171,  1150,   796,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   797,
     798,   185,  1151,   186,  1152,   187,   188,   189,   190,   191,
     192,  1153,   193,   194,   195,   196,   197,  1154,  1155,   198,
     199,   200,  2175,   202,  1156,   203,   204,   205,  1157,   206,
     207,   208,  1158,   209,   210,   211,   212,   799,   214,   215,
     216,   217,   218,   800,  1159,   220,  1160,   221,   222,   801,
     224,  1161,   225,  1162,   226,   802,  1163,   803,   229,   230,
     804,   805,   233,  1164,   234,  1165,   806,   807,   237,   238,
    1166,   239,   240,   241,   242,   243,   244,   245,   808,   247,
     248,   249,   250,  1167,   251,   252,   253,   254,   255,   256,
     257,  1168,   258,   809,   810,   261,   262,   263,   264,   265,
     811,   812,  1169,   813,  1170,   269,   814,   815,   272,   816,
     274,   275,   276,   277,   278,   279,  1171,  1172,   280,   817,
     282,   818,  1173,   284,   285,   286,   287,   288,   289,   290,
     291,   819,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     820,   821,   822,   314,   315,   316,   823,  1174,   318,   319,
     824,   321,  1175,   825,   323,   826,   325,   326,   327,  1176,
     328,   329,  1177,  1178,   330,   331,   332,  1179,  1180,   333,
     334,   827,   828,   337,   829,   830,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,  1181,  1182,  1183,
    1184,   351,   352,   831,   832,   355,   356,   833,   358,   359,
     360,  1185,   361,   362,   363,   364,   365,   366,  1186,   367,
     368,   369,   834,   371,   372,   373,   374,  1187,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,  1188,   388,   389,   835,   391,   392,   393,   836,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,  1189,   837,   408,   409,   410,   411,   412,  2176,
     838,   415,   416,   417,   839,   419,   420,   840,   422,  1190,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   841,   436,   842,   438,  1191,   439,   440,  1192,
     441,   843,   443,   444,   445,   446,   447,  1193,   448,   844,
     845,  1194,  1195,   451,   452,   846,   454,   847,  1196,   456,
     457,   848,   459,   460,   461,   462,   463,  1197,  1198,   464,
     465,   466,  1199,   467,   468,   469,   470,  1200,   471,   472,
     473,   474,   475,  1201,   850,  1202,   478,   851,   480,   481,
     482,   483,   484,  1203,  1204,   485,  1205,  1206,   486,   487,
     488,   489,   490,   491,   852,   853,   854,   855,   856,   857,
     858,   859,   860,   861,   862,   503,   504,   505,   506,   781,
       0,   644,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,   782,     0,     0,     0,     0,   783,   125,
     126,     0,   127,   128,   129,   784,   131,   132,   133,   785,
     786,   787,   788,   789,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   790,   791,   149,     0,   150,
     151,   152,   153,   792,     0,   793,     0,   794,   157,   158,
     159,   160,   161,   795,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,   796,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   797,   798,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   799,   214,   215,   216,   217,   218,
     800,  1309,   220,     0,   221,   222,   801,   224,     0,   225,
       0,   226,   802,     0,   803,   229,   230,   804,   805,   233,
       0,   234,     0,   806,   807,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,   808,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
     809,   810,   261,   262,   263,   264,   265,   811,   812,     0,
     813,     0,   269,   814,   815,   272,   816,   274,   275,   276,
     277,   278,   279,     0,     0,   280,   817,   282,   818,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   819,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   820,   821,   822,
     314,   315,   316,   823,     0,   318,   319,   824,   321,     0,
     825,   323,   826,   325,   326,   327,     0,   328,   329,  1310,
       0,   330,   331,   332,     0,     0,   333,   334,   827,   828,
     337,   829,   830,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     831,   832,   355,   356,   833,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   834,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,   835,   391,   392,   393,   836,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
     837,   408,   409,   410,   411,   412,   413,   838,   415,   416,
     417,   839,   419,   420,   840,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   841,
     436,   842,   438,     0,   439,   440,     0,   441,   843,   443,
     444,   445,   446,   447,     0,   448,   844,   845,     0,     0,
     451,   452,   846,   454,   847,  1311,   456,   457,   848,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
    1201,   850,     0,   478,   851,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   852,   853,   854,   855,   856,   857,   858,   859,   860,
     861,   862,   503,   504,   505,   506,   781,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     3,     4,     0,
     782,     0,     0,     0,     0,   783,   125,   126,     0,   127,
     128,   129,   784,   131,   132,   133,   785,   786,   787,   788,
     789,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   790,   791,   149,     0,   150,   151,   152,   153,
     792,     0,   793,     0,   794,   157,   158,   159,   160,   161,
     795,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,   796,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   797,   798,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   799,   214,   215,   216,   217,   218,   800,     0,   220,
       0,   221,   222,   801,   224,     0,   225,     0,   226,   802,
       0,   803,   229,   230,   804,   805,   233,     0,   234,     0,
     806,   807,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,   808,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,   809,   810,   261,
     262,   263,   264,   265,   811,   812,     0,   813,     0,   269,
     814,   815,   272,   816,   274,   275,   276,   277,   278,   279,
       0,     0,   280,   817,   282,   818,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   819,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   820,   821,   822,   314,   315,   316,
     823,     0,   318,   319,   824,   321,     0,   825,   323,   826,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,   827,   828,   337,   829,   830,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   831,   832,   355,
     356,   833,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   834,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   835,   391,
     392,   393,   836,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,   837,   408,   409,
     410,   411,   412,   413,   838,   415,   416,   417,   839,   419,
     420,   840,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   841,   436,   842,   438,
       0,   439,   440,     0,   441,   843,   443,   444,   445,   446,
     447,     0,   448,   844,   845,     0,     0,   451,   452,   846,
     454,   847,     0,   456,   457,   848,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,  1201,   850,     0,
     478,   851,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   852,   853,
     854,   855,   856,   857,   858,   859,   860,   861,   862,   503,
     504,   505,   506,   112,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,   124,   125,   126,     0,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,   614,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   615,     0,   616,
       0,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,   172,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   617,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,   227,     0,   228,   229,
     230,   231,   232,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,     0,     0,   280,
     281,   282,   283,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,     0,   318,
     319,   320,   321,     0,   619,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,   336,   337,   338,   621,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   622,   354,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   624,   438,     0,   439,   440,
       0,   441,   442,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   625,   454,   626,     0,
     456,   457,   627,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,   479,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     112,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,   124,
     125,   126,     0,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,   155,     0,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,   172,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,   227,     0,   228,   229,   230,   231,   232,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,     0,     0,   280,   281,   282,   283,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,   317,     0,   318,   319,   320,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,     0,   439,   440,     0,   441,   442,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,   479,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,  1692,   150,   151,   152,
     153,   154,     0,     0,  1693,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,  1694,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,  1695,   226,
       0,     0,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,  1696,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,  1697,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,     0,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,     0,     0,   451,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,  1698,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,  1692,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,  1694,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,  1695,   226,     0,     0,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,  2251,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,  1697,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,     0,     0,   451,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
    1698,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   514,     0,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     3,     4,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   514,     0,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,   540,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   541,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   514,     0,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   515,     0,   233,     0,   234,     0,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,     0,   260,   261,   262,
     263,   264,   265,   266,   267,     0,   268,     0,   269,     0,
       0,   272,     0,   274,   275,   276,   277,   278,   279,     0,
       0,   280,     0,   282,     0,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   516,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   313,   314,   315,   316,   317,
       0,   318,   319,     0,   321,     0,   322,   323,   324,   325,
     326,   327,     0,   328,   329,     0,   620,   330,   331,   332,
       0,     0,   333,   334,   335,     0,   337,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   419,   420,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   517,   436,   437,   438,     0,
     439,   440,     0,   441,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,     0,     0,   451,   452,   453,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,     0,   478,
       0,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   514,     0,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     515,     0,   233,     0,   234,     0,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   724,   245,     0,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,     0,   260,   261,   262,   263,   264,   265,
     266,   267,     0,   268,     0,   269,     0,     0,   272,     0,
     274,   275,   276,   277,   278,   279,     0,     0,   280,     0,
     282,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   516,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,     0,
     328,   329,     0,   620,   330,   331,   332,     0,     0,   333,
     334,   335,     0,   337,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,   419,   420,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   517,   436,   437,   438,     0,   439,   440,     0,
     441,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,     0,     0,   451,   452,   453,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,     0,   478,     0,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   514,
       0,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,   755,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   515,     0,   233,
       0,   234,     0,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   244,   245,     0,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
       0,   260,   261,   262,   263,   264,   265,   266,   267,     0,
     268,     0,   269,     0,     0,   272,     0,   274,   275,   276,
     277,   278,   279,     0,     0,   280,     0,   282,     0,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   516,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   313,
     314,   315,   316,   317,     0,   318,   319,     0,   321,     0,
     322,   323,   324,   325,   326,   327,     0,   328,   329,     0,
       0,   330,   331,   332,     0,     0,   333,   334,   335,     0,
     337,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   419,   420,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   517,
     436,   437,   438,     0,   439,   440,     0,   441,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,     0,     0,
     451,   452,   453,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,     0,   478,     0,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   514,  1891,     0,     0,
       0,     0,  1892,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   515,     0,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,     0,   260,   261,
     262,   263,   264,   265,   266,   267,     0,   268,     0,   269,
       0,     0,   272,     0,   274,   275,   276,   277,   278,   279,
       0,     0,   280,     0,   282,     0,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   516,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   313,   314,   315,   316,
     317,     0,   318,   319,     0,   321,     0,   322,   323,   324,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,   335,     0,   337,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   517,   436,   437,   438,
       0,   439,   440,     0,   441,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,     0,     0,   451,   452,   453,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,     0,
     478,     0,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   514,     0,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   515,     0,  1899,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   244,   245,     0,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,     0,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,     0,     0,   272,
       0,   274,   275,   276,   277,   278,   279,     0,     0,   280,
       0,   282,     0,     0,   284,   285,  1900,   287,   288,   289,
     290,   291,   516,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   313,   314,   315,   316,   317,     0,   318,
     319,     0,   321,     0,   322,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,     0,   337,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   517,   436,   437,   438,     0,   439,   440,
    1901,   441,     0,   443,  1902,   445,  1903,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   453,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,  1904,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,     0,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     514,     0,   539,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   515,     0,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,     0,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,     0,     0,   272,     0,   274,   275,
     276,   277,   278,   279,     0,     0,   280,     0,   282,     0,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   516,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
       0,   337,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     517,   436,   437,   438,     0,   439,   440,     0,   441,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,     0,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,   644,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,     0,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,     0,     0,   451,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   651,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   515,     0,   652,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   653,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     654,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   655,   450,     0,     0,   656,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   514,     0,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   688,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   514,     0,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,   719,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   514,     0,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   515,     0,   233,     0,   234,     0,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,   722,
     245,     0,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,     0,   260,   261,   262,
     263,   264,   265,   266,   267,     0,   268,     0,   269,     0,
       0,   272,     0,   274,   275,   276,   277,   278,   279,     0,
       0,   280,     0,   282,     0,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   516,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   313,   314,   315,   316,   317,
       0,   318,   319,     0,   321,     0,   322,   323,   324,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,     0,   337,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   419,   420,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   517,   436,   437,   438,     0,
     439,   440,     0,   441,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,     0,     0,   451,   452,   453,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,     0,   478,
       0,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   514,     0,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     515,     0,   233,     0,   234,     0,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   726,   245,     0,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,     0,   260,   261,   262,   263,   264,   265,
     266,   267,     0,   268,     0,   269,     0,     0,   272,     0,
     274,   275,   276,   277,   278,   279,     0,     0,   280,     0,
     282,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   516,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,     0,
     328,   329,     0,     0,   330,   331,   332,     0,     0,   333,
     334,   335,     0,   337,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,   419,   420,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   517,   436,   437,   438,     0,   439,   440,     0,
     441,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,     0,     0,   451,   452,   453,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,     0,   478,     0,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   514,
       0,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   515,     0,   233,
       0,   234,     0,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   743,   245,     0,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
       0,   260,   261,   262,   263,   264,   265,   266,   267,     0,
     268,     0,   269,     0,     0,   272,     0,   274,   275,   276,
     277,   278,   279,     0,     0,   280,     0,   282,     0,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   516,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   313,
     314,   315,   316,   317,     0,   318,   319,     0,   321,     0,
     322,   323,   324,   325,   326,   327,     0,   328,   329,     0,
       0,   330,   331,   332,     0,     0,   333,   334,   335,     0,
     337,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   419,   420,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   517,
     436,   437,   438,     0,   439,   440,     0,   441,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,     0,     0,
     451,   452,   453,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,     0,   478,     0,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   514,     0,   539,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   515,     0,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     771,   245,     0,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,     0,   260,   261,
     262,   263,   264,   265,   266,   267,     0,   268,     0,   269,
       0,     0,   272,     0,   274,   275,   276,   277,   278,   279,
       0,     0,   280,     0,   282,     0,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   516,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   313,   314,   315,   316,
     317,     0,   318,   319,     0,   321,     0,   322,   323,   324,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,   335,     0,   337,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   517,   436,   437,   438,
       0,   439,   440,     0,   441,     0,   443,   444,   445,   446,
     447,     0,   448,   449,   450,     0,     0,   451,   452,   453,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,     0,
     478,     0,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   514,     0,   539,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   515,     0,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,   774,   245,     0,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,     0,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,     0,     0,   272,
       0,   274,   275,   276,   277,   278,   279,     0,     0,   280,
       0,   282,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   516,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   313,   314,   315,   316,   317,     0,   318,
     319,     0,   321,     0,   322,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,     0,   337,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   517,   436,   437,   438,     0,   439,   440,
       0,   441,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   453,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,     0,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,   897,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   515,     0,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,     0,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,     0,     0,   272,     0,   274,   275,
     276,   277,   278,   279,     0,     0,   280,     0,   282,     0,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   516,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
       0,   337,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,     0,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     517,   436,   437,   438,     0,   439,   440,     0,   441,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,     0,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,   920,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,   244,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,     0,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,     0,     0,   451,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,   651,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   655,   450,     0,     0,   656,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   514,     0,   539,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,  1268,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,   514,     0,
     539,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,  1270,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   514,     0,   539,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   515,     0,   233,     0,   234,     0,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,  1273,
     245,     0,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,     0,   260,   261,   262,
     263,   264,   265,   266,   267,     0,   268,     0,   269,     0,
       0,   272,     0,   274,   275,   276,   277,   278,   279,     0,
       0,   280,     0,   282,     0,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   516,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   313,   314,   315,   316,   317,
       0,   318,   319,     0,   321,     0,   322,   323,   324,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,     0,   337,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   419,   420,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   517,   436,   437,   438,     0,
     439,   440,     0,   441,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,     0,     0,   451,   452,   453,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,     0,   478,
       0,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   514,     0,   539,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     515,     0,   233,     0,   234,     0,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,  1275,   245,     0,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,     0,   260,   261,   262,   263,   264,   265,
     266,   267,     0,   268,     0,   269,     0,     0,   272,     0,
     274,   275,   276,   277,   278,   279,     0,     0,   280,     0,
     282,     0,     0,   284,   285,   286,   287,   288,   289,   290,
     291,   516,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,     0,
     328,   329,     0,     0,   330,   331,   332,     0,     0,   333,
     334,   335,     0,   337,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,     0,   419,   420,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   517,   436,   437,   438,     0,   439,   440,     0,
     441,     0,   443,   444,   445,   446,   447,     0,   448,   449,
     450,     0,     0,   451,   452,   453,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,     0,   478,     0,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   514,
       0,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   515,     0,   233,
       0,   234,     0,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,  2170,   245,     0,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
       0,   260,   261,   262,   263,   264,   265,   266,   267,     0,
     268,     0,   269,     0,     0,   272,     0,   274,   275,   276,
     277,   278,   279,     0,     0,   280,     0,   282,     0,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   516,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   313,
     314,   315,   316,   317,     0,   318,   319,     0,   321,     0,
     322,   323,   324,   325,   326,   327,     0,   328,   329,     0,
       0,   330,   331,   332,     0,     0,   333,   334,   335,     0,
     337,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   419,   420,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   517,
     436,   437,   438,     0,   439,   440,     0,   441,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,     0,     0,
     451,   452,   453,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,     0,   478,     0,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,  1429,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
    1430,     0,     0,  -785,     0,  1431,   125,   126,     0,   127,
     128,   129,  1432,   131,   132,   133,     0,  1433,  1434,  1435,
    1436,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,  1437,  1438,   149,     0,   150,   151,   152,   153,
       0,     0,  1439,     0,  1440,   157,   158,   159,   160,   161,
    1441,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,  1442,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,  1443,  1444,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   956,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,     0,   214,   215,   216,   217,   218,     0,     0,   220,
       0,   221,   222,  1445,   224,     0,   225,     0,   226,  1446,
       0,  1447,   229,   230,  -785,  1448,   233,     0,   234,     0,
       0,     0,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,  1449,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,  1450,     0,   261,
     262,   263,   264,   265,  1451,  1452,     0,  1453,     0,   269,
    1454,  1455,   272,  1456,   274,   275,   276,   277,   278,   279,
       0,     0,   280,  1457,   282,  1458,     0,   284,   285,   286,
     287,   288,   289,   290,   291,  1459,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,  1460,  1461,  1462,   314,   315,   316,
       0,     0,   318,   319,  1463,   321,     0,     0,   323,  1464,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,     0,  1465,   337,  1466,     0,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,     0,  1467,   355,
     356,     0,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,  1468,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,  1469,   391,
     392,   393,  1470,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,   407,     0,  1471,   408,   409,
     410,   411,   412,   413,  1472,   415,   416,   417,  1473,   419,
     420,  1474,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,  1475,   436,     0,   438,
       0,   439,   440,     0,   441,  1476,   443,   444,   445,   446,
     447,     0,   448,  1477,  1478,     0,     0,   451,   452,     0,
     454,     0,     0,   456,   457,  1479,   459,   460,   461,   462,
     463,  1480,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,     0,  1481,     0,
     478,  1482,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   514,     0,
     539,     0,     0,     0,     0,     0,     0,     0,     0,   503,
     504,   505,   506,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   125,   126,
       0,   127,   128,   129,     0,   131,   132,   133,   134,   135,
       0,   137,   138,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,   147,   148,   149,     0,   150,   151,
     152,   153,   154,     0,     0,     0,   156,   157,   158,   159,
     160,   161,     0,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,     0,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   200,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
       0,   220,     0,   221,   222,   223,   224,     0,   225,     0,
     226,     0,     0,     0,   229,   230,   515,     0,   233,     0,
     234,     0,   235,   236,   237,   238,     0,   239,   240,   241,
     242,   243,  2906,   245,     0,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,     0,
     260,   261,   262,   263,   264,   265,   266,   267,     0,   268,
       0,   269,     0,     0,   272,     0,   274,   275,   276,   277,
     278,   279,     0,     0,   280,     0,   282,     0,     0,   284,
     285,   286,   287,   288,   289,   290,   291,   516,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,     0,   313,   314,
     315,   316,   317,     0,   318,   319,     0,   321,     0,   322,
     323,   324,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,   335,     0,   337,
       0,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,   353,
       0,   355,   356,   357,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,   370,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
       0,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,     0,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
       0,   419,   420,   421,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   517,   436,
     437,   438,     0,   439,   440,     0,   441,     0,   443,   444,
     445,   446,   447,     0,   448,   449,   450,     0,     0,   451,
     452,   453,   454,   455,     0,   456,   457,   458,   459,   460,
     461,   462,   463,     0,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,   476,
     477,     0,   478,     0,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
     492,   493,   494,   495,   496,   497,   498,   499,   500,   501,
     502,   503,   504,   505,   506,   514,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   113,   114,   115,   116,   117,   118,
     119,   120,     0,   121,   122,   123,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   125,   126,     0,   127,   128,
     129,     0,   131,   132,   133,   134,   135,     0,   137,   138,
       0,   139,   140,   141,   142,   143,   144,     0,     0,   145,
     146,   147,   148,   149,     0,   150,   151,   152,   153,   154,
       0,     0,     0,   156,   157,   158,   159,   160,   161,     0,
     163,   164,   165,     0,   166,   167,   168,   169,   170,   171,
       0,     0,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,     0,   186,     0,   187,   188,
     189,   190,   191,   192,     0,   193,   194,   195,   196,   197,
       0,     0,   198,   199,   200,   201,   202,     0,   203,   204,
     205,     0,   206,   207,   208,     0,   209,   210,   211,   212,
     213,   214,   215,   216,   217,   218,   219,     0,   220,     0,
     221,   222,   223,   224,     0,   225,     0,   226,     0,     0,
       0,   229,   230,   515,     0,   233,     0,   234,     0,   235,
     236,   237,   238,     0,   239,   240,   241,   242,   243,   244,
     245,     0,   247,   248,   249,   250,     0,   251,   252,   253,
     254,   255,   256,   257,     0,   258,     0,   260,   261,   262,
     263,   264,   265,   266,   267,     0,   268,     0,   269,     0,
       0,   272,     0,   274,   275,   276,   277,   278,   279,     0,
       0,   280,     0,   282,     0,     0,   284,   285,   286,   287,
     288,   289,   290,   291,   516,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,     0,   313,   314,   315,   316,   317,
       0,   318,   319,     0,   321,     0,   322,   323,   324,   325,
     326,   327,     0,   328,   329,     0,     0,   330,   331,   332,
       0,     0,   333,   334,   335,     0,   337,     0,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
       0,     0,     0,     0,   351,   352,   353,     0,   355,   356,
     357,   358,   359,   360,     0,   361,   362,   363,   364,   365,
     366,     0,   367,   368,   369,   370,   371,   372,   373,   374,
       0,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,     0,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,   407,     0,     0,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,     0,   419,   420,
     421,   422,     0,   423,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   517,   436,   437,   438,     0,
     439,   440,     0,   441,     0,   443,   444,   445,   446,   447,
       0,   448,   449,   450,     0,     0,   451,   452,   453,   454,
     455,     0,   456,   457,   458,   459,   460,   461,   462,   463,
       0,     0,   464,   465,   466,     0,   467,   468,   469,   470,
       0,   471,   472,   473,   474,   475,   476,   477,     0,   478,
       0,   480,   481,   482,   483,   484,     0,     0,   485,     0,
       0,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   514,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   125,   126,     0,   127,   128,   129,     0,   131,
     132,   133,   134,   135,     0,   137,   138,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,   147,   148,
     149,     0,   150,   151,   152,   153,   154,     0,     0,     0,
     156,   157,   158,   159,   160,   161,     0,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,     0,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   200,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,   213,   214,   215,
     216,   217,   218,   219,     0,   220,     0,   221,   222,   223,
     224,     0,   225,     0,   226,     0,     0,     0,   229,   230,
     515,     0,   666,     0,   234,     0,   235,   236,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,     0,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,     0,   260,   261,   262,   263,   264,   265,
     266,   267,     0,   268,     0,   269,     0,     0,   272,     0,
     274,   275,   276,   277,   278,   279,     0,     0,   280,     0,
     282,     0,     0,   284,   285,   667,   287,   288,   289,   290,
     291,   516,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,     0,   313,   314,   315,   316,   317,     0,   318,   319,
       0,   321,     0,   322,   323,   324,   325,   326,   327,     0,
     328,   329,     0,     0,   330,   331,   332,     0,     0,   333,
     334,   335,     0,   337,     0,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,   353,     0,   355,   356,   357,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,   370,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,     0,   391,   392,   393,   394,   395,
     396,   397,   398,   668,   400,   401,   402,   403,   404,   405,
     406,   407,     0,     0,   408,   409,   410,   411,   669,   413,
     414,   415,   416,   417,     0,   419,   420,   421,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   517,   436,   437,   438,     0,   439,   440,     0,
     441,     0,   443,   444,   445,   446,   447,     0,   448,   670,
     450,     0,     0,   451,   452,   453,   454,   455,     0,   456,
     457,   458,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,   476,   477,     0,   478,     0,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
     498,   499,   500,   501,   502,   503,   504,   505,   506,   514,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   113,   114,
     115,   116,   117,   118,   119,   120,     0,   121,   122,   123,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   125,
     126,     0,   127,   128,   129,     0,   131,   132,   133,   134,
     135,     0,   137,   138,     0,   139,   140,   141,   142,   143,
     144,     0,     0,   145,   146,   147,   148,   149,     0,   150,
     151,   152,   153,   154,     0,     0,     0,   156,   157,   158,
     159,   160,   161,     0,   163,   164,   165,     0,   166,   167,
     168,   169,   170,   171,     0,     0,   173,   174,   175,   176,
     177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     186,     0,   187,   188,   189,   190,   191,   192,     0,   193,
     194,   195,   196,   197,     0,     0,   198,   199,   200,   201,
     202,     0,   203,   204,   205,     0,   206,   207,   208,     0,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,     0,   220,     0,   221,   222,   223,   224,     0,   225,
       0,   226,     0,     0,     0,   229,   230,   515,     0,   233,
       0,   234,     0,   235,   236,   237,   238,     0,   239,   240,
     241,   242,   243,   767,   245,     0,   247,   248,   249,   250,
       0,   251,   252,   253,   254,   255,   256,   257,     0,   258,
       0,   260,   261,   262,   263,   264,   265,   266,   267,     0,
     268,     0,   269,     0,     0,   272,     0,   274,   275,   276,
     277,   278,   279,     0,     0,   280,     0,   282,     0,     0,
     284,   285,   286,   287,   288,   289,   290,   291,   516,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,     0,   313,
     314,   315,   316,   317,     0,   318,   319,     0,   321,     0,
     322,   323,   324,   325,   326,   327,     0,   328,   329,     0,
       0,   330,   331,   332,     0,     0,   333,   334,   335,     0,
     337,     0,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,     0,     0,     0,     0,   351,   352,
     353,     0,   355,   356,   357,   358,   359,   360,     0,   361,
     362,   363,   364,   365,   366,     0,   367,   368,   369,   370,
     371,   372,   373,   374,     0,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
     389,     0,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,     0,
       0,   408,   409,   410,   411,   412,   413,   414,   415,   416,
     417,     0,   419,   420,   421,   422,     0,   423,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   517,
     436,   437,   438,     0,   439,   440,     0,   441,     0,   443,
     444,   445,   446,   447,     0,   448,   449,   450,     0,     0,
     451,   452,   453,   454,   455,     0,   456,   457,   458,   459,
     460,   461,   462,   463,     0,     0,   464,   465,   466,     0,
     467,   468,   469,   470,     0,   471,   472,   473,   474,   475,
     476,   477,     0,   478,     0,   480,   481,   482,   483,   484,
       0,     0,   485,     0,     0,   486,   487,   488,   489,   490,
     491,   492,   493,   494,   495,   496,   497,   498,   499,   500,
     501,   502,   503,   504,   505,   506,   514,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   113,   114,   115,   116,   117,
     118,   119,   120,     0,   121,   122,   123,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   125,   126,     0,   127,
     128,   129,     0,   131,   132,   133,   134,   135,     0,   137,
     138,     0,   139,   140,   141,   142,   143,   144,     0,     0,
     145,   146,   147,   148,   149,     0,   150,   151,   152,   153,
     154,     0,     0,     0,   156,   157,   158,   159,   160,   161,
       0,   163,   164,   165,     0,   166,   167,   168,   169,   170,
     171,     0,     0,   173,   174,   175,   176,   177,   178,   179,
     180,   181,   182,   183,   184,   185,     0,   186,     0,   187,
     188,   189,   190,   191,   192,     0,   193,   194,   195,   196,
     197,     0,     0,   198,   199,   200,   201,   202,     0,   203,
     204,   205,     0,   206,   207,   208,     0,   209,   210,   211,
     212,   213,   214,   215,   216,   217,   218,   219,     0,   220,
       0,   221,   222,   223,   224,     0,   225,     0,   226,     0,
       0,     0,   229,   230,   515,     0,   233,     0,   234,     0,
     235,   236,   237,   238,     0,   239,   240,   241,   242,   243,
     244,   245,     0,   247,   248,   249,   250,     0,   251,   252,
     253,   254,   255,   256,   257,     0,   258,     0,   260,   261,
     262,   263,   264,   265,   266,   267,     0,   268,     0,   269,
       0,     0,   272,     0,   274,   275,   276,   277,   278,   279,
       0,     0,   280,     0,   282,     0,     0,   284,   285,   286,
     287,   288,   289,   290,   291,   516,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,     0,   313,   314,   315,   316,
     317,     0,   318,   319,     0,   321,     0,   322,   323,   324,
     325,   326,   327,     0,   328,   329,     0,     0,   330,   331,
     332,     0,     0,   333,   334,   335,     0,   337,     0,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,     0,     0,     0,     0,   351,   352,   353,     0,   355,
     356,   357,   358,   359,   360,     0,   361,   362,   363,   364,
     365,   366,     0,   367,   368,   369,   370,   371,   372,   373,
     374,     0,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,     0,   391,
     392,   393,   394,   395,   396,   397,   398,   668,   400,   401,
     402,   403,   404,   405,   406,   407,     0,     0,   408,   409,
     410,   411,   412,   413,   414,   415,   416,   417,     0,   419,
     420,   421,   422,     0,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   517,   436,   437,   438,
       0,   439,   440,     0,   441,     0,   443,   444,   445,   446,
     447,     0,   448,   670,   450,     0,     0,   451,   452,   453,
     454,   455,     0,   456,   457,   458,   459,   460,   461,   462,
     463,     0,     0,   464,   465,   466,     0,   467,   468,   469,
     470,     0,   471,   472,   473,   474,   475,   476,   477,     0,
     478,     0,   480,   481,   482,   483,   484,     0,     0,   485,
       0,     0,   486,   487,   488,   489,   490,   491,   492,   493,
     494,   495,   496,   497,   498,   499,   500,   501,   502,   503,
     504,   505,   506,   514,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   113,   114,   115,   116,   117,   118,   119,   120,
       0,   121,   122,   123,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   125,   126,     0,   127,   128,   129,     0,
     131,   132,   133,   134,   135,     0,   137,   138,     0,   139,
     140,   141,   142,   143,   144,     0,     0,   145,   146,   147,
     148,   149,     0,   150,   151,   152,   153,   154,     0,     0,
       0,   156,   157,   158,   159,   160,   161,     0,   163,   164,
     165,     0,   166,   167,   168,   169,   170,   171,     0,     0,
     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,
     183,   184,   185,     0,   186,     0,   187,   188,   189,   190,
     191,   192,     0,   193,   194,   195,   196,   197,     0,     0,
     198,   199,   200,   201,   202,     0,   203,   204,   205,     0,
     206,   207,   208,     0,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,     0,   220,     0,   221,   222,
     223,   224,     0,   225,     0,   226,     0,     0,     0,   229,
     230,   515,     0,   233,     0,   234,     0,   235,   236,   237,
     238,     0,   239,   240,   241,   242,   243,  1277,   245,     0,
     247,   248,   249,   250,     0,   251,   252,   253,   254,   255,
     256,   257,     0,   258,     0,   260,   261,   262,   263,   264,
     265,   266,   267,     0,   268,     0,   269,     0,     0,   272,
       0,   274,   275,   276,   277,   278,   279,     0,     0,   280,
       0,   282,     0,     0,   284,   285,   286,   287,   288,   289,
     290,   291,   516,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,     0,   313,   314,   315,   316,   317,     0,   318,
     319,     0,   321,     0,   322,   323,   324,   325,   326,   327,
       0,   328,   329,     0,     0,   330,   331,   332,     0,     0,
     333,   334,   335,     0,   337,     0,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,     0,     0,
       0,     0,   351,   352,   353,     0,   355,   356,   357,   358,
     359,   360,     0,   361,   362,   363,   364,   365,   366,     0,
     367,   368,   369,   370,   371,   372,   373,   374,     0,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,     0,   388,   389,     0,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,     0,     0,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,     0,   419,   420,   421,   422,
       0,   423,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   517,   436,   437,   438,     0,   439,   440,
       0,   441,     0,   443,   444,   445,   446,   447,     0,   448,
     449,   450,     0,     0,   451,   452,   453,   454,   455,     0,
     456,   457,   458,   459,   460,   461,   462,   463,     0,     0,
     464,   465,   466,     0,   467,   468,   469,   470,     0,   471,
     472,   473,   474,   475,   476,   477,     0,   478,     0,   480,
     481,   482,   483,   484,     0,     0,   485,     0,     0,   486,
     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,
     497,   498,   499,   500,   501,   502,   503,   504,   505,   506,
     514,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,     0,     0,     0,  1624,     0,     0,
     125,   126,     0,   127,   128,   129,     0,   131,   132,   133,
     134,   135,     0,   137,   138,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,   147,   148,   149,     0,
     150,   151,   152,   153,   154,     0,     0,     0,   156,   157,
     158,   159,   160,   161,     0,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,     0,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   200,
     201,   202,     0,   203,   204,   205,     0,   206,   207,   208,
       0,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,     0,   220,     0,   221,   222,   223,   224,     0,
     225,     0,   226,     0,     0,     0,   229,   230,   515,     0,
     233,     0,   234,     0,   235,   236,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,     0,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,     0,   260,   261,   262,   263,   264,   265,   266,   267,
       0,   268,     0,   269,     0,     0,   272,     0,   274,   275,
     276,   277,   278,   279,     0,     0,   280,     0,   282,     0,
       0,   284,   285,   286,   287,   288,   289,   290,   291,   516,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,     0,
     313,   314,   315,   316,   317,     0,   318,   319,     0,   321,
       0,   322,   323,   324,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,   335,
       0,   337,     0,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,   353,     0,   355,   356,   357,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
     370,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,     0,   408,   409,   410,   411,   412,     0,   414,   415,
     416,   417,     0,   419,   420,   421,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     517,   436,   437,   438,     0,   439,   440,     0,   441,     0,
     443,   444,   445,   446,   447,     0,   448,   449,   450,     0,
       0,   451,   452,   453,   454,   455,     0,   456,   457,   458,
     459,   460,   461,   462,   463,     0,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,   476,   477,     0,   478,     0,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
     500,   501,   502,   503,   504,   505,   506,   514,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   113,   114,   115,   116,
     117,   118,   119,   120,     0,   121,   122,   123,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   125,   126,     0,
     127,   128,   129,     0,   131,   132,   133,   134,   135,     0,
     137,   138,     0,   139,   140,   141,   142,   143,   144,     0,
       0,   145,   146,   147,   148,   149,     0,   150,   151,   152,
     153,   154,     0,     0,     0,   156,   157,   158,   159,   160,
     161,     0,   163,   164,   165,     0,   166,   167,   168,   169,
     170,   171,     0,     0,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,     0,   186,     0,
     187,   188,   189,   190,   191,   192,     0,   193,   194,   195,
     196,   197,     0,     0,   198,   199,   200,   201,   202,     0,
     203,   204,   205,     0,   206,   207,   208,     0,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,     0,
     220,     0,   221,   222,   223,   224,     0,   225,     0,   226,
       0,     0,     0,   229,   230,   515,     0,   233,     0,   234,
       0,   235,   236,   237,   238,     0,   239,   240,   241,   242,
     243,  1797,   245,     0,   247,   248,   249,   250,     0,   251,
     252,   253,   254,   255,   256,   257,     0,   258,     0,   260,
     261,   262,   263,   264,   265,   266,   267,     0,   268,     0,
     269,     0,     0,   272,     0,   274,   275,   276,   277,   278,
     279,     0,     0,   280,     0,   282,     0,     0,   284,   285,
     286,   287,   288,   289,   290,   291,   516,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,     0,   313,   314,   315,
     316,   317,     0,   318,   319,     0,   321,     0,   322,   323,
     324,   325,   326,   327,     0,   328,   329,     0,     0,   330,
     331,   332,     0,     0,   333,   334,   335,     0,   337,     0,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,     0,     0,     0,     0,   351,   352,   353,     0,
     355,   356,   357,   358,   359,   360,     0,   361,   362,   363,
     364,   365,   366,     0,   367,   368,   369,   370,   371,   372,
     373,   374,     0,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,     0,   388,   389,     0,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,     0,     0,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,     0,
     419,   420,   421,   422,     0,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   517,   436,   437,
     438,     0,   439,   440,     0,   441,     0,   443,   444,   445,
     446,   447,     0,   448,   449,   450,     0,     0,   451,   452,
     453,   454,   455,     0,   456,   457,   458,   459,   460,   461,
     462,   463,     0,     0,   464,   465,   466,     0,   467,   468,
     469,   470,     0,   471,   472,   473,   474,   475,   476,   477,
       0,   478,     0,   480,   481,   482,   483,   484,     0,     0,
     485,     0,     0,   486,   487,   488,   489,   490,   491,   492,
     493,   494,   495,   496,   497,   498,   499,   500,   501,   502,
     503,   504,   505,   506,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
     237,   238,     0,   239,   240,   241,   242,   243,  2157,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,   368,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,     0,     0,   451,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,   514,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   125,   126,     0,   127,   128,   129,     0,   131,   132,
     133,   134,   135,     0,   137,   138,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,   147,   148,   149,
       0,   150,   151,   152,   153,   154,     0,     0,     0,   156,
     157,   158,   159,   160,   161,     0,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,     0,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     200,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,   213,   214,   215,   216,
     217,   218,   219,     0,   220,     0,   221,   222,   223,   224,
       0,   225,     0,   226,     0,     0,     0,   229,   230,   515,
       0,   233,     0,   234,     0,   235,   236,   237,   238,     0,
     239,   240,   241,   242,   243,  2172,   245,     0,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,     0,   260,   261,   262,   263,   264,   265,   266,
     267,     0,   268,     0,   269,     0,     0,   272,     0,   274,
     275,   276,   277,   278,   279,     0,     0,   280,     0,   282,
       0,     0,   284,   285,   286,   287,   288,   289,   290,   291,
     516,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
       0,   313,   314,   315,   316,   317,     0,   318,   319,     0,
     321,     0,   322,   323,   324,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
     335,     0,   337,     0,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,   353,     0,   355,   356,   357,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,   370,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,     0,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,     0,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,     0,   419,   420,   421,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   517,   436,   437,   438,     0,   439,   440,     0,   441,
       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,
       0,     0,   451,   452,   453,   454,   455,     0,   456,   457,
     458,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,   476,   477,     0,   478,     0,   480,   481,   482,
     483,   484,     0,     0,   485,     0,     0,   486,   487,   488,
     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
     499,   500,   501,   502,   503,   504,   505,   506,  1429,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   114,   115,
     116,   117,   118,   119,   120,     0,   121,   122,   123,     0,
       0,     0,  1430,     0,     0,     0,     0,  1431,   125,   126,
       0,   127,   128,   129,  1432,   131,   132,   133,     0,  1433,
    1434,  1435,  1436,     0,   139,   140,   141,   142,   143,   144,
       0,     0,   145,   146,  1437,  1438,   149,     0,   150,   151,
     152,   153,     0,     0,  1439,     0,  1440,   157,   158,   159,
     160,   161,  1441,   163,   164,   165,     0,   166,   167,   168,
     169,   170,   171,     0,  1442,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,  1443,  1444,   185,     0,   186,
       0,   187,   188,   189,   190,   191,   192,     0,   193,   194,
     195,   196,   197,     0,     0,   198,   199,   956,   201,   202,
       0,   203,   204,   205,     0,   206,   207,   208,     0,   209,
     210,   211,   212,     0,   214,   215,   216,   217,   218,     0,
       0,   220,     0,   221,   222,  1445,   224,     0,   225,     0,
     226,  1446,     0,  1447,   229,   230,     0,  1448,   233,     0,
     234,     0,     0,     0,   237,   238,     0,   239,   240,   241,
     242,   243,   244,   245,  1449,   247,   248,   249,   250,     0,
     251,   252,   253,   254,   255,   256,   257,     0,   258,  1450,
       0,   261,   262,   263,   264,   265,  1451,  1452,     0,  1453,
       0,   269,  1454,  1455,   272,  1456,   274,   275,   276,   277,
     278,   279,     0,     0,   280,  1457,   282,  1458,     0,   284,
     285,   286,   287,   288,   289,   290,   291,  1459,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,  1460,  1461,  1462,   314,
     315,   316,     0,     0,   318,   319,  1463,   321,     0,     0,
     323,  1464,   325,   326,   327,     0,   328,   329,     0,     0,
     330,   331,   332,     0,     0,   333,   334,     0,  1465,   337,
    1466,     0,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,     0,     0,     0,     0,   351,   352,     0,
    1467,   355,   356,     0,   358,   359,   360,     0,   361,   362,
     363,   364,   365,   366,     0,   367,   368,   369,  1468,   371,
     372,   373,   374,     0,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
    1469,   391,   392,   393,  1470,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,   407,     0,  1471,
     408,   409,   410,   411,   412,   413,  1472,   415,   416,   417,
    1473,   419,   420,  1474,   422,     0,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,  1475,   436,
       0,   438,     0,   439,   440,     0,   441,  1476,   443,   444,
     445,   446,   447,     0,   448,  1477,  1478,     0,     0,   451,
     452,     0,   454,     0,     0,   456,   457,  1479,   459,   460,
     461,   462,   463,  1480,     0,   464,   465,   466,     0,   467,
     468,   469,   470,     0,   471,   472,   473,   474,   475,     0,
    1481,     0,   478,  1482,   480,   481,   482,   483,   484,     0,
       0,   485,     0,     0,   486,   487,   488,   489,   490,   491,
    1429,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   503,   504,   505,   506,     0,     0,     0,     0,   113,
     114,   115,   116,   117,   118,   119,   120,     0,   121,   122,
     123,     0,     0,     0,  1430,     0,     0,     0,     0,  1431,
     125,   126,     0,   127,   128,   129,  1432,   131,   132,   133,
       0,  1433,  1434,  1435,  1436,     0,   139,   140,   141,   142,
     143,   144,     0,     0,   145,   146,  1437,  1438,   149,     0,
     150,   151,   152,   153,     0,     0,  1439,     0,  1440,   157,
     158,   159,   160,   161,  1441,   163,   164,   165,     0,   166,
     167,   168,   169,   170,   171,     0,  1442,   173,   174,   175,
     176,   177,   178,   179,   180,   181,   182,  1443,  1444,   185,
       0,   186,     0,   187,   188,   189,   190,   191,   192,     0,
     193,   194,   195,   196,   197,     0,     0,   198,   199,   956,
     201,   202,     0,   203,   204,   205,     0,  1780,   207,   208,
       0,   209,   210,   211,   212,     0,   214,   215,   216,   217,
     218,     0,     0,   220,     0,   221,   222,  1445,   224,     0,
     225,     0,   226,  1446,     0,  1447,   229,   230,     0,  1448,
     233,     0,   234,     0,     0,     0,   237,   238,     0,   239,
     240,   241,   242,   243,   244,   245,  1449,   247,   248,   249,
     250,     0,   251,   252,   253,   254,   255,   256,   257,     0,
     258,  1450,     0,   261,   262,   263,   264,   265,  1451,  1452,
       0,  1453,     0,   269,  1454,  1455,   272,  1456,   274,   275,
     276,   277,   278,   279,     0,     0,   280,  1457,   282,  1458,
       0,   284,   285,   286,   287,   288,   289,   290,   291,  1459,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,  1460,  1461,
    1462,   314,   315,   316,     0,     0,   318,   319,  1463,   321,
       0,     0,   323,  1464,   325,   326,   327,     0,   328,   329,
       0,     0,   330,   331,   332,     0,     0,   333,   334,     0,
    1465,   337,  1466,     0,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,     0,     0,     0,     0,   351,
     352,     0,  1467,   355,   356,     0,   358,   359,   360,     0,
     361,   362,   363,   364,   365,   366,     0,   367,   368,   369,
    1468,   371,   372,   373,   374,     0,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,     0,
     388,   389,  1469,   391,   392,   393,  1470,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
       0,  1471,   408,   409,   410,   411,   412,   413,  1472,   415,
     416,   417,  1473,   419,   420,  1474,   422,     0,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
    1475,   436,     0,   438,     0,   439,   440,     0,   441,  1476,
     443,   444,   445,   446,   447,     0,   448,  1477,  1478,     0,
       0,   451,   452,     0,   454,     0,     0,   456,   457,  1479,
     459,   460,   461,   462,   463,  1480,     0,   464,   465,   466,
       0,   467,   468,   469,   470,     0,   471,   472,   473,   474,
     475,     0,  1481,     0,   478,  1482,   480,   481,   482,   483,
     484,     0,     0,   485,     0,     0,   486,   487,   488,   489,
     490,   491,  3080,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   503,   504,   505,   506,     0,     0,     0,
       0,   113,   114,   115,   116,   117,   118,   119,   120,     0,
     121,   122,   123,     0,     0,     0,  2829,     0,     0,     0,
       0,  2830,   125,   126,     0,   127,   128,   129,  2831,   131,
     132,   133,     0,  1433,  2832,  1435,  1436,     0,   139,   140,
     141,   142,   143,   144,     0,     0,   145,   146,  1437,  1438,
     149,     0,   150,   151,   152,   153,     0,     0,  2833,     0,
    2834,   157,   158,   159,   160,   161,  2835,   163,   164,   165,
       0,   166,   167,   168,   169,   170,   171,     0,  2836,   173,
     174,   175,   176,   177,   178,   179,   180,   181,   182,  1443,
    1444,   185,     0,   186,     0,   187,   188,   189,   190,   191,
     192,     0,   193,   194,   195,   196,   197,     0,     0,   198,
     199,   956,   201,   202,     0,   203,   204,   205,     0,   206,
     207,   208,     0,   209,   210,   211,   212,     0,   214,   215,
     216,   217,   218,     0,     0,   220,     0,   221,   222,  1445,
     224,     0,   225,     0,   226,  2837,     0,  2838,   229,   230,
    2839,  2840,   233,     0,   234,     0,     0,     0,   237,   238,
       0,   239,   240,   241,   242,   243,   244,   245,  2841,   247,
     248,   249,   250,     0,   251,   252,   253,   254,   255,   256,
     257,     0,   258,  2842,     0,   261,   262,   263,   264,   265,
    1451,  1452,     0,  1453,     0,   269,  2843,  2844,   272,  2845,
     274,   275,   276,   277,   278,   279,     0,     0,   280,  2846,
     282,  2847,     0,   284,   285,   286,   287,   288,   289,   290,
     291,  3081,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
    1460,  2849,  1462,   314,   315,   316,     0,     0,   318,   319,
    2851,   321,     0,     0,   323,  1464,   325,   326,   327,     0,
     328,   329,     0,     0,   330,   331,   332,     0,     0,   333,
     334,     0,  2853,   337,  2854,     0,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,     0,     0,     0,
       0,   351,   352,     0,  2855,   355,   356,     0,   358,   359,
     360,     0,   361,   362,   363,   364,   365,   366,     0,   367,
     368,   369,  1468,   371,   372,   373,   374,     0,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,     0,   388,   389,  2856,   391,   392,   393,     0,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,   407,     0,  2857,   408,   409,   410,   411,   412,   413,
       0,   415,   416,   417,  2859,   419,   420,  1474,   422,     0,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,  3082,   436,     0,   438,     0,   439,   440,     0,
     441,  2861,   443,   444,   445,   446,   447,     0,   448,  1477,
    1478,     0,     0,   451,   452,     0,   454,     0,     0,   456,
     457,  2862,   459,   460,   461,   462,   463,     0,     0,   464,
     465,   466,     0,   467,   468,   469,   470,     0,   471,   472,
     473,   474,   475,     0,  1481,     0,   478,  2864,   480,   481,
     482,   483,   484,     0,     0,   485,     0,     0,   486,   487,
     488,   489,   490,   491,   514,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   503,   504,   505,   506,     0,
       0,     0,     0,   113,   114,   115,   116,   117,   118,   119,
     120,     0,   121,   122,   123,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   125,   126,     0,   127,   128,   129,
       0,   131,   132,   133,   134,   135,     0,   137,   138,     0,
     139,   140,   141,   142,   143,   144,     0,     0,   145,   146,
     147,   148,   149,     0,   150,   151,   152,   153,   154,     0,
       0,     0,   156,   157,   158,   159,   160,   161,     0,   163,
     164,   165,     0,   166,   167,   168,   169,   170,   171,     0,
       0,   173,   174,   175,   176,   177,   178,   179,   180,   181,
     182,   183,   184,   185,     0,   186,     0,   187,   188,   189,
     190,   191,   192,     0,   193,   194,   195,   196,   197,     0,
       0,   198,   199,   200,   201,   202,     0,   203,   204,   205,
       0,   206,   207,   208,     0,   209,   210,   211,   212,   213,
     214,   215,   216,   217,   218,   219,     0,   220,     0,   221,
     222,   223,   224,     0,   225,     0,   226,     0,     0,     0,
     229,   230,   515,     0,   233,     0,   234,     0,   235,   236,
       0,   238,     0,   239,   240,   241,   242,   243,   244,   245,
       0,   247,   248,   249,   250,     0,   251,   252,   253,   254,
     255,   256,   257,     0,   258,     0,   260,   261,   262,   263,
     264,   265,   266,   267,     0,   268,     0,   269,     0,     0,
     272,     0,   274,   275,   276,   277,   278,   279,     0,     0,
     280,     0,   282,     0,     0,   284,   285,   286,   287,   288,
     289,   290,   291,   516,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,     0,   313,   314,   315,   316,   317,     0,
     318,   319,     0,   321,     0,   322,   323,   324,   325,   326,
     327,     0,   328,   329,     0,     0,   330,   331,   332,     0,
       0,   333,   334,   335,     0,   337,     0,   339,   340,   341,
     342,   343,   344,   345,     0,   347,   348,   349,   350,     0,
       0,     0,     0,   351,   352,   353,     0,   355,   356,   357,
     358,   359,   360,     0,   361,   362,   363,   364,   365,   366,
       0,   367,     0,   369,   370,   371,   372,   373,   374,     0,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,     0,   388,   389,     0,   391,   392,   393,
     394,     0,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,   407,     0,     0,   408,   409,   410,   411,
     412,   413,   414,   415,   416,   417,     0,   419,   420,   421,
     422,     0,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   517,   436,   437,   438,     0,   439,
     440,     0,   441,     0,   443,   444,   445,   446,   447,     0,
     448,   449,   450,     0,     0,   451,   452,   453,   454,   455,
       0,   456,   457,   458,   459,   460,   461,   462,   463,     0,
       0,   464,   465,   466,     0,   467,   468,   469,   470,     0,
     471,   472,   473,   474,   475,   476,   477,     0,   478,     0,
     480,   481,   482,   483,   484,     0,     0,   485,     0,     0,
     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,
     496,   497,   498,   499,   500,   501,   502,   503,   504,   505,
     506,  1719,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     113,   114,   115,   116,   117,   118,   119,   120,     0,   121,
     122,   123,     0,     0,     0,  1430,     0,     0,     0,     0,
    1431,   125,   126,     0,   127,   128,   129,  1432,   131,   132,
     133,     0,  1433,  1434,  1435,  1436,     0,   139,   140,   141,
     142,   143,   144,     0,     0,   145,   146,  1437,  1438,   149,
       0,   150,   151,   152,   153,     0,     0,  1439,     0,  1440,
     157,   158,   159,   160,   161,  1441,   163,   164,   165,     0,
     166,   167,   168,   169,   170,   171,     0,  1442,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,  1443,  1444,
     185,     0,   186,     0,   187,   188,   189,   190,   191,   192,
       0,   193,   194,   195,   196,   197,     0,     0,   198,   199,
     956,   201,   202,     0,   203,   204,   205,     0,   206,   207,
     208,     0,   209,   210,   211,   212,     0,   214,   215,   216,
     217,   218,     0,     0,   220,     0,   221,   222,  1445,   224,
       0,   225,     0,   226,  1446,     0,  1447,   229,   230,     0,
    1448,   233,     0,   234,     0,     0,     0,   237,   238,     0,
     239,   240,   241,   242,   243,   244,   245,  1449,   247,   248,
     249,   250,     0,   251,   252,   253,   254,   255,   256,   257,
       0,   258,  1450,     0,   261,   262,   263,   264,   265,  1451,
    1452,     0,  1453,     0,   269,  1454,  1455,   272,  1456,   274,
     275,   276,   277,   278,   279,     0,     0,   280,  1457,   282,
    1458,     0,   284,   285,   286,   287,   288,   289,   290,   291,
       0,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,  1460,
    1461,  1462,   314,   315,   316,     0,     0,   318,   319,  1463,
     321,     0,     0,   323,  1464,   325,   326,   327,     0,   328,
     329,     0,     0,   330,   331,   332,     0,     0,   333,   334,
       0,  1465,   337,  1466,     0,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,     0,     0,     0,     0,
     351,   352,     0,  1467,   355,   356,     0,   358,   359,   360,
       0,   361,   362,   363,   364,   365,   366,     0,   367,   368,
     369,  1468,   371,   372,   373,   374,     0,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
       0,   388,   389,  1469,   391,   392,   393,     0,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
     407,     0,  1471,   408,   409,   410,   411,   412,   413,     0,
     415,   416,   417,  1473,   419,   420,  1474,   422,     0,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,     0,   436,     0,   438,     0,   439,   440,     0,   441,
    1476,   443,   444,   445,   446,   447,     0,   448,  1477,  1478,
       0,     0,   451,   452,     0,   454,     0,     0,   456,   457,
    1479,   459,   460,   461,   462,   463,     0,     0,   464,   465,
     466,     0,   467,   468,   469,   470,     0,   471,   472,   473,
     474,   475,     0,  1481,     0,   478,  1482,   480,   481,   482,
     483,   484,     0,     1,   485,     0,     0,   486,   487,   488,
     489,   490,   491,     2,     0,     3,     4,     0,     0,     0,
       1,     0,     0,     0,   503,   504,   505,   506,     0,     0,
       2,     0,     0,     6,     0,     0,     0,     0,     0,     0,
       0,     0,     7,     0,     0,     0,     0,     0,     0,     0,
       6,     0,     0,     0,     8,     0,     0,     0,     0,     7,
       0,     0,     0,     0,     0,     9,     0,     0,     0,     0,
       0,     8,     0,     0,     0,     0,     0,    10,     0,   575,
       0,     0,     9,     0,     0,     0,     0,     0,     0,     0,
      12,     0,     0,     0,    10,     0,   575,     0,     0,     0,
       0,     0,     0,     0,    13,     0,     0,    12,     0,     0,
       0,     0,     0,     0,   576,     0,     0,     0,     0,     0,
      16,    13,     0,     0,     0,     0,     0,     0,    17,     0,
       0,   576,     0,     0,     0,     0,     0,    16,     0,     0,
       0,     0,     0,     0,    20,    17,     0,     0,    21,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    20,     0,     0,     0,    21,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    23,     0,     0,
       0,     0,     0,     0,     0,     0,    24,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    25,
      26,    27,     0,     0,     0,     0,     0,    28,     0,     0,
      29,     0,     0,     0,     0,     0,    25,    26,    27,     0,
       0,     0,     0,     0,    28,     0,     0,    29,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    30,
       0,     0,     0,     0,     0,     0,     0,     0,    31,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,    32,    31,     0,     0,     0,     0,
       0,    33,     0,     0,     0,    34,     0,     0,     0,     0,
       0,    32,     0,     0,     0,    35,     0,     0,    33,     0,
       0,     0,    34,     0,     0,     0,     0,    36,     0,     0,
       0,    37,    35,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    36,     0,     0,     0,    37,     0,
       0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    39,     0,     0,     0,    38,     0,
      41,     0,     0,     0,     0,    42,     0,     0,     0,   577,
       0,    39,     0,     0,     0,     0,     0,    41,     0,    43,
       0,     0,    42,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    43,     0,     0,     0,
       0,     0,     0,    44,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   578,     0,     0,
      44,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    45
};

static const yytype_int16 yycheck[] =
{
       7,    45,   664,   507,     0,     0,     0,     0,   723,   570,
     711,   638,   737,   732,    21,   929,     0,   887,     0,     0,
    1117,    84,     0,     0,     7,  1104,    18,  1130,  1052,  1646,
       0,   578,   878,     7,    18,  1373,  1608,   869,    21,   742,
    1091,   772,   878,  1116,   976,    88,    14,    21,  1750,  1096,
    1093,  1527,  1419,   776,    88,   878,  1057,    21,  2168,   986,
    2113,   869,  1247,   878,  2103,  1019,    36,  2578,  1266,  1934,
    1024,    37,  2216,  2217,  2218,  1561,  1562,  1933,  1121,    86,
      87,  2543,    21,  2543,  2048,  2102,   634,  2580,  1290,   577,
     571,   639,   578,     0,  2164,     0,     0,     0,     0,     0,
       0,    44,     0,    86,    87,     0,     0,     0,     0,     0,
       0,     0,    86,    87,   984,     0,    24,  2417,    33,  2601,
       0,     0,    86,    87,     0,  2230,     0,   631,    98,     0,
       0,  1772,    86,    87,   885,  2594,     5,  1769,    11,  1766,
     106,   687,     0,    16,    13,    14,  2499,    86,    87,     5,
    2503,   723,  1664,   725,   596,   727,  1876,  1909,     5,  2082,
       5,  2084,  1612,   954,    78,     5,     9,     5,    13,    14,
    1922,     9,  1666,     5,   706,   679,     5,   896,  2248,   970,
      63,    63,     5,   950,   951,    13,    14,     5,   706,  2915,
      13,    14,  2237,     5,  2241,    45,     5,     5,  1030,    45,
     967,    13,    14,     9,  2582,     5,    13,    14,  2901,    72,
      30,   135,     5,   186,   120,    72,   701,   105,    38,     5,
      13,    14,    98,     9,   102,  2918,   168,  2369,  2298,  2299,
      63,  2301,   143,     5,   143,     5,     5,  2757,   176,     5,
      98,     5,     5,     5,  2803,   173,    30,     5,   157,    30,
     118,    88,   879,   162,    38,   284,   113,    38,   281,  3085,
     240,   115,  2875,   173,     3,     4,     5,   359,   283,   105,
       9,   240,   289,  1105,     4,   289,  1108,  1109,   113,     9,
     167,    40,    80,   105,   306,     4,    11,   306,   125,     0,
       9,    16,   118,    91,   115,  2738,   373,  2740,   176,   161,
    1214,   164,   213,   128,   213,  3217,    73,    18,   236,  1223,
      21,    55,    80,   188,   118,     3,  1035,   113,  2462,   269,
      40,    46,   869,    91,   233,    36,   236,  2513,    64,   133,
     876,   116,   880,   106,    45,  3250,    72,  2461,   360,  2463,
     208,   272,   382,  3015,   892,  3017,    34,    35,  3283,    13,
      14,    30,    30,    78,    11,   179,   157,   159,    15,    16,
     259,    11,   400,   104,  1388,    15,    16,  1565,   159,  2071,
     468,   280,   448,  3326,   113,    86,    87,    88,   289,   307,
     289,   495,   870,   106,   364,   188,   495,    98,   266,    46,
     186,    11,   506,  1472,   492,  1419,  2858,  1324,   106,   508,
    3312,  2912,  2512,  3315,    11,   190,   240,   283,    15,    16,
     410,   268,   171,   116,   506,   314,   273,  2910,  3111,  1081,
    1082,    78,    11,   167,   462,   283,    15,    16,  2921,  2352,
     506,  2617,   233,   510,  2487,   226,   364,   983,   273,  2509,
    3375,  2511,   209,   371,   266,  2409,  1902,  1903,  1904,   128,
     128,   171,   273,   278,   364,   317,   387,    46,    78,   322,
    3413,  3376,   442,   265,   301,   322,   506,  3139,   351,   351,
    3083,   869,   268,   442,   349,   214,   352,   506,   166,   501,
     168,   338,   501,   506,  3043,   989,   414,   190,   416,    78,
    3216,   506,   448,   510,   352,   445,   510,   236,   162,  3411,
     236,  1699,  2945,  3062,   414,   246,   416,   331,     8,  3029,
     448,    11,  3417,   254,   442,    15,    16,   321,   351,    19,
      20,    21,   410,  2665,  3350,  2649,   506,   438,   364,   438,
     364,   167,   442,   506,   578,   422,   360,   506,   144,  1085,
     464,   419,   448,   346,  1846,  2590,  1478,  2925,    33,  1274,
     506,  1083,  1253,  3458,   524,     8,  2626,   407,    11,  1926,
    2607,   407,    15,    16,   506,  1083,    19,    20,    21,  1754,
     390,   578,  2048,  1058,    59,  1877,   439,   445,   415,   397,
     398,   506,   439,    36,  2440,   629,   578,  3313,  2308,   195,
     504,   448,   468,   577,   508,   504,   450,     0,   507,   508,
    2086,   457,  1305,  1805,  1046,  1003,   390,  2119,   442,   390,
     468,   618,     4,  2365,  1365,  1366,  2243,     9,  2250,   445,
    1371,  3314,   629,  3085,   422,  3085,  2120,   510,   510,   502,
    2271,   507,  1030,   509,   677,   618,  2112,   506,   470,  3098,
    1838,   470,  1693,   677,   618,   514,   629,  1574,   711,   507,
     506,   509,  1850,  1444,   422,   629,  2106,   664,   665,   506,
     492,   506,   505,   492,  2774,   629,   506,   514,   506,   458,
    1437,  1438,   506,  1464,   506,   629,  2781,   506,   506,   618,
     687,  3034,  1880,   506,   128,   157,  3039,  1784,  2988,  1887,
     629,   497,   498,   685,   506,  1462,  1610,   506,   506,   506,
     696,   696,   696,   696,   504,   613,   506,  1105,   508,  1500,
    1108,  1109,   696,   506,   696,   696,   682,  1820,   696,   696,
     506,    63,  3215,   730,   731,  1923,   696,   734,  1289,  1927,
     414,  1393,   416,  1294,   506,   701,   506,   506,  2755,  1300,
     506,  3223,   506,   506,   506,   688,  1931,  1409,   506,   468,
    2894,   666,   667,  1951,   669,  1522,  1523,     5,   497,   498,
    1307,   233,   506,  3222,   217,   106,   268,   497,   498,   776,
     458,   273,    41,   492,  2808,    69,    70,   502,   497,   498,
     350,  1708,  2816,  1710,  2640,   285,   422,  3276,  3277,   696,
     268,   696,   696,   696,   696,   696,   696,  2761,   696,  3310,
     509,   696,   696,   696,   696,   696,   696,   696,   280,  2674,
     380,   696,  2677,   524,  2679,  1296,   696,   696,  1306,    23,
      24,  1307,   696,    26,   268,   696,   696,   240,   330,  2899,
     240,  3324,   285,  1379,   278,  1554,  1555,  1556,  1386,  3328,
     497,   498,   499,   500,   501,   502,   187,   497,   498,   499,
     500,   501,   502,   122,   240,     4,  2558,  3368,  2560,   495,
       9,  2717,   869,  1367,   167,  1889,   577,   578,   875,   876,
    2072,   409,   508,    80,   881,   145,   510,   884,   885,  1793,
     887,   888,   889,   890,    91,  3176,   870,  3178,  3350,     5,
    3350,  1723,   499,   500,   501,   502,   903,  2353,  2354,  2355,
    2356,  1733,  1926,   910,  1736,   245,   110,   618,   222,   447,
     499,   500,   501,   502,  1312,  1313,   359,   360,   629,   167,
     903,   928,   929,   930,   266,   222,   196,   910,   268,   903,
     133,   168,    26,  2409,   240,  3045,   910,   424,    32,   903,
     984,  2427,   949,  1897,  3437,    11,   910,    59,   470,   903,
     501,   364,   266,  1505,   364,   106,   910,   508,  1504,  1505,
      37,   968,  1514,  3254,   903,   414,   677,   416,  1514,   266,
     492,   910,   979,   980,   981,  1999,   983,   984,   364,   986,
      46,   501,  1528,   506,   471,   696,  3025,   128,   508,  1821,
     906,    37,  2330,   493,   494,   495,   912,   497,   498,   499,
     500,   501,   502,  1718,    80,   308,   309,   310,  1015,   351,
     346,  1557,    78,  1821,   155,    91,  1577,   505,   332,   369,
     370,  1064,  1065,   169,  1067,  1032,  1033,  2729,   516,   442,
    1064,  1065,   442,  1067,  2219,   901,   173,   371,   380,   133,
     493,   494,   495,   371,   497,   498,   499,   500,   501,   502,
    1751,  1752,  1753,   919,  2252,   167,   442,   923,   364,  1066,
     308,   309,   310,  1070,  1071,   302,   504,  2543,   506,   383,
     373,  1774,  1803,  1080,  1081,  1082,  1807,   115,  1085,  1810,
       4,  3191,   187,  2939,   287,     9,   383,  2088,   198,  1812,
    2091,   168,  1058,   506,  2191,   241,   506,  1104,     3,   236,
    1851,  1852,  1853,  1854,  1855,  1856,   427,   410,  1859,  1860,
    1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  2142,  1691,
     506,  1519,   168,   505,  3268,   373,    30,   204,   336,    13,
      14,   445,   273,  1531,   516,  1533,   442,   278,   504,   336,
     443,   247,   508,   220,   410,   348,  1718,   350,   445,   386,
      26,   454,   507,   230,  1120,   510,    32,  2200,   204,   870,
    1128,  1559,   410,   506,   202,   468,  1738,   375,  1729,   470,
      53,  1743,   507,  1734,   220,   510,  1828,   380,   375,    83,
    1832,    13,    14,  1835,   230,   198,  2384,   128,    92,   492,
     336,   492,   903,   287,   506,   443,   308,   309,   310,   910,
     506,   460,   410,   506,     4,   506,   454,  1214,  2078,     9,
     114,   504,  2259,   410,   155,   508,  1223,   157,  2265,    26,
     468,   505,   162,   504,     8,    32,   510,   508,   266,   375,
     268,    15,    16,   368,   945,    19,    20,    21,   911,   504,
    1247,   506,   915,   508,   492,   506,   957,  2174,  2175,  2176,
     344,   162,   460,  1378,   348,  1380,  1381,   133,   506,  1266,
     414,   373,   416,   460,   410,  1663,  1664,   252,   253,  1265,
    1265,  1265,  1265,   984,  1821,   506,  2643,   414,   355,   416,
    2031,  2032,   186,  1290,   507,  2761,   380,   510,   429,   172,
     652,   653,   654,   233,   470,   199,   506,   374,   410,   440,
    1307,   666,   667,   167,   669,   442,   189,    26,   506,   355,
     468,   194,   470,    32,   460,  1307,   492,  1324,   507,  3429,
     506,   510,  1306,  1330,   506,  1723,   133,   268,   374,   169,
     506,   443,   273,   507,   506,  1733,   510,   278,  1736,  1885,
     280,   507,   454,  2367,   510,  2543,  2370,   507,   492,   232,
     510,   364,   499,  1064,  1065,   173,  1067,   451,  1365,  1366,
     508,  3414,   375,  3416,  1371,  2292,  1373,   507,    13,    14,
     510,  1378,  1379,  1380,  1381,   507,   507,   506,   510,   510,
     198,   414,  2083,   416,   369,   370,  1393,  1394,   507,   506,
    1373,   510,  1399,   507,   506,  1402,   510,   410,   167,  1373,
    1407,   241,  1409,  1410,  3457,    13,    14,   611,  1415,   613,
     507,   287,   508,   510,   133,  1961,  1399,    40,   236,  1402,
    2174,   506,  2176,  1821,  1407,  1399,   930,  1410,  1402,  2526,
      13,    14,  1415,  1407,  1373,  1399,  1410,    60,  1402,   643,
    2171,  1415,  2173,  1407,   489,  1399,  1410,   460,  1402,    13,
      14,  1415,  2525,  1407,  2557,   507,  1410,  3380,   510,  2510,
    1399,  1415,   219,  1402,   668,  1472,   283,  3169,  1407,  3171,
     288,  1410,   348,  3396,   489,   507,  1415,  2524,   510,  2526,
     287,   104,  2414,  2415,   166,  2147,   184,   185,   429,   510,
    2036,   507,   396,   507,   510,   399,   336,  1504,  1505,   440,
    2573,   285,   385,   506,   380,   157,  1513,  1514,   507,   507,
     162,   510,   510,   507,  1521,  2240,   510,  1501,   507,  1501,
    1501,  1528,   288,  1501,  1501,   167,  1030,   507,  3451,   507,
     510,  1501,   510,  3456,    59,   375,   507,   344,   506,   510,
     507,   348,  1940,   510,   411,  2391,  1553,  2417,   507,   507,
    1557,   510,   510,  1560,   252,   253,  2392,  2393,  1565,  1566,
    1567,  1568,  1569,  1570,  1571,  1572,  1573,  1574,   287,  2392,
     410,  1578,  1579,   380,   197,   451,  1583,  2392,  2393,  2394,
    1587,   233,   489,  1590,  1591,  1592,  1593,  1594,  1595,  1596,
    1597,  1598,    13,    14,  1601,  1306,   414,   219,   416,   507,
    1104,  1608,   510,  1610,    13,    14,  1649,  3179,     6,  3085,
    2509,     9,  2511,  2540,   703,  1649,   705,  2544,    16,  2546,
     460,   439,  1629,   246,   442,   344,  2824,   507,   280,   348,
     510,   254,   148,    31,   344,  1627,   507,    35,   148,   510,
     148,    26,   148,   266,   451,  1652,   507,    32,   507,   510,
     507,   510,   507,   510,   148,   510,  1663,  1664,    40,   507,
     507,   380,   510,   143,   506,   869,   507,    26,   268,   510,
      40,   369,   370,    32,   878,   298,   507,   157,   507,   510,
     460,   510,   162,    13,    14,    13,    14,  2085,  1399,    13,
      14,  1402,  1699,  2444,  2445,    87,  1407,    13,    14,  1410,
     148,  1708,   472,  1710,  1415,    13,    14,    13,    14,   493,
     494,   495,   187,   497,   498,   499,   500,   501,   502,  2280,
    2118,  2119,    26,   927,  2775,  2822,   148,   350,    32,    13,
      14,   508,   451,   213,    13,    14,   148,     8,   148,  2286,
      11,    13,    14,  1750,    15,    16,   283,  1754,   133,   346,
    1757,  1758,   375,   233,    13,    14,    13,    14,    40,  2478,
     422,  3378,  1266,    13,    14,  3382,    13,    14,    13,    14,
     506,   394,    13,    14,   133,    46,    13,    14,    60,  2858,
      13,    14,    53,   359,   360,  2983,  1793,   359,   360,   993,
    1501,   167,  3130,   506,  2897,   506,   359,   360,  1805,  1003,
     280,   256,   257,   453,   454,  1812,  1813,    78,   507,   289,
    3391,  3392,  3423,  3424,  1821,   506,  2730,  1021,   412,  1789,
     215,  3438,   104,   143,   220,   293,  1030,  1032,  1033,   133,
     506,  1838,   220,   220,   506,  1842,  1843,   157,  1845,  2501,
     290,    40,   162,  1850,  1851,  1852,  1853,  1854,  1855,  1856,
     231,   506,  1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,
    1867,  1868,     5,  2564,     5,   506,   318,  1874,  1875,  1580,
     141,  1878,   506,  1880,  3350,   506,   506,     5,  1885,  2604,
    1887,  2584,     5,     5,   507,   506,  2637,  3085,  2619,   171,
     506,     5,   144,   213,     9,   506,   506,   510,   469,   102,
    1907,   172,   287,  1910,   295,  1912,   510,    40,   507,  1916,
     215,   380,   280,   233,   162,   197,  1923,   278,   189,   162,
    1927,    59,  1929,   194,  1931,   506,  1933,  1910,   287,   231,
     422,   506,    91,  1916,   422,    59,  1910,   510,  1649,    59,
     422,    96,  1916,   422,  1951,  3283,  1910,   259,   106,   516,
     422,   422,  1916,   468,  1961,  1962,  1910,   371,   438,   344,
     280,   232,  1916,   348,   246,    37,   148,    98,  1472,   289,
      42,  1910,   254,   268,   268,   506,    40,  1916,   268,   268,
     506,  2813,   268,   287,   266,   344,   506,  3325,     3,   348,
    2388,  2389,  2036,    13,  2001,   380,    37,   148,   507,  2006,
    2007,    42,   167,   508,   507,   507,   507,   507,   465,   507,
     507,   510,   167,   506,   285,   220,   298,   275,   220,   167,
     275,   380,  3095,     8,  2031,  2032,    11,    99,   506,  2036,
      15,    16,   506,   510,    19,    20,    21,  3375,   508,   457,
     344,   506,   506,  2050,   348,  2796,  2053,   506,  2055,    39,
     506,   464,   506,     9,   420,   508,   420,   506,    99,    11,
    2974,  1565,   505,   346,  2071,  2072,   451,   420,   350,  1780,
     510,  2078,   516,   510,  2081,   506,   380,   515,  1789,   273,
     506,   422,   176,   158,  2954,   167,   510,   507,   448,   259,
     383,  2098,   451,   375,  2825,  2826,   168,   213,  2081,   510,
     284,   222,   306,   510,  2111,   306,   510,  2081,   176,  2670,
    3213,   215,   394,   507,   385,  2098,   506,  2081,   438,  1323,
     222,  2128,  2129,  1327,  2098,   222,   268,   168,   289,   327,
    3154,    72,   204,   460,  2098,   281,   148,    78,  2145,   506,
    2147,   506,  2081,   148,   148,  2543,   468,   451,   220,  2156,
      91,   148,  3350,   308,   309,   310,    40,   148,   230,  2098,
     308,   309,   310,   204,   283,   268,   283,  2174,  2175,  2176,
      40,    59,   113,   167,   115,   173,    11,    40,   162,   220,
     176,   507,   507,   506,   504,   162,   507,  2938,   508,   230,
     262,     3,   507,   506,    39,  1699,   506,     3,   422,  1910,
     198,   504,  2246,   504,   422,  1916,  2213,   422,   422,   194,
     507,   283,  2219,   505,   510,   515,   507,   167,   373,   490,
     507,   262,   489,   508,   489,   373,   497,   498,   499,   500,
     501,   502,   217,  2794,   507,   422,   308,   507,   236,  2235,
    2235,  2235,  2235,   315,   507,  2252,    40,   507,   151,   489,
     245,   507,   465,   507,    40,   410,  3353,   506,    59,   510,
     506,   202,   410,  2270,   506,  3192,    60,   308,   506,   495,
     506,   491,   445,   284,   315,   430,   284,  2675,   510,  2286,
     239,    59,    59,   355,   259,  2292,    12,   422,   443,   268,
     288,    17,   148,   198,   506,   443,   148,   148,   507,   454,
     285,   275,   374,    29,   422,   275,   454,    40,   346,   422,
     104,   422,   422,   468,   355,   506,   506,    43,    44,   507,
     506,   510,   283,  2330,   281,  2036,    40,   268,   468,   148,
     273,   507,   273,   374,  1838,   167,   507,   492,  3063,   506,
     506,    59,   181,  2054,   507,   507,  1850,  2330,   162,    78,
     504,   506,   139,   194,   507,   507,  2330,   507,   506,  2070,
     930,   506,  2369,   507,   167,   294,   364,   516,   507,   506,
    2081,   443,   352,  2417,   510,   507,  1880,  2384,   104,   506,
     284,   322,   507,  1887,   176,   148,  2369,  2098,  2935,   171,
     433,  2330,  2455,  2400,    40,    40,    84,   338,   510,  2406,
    2407,   507,   443,   197,     5,   506,  2450,   507,   507,   507,
    2417,   506,   448,   506,  1618,  2813,   414,   507,   416,  1923,
    2818,  2428,   510,  1927,  2431,  3352,  2433,   506,   167,  1933,
     510,   507,   506,  2440,  2441,   433,   467,  2444,  2445,   194,
     507,   439,  2449,  2450,   442,   507,   505,  1951,   505,  2456,
     510,   507,   246,   507,   507,  3156,   507,  2501,   283,    59,
     254,   454,  3181,   495,  2471,   507,   468,  2865,  2866,   113,
     507,  3341,   266,   507,  2481,   200,   113,   507,    40,   506,
     222,    86,   187,   273,   273,  2469,   508,  2469,  2469,   508,
    3152,  2469,  2469,   507,  2501,   508,   495,   422,   439,  2469,
      40,   508,   508,   422,   298,  2475,   507,   448,   493,   494,
     495,   268,   497,   498,   499,   500,   501,   502,   105,   508,
     508,   508,   508,   167,   468,   508,   508,   508,  3155,    40,
     508,  3158,   508,  2540,  1104,  2246,  2543,  2544,   507,  2546,
     508,   508,  1746,   508,   508,   508,   930,     7,     8,    37,
     508,  2558,    12,  2560,    42,   508,   350,    17,   505,   508,
    3285,    21,   508,    23,    24,   505,   508,    37,    28,    29,
      30,   508,    42,    33,  3275,   508,    36,    37,   508,  3294,
      40,   375,   508,    43,    44,   508,   508,  2583,  2583,  2583,
    2583,   508,   506,   283,  3140,   506,  3142,   930,     9,   345,
     394,   510,   329,   510,   506,    40,   506,  3269,   507,  2579,
      59,    99,   507,   194,   505,   187,   510,  1821,  2662,   453,
      89,   507,   338,  1827,   506,    60,    86,    87,    40,    99,
    2637,   148,   508,  2640,   507,   120,  2606,    40,    98,  2609,
     148,   507,    40,   103,   104,   105,   106,   107,   360,   360,
    2657,  2658,   507,   297,    40,  2662,   506,   506,  2665,     0,
     448,   303,   510,   506,   308,   309,   310,   273,   506,   104,
     105,     3,   186,     5,   244,  3073,  3074,   448,   113,   433,
     168,    72,  2665,   506,   286,  2692,    78,  3085,   176,    72,
       9,   507,   507,   506,   362,    59,  1266,   507,   168,  2706,
     505,   505,    91,   129,  2711,  2712,  2417,  2751,   266,  2716,
    2717,   495,   283,   433,  2721,    40,   204,  2724,  2725,   286,
    1104,   506,  2729,  2730,   507,   286,  2733,   506,   200,   373,
    2737,   507,   220,   507,   204,   507,   171,  2744,   453,  2450,
     283,   283,   230,  3247,   380,   507,   118,   445,  2252,   359,
     220,   144,    25,    36,  2737,   359,   291,    98,  2469,  2818,
     230,  3322,   197,  2737,  2475,   696,   410,  2527,  1716,  2540,
    2169,  1104,  1628,  2737,   262,   107,   108,  2212,  2234,   612,
    2292,  2788,  2935,  2737,  3300,  2575,  3406,  3056,  3354,  2796,
    2501,  3399,   262,  3363,  3113,   283,  2175,  3352,  2737,   443,
    2595,  2162,   143,  1091,  2519,  3361,  2546,  2159,  2815,  3349,
     454,   246,  3126,   283,   742,   541,   157,  2824,  2480,   254,
     308,   162,  2616,  1262,   468,  1812,   167,   315,  1289,  3245,
    3183,   266,  2479,   268,  1307,   176,  3325,  3428,   308,  3279,
     181,  1327,  2469,  2145,  1051,   315,   572,   902,   492,  2111,
     902,  2858,   184,   185,  1688,  1074,  1073,  2351,  3334,  1652,
    2128,  3256,   506,   298,  3144,  1687,  1076,   355,  2579,    21,
    2098,  1921,   213,  2665,  2978,   618,   629,   880,  2330,  2329,
    2384,  2376,  1266,  3077,  1821,   355,   374,  1936,  3260,  3259,
    2008,  2407,   233,  2112,  1963,  2606,  2903,  2054,  2609,  2051,
    2744,  2010,  1472,  1394,   374,   878,   878,   878,   107,   108,
    2954,  2424,   878,  1627,    98,   350,   248,   249,   250,   251,
     252,   253,  1929,    -1,   256,   257,    -1,    -1,  2935,    -1,
      -1,  2938,  2939,  1266,    -1,    -1,  2440,    -1,    -1,   280,
     375,    -1,   283,  2913,    -1,    -1,    -1,  2954,   289,    -1,
      -1,  2662,  3350,    -1,    -1,   443,    -1,    -1,    -1,   394,
     448,   396,   688,    -1,   399,    -1,    -1,  2974,    -1,    -1,
      -1,    -1,    -1,   443,    -1,    -1,  2983,  2181,   448,    -1,
      -1,  2988,    -1,    -1,    -1,   184,   185,    -1,   329,    -1,
      -1,    -1,  2999,  3000,    -1,  1565,  3003,    -1,  3005,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,  3030,  2228,    11,  2737,    -1,    -1,    15,
      16,    -1,    -1,    19,    20,    21,    -1,   369,   370,  2543,
    2751,    -1,  2246,    -1,    -1,    -1,    -1,  3054,    -1,   248,
     249,   250,   251,   252,   253,    -1,    -1,   256,   257,    -1,
      -1,    -1,    -1,    -1,    -1,   525,    -1,    -1,    -1,   410,
     530,   506,     8,   533,    -1,    11,    -1,    -1,  3085,    15,
      16,   541,  2286,    19,    20,    21,    -1,    -1,  1472,    -1,
    2294,    -1,  2296,    -1,    -1,    -1,  2300,   438,  2302,    -1,
      36,   561,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,
     570,   571,   572,    -1,    -1,    -1,  3123,    -1,    -1,    -1,
      -1,    -1,    -1,  3130,   465,    -1,   467,   468,    -1,  1699,
    3100,  3101,    -1,  3140,    -1,  3142,  2640,  3144,    -1,  1472,
      -1,  3148,    -1,  3150,    -1,  3152,    -1,  3130,    -1,    -1,
      -1,   611,   612,   613,   486,   487,  3130,  3164,   618,    -1,
     620,    -1,  3169,   504,  3171,    -1,   507,   508,   509,   629,
     369,   370,  3179,   633,   634,    -1,    -1,    -1,   638,   639,
      -1,  1565,    -1,    -1,    -1,  3192,    -1,    -1,    -1,    -1,
    3197,  3130,   652,   653,   654,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2913,    -1,    -1,    -1,   666,   667,   194,   669,
    3180,    -1,  3182,  2717,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   682,    -1,    -1,    -1,    -1,    -1,   688,    -1,
      -1,   217,  1565,    -1,    -1,    -1,    -1,    -1,   698,  3246,
      -1,   701,    -1,  2954,    -1,    -1,    -1,    -1,    -1,  3256,
      -1,  3221,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    -1,  3269,    19,    20,    21,    -1,  3237,  1838,    -1,
      -1,  3241,    -1,    -1,    -1,   735,  3283,    -1,    -1,    -1,
    1850,   217,    -1,    -1,    -1,    -1,    -1,   486,   487,   749,
     750,   751,   752,   753,  3301,     8,    -1,    -1,    11,   285,
    3283,    -1,    15,    16,    -1,    -1,    19,    20,    21,  3283,
    1880,    -1,    -1,    -1,    -1,  1699,    -1,  1887,  3325,    -1,
    2824,   930,    -1,    -1,    -1,  1051,    -1,    -1,    -1,    -1,
     147,    -1,    -1,    46,  3341,    -1,    -1,    -1,    -1,  2543,
      53,    -1,  3325,  3350,  3283,  3352,    -1,    -1,    -1,   285,
     167,  3325,    -1,  1923,  2858,    -1,    -1,  1927,    -1,    -1,
      -1,    -1,    -1,  1933,    -1,    78,  1699,    -1,  3375,    -1,
      -1,  2575,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1951,    -1,  3390,  3391,  3392,  3325,    -1,    -1,  3100,
    3101,    -1,  3375,    -1,    -1,    -1,    -1,  3367,    -1,    -1,
      -1,  3375,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   879,
     880,    -1,   882,    -1,  3394,   885,    -1,    -1,    -1,    -1,
      -1,   891,   892,    -1,    -1,  2939,  3375,   897,    -1,    -1,
      -1,    -1,    -1,   903,    -1,    -1,    -1,    -1,    -1,    -1,
     910,  3458,    -1,    -1,  1838,    -1,    -1,    -1,    -1,   172,
     920,   217,    -1,  2667,    -1,    -1,  1850,   927,    -1,  3180,
      -1,  3182,    -1,    -1,    -1,    -1,   189,   937,    -1,  2983,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   308,   309,   310,    -1,  1104,  1880,    -1,    -1,    -1,
      -1,    -1,    -1,  1887,    -1,  1838,    -1,   493,   494,   495,
    3221,   497,   498,   499,   500,   501,   502,  1850,    -1,   232,
      -1,    -1,    -1,   930,    -1,    -1,  3237,    -1,   988,   285,
    3241,    55,    -1,    -1,    -1,    -1,    -1,  2741,    -1,  1923,
      -1,    40,    -1,  1927,    -1,    -1,    -1,  1880,    -1,  1933,
      -1,    -1,    -1,    -1,  1887,    -1,   373,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,  1951,    -1,    -1,
      -1,  1297,   285,  1299,  1034,    -1,   100,  1037,    -1,    -1,
      -1,  3085,    -1,    -1,    12,    -1,    -1,    -1,    -1,    17,
    1923,  1051,  1052,   410,  1927,   119,    -1,    -1,  1058,    -1,
    1933,    29,    -1,    -1,   103,    -1,   105,    -1,   107,    -1,
      -1,    -1,    -1,   137,    -1,    43,    44,   141,  1951,    -1,
    1080,    -1,    -1,    -1,    -1,    -1,   443,    -1,    -1,    -1,
    1090,  1091,    -1,     8,    -1,    -1,    11,   454,    -1,   163,
      15,    16,   166,  1103,    19,    20,    21,     8,    -1,    -1,
      11,   468,    -1,    -1,    15,    16,  3367,  1266,   182,    -1,
    1120,    36,    -1,    -1,  1124,    -1,    -1,    -1,    -1,  1129,
      -1,    -1,   385,    -1,    -1,   492,   104,    -1,    -1,    -1,
      -1,    -1,  2252,  3394,    -1,    46,    -1,    -1,    -1,   506,
     147,    -1,    53,    -1,    -1,    -1,   885,  1104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2909,    -1,    -1,    -1,    -1,
     167,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,   167,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,  2935,    -1,    19,    20,    21,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,   273,
      36,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,   303,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,  1259,
      -1,  1261,    -1,    -1,    -1,    -1,   330,  1267,    -1,    -1,
      -1,   172,  3016,    -1,  2384,    -1,    -1,    -1,    -1,    -1,
      -1,  1281,    -1,    -1,    -1,    -1,    -1,    -1,   189,  1289,
      -1,    -1,    -1,   194,  1294,    -1,  1296,  1297,    -1,  1299,
    1300,    -1,   217,    -1,    -1,    -1,  3350,    -1,    -1,   297,
      -1,   308,   309,   310,    -1,    -1,    -1,    -1,    -1,  1266,
     308,   309,   310,  1472,    -1,    -1,    -1,  1327,  2252,    -1,
    2440,   232,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,  3085,  1071,    19,    20,    21,   172,    -1,    -1,    -1,
      -1,  1080,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,    -1,   189,    -1,  1365,  1366,    -1,   194,    -1,
     285,  1371,    -1,  1373,    -1,    -1,   373,    -1,    -1,  2252,
      -1,    -1,    -1,    -1,   285,   373,  1386,    -1,  1388,  1389,
      -1,   217,   218,    -1,    -1,    -1,  1396,    -1,    -1,  1399,
      -1,    -1,  1402,    -1,    -1,    -1,   232,  1407,    -1,    -1,
    1410,    -1,    -1,   410,    -1,  1415,  1565,  1417,    -1,  1419,
      -1,    -1,   410,    -1,    -1,    -1,    -1,    -1,  1694,    -1,
      -1,    -1,    -1,  2543,    -1,    -1,    -1,    -1,  1704,    -1,
    1706,    -1,   268,  1709,    -1,   271,   443,    -1,    -1,  1715,
      -1,  1717,    -1,    -1,    -1,   443,    -1,   454,    -1,   285,
    2384,    -1,   288,    -1,  1730,    -1,   454,    -1,    -1,  1735,
    3214,   468,    -1,  1739,  1740,  1741,  1742,    -1,  1744,  1745,
     468,    -1,    -1,    -1,   385,    -1,   525,    -1,    -1,    -1,
      -1,   530,    -1,    -1,   533,   492,    -1,    -1,    -1,     8,
      -1,    -1,    11,    -1,   492,    -1,    15,    16,    -1,   506,
      -1,  2384,    -1,    -1,    -1,    -1,  2440,    -1,   506,    -1,
      -1,    -1,    -1,    -1,    -1,  1472,    -1,  1527,    -1,    -1,
    2640,    -1,    -1,    -1,    -1,    -1,    -1,    46,  1538,    -1,
      -1,   217,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
    1699,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2440,    -1,    78,
      -1,    -1,    -1,   541,    -1,    -1,    -1,  1577,   493,   494,
     495,   620,   497,   498,   499,   500,   501,   502,    -1,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,   500,
     501,   502,    -1,   571,   572,    -1,  3350,  2717,    -1,   285,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1565,  2543,
      -1,    -1,    -1,    -1,  1624,    -1,  1626,    -1,  1628,    -1,
      -1,    -1,   141,    -1,    -1,    -1,  1365,  1366,    -1,  1639,
    1640,    -1,  1371,  3387,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1652,    -1,    -1,    -1,    -1,    -1,    -1,   698,
      -1,   930,    -1,   172,   490,    -1,    -1,   493,   494,   495,
    2543,   497,   498,   499,   500,   501,   502,  1677,    -1,  1679,
     189,    -1,    -1,    -1,     8,   194,    -1,    11,    -1,  1838,
      -1,    15,    16,  1693,  1694,    19,    20,    21,    -1,    -1,
      -1,  1850,    -1,    -1,  1704,  1705,  1706,  1707,    -1,  1709,
     749,   750,   751,   752,  2824,  1715,  2640,  1717,    -1,    -1,
     688,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,  1729,
    1730,  1880,    -1,    -1,  1734,  1735,    -1,    -1,  1887,  1739,
    1740,  1741,  1742,    -1,  1744,  1745,    -1,    -1,  2858,    -1,
      -1,    -1,  1699,    -1,    -1,    -1,    -1,    -1,    -1,  1759,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2640,  1768,  1769,
    1770,  1771,  1772,  1773,  1923,    -1,   285,    -1,  1927,    -1,
      -1,    -1,    -1,    -1,  1933,    -1,    -1,  1787,    -1,    -1,
      -1,    -1,    -1,  2717,    -1,    -1,  1796,    -1,    -1,    -1,
      -1,    -1,  1951,    -1,    -1,    -1,    -1,    -1,    -1,   173,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,  2093,    -1,  2939,
      -1,    -1,    -1,    -1,   198,  1104,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   882,  2717,    -1,    -1,    -1,    -1,    -1,
      -1,  1851,  1852,  1853,  1854,  1855,  1856,    -1,    -1,  1859,
    1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,    -1,
      -1,    -1,   236,  2983,    -1,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1889,
      -1,  1838,    -1,   217,    -1,    -1,    -1,    -1,    -1,    -1,
    2824,  1901,    -1,  1850,    -1,    -1,    -1,    -1,    -1,    -1,
    1910,    -1,   885,    -1,    -1,    -1,  1916,    -1,    -1,    -1,
      -1,  1921,    -1,  1652,   288,    -1,  1926,    -1,    -1,   897,
      -1,    -1,    -1,  1880,  2858,  1935,  1936,    -1,    -1,    -1,
    1887,    -1,    -1,   307,    -1,   107,   108,    -1,    -1,    -1,
      -1,  2824,   920,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3085,  1923,    -1,    -1,    -1,
    1927,   490,    -1,    -1,    -1,  2858,  1933,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,  2262,  1266,    -1,  1999,
     364,    -1,    -1,  2003,  1951,    -1,    -1,   371,  2008,    -1,
      -1,    -1,    -1,    -1,    -1,  2939,    -1,    -1,    -1,    -1,
     988,    -1,   184,   185,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2031,  2032,    -1,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,  2048,    -1,
     414,  1090,   416,    -1,    -1,    -1,    -1,    -1,    -1,  2983,
      -1,    -1,    36,    -1,  1103,    -1,  2939,    -1,    -1,   433,
      -1,    -1,    46,    -1,    -1,   439,    -1,    -1,   442,    53,
      -1,  2081,    -1,  1051,  1052,  1124,   248,   249,   250,   251,
     252,   253,    -1,  2093,   256,   257,    -1,    -1,  2098,    -1,
      -1,    -1,  2102,  2252,    78,    -1,    -1,  1080,    -1,    -1,
    2983,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1851,  1852,  1853,  1854,  1855,  1856,    -1,    -1,
    1859,  1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,
      -1,    -1,  2142,    -1,    -1,  2145,    -1,    -1,  2148,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3085,    -1,    -1,  2164,    -1,    -1,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,  1472,    -1,    -1,    -1,   369,   370,    -1,
      -1,    -1,  3085,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,  1261,    -1,    -1,    -1,    -1,    -1,  1267,    -1,
    2230,    -1,    -1,    -1,    -1,  2384,  2236,    -1,  2504,  2505,
    3350,    -1,    -1,   217,   218,    -1,    -1,    -1,  2248,  2249,
    2250,  2251,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,  2262,    -1,  2264,    -1,  2532,  2267,    -1,    -1,
      -1,  2271,  2272,    -1,    -1,    -1,  2276,    -1,    -1,    -1,
    2280,  2547,  2548,  2549,  2550,  2551,  2552,  2553,  2554,  2555,
    2556,  2440,    -1,    -1,   268,    -1,  1565,   271,  2298,  2299,
      -1,  2301,  2031,  2032,    -1,  2252,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   486,   487,    -1,    -1,  1296,  1297,
    2330,  1299,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    -1,    -1,    -1,
    2350,    -1,    -1,    -1,    -1,    -1,    -1,  1396,  2358,  2359,
    2360,    -1,    -1,    -1,    -1,    -1,    -1,  2367,    -1,  2369,
    2370,    -1,    -1,    -1,    -1,    -1,  2376,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1365,  1366,  2543,    -1,    -1,    -1,  1371,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2409,
      -1,   385,    -1,    -1,    -1,    -1,  2145,    -1,    -1,    -1,
    1388,    -1,    -1,    -1,     8,    -1,  3350,    11,    -1,    -1,
    1699,    15,    16,    -1,    -1,    -1,    -1,  2384,    -1,    -1,
      -1,    -1,    -1,    -1,  2444,  2445,    -1,    -1,    -1,  1417,
      -1,  1419,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    -1,  2473,    -1,    -1,    -1,  3350,    -1,  2479,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2640,    -1,  2440,    78,  2495,    -1,    -1,    -1,  2499,
      -1,    -1,    -1,  2503,  2504,  2505,    -1,    -1,    -1,  2509,
    2510,  2511,    -1,  2513,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,  2795,
      -1,    -1,  2532,    -1,  2534,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   516,    -1,    -1,    -1,     0,  2547,  2548,  2549,
    2550,  2551,  2552,  2553,  2554,  2555,  2556,   141,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2717,  1838,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2578,    -1,
      -1,  1850,  2582,    -1,    -1,  2585,    -1,  1626,   172,  1628,
      -1,    -1,    -1,    -1,    -1,  2595,  2543,    -1,    -1,    -1,
    1639,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,  1880,    -1,    -1,    -1,    -1,  2616,  2617,  1887,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2626,    -1,    -1,    -1,
      -1,    -1,    -1,  1606,    -1,    -1,    -1,  2637,  1677,    -1,
      -1,    -1,    -1,  2643,    98,    -1,    -1,    -1,   232,    -1,
    2650,  2651,  2652,  2653,  1923,    -1,    -1,    -1,  1927,    -1,
      -1,    -1,  2662,    -1,  1933,  2665,    -1,    -1,    -1,  2669,
    2670,    -1,    -1,    -1,    -1,  2824,    -1,    -1,  2678,  1652,
      -1,    -1,  1951,    -1,    -1,    -1,    -1,    -1,    -1,   143,
      -1,    -1,    -1,  2640,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,   157,    -1,  2705,    -1,    -1,   162,  2858,
      -1,  1679,    -1,   167,    -1,  2444,  2445,    -1,    -1,    -1,
      -1,    -1,   176,    -1,    -1,    -1,  1694,   181,    -1,  1768,
    1769,  1770,  1771,    -1,  1773,  2735,  1704,  2737,  1706,    -1,
      -1,  1709,    -1,    -1,    -1,    -1,    -1,  1715,    -1,  1717,
      -1,  2751,    -1,    -1,    -1,  2755,    -1,    -1,    -1,   213,
      -1,  2761,  1730,    -1,    -1,    -1,    -1,  1735,    -1,    -1,
    2717,  1739,  1740,  1741,  1742,  2775,  1744,  1745,    -1,   233,
      -1,  2781,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2939,    -1,    -1,    -1,  2794,  2795,  2796,    -1,    -1,  3065,
      -1,   385,  2802,    -1,    -1,     0,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2819,
    3086,  3087,    -1,    -1,    -1,    -1,   280,    -1,    -1,   283,
      -1,    -1,    -1,    -1,  2983,   289,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3110,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1901,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   329,    -1,  2824,  1851,  1852,
    1853,  1854,  1855,  1856,    -1,    -1,  1859,  1860,  1861,  1862,
    1863,  1864,  1865,  1866,  1867,  1868,    -1,    -1,   352,  2899,
      -1,    -1,    -1,    98,    -1,    -1,   490,    -1,  2637,    -1,
      -1,  2858,  2912,   497,   498,   499,   500,   501,   502,    -1,
      -1,  1889,    -1,    -1,    -1,  2925,    -1,    -1,    -1,    -1,
      -1,  2931,    -1,  2662,    -1,    -1,  3085,    -1,  2938,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,
      -1,    -1,    -1,  1921,    -1,    -1,   410,    -1,  1926,    -1,
      -1,    -1,   157,    -1,  2964,    -1,    -1,   162,    -1,    -1,
    2970,    -1,   167,    -1,    -1,    -1,    -1,  2706,  2978,    -1,
      -1,   176,    -1,  2252,   438,    -1,   181,    -1,    -1,    -1,
      -1,    -1,  2939,    -1,   448,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   465,  3012,   467,   468,    -1,    -1,    -1,   213,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1999,    -1,    -1,  3034,    -1,  2983,    -1,   233,  3039,
    2008,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     504,    -1,    -1,   507,   508,   509,    -1,    -1,  2031,  2032,
      -1,    -1,    -1,    -1,    -1,  3065,    -1,  2796,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3346,    -1,    -1,    -1,    -1,   280,  3086,  3087,   283,    -1,
      -1,    -1,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3104,    -1,  3106,    -1,    -1,    -1,
    3110,    -1,    -1,    -1,    -1,  2384,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2093,    -1,  3127,    -1,    -1,
    3130,    -1,    -1,    -1,   329,    -1,    -1,    -1,  3085,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3150,    -1,    -1,    -1,  3154,  3155,    -1,   352,  3158,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      26,  2440,  2145,    -1,  2142,    -1,    32,    -1,    -1,    -1,
    2148,    -1,    -1,  3183,    40,    -1,    -1,    -1,    -1,    -1,
    3190,     8,    -1,    -1,    11,    -1,    -1,  2236,    15,    16,
      -1,  3350,    -1,    -1,    60,    -1,    -1,    -1,    -1,  2938,
    2249,  2250,  2251,    -1,    -1,   410,    -1,    -1,    -1,    -1,
    3220,    -1,    -1,    -1,    -1,  2264,    -1,    -1,  2267,    46,
      -1,     8,    -1,    -1,    11,    -1,    53,  2276,    15,    16,
      -1,   664,   665,   438,    -1,    -1,    -1,    -1,   104,    -1,
      -1,    -1,    -1,   448,    -1,    -1,    -1,    -1,    -1,    -1,
    3260,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,
     465,    -1,   467,   468,  2543,    -1,    53,   133,    -1,    -1,
      -1,    -1,    -1,  3283,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2262,    -1,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,   730,    -1,   504,
    3310,   734,   507,   508,   509,    -1,    -1,    -1,    -1,  2358,
    2359,  2360,  3322,  3323,   141,  3325,  3326,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3334,    -1,    -1,    -1,    -1,    -1,
      -1,   197,    -1,    -1,    -1,    -1,  3346,    -1,    -1,    -1,
      -1,    -1,    -1,   776,    -1,   172,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   141,    -1,    -1,    -1,  3368,    -1,
      -1,  2640,   189,    -1,    -1,  3375,    -1,   194,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     246,    -1,    -1,    -1,    -1,   172,    -1,    -1,   254,  2367,
      -1,    -1,  2370,  3350,    -1,    -1,    -1,    -1,  2376,    -1,
     266,    -1,   189,  3413,    -1,   232,    -1,   194,    -1,    -1,
      -1,  3150,    -1,    -1,    -1,    -1,    -1,    -1,  3428,    -1,
      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   298,    -1,    -1,    -1,    -1,    -1,  2717,    -1,
      -1,    -1,   875,    -1,    -1,   232,  2495,    -1,   881,    -1,
      -1,   884,    -1,    -1,   887,   888,   889,   890,   285,    -1,
      -1,  2444,  2445,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   344,    -1,
      -1,    -1,   348,    -1,   350,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   928,   929,    -1,   285,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   375,
      -1,    -1,    -1,    -1,   380,    -1,   949,    -1,    -1,    -1,
      -1,  2499,    -1,    -1,    -1,  2503,  2504,  2505,   394,    -1,
      -1,    -1,    -1,    -1,    -1,   968,  2585,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2824,   979,   980,   981,    -1,
     983,   984,    -1,    -1,  2532,    -1,    -1,    -1,   385,     0,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2547,
    2548,  2549,  2550,  2551,  2552,  2553,  2554,  2555,  2556,  2858,
      -1,    22,  1015,    -1,    -1,   451,    -1,    -1,    -1,    -1,
      -1,    32,    -1,    34,    35,    -1,    -1,    -1,   385,  1032,
    1033,  2650,  2651,  2652,  2653,    -1,    47,     8,    -1,    -1,
      11,    52,    -1,    -1,    15,    16,    -1,    -1,    -1,    -1,
      61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    73,  1066,    -1,    -1,    -1,  1070,  1071,    -1,
      -1,    -1,    -1,    84,    -1,    46,    -1,    -1,  1081,  1082,
      -1,    -1,    53,    -1,  2637,    96,    -1,    98,    -1,    -1,
    2939,    -1,    -1,   490,    -1,  2643,    -1,    -1,   109,    -1,
     497,   498,   499,   500,   501,   502,    -1,    78,    -1,  2662,
      -1,    -1,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2669,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,
      -1,    -1,    -1,   490,  2983,    -1,   147,    -1,   149,   150,
     497,   498,   499,   500,   501,   502,    -1,    -1,    -1,    -1,
      -1,    -1,   163,    -1,    -1,    -1,   167,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   193,  2802,     8,    -1,    -1,    11,    -1,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,   209,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1214,    36,    -1,    -1,    -1,    -1,    -1,   189,    -1,
    1223,    -1,    46,   194,   235,    -1,    -1,    -1,    -1,    53,
      -1,    -1,    26,    -1,    -1,    -1,  3085,    -1,    32,    -1,
      -1,    -1,    -1,  2796,  1247,    -1,    40,  2795,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,   232,    -1,    -1,    -1,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,   309,   310,
      -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,   319,    -1,
     104,    -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1330,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,   133,
      -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,   172,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   373,    -1,    -1,   189,    -1,    -1,    -1,   380,
     194,    -1,    -1,   384,    -1,  1378,    -1,  1380,  1381,    -1,
      -1,    -1,    -1,   394,    -1,  2938,    -1,    -1,    -1,    -1,
    1393,  1394,    -1,   217,   218,   406,    -1,    -1,    -1,   410,
      -1,    -1,    -1,   197,    -1,    -1,  1409,    -1,   232,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,   430,
      -1,    -1,  2970,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2978,    -1,   443,    -1,    -1,   446,    -1,    -1,   449,    -1,
      -1,    -1,    -1,   454,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,   246,    -1,    -1,    -1,    -1,   468,    -1,    -1,
     254,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   266,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   492,    -1,    -1,    -1,  3104,  3034,    -1,    -1,    -1,
      -1,  3039,    -1,   287,    -1,   506,    -1,    -1,   509,    -1,
      -1,  3350,    -1,    -1,   298,    -1,    -1,    -1,  3127,    -1,
    1513,    -1,    -1,    -1,    -1,    -1,    -1,  3065,  1521,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,    -1,    -1,    -1,    -1,  3086,  3087,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     344,    -1,    -1,    -1,   348,    -1,   350,  1560,    -1,    -1,
      -1,   385,  3110,  1566,  1567,  1568,  1569,  1570,  1571,  1572,
    1573,  3190,    -1,    -1,    -1,  1578,  1579,    -1,    -1,    -1,
    1583,   375,    -1,    -1,  1587,    -1,   380,  1590,  1591,  1592,
    1593,  1594,  1595,  1596,  1597,  1598,    -1,  3150,  1601,    -1,
     394,  3220,    -1,    -1,    -1,  1608,  3154,  1610,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1629,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   451,    -1,   885,
    1663,  1664,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,     3,    -1,    -1,    -1,   510,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    24,    40,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1750,    -1,    -1,
      -1,  1754,    -1,    -1,  1757,  1758,     8,    78,    -1,    11,
      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,
      -1,    -1,    -1,    79,    -1,    -1,    -1,    -1,  1004,    -1,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,    95,
    1793,    -1,    -1,    -1,    46,    -1,    -1,    -1,  3346,    -1,
      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1812,
    1813,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,
      -1,  1047,    19,    20,    21,    -1,    78,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,  1842,
    1843,    -1,  1845,    -1,    -1,    -1,   152,    -1,    -1,    46,
      -1,   172,    -1,    -1,  1080,    -1,    53,    -1,   164,    -1,
      -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,   189,    -1,
      -1,  1874,  1875,   194,    -1,  1878,    -1,    -1,    -1,    -1,
      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   198,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,  1907,  1131,    -1,    -1,    -1,  1912,
      -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     172,    -1,    -1,    -1,    -1,    -1,  1929,    -1,  1931,    -1,
      -1,    -1,    -1,    -1,    -1,   241,    -1,   189,    -1,   245,
      -1,    -1,   194,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1962,
      -1,    -1,    -1,    -1,   285,   217,   218,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,
     232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    24,   189,    -1,    -1,    -1,    -1,   194,  2001,    -1,
      -1,    -1,    -1,  2006,  2007,    -1,    -1,   313,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,
     217,   218,   328,    -1,    -1,    -1,  1252,    -1,    -1,    -1,
      -1,    -1,    -1,   285,    -1,   232,   288,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    79,  2050,    -1,    -1,
    2053,    -1,  2055,    -1,    -1,   361,    -1,    -1,   364,    -1,
      -1,    -1,    95,    -1,   385,   371,    -1,    -1,  2071,   375,
      -1,   268,   378,    -1,   271,    -1,    -1,  1303,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,
     396,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1328,    -1,   410,    -1,    -1,    -1,  2111,   142,
      -1,   417,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   152,
      -1,   427,    -1,    -1,    -1,  2128,  2129,   433,    -1,    -1,
      -1,   164,    -1,   385,    -1,  1361,   169,  1363,    -1,  1365,
    1366,    -1,  1368,    -1,  2147,  1371,    -1,    -1,  1374,    -1,
      -1,  1377,    -1,  2156,   460,    -1,  1382,    -1,    -1,  1385,
      -1,    -1,    -1,    -1,    -1,   198,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,    -1,    -1,    -1,    -1,   385,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,  1425,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,   241,    -1,
    2213,    -1,   245,    -1,    -1,    -1,  2219,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   490,    -1,
      -1,   493,   494,   495,    -1,   497,   498,   499,   500,   501,
     502,    -1,    -1,    -1,    -1,   507,    -1,    -1,    -1,    78,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2270,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     313,    -1,    11,  1509,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,   490,    -1,   328,   493,   494,   495,  1525,
     497,   498,   499,   500,   501,   502,    -1,    36,    -1,  1535,
    1536,  1537,    -1,    -1,    -1,  1541,    -1,    46,    -1,  1545,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   361,    -1,
      -1,   364,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   375,    -1,    -1,   378,    -1,    -1,    -1,    78,
      -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,   410,    -1,    -1,
      -1,  1607,    -1,    -1,   417,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   427,    -1,    -1,  2400,   217,   218,
     433,    -1,    -1,  2406,  2407,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   232,  2417,    -1,    -1,    -1,    -1,    -1,
    1646,    -1,    -1,    -1,    -1,  2428,    -1,   460,  2431,    -1,
    2433,    -1,    -1,    -1,    -1,    -1,  1662,    -1,  2441,    -1,
      -1,  1667,    -1,   172,    -1,    -1,  2449,  2450,    -1,   268,
      -1,    -1,   271,  2456,    -1,    -1,    -1,    -1,  1684,    -1,
     189,    -1,    -1,    -1,    -1,   194,   285,    -1,  2471,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2481,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,   217,   218,
      15,    16,    17,    18,    19,    20,    21,    -1,  2501,    -1,
      -1,    -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,    -1,     8,    -1,    -1,    11,    53,    -1,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    78,    -1,  2558,   285,  2560,    -1,   288,
      -1,    -1,    46,    -1,    -1,    -1,   385,    -1,    -1,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1840,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1848,  1849,    -1,  1851,  1852,  1853,  1854,  1855,
    1856,    -1,    -1,  1859,  1860,  1861,  1862,  1863,  1864,  1865,
    1866,  1867,  1868,  1869,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    -1,    -1,    -1,  2657,  2658,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,    -1,    -1,   172,  2692,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2706,    -1,   189,    -1,   232,  2711,  2712,
     194,    -1,    -1,  2716,    -1,    -1,    -1,    -1,  2721,    -1,
      -1,  2724,  2725,    -1,    -1,    -1,  2729,  2730,    -1,    -1,
    2733,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,  1965,
      -1,  2744,  1968,   268,    -1,    -1,   271,    -1,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,   490,    -1,   288,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,    -1,    -1,   507,    -1,
      -1,    -1,    -1,    -1,   268,  2788,    -1,   271,  2014,    -1,
      -1,    -1,  2018,  2019,  2020,  2021,  2022,  2023,  2024,  2025,
      -1,   285,    -1,    -1,   288,  2031,  2032,    -1,  2034,  2035,
      -1,    -1,  2815,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2046,    -1,    -1,  2049,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2057,  2058,  2059,  2060,  2061,  2062,  2063,  2064,  2065,
    2066,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,  2092,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,
    2903,   385,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,  2145,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2954,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,  2974,   497,   498,   499,   500,   501,   502,    -1,    -1,
      -1,    -1,   507,    -1,    -1,  2988,    -1,    -1,  2214,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2999,  3000,  2224,  2225,
    3003,    -1,  3005,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    -1,   507,    -1,    -1,    -1,  3030,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,  3054,    -1,   194,    -1,    -1,    -1,  2283,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,  2305,
    2306,  2307,    -1,    -1,  2310,  2311,  2312,  2313,  2314,  2315,
      -1,   232,    -1,  2319,  2320,  2321,  2322,  2323,  2324,  2325,
    2326,  2327,  2328,    -1,    -1,    -1,    -1,  2333,  2334,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3123,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,  2361,    -1,    -1,    -1,    -1,
    2366,  3144,    -1,    -1,   285,  3148,    -1,   288,    -1,  3152,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  3164,    -1,    -1,    -1,    -1,  3169,    -1,  3171,    -1,
      -1,    -1,    -1,  2399,    -1,    -1,  3179,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2418,    -1,  3197,  2421,  2422,    -1,    -1,    -1,
      -1,    -1,    -1,  2429,  2430,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2443,  2444,  2445,
    2446,    -1,  2448,    -1,    -1,    -1,  2452,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
      -1,    -1,    11,  3246,   385,    -1,    15,    16,    17,    18,
      19,    20,    21,  3256,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3269,    36,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,
    2506,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3301,    -1,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    78,
      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,     8,    -1,   507,    11,    -1,    -1,
      78,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,  2610,    -1,    -1,  3390,  3391,  3392,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,   172,    -1,    -1,    -1,    -1,    -1,    53,
      -1,  2637,    -1,    -1,  3417,    -1,    -1,    -1,    -1,    -1,
     189,    -1,    -1,    -1,    -1,   194,    -1,    -1,     8,    -1,
      -1,    11,    -1,    -1,    78,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    -1,    -1,    -1,    -1,  3458,    36,    -1,    -1,    -1,
      -1,    -1,    -1,   232,   172,    -1,    46,  2693,    -1,  2695,
      -1,    -1,    -1,    53,    -1,  2701,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,  2710,    -1,   194,  2713,    -1,  2715,
      -1,    -1,    -1,  2719,    -1,    -1,  2722,  2723,    78,   268,
    2726,  2727,   271,    -1,    -1,    -1,    -1,    -1,  2734,   217,
     218,    -1,    -1,    -1,    -1,    -1,   285,  2743,    -1,   288,
      -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,   172,    -1,
      -1,    -1,  2758,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
    2796,    -1,    -1,   217,   218,    -1,    -1,   285,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,
      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,
      -1,    -1,    -1,    -1,   194,    -1,   385,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
      -1,  2937,  2938,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,    -1,    -1,  2962,  2963,   507,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2987,    -1,    -1,    -1,  2991,    -1,  2993,  2994,  2995,
      -1,    -1,  2998,    -1,    -1,  3001,  3002,    -1,    -1,    -1,
      -1,    -1,   490,    -1,  3010,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3051,    -1,    -1,    -1,    -1,
      -1,  3057,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3070,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3102,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3132,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,    -1,    -1,   507,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3166,  3167,  3168,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3186,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  3198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3242,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3261,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  3271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
    3296,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,  3321,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,  3365,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,  3420,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,    -1,   516,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,    -1,   516,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,   492,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,   507,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,   443,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,   492,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,   128,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,   507,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,   228,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,   423,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   490,    -1,    -1,
      -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,
      -1,   504,    -1,   506,   507,    -1,    -1,    -1,   511,   512,
     513,   514,     3,     4,     5,     6,     7,     8,     9,    10,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    -1,    -1,    -1,    -1,    38,    39,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
      -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,
      -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,
     511,   512,   513,   514,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
     499,    -1,    -1,    -1,    -1,   504,    -1,   506,   507,    -1,
      -1,    -1,   511,   512,   513,   514,     3,     4,     5,     6,
       7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,
      -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,   492,    -1,    -1,
      -1,     3,     4,     5,     6,     7,     8,     9,    10,   504,
      -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,   167,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
     506,   507,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,   465,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
     506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,   499,    -1,    -1,    -1,    -1,   504,    -1,
     506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,   490,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,   499,    -1,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
     490,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,   499,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,   497,
     498,   499,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,   230,   231,   232,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,    -1,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,   412,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,   458,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   497,   498,    -1,    -1,    -1,    -1,    -1,   504,    -1,
     506,    -1,    -1,    -1,    -1,   511,   512,   513,   514,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,   273,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
      -1,    -1,    -1,   497,   498,   499,    -1,    -1,    -1,    -1,
     504,    -1,   506,    -1,    -1,    -1,    -1,   511,   512,   513,
     514,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
     172,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,    -1,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,   429,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   497,   498,    -1,    -1,    -1,
      -1,    -1,   504,    -1,   506,    -1,    -1,    -1,    -1,   511,
     512,   513,   514,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,    -1,
      -1,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,    -1,
      -1,   511,   512,   513,   514,     3,     4,     5,     6,     7,
      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
       5,     6,     7,     8,     9,    10,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,   513,   514,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,    -1,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,   273,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,   499,    -1,     3,     4,     5,   504,
      -1,   506,     9,    -1,    -1,    -1,   511,   512,   513,   514,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,   283,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,   429,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     497,   498,   499,    -1,     3,     4,     5,     6,     7,   506,
       9,    -1,    -1,    -1,    -1,    -1,    -1,   514,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,   230,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,    -1,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,   412,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,   458,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
      -1,     9,    -1,    -1,    -1,   504,    -1,   506,    -1,    -1,
      -1,    -1,   511,   512,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   504,    -1,   506,    -1,
      -1,    -1,    -1,   511,   512,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,   143,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
     157,   158,   159,   160,   161,   162,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,   213,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,   233,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,   280,   281,   282,    -1,    -1,   285,   286,
     287,    -1,   289,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     507,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,   507,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,   410,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
     443,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,     3,   492,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,    -1,   269,   270,   271,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,   284,
     285,   286,   287,    -1,    -1,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,    -1,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,   443,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,    -1,     3,   492,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   506,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     227,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,   284,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,   167,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,   410,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,   443,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,   492,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,   167,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,   410,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,   443,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,    -1,     3,   492,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     506,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   506,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   506,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,     4,     5,    -1,    -1,     8,     9,    -1,
      -1,    -1,    -1,    -1,    15,    16,   504,    -1,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    -1,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,    -1,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,    -1,   315,   316,   317,    -1,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,    -1,   427,    -1,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,    -1,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
       3,    -1,   493,   494,   495,     8,   497,   498,   499,   500,
     501,   502,    15,    16,    -1,    -1,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,    -1,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,    -1,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
       8,    -1,    -1,    11,   172,    53,    -1,    15,    16,    17,
      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,    -1,    -1,   194,    -1,    36,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,
      -1,    -1,    -1,    -1,   172,    53,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   189,    -1,    -1,   232,    -1,   194,    -1,    -1,    -1,
      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     268,   189,    -1,   271,   232,    -1,   194,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,
     218,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,
     268,    -1,    -1,   271,   232,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,
     268,    -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,
     288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    -1,    -1,   385,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,
      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    36,    -1,   385,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    36,    -1,    78,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    36,    -1,    78,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,
     498,   499,   500,   501,   502,    36,    -1,    78,    -1,   507,
      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,
      11,   172,    53,    -1,    15,    16,    17,    18,    19,    20,
      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,    -1,    -1,   194,    -1,    36,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,
      -1,   172,    53,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,
      -1,   232,    -1,   194,    -1,    -1,    -1,    78,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,   172,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,   189,    -1,
     271,   232,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,   268,    -1,    -1,
     271,   232,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,   268,    -1,    -1,
     271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   385,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    36,   385,    -1,   507,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   490,
      -1,    -1,   493,   494,   495,    -1,   497,   498,   499,   500,
     501,   502,    -1,    -1,   505,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,    -1,   271,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,   490,    -1,    -1,
     493,   494,   495,    -1,   497,   498,   499,   500,   501,   502,
      -1,    -1,   505,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   499,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,     4,     5,    -1,    -1,
      -1,     9,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,   230,   231,   232,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
      -1,   269,   270,   271,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,   283,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,   412,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
     458,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,    -1,    -1,     8,    -1,    -1,    11,    -1,   497,
     498,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    -1,    -1,   122,    -1,
      -1,    -1,    46,    -1,     8,    -1,    -1,    11,    -1,    53,
      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    36,    -1,    78,    -1,    40,    -1,    -1,    -1,
      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   172,    53,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,
     194,    -1,    -1,    -1,    78,    -1,    -1,    -1,   162,    -1,
      -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   189,    -1,    -1,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,   161,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,   172,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,   189,    -1,   271,   232,    -1,
     194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   268,    -1,    -1,   271,   232,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   385,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,
      -1,    -1,    -1,   317,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
      -1,   385,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,   448,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,
      53,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,   385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,   172,
      36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,   189,    53,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,
     494,   495,    -1,   497,   498,   499,   500,   501,   502,    -1,
      -1,    -1,    78,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   232,
      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    46,    -1,   268,    -1,    -1,   271,    -1,
      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,   311,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,     8,
      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,
      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    36,    -1,    -1,
      -1,    40,    -1,    -1,    -1,    -1,   232,    46,    -1,    -1,
      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,   167,    -1,    -1,    -1,    -1,   172,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
      -1,    -1,   268,    -1,    -1,   271,   189,    -1,    -1,    -1,
      -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   268,    -1,   490,   271,    -1,
     493,   494,   495,   172,   497,   498,   499,   500,   501,   502,
      -1,    -1,   285,    -1,    -1,   288,    -1,    -1,    -1,    -1,
     189,    -1,    -1,     8,    -1,   194,    11,    -1,    -1,   385,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,
      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    46,    -1,   232,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,   268,
      -1,    -1,   271,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   385,    -1,    -1,    -1,   285,    -1,    -1,   288,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    -1,    -1,    -1,    -1,   385,   490,    -1,    -1,
     493,   494,   495,    78,   497,   498,   499,   500,   501,   502,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,   232,    -1,    -1,
      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    36,    -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,
      -1,    46,    -1,   268,    -1,    -1,   271,    -1,    53,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    78,    -1,    -1,    -1,   172,    -1,    -1,
      -1,   490,    -1,    -1,   493,   494,   495,    -1,   497,   498,
     499,   500,   501,   502,   189,    -1,    -1,    -1,     8,   194,
      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,
      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    36,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    46,   232,    -1,    -1,
      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,   172,    78,    -1,
      -1,    -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
     285,    -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   172,   268,    -1,   490,   271,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,   189,
     285,    -1,    -1,   288,   194,    -1,    -1,    -1,    -1,    -1,
     385,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,
      16,    17,    18,    19,    20,    21,    -1,   217,   218,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    -1,   232,   418,    -1,    -1,    -1,    -1,    -1,    -1,
      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   268,    -1,
      -1,   271,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   285,    -1,    -1,   288,    -1,
     385,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   189,    -1,   385,    -1,    -1,   194,    -1,
      -1,    -1,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,
     495,    -1,   497,   498,   499,   500,   501,   502,    -1,    -1,
      -1,   217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   232,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   268,    -1,    -1,   271,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   285,
      -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     490,    -1,    -1,   493,   494,   495,    -1,   497,   498,   499,
     500,   501,   502,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   385,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,
       5,    -1,    -1,    -1,   490,    -1,    -1,   493,   494,   495,
      -1,   497,   498,   499,   500,   501,   502,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   126,   127,
     128,   129,   130,   131,   132,   133,   134,   135,   136,   137,
     138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
     178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
     198,   199,   200,   201,   202,   203,   204,   205,   206,   207,
     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,   225,   226,   227,
     228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
     428,   429,   430,   431,   432,   433,   434,   435,   436,   437,
     438,   439,   440,   441,   442,   443,   444,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
     121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
     131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
     141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
     201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
     211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
     411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
     431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
     441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,
      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,   230,   231,   232,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,    -1,   269,   270,   271,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,   283,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,   412,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,   458,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,
      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,    -1,   269,   270,   271,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,
      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
     220,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
     230,   231,   232,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,    -1,   269,
     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,   355,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,   412,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,   458,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,    -1,   269,   270,   271,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    -1,    -1,    80,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,   164,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    72,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,   232,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
     439,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    34,    35,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,   284,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,   284,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,     4,    -1,    -1,
      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
     410,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,     5,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,     5,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,     5,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      37,    -1,    -1,    40,    -1,    42,    43,    44,    -1,    46,
      47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      -1,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,
      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,    -1,   149,   150,   151,   152,   153,    -1,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
      -1,    -1,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,   189,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,   204,    -1,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,   230,   231,   232,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
      -1,    -1,   269,   270,   271,   272,    -1,    -1,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,    -1,   293,   294,   295,    -1,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,    -1,   315,   316,
     317,    -1,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,   355,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,   374,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,    -1,   406,
      -1,   408,   409,    -1,   411,   412,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,    -1,
     427,    -1,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,   438,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,    -1,   455,    -1,
     457,   458,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,     3,    -1,
       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,
      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,
      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
     175,    -1,   177,   178,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,    -1,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
     205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,    -1,   263,   264,
     265,   266,   267,    -1,   269,   270,    -1,   272,    -1,   274,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,   292,    -1,   294,
      -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,
      -1,   316,   317,   318,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
      -1,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,    -1,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
      -1,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,    -1,   408,   409,    -1,   411,    -1,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,   426,   427,   428,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,    -1,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,   454,
     455,    -1,   457,    -1,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,
      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,
      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,
      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,
      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,
      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,
      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,
      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,
     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,
      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,
     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,
     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
     178,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,    -1,   190,   191,   192,   193,    -1,   195,   196,   197,
     198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
     208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
      -1,   219,    -1,   221,   222,   223,   224,   225,   226,    -1,
      -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,    -1,   263,   264,   265,   266,   267,
      -1,   269,   270,    -1,   272,    -1,   274,   275,   276,   277,
     278,   279,    -1,   281,   282,    -1,    -1,   285,   286,   287,
      -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
      -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,
     318,   319,   320,   321,    -1,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,   351,    -1,   353,   354,    -1,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,    -1,    -1,   375,   376,   377,
     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,
     388,   389,    -1,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,    -1,
     408,   409,    -1,   411,    -1,   413,   414,   415,   416,   417,
      -1,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
     428,    -1,   430,   431,   432,   433,   434,   435,   436,   437,
      -1,    -1,   440,   441,   442,    -1,   444,   445,   446,   447,
      -1,   449,   450,   451,   452,   453,   454,   455,    -1,   457,
      -1,   459,   460,   461,   462,   463,    -1,    -1,   466,    -1,
      -1,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,
     488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,
      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,
      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,
     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,    -1,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,    -1,
     231,    -1,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,    -1,   263,   264,   265,   266,   267,    -1,   269,   270,
      -1,   272,    -1,   274,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,   314,    -1,   316,   317,   318,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,    -1,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,    -1,   375,   376,   377,   378,   379,   380,
     381,   382,   383,   384,    -1,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,   405,   406,    -1,   408,   409,    -1,
     411,    -1,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,   426,   427,   428,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,   454,   455,    -1,   457,    -1,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,
      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,
      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,
      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,
      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,
      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,
     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,
     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,
     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
      -1,   175,    -1,   177,   178,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,    -1,   190,   191,   192,   193,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
      -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
     214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
     224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,    -1,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,    -1,   263,
     264,   265,   266,   267,    -1,   269,   270,    -1,   272,    -1,
     274,   275,   276,   277,   278,   279,    -1,   281,   282,    -1,
      -1,   285,   286,   287,    -1,    -1,   290,   291,   292,    -1,
     294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,
     314,    -1,   316,   317,   318,   319,   320,   321,    -1,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,    -1,   353,
     354,    -1,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
      -1,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,    -1,   386,   387,   388,   389,    -1,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
     404,   405,   406,    -1,   408,   409,    -1,   411,    -1,   413,
     414,   415,   416,   417,    -1,   419,   420,   421,    -1,    -1,
     424,   425,   426,   427,   428,    -1,   430,   431,   432,   433,
     434,   435,   436,   437,    -1,    -1,   440,   441,   442,    -1,
     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,
     454,   455,    -1,   457,    -1,   459,   460,   461,   462,   463,
      -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,
     484,   485,   486,   487,   488,   489,     3,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,
      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,
      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,
      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,
      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,
      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,
      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,
      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,
     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,
     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,
     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
      -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
     177,   178,   179,   180,    -1,   182,   183,   184,   185,   186,
     187,   188,    -1,   190,   191,   192,   193,    -1,   195,   196,
     197,   198,   199,   200,   201,    -1,   203,    -1,   205,   206,
     207,   208,   209,   210,   211,   212,    -1,   214,    -1,   216,
      -1,    -1,   219,    -1,   221,   222,   223,   224,   225,   226,
      -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,    -1,   263,   264,   265,   266,
     267,    -1,   269,   270,    -1,   272,    -1,   274,   275,   276,
     277,   278,   279,    -1,   281,   282,    -1,    -1,   285,   286,
     287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,   316,
     317,   318,   319,   320,   321,    -1,   323,   324,   325,   326,
     327,   328,    -1,   330,   331,   332,   333,   334,   335,   336,
     337,    -1,   339,   340,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,   351,    -1,   353,   354,    -1,   356,
     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,    -1,    -1,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,
     387,   388,   389,    -1,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
      -1,   408,   409,    -1,   411,    -1,   413,   414,   415,   416,
     417,    -1,   419,   420,   421,    -1,    -1,   424,   425,   426,
     427,   428,    -1,   430,   431,   432,   433,   434,   435,   436,
     437,    -1,    -1,   440,   441,   442,    -1,   444,   445,   446,
     447,    -1,   449,   450,   451,   452,   453,   454,   455,    -1,
     457,    -1,   459,   460,   461,   462,   463,    -1,    -1,   466,
      -1,    -1,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,   480,   481,   482,   483,   484,   485,   486,
     487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,
      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,
      50,    51,    52,    53,    54,    -1,    56,    57,    -1,    59,
      60,    61,    62,    63,    64,    -1,    -1,    67,    68,    69,
      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    -1,
      -1,    81,    82,    83,    84,    85,    86,    -1,    88,    89,
      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,
     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,
     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,
     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,
     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
     160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
     170,   171,    -1,   173,    -1,   175,    -1,   177,   178,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,    -1,
     190,   191,   192,   193,    -1,   195,   196,   197,   198,   199,
     200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
     210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
      -1,   221,   222,   223,   224,   225,   226,    -1,    -1,   229,
      -1,   231,    -1,    -1,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,    -1,   263,   264,   265,   266,   267,    -1,   269,
     270,    -1,   272,    -1,   274,   275,   276,   277,   278,   279,
      -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,
     290,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,    -1,    -1,
      -1,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,
     320,   321,    -1,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,   351,    -1,   353,   354,    -1,   356,   357,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    -1,    -1,   375,   376,   377,   378,   379,
     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,
      -1,   391,   392,   393,   394,   395,   396,   397,   398,   399,
     400,   401,   402,   403,   404,   405,   406,    -1,   408,   409,
      -1,   411,    -1,   413,   414,   415,   416,   417,    -1,   419,
     420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
     430,   431,   432,   433,   434,   435,   436,   437,    -1,    -1,
     440,   441,   442,    -1,   444,   445,   446,   447,    -1,   449,
     450,   451,   452,   453,   454,   455,    -1,   457,    -1,   459,
     460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,
      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,
      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,
     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
     173,    -1,   175,    -1,   177,   178,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,    -1,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,    -1,   231,    -1,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,    -1,
     263,   264,   265,   266,   267,    -1,   269,   270,    -1,   272,
      -1,   274,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,   292,
      -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,   314,    -1,   316,   317,   318,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,    -1,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,    -1,   375,   376,   377,   378,   379,    -1,   381,   382,
     383,   384,    -1,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,   405,   406,    -1,   408,   409,    -1,   411,    -1,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,   426,   427,   428,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,    -1,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,   454,   455,    -1,   457,    -1,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,     3,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,
      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,
      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,
      56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,
      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,
      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,
      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,
      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,
     116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,
     126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,
     136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
     156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
      -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
      -1,   177,   178,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,    -1,   190,   191,   192,   193,    -1,   195,
     196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
     206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
     216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
     226,    -1,    -1,   229,    -1,   231,    -1,    -1,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,    -1,   263,   264,   265,
     266,   267,    -1,   269,   270,    -1,   272,    -1,   274,   275,
     276,   277,   278,   279,    -1,   281,   282,    -1,    -1,   285,
     286,   287,    -1,    -1,   290,   291,   292,    -1,   294,    -1,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,    -1,    -1,    -1,    -1,   312,   313,   314,    -1,
     316,   317,   318,   319,   320,   321,    -1,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,   351,    -1,   353,   354,    -1,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    -1,    -1,   375,
     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,
     386,   387,   388,   389,    -1,   391,   392,   393,   394,   395,
     396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
     406,    -1,   408,   409,    -1,   411,    -1,   413,   414,   415,
     416,   417,    -1,   419,   420,   421,    -1,    -1,   424,   425,
     426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
     436,   437,    -1,    -1,   440,   441,   442,    -1,   444,   445,
     446,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
      -1,   457,    -1,   459,   460,   461,   462,   463,    -1,    -1,
     466,    -1,    -1,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,   480,   481,   482,   483,   484,   485,
     486,   487,   488,   489,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,
      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,
      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
      -1,   173,    -1,   175,    -1,   177,   178,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,    -1,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,    -1,   231,
      -1,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
      -1,   263,   264,   265,   266,   267,    -1,   269,   270,    -1,
     272,    -1,   274,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
     292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,   314,    -1,   316,   317,   318,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,    -1,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,    -1,   375,   376,   377,   378,   379,   380,   381,
     382,   383,   384,    -1,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,   404,   405,   406,    -1,   408,   409,    -1,   411,
      -1,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,   426,   427,   428,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,   454,   455,    -1,   457,    -1,   459,   460,   461,
     462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
     482,   483,   484,   485,   486,   487,   488,   489,     3,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,
      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    -1,    42,    43,    44,
      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,
      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,
      75,    76,    -1,    -1,    79,    -1,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,
      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,
      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,
     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,
      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,
     145,   146,   147,    -1,   149,   150,   151,   152,   153,    -1,
      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
     165,   166,    -1,   168,   169,   170,    -1,   172,   173,    -1,
     175,    -1,    -1,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,    -1,
     195,   196,   197,   198,   199,   200,   201,    -1,   203,   204,
      -1,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
      -1,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,    -1,    -1,   229,   230,   231,   232,    -1,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,    -1,    -1,   269,   270,   271,   272,    -1,    -1,
     275,   276,   277,   278,   279,    -1,   281,   282,    -1,    -1,
     285,   286,   287,    -1,    -1,   290,   291,    -1,   293,   294,
     295,    -1,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,    -1,    -1,    -1,    -1,   312,   313,    -1,
     315,   316,   317,    -1,   319,   320,   321,    -1,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,    -1,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,    -1,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    -1,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,    -1,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
      -1,   406,    -1,   408,   409,    -1,   411,   412,   413,   414,
     415,   416,   417,    -1,   419,   420,   421,    -1,    -1,   424,
     425,    -1,   427,    -1,    -1,   430,   431,   432,   433,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,   444,
     445,   446,   447,    -1,   449,   450,   451,   452,   453,    -1,
     455,    -1,   457,   458,   459,   460,   461,   462,   463,    -1,
      -1,   466,    -1,    -1,   469,   470,   471,   472,   473,   474,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,    -1,    22,
      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,
      -1,    54,    55,    56,    57,    -1,    59,    60,    61,    62,
      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,
      73,    74,    75,    76,    -1,    -1,    79,    -1,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,
      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,
     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,
     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,
      -1,   144,   145,   146,   147,    -1,   149,   150,   151,   152,
     153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
     163,    -1,   165,   166,    -1,   168,   169,   170,    -1,   172,
     173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,    -1,   195,   196,   197,   198,   199,   200,   201,    -1,
     203,   204,    -1,   206,   207,   208,   209,   210,   211,   212,
      -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
     223,   224,   225,   226,    -1,    -1,   229,   230,   231,   232,
      -1,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,    -1,    -1,   269,   270,   271,   272,
      -1,    -1,   275,   276,   277,   278,   279,    -1,   281,   282,
      -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,    -1,
     293,   294,   295,    -1,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,   312,
     313,    -1,   315,   316,   317,    -1,   319,   320,   321,    -1,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,    -1,   339,   340,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,   351,    -1,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,    -1,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
     403,   404,    -1,   406,    -1,   408,   409,    -1,   411,   412,
     413,   414,   415,   416,   417,    -1,   419,   420,   421,    -1,
      -1,   424,   425,    -1,   427,    -1,    -1,   430,   431,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,   444,   445,   446,   447,    -1,   449,   450,   451,   452,
     453,    -1,   455,    -1,   457,   458,   459,   460,   461,   462,
     463,    -1,    -1,   466,    -1,    -1,   469,   470,   471,   472,
     473,   474,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,
      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,
      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,
      71,    -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,
      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,
     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,
     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,
     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,
     141,   142,    -1,   144,   145,   146,   147,    -1,   149,   150,
     151,   152,   153,    -1,    -1,   156,    -1,   158,   159,   160,
     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
     171,   172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,
      -1,   182,   183,   184,   185,   186,   187,   188,   189,   190,
     191,   192,   193,    -1,   195,   196,   197,   198,   199,   200,
     201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
     211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
     221,   222,   223,   224,   225,   226,    -1,    -1,   229,   230,
     231,   232,    -1,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
     261,   262,   263,   264,   265,   266,    -1,    -1,   269,   270,
     271,   272,    -1,    -1,   275,   276,   277,   278,   279,    -1,
     281,   282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,
     291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,    -1,    -1,    -1,
      -1,   312,   313,    -1,   315,   316,   317,    -1,   319,   320,
     321,    -1,   323,   324,   325,   326,   327,   328,    -1,   330,
     331,   332,   333,   334,   335,   336,   337,    -1,   339,   340,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
     351,    -1,   353,   354,   355,   356,   357,   358,    -1,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,    -1,   374,   375,   376,   377,   378,   379,   380,
      -1,   382,   383,   384,   385,   386,   387,   388,   389,    -1,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     401,   402,   403,   404,    -1,   406,    -1,   408,   409,    -1,
     411,   412,   413,   414,   415,   416,   417,    -1,   419,   420,
     421,    -1,    -1,   424,   425,    -1,   427,    -1,    -1,   430,
     431,   432,   433,   434,   435,   436,   437,    -1,    -1,   440,
     441,   442,    -1,   444,   445,   446,   447,    -1,   449,   450,
     451,   452,   453,    -1,   455,    -1,   457,   458,   459,   460,
     461,   462,   463,    -1,    -1,   466,    -1,    -1,   469,   470,
     471,   472,   473,   474,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,
      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,
      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,
      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,
      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,
      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,
     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,
      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,
      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
     159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
      -1,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
      -1,   190,   191,   192,   193,    -1,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,    -1,   205,   206,   207,   208,
     209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
     219,    -1,   221,   222,   223,   224,   225,   226,    -1,    -1,
     229,    -1,   231,    -1,    -1,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,    -1,   263,   264,   265,   266,   267,    -1,
     269,   270,    -1,   272,    -1,   274,   275,   276,   277,   278,
     279,    -1,   281,   282,    -1,    -1,   285,   286,   287,    -1,
      -1,   290,   291,   292,    -1,   294,    -1,   296,   297,   298,
     299,   300,   301,   302,    -1,   304,   305,   306,   307,    -1,
      -1,    -1,    -1,   312,   313,   314,    -1,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,    -1,   332,   333,   334,   335,   336,   337,    -1,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,    -1,   353,   354,    -1,   356,   357,   358,
     359,    -1,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,    -1,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,
     389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,    -1,   408,
     409,    -1,   411,    -1,   413,   414,   415,   416,   417,    -1,
     419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
      -1,   430,   431,   432,   433,   434,   435,   436,   437,    -1,
      -1,   440,   441,   442,    -1,   444,   445,   446,   447,    -1,
     449,   450,   451,   452,   453,   454,   455,    -1,   457,    -1,
     459,   460,   461,   462,   463,    -1,    -1,   466,    -1,    -1,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,
     489,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,
      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,
      52,    -1,    54,    55,    56,    57,    -1,    59,    60,    61,
      62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,
      -1,    73,    74,    75,    76,    -1,    -1,    79,    -1,    81,
      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,
      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,
      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,
     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,
     142,    -1,   144,   145,   146,   147,    -1,   149,   150,   151,
     152,   153,    -1,    -1,   156,    -1,   158,   159,   160,   161,
      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,    -1,
     172,   173,    -1,   175,    -1,    -1,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,   193,    -1,   195,   196,   197,   198,   199,   200,   201,
      -1,   203,   204,    -1,   206,   207,   208,   209,   210,   211,
     212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
     222,   223,   224,   225,   226,    -1,    -1,   229,   230,   231,
     232,    -1,   234,   235,   236,   237,   238,   239,   240,   241,
      -1,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,    -1,    -1,   269,   270,   271,
     272,    -1,    -1,   275,   276,   277,   278,   279,    -1,   281,
     282,    -1,    -1,   285,   286,   287,    -1,    -1,   290,   291,
      -1,   293,   294,   295,    -1,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,    -1,    -1,    -1,    -1,
     312,   313,    -1,   315,   316,   317,    -1,   319,   320,   321,
      -1,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
      -1,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,   378,   379,   380,    -1,
     382,   383,   384,   385,   386,   387,   388,   389,    -1,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,
     402,    -1,   404,    -1,   406,    -1,   408,   409,    -1,   411,
     412,   413,   414,   415,   416,   417,    -1,   419,   420,   421,
      -1,    -1,   424,   425,    -1,   427,    -1,    -1,   430,   431,
     432,   433,   434,   435,   436,   437,    -1,    -1,   440,   441,
     442,    -1,   444,   445,   446,   447,    -1,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,   459,   460,   461,
     462,   463,    -1,    22,   466,    -1,    -1,   469,   470,   471,
     472,   473,   474,    32,    -1,    34,    35,    -1,    -1,    -1,
      22,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      32,    -1,    -1,    52,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      52,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    61,
      -1,    -1,    -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,
      -1,    73,    -1,    -1,    -1,    -1,    -1,    96,    -1,    98,
      -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     109,    -1,    -1,    -1,    96,    -1,    98,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   123,    -1,    -1,   109,    -1,    -1,
      -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,
     139,   123,    -1,    -1,    -1,    -1,    -1,    -1,   147,    -1,
      -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,    -1,
      -1,    -1,    -1,    -1,   163,   147,    -1,    -1,   167,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   163,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     209,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   209,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   235,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   235,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,
     309,   310,    -1,    -1,    -1,    -1,    -1,   316,    -1,    -1,
     319,    -1,    -1,    -1,    -1,    -1,   308,   309,   310,    -1,
      -1,    -1,    -1,    -1,   316,    -1,    -1,   319,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   348,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   357,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   348,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   373,   357,    -1,    -1,    -1,    -1,
      -1,   380,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,
      -1,   373,    -1,    -1,    -1,   394,    -1,    -1,   380,    -1,
      -1,    -1,   384,    -1,    -1,    -1,    -1,   406,    -1,    -1,
      -1,   410,   394,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   406,    -1,    -1,    -1,   410,    -1,
      -1,   430,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   443,    -1,    -1,    -1,   430,    -1,
     449,    -1,    -1,    -1,    -1,   454,    -1,    -1,    -1,   458,
      -1,   443,    -1,    -1,    -1,    -1,    -1,   449,    -1,   468,
      -1,    -1,   454,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   468,    -1,    -1,    -1,
      -1,    -1,    -1,   492,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   506,    -1,    -1,
     492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   506
};

/* YYSTOS[STATE-NUM] -- The symbol kind of the accessing symbol of
   state STATE-NUM.  */
static const yytype_int16 yystos[] =
{
       0,    22,    32,    34,    35,    47,    52,    61,    73,    84,
      96,    98,   109,   123,   124,   133,   139,   147,   149,   150,
     163,   167,   193,   209,   235,   308,   309,   310,   316,   319,
     348,   357,   373,   380,   384,   394,   406,   410,   430,   443,
     446,   449,   454,   468,   492,   506,   518,   519,   520,   521,
     522,   529,   540,   541,   542,   545,   546,   556,   574,   622,
     632,   635,   638,   645,   647,   650,   651,   655,   661,   662,
     666,   673,   677,   678,   679,   686,   691,   707,   710,   711,
     714,   716,   717,   718,   719,   721,   723,   724,   728,   781,
     782,   944,   946,   947,   948,   953,   956,   962,   963,   967,
     424,   471,   945,   198,   364,   375,   410,   460,   106,   187,
     543,   945,     3,    22,    23,    24,    25,    26,    27,    28,
      29,    31,    32,    33,    42,    43,    44,    46,    47,    48,
      49,    50,    51,    52,    53,    54,    55,    56,    57,    59,
      60,    61,    62,    63,    64,    67,    68,    69,    70,    71,
      73,    74,    75,    76,    77,    79,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    92,    93,    94,    95,
      96,    97,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   114,   116,   117,   118,
     119,   120,   121,   123,   124,   125,   126,   127,   130,   131,
     132,   133,   134,   136,   137,   138,   140,   141,   142,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     156,   158,   159,   160,   161,   163,   165,   166,   168,   169,
     170,   171,   172,   173,   175,   177,   178,   179,   180,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
     193,   195,   196,   197,   198,   199,   200,   201,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   214,   216,
     217,   218,   219,   220,   221,   222,   223,   224,   225,   226,
     229,   230,   231,   232,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   269,   270,
     271,   272,   274,   275,   276,   277,   278,   279,   281,   282,
     285,   286,   287,   290,   291,   292,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   312,   313,   314,   315,   316,   317,   318,   319,   320,
     321,   323,   324,   325,   326,   327,   328,   330,   331,   332,
     333,   334,   335,   336,   337,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   375,   376,
     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
     387,   388,   389,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,   404,   405,   406,   408,
     409,   411,   412,   413,   414,   415,   416,   417,   419,   420,
     421,   424,   425,   426,   427,   428,   430,   431,   432,   433,
     434,   435,   436,   437,   440,   441,   442,   444,   445,   446,
     447,   449,   450,   451,   452,   453,   454,   455,   457,   458,
     459,   460,   461,   462,   463,   466,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   486,   487,   488,   489,   549,   625,   626,
     627,   853,   933,   937,     3,   171,   242,   403,   547,   549,
     625,   945,    55,   167,   506,   569,   173,   236,   288,   307,
     364,   414,   416,   433,   439,   442,   620,   644,   685,     5,
      30,   319,   549,   550,   932,   106,   543,    24,    79,    95,
     142,   152,   164,   169,   198,   241,   245,   313,   328,   361,
     364,   371,   375,   378,   396,   410,   417,   427,   433,   460,
     656,   657,   660,   945,   932,    98,   133,   458,   506,   521,
     522,   529,   545,   546,   556,   574,   622,   632,   635,   645,
     647,   650,   651,   655,   662,   669,   673,   679,   686,   707,
     710,   711,   714,   716,   944,   946,   948,   953,   956,   962,
     967,   106,    73,   209,    66,    77,    79,   154,   227,   274,
     284,   296,   314,   360,   405,   426,   428,   432,   454,   506,
     548,   549,   550,   717,   782,   784,   786,   796,   803,   804,
     853,   855,   856,   106,     5,   549,   551,   708,   708,   549,
     932,    30,   173,   236,   379,   420,   424,   549,   954,   955,
     965,   945,    30,   128,   737,   738,   173,   236,   364,   379,
     420,   957,   958,   965,   945,   549,   716,   728,   966,   549,
     803,   410,   734,   548,   168,   506,   950,   506,   336,   729,
     730,   932,   729,   717,   718,     0,   509,   458,   667,   118,
     208,   445,   143,   213,   289,   438,   740,   741,   786,   786,
     717,   719,   721,   510,    30,   420,   424,   716,   966,   187,
     548,   932,   187,   548,   187,   803,   187,   548,   268,   551,
     504,   508,   552,   553,   506,   106,   716,   548,   414,   416,
     414,   416,   346,   187,   548,   548,   169,   241,   336,   375,
     410,   460,   633,   371,   198,    30,   932,   187,     3,   247,
     427,   105,   410,   410,   460,   549,   368,   187,   549,   658,
     939,   187,   929,   932,   187,   932,   506,   665,   288,   416,
     669,     3,    37,    42,    49,    53,    54,    55,    56,    57,
      69,    70,    77,    79,    81,    87,    99,   110,   111,   148,
     154,   160,   166,   168,   171,   172,   177,   178,   189,   204,
     205,   211,   212,   214,   217,   218,   220,   230,   232,   242,
     261,   262,   263,   267,   271,   274,   276,   292,   293,   295,
     296,   314,   315,   318,   333,   355,   359,   374,   381,   385,
     388,   403,   405,   412,   420,   421,   426,   428,   432,   454,
     455,   458,   475,   476,   477,   478,   479,   480,   481,   482,
     483,   484,   485,   625,   629,   670,   672,   673,   675,   676,
     667,   549,   551,   547,   708,   506,   506,   162,   506,   717,
     804,   506,   506,   548,   506,   506,   167,   506,   506,   506,
     506,   717,   782,   786,   796,   499,   552,    40,   549,   797,
     798,   797,   373,   510,   720,    37,    42,    99,   168,   204,
     220,   230,   262,   308,   315,   355,   374,   443,   800,   798,
      40,   549,   797,   799,   492,   808,   551,   167,   495,   506,
     506,   712,   955,   955,   955,   489,   219,   508,   283,     4,
       6,     7,     8,     9,    10,    39,    54,    56,    57,    65,
      69,    70,    81,   110,   111,   113,   132,   148,   155,   160,
     177,   178,   211,   212,   214,   242,   261,   263,   268,   273,
     276,   285,   333,   359,   388,   420,   421,   429,   455,   490,
     497,   498,   499,   504,   506,   511,   512,   513,   514,   549,
     551,   717,   771,   820,   823,   826,   827,   828,   830,   831,
     832,   833,   835,   836,   847,   849,   850,   851,   852,   853,
     854,   856,   857,   872,   873,   884,   906,   911,   919,   920,
     921,   933,   934,   935,   918,   920,   957,   957,   551,   957,
     489,   167,   422,   495,   508,   552,   652,   803,     3,   166,
     168,   458,   673,   949,   951,   166,   952,   847,   890,   891,
     729,   510,   506,   941,   507,   507,   520,   548,   167,   288,
     694,   652,    30,   128,   735,   735,    59,   735,   157,   162,
     233,   280,   746,   748,   749,   774,   776,   777,   778,   176,
     283,   448,   283,   740,   741,   506,   411,   964,   489,   219,
     148,    26,    32,   133,   287,   344,   348,   380,   451,   534,
     537,   538,   344,   148,    40,    60,   104,   197,   246,   254,
     266,   298,   344,   350,   375,   380,   394,   523,   526,   537,
     148,   344,   380,   537,   148,   344,   380,   537,   148,    40,
     544,   847,   912,     3,    30,    34,    35,    36,    38,    39,
      40,    41,    45,    58,    65,    66,    72,    78,    80,    91,
      98,   113,   115,   122,   128,   129,   135,   139,   143,   155,
     157,   162,   164,   167,   174,   176,   181,   194,   202,   213,
     215,   227,   228,   233,   268,   273,   280,   283,   284,   288,
     289,   308,   309,   310,   311,   322,   329,   338,   352,   373,
     390,   407,   410,   418,   422,   423,   429,   438,   439,   443,
     448,   454,   456,   464,   465,   467,   468,   554,   555,   625,
     629,   631,   553,     3,    30,    37,    42,    49,    55,    79,
      81,    87,    99,   128,   166,   168,   171,   172,   189,   204,
     217,   218,   220,   230,   232,   242,   262,   271,   293,   295,
     315,   355,   374,   385,   403,   412,   432,   456,   458,   507,
     625,   630,   847,   893,   894,   936,   942,   549,   507,   506,
     609,   364,   620,   644,   268,   636,    40,   460,   187,   548,
     187,   548,   624,   187,   548,   187,   548,   187,   549,   639,
      87,   682,   148,   472,   187,    88,   125,   301,   415,   148,
     508,   940,    63,   351,   510,   659,   148,   510,   659,   148,
     283,   663,   664,   847,   942,   346,   507,   510,     4,   155,
     283,   429,   497,   498,   525,   528,   551,   668,   670,   671,
     674,   935,   669,   422,   506,   564,   568,   167,   847,   891,
     506,     3,   107,   108,   184,   185,   248,   249,   250,   251,
     252,   253,   256,   257,   369,   370,   486,   487,   551,   838,
     839,   840,   841,   842,   843,   844,   845,   896,   897,   798,
     799,   847,   548,   847,   898,   497,   498,   549,   848,   849,
     873,   884,   900,   506,   847,   890,   901,   847,    58,   167,
     228,   423,   847,   891,   904,   847,   507,   550,   506,   412,
     754,   755,   755,   737,   738,   786,   215,   732,    37,   220,
     374,   800,   220,   293,   801,   786,   801,   220,   800,   506,
     220,   801,   144,   195,   788,   220,   755,   506,   550,   506,
     755,   290,   549,   551,   709,   847,   959,   961,   893,     3,
      37,    42,    49,    54,    55,    56,    57,    69,    70,    79,
      81,    87,    99,   110,   111,   160,   166,   168,   172,   189,
     204,   211,   212,   214,   217,   218,   220,   230,   232,   242,
     261,   262,   263,   271,   276,   293,   295,   315,   333,   355,
     359,   374,   381,   385,   388,   403,   412,   420,   421,   432,
     438,   455,   458,   625,   628,   814,   816,   817,   819,   821,
     823,   825,   827,   828,   829,   831,   832,   835,   836,   895,
     938,    40,   231,   549,   506,   504,   717,   457,   834,   847,
     910,   834,   834,   506,   506,   822,   822,   318,   717,   506,
     824,   514,    69,    70,   834,   847,   822,   506,   506,   470,
     492,   506,   837,   506,   837,   847,   847,   847,   144,   922,
     923,   847,   891,   892,   717,   847,   890,     9,   555,   550,
     874,   875,   876,   508,   552,   913,   552,   506,   551,   506,
     506,   551,   935,     3,     8,    11,    15,    16,    17,    18,
      19,    20,    21,    36,    40,    46,    53,    78,   172,   189,
     194,   217,   218,   232,   268,   271,   285,   288,   385,   490,
     493,   494,   495,   497,   498,   499,   500,   501,   502,   882,
     883,   884,   886,   916,   469,   858,   295,   847,   510,   732,
     506,   551,   732,     3,   113,   236,   525,   551,   836,   960,
     102,   961,   961,   549,    40,   549,   507,   510,   667,   510,
     507,   730,   929,   930,    40,   941,   652,   188,   346,   215,
     380,   719,   719,    30,   742,   743,   847,    59,   719,   736,
     159,   265,   762,   222,   266,   332,   383,   445,     4,     9,
      30,   757,   847,   497,   498,   758,   759,   847,   849,   774,
     775,   749,   748,   746,   747,   162,   777,   278,   779,    59,
     725,   726,   727,   789,   848,   920,   920,   746,   774,   891,
     231,   548,    72,    80,    91,   164,   187,   322,   439,   549,
     591,   601,   616,    80,    91,   715,    91,   715,   506,   422,
     506,   589,   240,   442,   589,    91,   510,   422,   548,     3,
     819,   525,    59,   527,   525,   525,   104,   246,   254,    59,
     422,   468,   492,   524,   259,   364,   524,   526,   803,    91,
     422,   715,   364,   548,   422,   364,   543,   549,   564,   505,
     516,   893,   893,   894,   510,   740,   741,    13,    14,   422,
     422,   549,   608,   613,   468,   567,   548,   336,   375,   410,
     460,   633,   371,   148,    98,   574,   637,   645,   679,   967,
     140,   816,   548,   268,   523,   646,   268,   506,   609,    40,
     268,   609,   268,   506,   634,   268,   506,   187,   549,   603,
     683,     3,   148,   658,   554,   508,   939,   929,   932,   932,
     939,   507,   510,    13,   669,   675,     4,   935,     4,   935,
     551,   555,   566,   573,    55,   100,   119,   137,   141,   163,
     166,   182,   273,   281,   303,   330,   570,   709,    40,   507,
     847,   507,   167,   510,   507,   311,   899,   507,   848,   848,
      11,    15,    16,    19,    20,    21,   194,   217,   285,   493,
     494,   495,   497,   498,   499,   500,   501,   502,   884,   848,
     507,   805,   806,   855,   162,   167,   902,   903,   510,   507,
      40,   904,   891,   904,   904,   167,   507,    40,   797,   506,
     930,     4,     9,   549,   750,   752,   753,   920,   918,   173,
     236,   410,   414,   416,   442,   548,   733,   465,   809,   786,
     220,   786,   283,   448,   802,   786,   220,   920,   786,   275,
     275,   506,   786,   550,   810,   811,   506,   550,   810,   510,
     507,   510,   508,   506,   819,   506,   506,   508,    39,   818,
     506,   838,   839,   840,   841,   842,   843,   844,   845,   846,
     507,   510,   822,   556,   651,   686,   713,   716,   946,   891,
     892,   506,   464,   907,   908,   847,   892,   935,   847,   877,
     878,   879,   880,   834,   834,     8,    15,    16,    19,    20,
      21,   493,   494,   495,   497,   498,   499,   500,   501,   502,
     549,   882,   887,   507,   891,   420,   420,   935,   935,   506,
     549,   346,   927,   162,   505,   507,   510,   516,   510,   515,
     499,   553,   891,   935,   847,   846,   846,   816,   847,   847,
     847,   847,   847,   847,   847,   847,     5,   555,   943,   420,
      45,   407,   917,   939,   847,   847,   506,   717,   905,   128,
     155,   268,   273,   278,   429,   440,   847,   273,   506,   847,
     422,    53,   172,   189,   194,   232,   385,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,    30,    38,   390,
     881,   504,   508,   915,   176,   158,   859,   359,   506,   873,
     921,   167,   783,   893,   783,   506,   551,   549,   548,   949,
     540,   548,   847,   510,   507,   245,   268,   731,   448,   654,
     548,   688,   506,   549,   693,   703,   704,   706,    41,   122,
     744,   510,   448,   744,   259,   719,   359,   360,   497,   498,
     759,   761,   849,   383,   222,   284,   306,   306,   510,   501,
       4,   760,   935,   760,   359,   360,   761,   548,   928,   272,
     387,   780,   506,   930,   931,   510,   176,   448,   194,   176,
     215,   775,   747,   507,   344,   537,   506,   187,   601,   932,
     222,   268,   222,   448,   506,   594,   815,   816,   932,   549,
     187,   932,   187,   549,    26,   133,   380,   533,   536,   555,
     585,   599,   932,   555,   593,   612,   932,   534,   932,   344,
     380,   523,   537,   525,   939,   932,   525,   939,   932,   525,
     344,   380,   537,   932,   932,   932,   932,   344,   380,   537,
     932,   932,   551,   498,   847,   912,   740,   740,   740,   456,
     894,   188,   349,   739,   847,   847,   549,   327,   563,   507,
     510,   281,   167,   422,   558,   636,   460,   548,   548,   624,
     548,   548,   639,   548,   288,   620,   506,   717,   506,   148,
     148,   232,   549,   591,   601,   604,   607,   617,   619,   468,
     470,   596,   147,   716,   148,   468,   684,   148,   507,   893,
      40,   148,   549,   640,   641,   268,   283,   659,   554,   659,
     283,   659,   663,   847,   564,   499,   506,   525,   565,   674,
     852,   507,   510,    40,   562,   551,   562,   268,   273,   330,
     562,    59,   562,   816,   507,   847,   847,   847,   902,   816,
     848,   848,   848,   848,   848,   848,   128,   268,   278,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   507,
     510,    40,   807,   847,   847,   903,   902,   816,   507,   507,
     507,   891,   816,   930,   507,   306,   501,   306,   360,   501,
     506,   506,   732,   414,   416,   414,   416,   548,   734,   734,
     734,   847,   176,   763,   802,   786,   847,   506,   786,   162,
     506,   550,   793,   802,   816,   507,   510,   810,   507,   959,
       3,   895,    39,   818,   549,   813,   813,     3,   504,   504,
     935,   422,   422,   422,   422,   816,   507,   505,   891,   847,
     135,   908,   909,   507,   507,   507,   516,   510,   515,   508,
     507,   507,   489,   489,   507,   507,   930,   506,   847,   924,
     549,   847,   847,   874,   923,   507,   507,   507,   489,   848,
     848,   141,   891,   167,   128,   155,   273,   278,   429,   440,
     506,   141,   887,   847,   407,   917,   847,   905,   847,   422,
     506,   717,   847,   912,   554,   506,   506,   151,   860,   784,
     785,   809,   740,   809,   935,   846,   941,   941,   245,   506,
     785,   465,   653,    40,    59,   689,   699,   706,   913,   510,
     783,   495,   491,   745,   743,   285,   882,   885,   745,     4,
     935,   761,   284,   445,   758,   510,   239,   930,   725,    59,
     920,   506,   550,    59,   259,   422,   847,   268,   616,   506,
     148,   506,   594,   198,   613,   614,   575,    40,   171,   584,
     610,   575,    26,   133,   348,   350,   380,   530,   531,   532,
     538,   539,   148,   659,   148,   659,   585,   599,   585,   507,
     510,   551,   578,   495,   508,   507,   510,   422,   364,    91,
     422,   715,   364,   422,   422,   422,   364,   544,   516,   505,
     516,   739,   739,   739,   894,   275,   275,   507,   506,   557,
     397,   398,   551,   572,   608,   563,   548,   646,   506,    40,
     609,   634,   506,   636,   346,   410,   551,   648,   649,   613,
     548,   548,   624,   548,   507,   510,   281,   589,   281,   283,
     588,   932,   468,   623,   548,   589,    40,   548,   507,   410,
     847,   639,     5,   504,   549,   507,   510,   148,   548,   939,
     560,   571,   674,   566,   551,   551,   273,   613,   499,   613,
     551,   499,   613,   551,   507,   507,   903,   167,   128,   278,
     506,   808,   805,   506,   507,   507,   507,   549,   750,   809,
     734,   734,   734,   734,   548,   548,   548,    59,   181,   772,
     802,   930,   506,   790,   791,   792,   850,   933,   930,   162,
      78,   812,   811,   507,   507,   504,   816,   507,   510,   507,
     935,   505,   935,   507,   839,   841,   842,   843,   842,   843,
     843,   507,   418,   847,   139,   847,   877,   887,   837,   837,
     507,   847,   924,   925,   926,    40,   194,   507,   927,   846,
     847,    36,    36,   847,   507,   847,   167,   506,   895,   847,
     507,   141,   848,   848,   141,   141,   847,   847,   505,   516,
     506,   914,   741,   465,   847,   294,   864,   510,   763,   739,
     763,   507,   713,   847,   352,   697,   549,   259,   314,   113,
     297,   506,   687,   716,   507,   510,   693,   653,   847,   159,
     226,   506,   745,   284,   548,   507,   931,   176,   717,   718,
     920,   931,   932,   932,   507,   148,   614,   601,   614,   575,
     603,   510,   507,   115,   202,   266,   268,   600,   506,    33,
      59,   621,   610,    72,    78,    91,   113,   115,   202,   268,
     273,   322,   338,   439,   448,   580,   581,   595,   171,   113,
     186,   268,   589,   524,   105,   113,   171,   268,   396,   399,
     526,   589,   380,   532,   433,   932,   549,   536,     3,    37,
      42,    49,    55,    79,    81,    87,    99,   166,   168,   171,
     172,   189,   204,   217,   218,   220,   230,   232,   242,   262,
     267,   271,   285,   293,   295,   315,   355,   374,   381,   385,
     403,   412,   432,   438,   458,   497,   498,   525,   551,   576,
     615,   625,   631,   816,   885,   936,   555,   612,   932,   932,
     932,   932,   932,   932,   932,   932,   932,   932,   564,   912,
     912,   507,   507,   507,   740,   105,   364,   524,   572,   506,
     607,   716,   684,    40,   641,   620,   187,   548,   507,   510,
     507,   646,   506,    40,   598,   596,   604,    84,   665,   105,
     266,   609,   716,   634,   716,   506,     5,   642,   643,   640,
     603,   448,   681,   659,   507,   510,   613,   848,   167,   506,
     895,   810,   507,   510,   507,   763,   548,   548,   548,   548,
      30,   101,   177,   358,   506,   764,   765,   766,   767,   768,
     769,   770,   847,   847,   467,   861,   507,   849,   888,   889,
     194,   176,   787,   791,   506,   507,   793,   794,   795,   939,
     818,   935,   818,   549,   818,   505,   505,   847,   510,   507,
     549,   847,   849,   847,   847,   847,   895,   507,   847,    36,
      36,   847,   847,   141,   507,   498,   912,   507,   893,   507,
     847,   507,   506,   549,   865,   772,   507,   772,   551,   507,
     919,   454,   409,   447,   698,   549,   692,   702,   283,   695,
     495,   706,   697,   887,    59,   507,   507,   453,   454,   722,
     575,   601,   507,   507,   468,   606,   116,   190,   200,   115,
     450,   847,   113,    40,   506,   939,   932,   848,   116,   190,
     115,   273,   222,   548,   606,    86,   621,   187,   273,   525,
     847,   621,   273,   497,   498,   528,   549,   816,   659,   659,
       3,   242,   403,   936,   940,   495,   422,   422,   505,   505,
     739,   507,   507,   564,   448,   559,   561,   613,   507,   623,
      40,   410,   847,   507,   410,   268,   506,   551,   684,   607,
     147,   716,   145,   196,   588,   118,   133,   321,   623,   105,
     684,   468,   968,    40,   641,   505,   510,   283,   549,   680,
     506,   571,   848,   895,   507,   507,     9,   345,   756,   772,
     506,   382,   506,   507,   510,   549,   862,   863,   329,   773,
     510,   507,   506,   550,    59,   507,   893,   194,   507,   794,
     505,   816,   924,   505,   187,   507,   847,   847,   847,   516,
     505,   516,   507,   507,   549,   866,   861,   551,   861,   510,
     453,   913,   507,   510,    89,   697,   847,   507,   931,   931,
     338,   606,   506,   597,   575,   507,   186,   506,   847,   268,
     581,   606,   609,   932,    40,   148,   812,   940,   501,   576,
     932,   932,   507,   524,   120,   507,   596,   716,   716,   548,
     148,    40,   507,   932,   623,    30,    83,    92,   114,   186,
     199,   396,   399,   592,   592,   360,   360,    40,    64,    72,
     236,   410,   847,   507,   642,   548,   506,   549,   696,   705,
     855,   507,   507,   506,   861,   891,   506,   891,   766,    40,
     510,   847,   448,   751,   849,   920,   930,   798,   740,   506,
     798,   847,   912,   912,   303,   867,   773,   773,   716,   297,
     716,   692,   283,   506,   690,   548,   575,   555,   602,   605,
     400,   462,   582,   583,   506,   577,   847,   507,   244,   618,
     186,   448,   535,   501,   433,   564,   551,   684,   588,   968,
     506,   548,   716,   596,   665,   716,    72,   286,    72,   716,
     681,   847,    78,   700,   507,   510,   700,     9,   773,   507,
     765,   507,   865,   863,   362,   507,   739,   920,   505,   505,
     505,    59,   740,   751,   751,   698,    91,   705,   129,   609,
     495,   507,   510,   523,   507,   266,   590,   168,   302,   386,
     283,   586,   587,   611,   577,   847,   433,    40,   506,   968,
     588,   623,   968,   286,   286,   506,   507,   939,   701,   939,
     684,   696,   701,   507,   751,   507,   753,   507,   507,   890,
     179,   331,   360,   868,   453,   932,   507,   269,   445,   618,
     576,   605,   507,   583,   200,   118,   445,   283,   611,   283,
     586,   716,   705,   700,   744,   809,   744,    53,   102,   435,
     847,   869,   870,   869,   869,   507,   716,   809,   380,   587,
      63,   266,   351,   380,   579,   579,   968,   507,   701,   745,
     745,   870,   359,   161,   317,   161,   317,   144,   871,   871,
     871,   704,   575,    25,   113,   273,   684,   744,    36,   102,
     176,   266,   419,   809,   809,   745,   870,   359,   291
};

/* YYR1[RULE-NUM] -- Symbol kind of the left-hand side of rule RULE-NUM.  */
static const yytype_int16 yyr1[] =
{
       0,   517,   518,   519,   519,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   520,   520,   520,   520,   520,
     520,   520,   520,   520,   520,   529,   529,   529,   529,   529,
     529,   529,   529,   530,   530,   531,   531,   532,   532,   532,
     532,   533,   533,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   534,   534,   534,   534,   534,   534,   534,   534,
     534,   534,   535,   535,   536,   536,   536,   536,   537,   537,
     538,   539,   539,   539,   650,   650,   650,   650,   548,   548,
     549,   549,   549,   550,   550,   551,   552,   552,   553,   554,
     555,   555,   555,   555,   714,   714,   714,   714,   714,   714,
     714,   714,   714,   714,   714,   714,   714,   715,   715,   686,
     687,   687,   687,   687,   687,   688,   688,   689,   689,   689,
     690,   690,   690,   691,   691,   692,   693,   693,   694,   694,
     694,   695,   695,   695,   696,   696,   696,   697,   697,   698,
     698,   699,   699,   700,   700,   701,   701,   702,   702,   703,
     703,   704,   704,   705,   705,   706,   647,   647,   647,   648,
     648,   649,   649,   710,   710,   710,   645,   645,   645,   646,
     646,   638,   638,   638,   639,   639,   640,   640,   640,   641,
     641,   642,   643,   643,   644,   644,   644,   662,   662,   662,
     663,   663,   664,   664,   665,   665,   522,   522,   523,   523,
     524,   524,   524,   525,   525,   525,   525,   526,   526,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   526,   526,
     526,   527,   527,   528,   528,   528,   661,   661,   944,   944,
     944,   944,   944,   944,   945,   945,   945,   947,   574,   574,
     574,   575,   575,   576,   576,   576,   576,   576,   576,   577,
     577,   578,   579,   579,   579,   579,   579,   580,   580,   580,
     580,   581,   581,   581,   581,   581,   581,   581,   581,   582,
     582,   583,   583,   584,   584,   584,   585,   586,   587,   587,
     587,   587,   587,   588,   588,   588,   588,   589,   590,   590,
     591,   591,   592,   592,   592,   592,   592,   592,   592,   592,
     593,   593,   594,   595,   595,   595,   595,   596,   596,   596,
     596,   597,   598,   598,   598,   599,   600,   600,   600,   600,
     600,   600,   601,   601,   602,   602,   603,   604,   604,   604,
     605,   605,   606,   606,   607,   607,   607,   608,   609,   609,
     610,   610,   611,   612,   612,   612,   612,   613,   613,   614,
     614,   615,   615,   615,   616,   616,   616,   616,   616,   616,
     617,   617,   618,   618,   618,   618,   619,   620,   620,   620,
     620,   620,   620,   620,   620,   621,   621,   655,   655,   655,
     655,   655,   655,   656,   656,   656,   656,   656,   656,   656,
     656,   656,   656,   656,   656,   656,   656,   656,   656,   656,
     656,   657,   657,   657,   657,   657,   657,   658,   658,   659,
     659,   659,   660,   660,   660,   632,   632,   632,   632,   632,
     632,   633,   633,   634,   634,   946,   556,   556,   556,   557,
     557,   557,   558,   558,   559,   559,   560,   560,   561,   561,
     562,   562,   563,   563,   564,   564,   565,   565,   565,   565,
     565,   565,   566,   567,   567,   568,   568,   569,   569,   570,
     570,   570,   570,   570,   570,   570,   570,   570,   570,   570,
     570,   570,   570,   570,   570,   571,   572,   572,   572,   573,
     573,   716,   716,   717,   717,   718,   718,   718,   718,   718,
     718,   718,   718,   719,   719,   720,   720,   721,   721,   721,
     721,   721,   721,   721,   721,   721,   721,   721,   721,   721,
     721,   721,   721,   721,   721,   721,   722,   722,   723,   723,
     724,   724,   725,   725,   725,   726,   726,   727,   727,   728,
     728,   728,   729,   729,   730,   731,   731,   731,   732,   732,
     733,   733,   733,   733,   733,   733,   733,   733,   733,   734,
     734,   735,   735,   735,   736,   737,   737,   738,   738,   739,
     739,   739,   740,   740,   741,   741,   742,   742,   743,   743,
     744,   744,   744,   745,   745,   745,   746,   746,   746,   746,
     747,   747,   748,   748,   748,   748,   749,   749,   750,   750,
     750,   750,   750,   750,   751,   751,   752,   752,   753,   753,
     753,   753,   754,   755,   755,   756,   756,   757,   757,   757,
     757,   757,   758,   759,   759,   759,   760,   760,   761,   761,
     762,   762,   763,   763,   763,   764,   764,   765,   765,   766,
     766,   766,   766,   766,   767,   768,   769,   770,   771,   771,
     772,   772,   773,   773,   774,   774,   775,   775,   776,   776,
     777,   778,   778,   778,   778,   779,   779,   780,   780,   780,
     781,   781,   782,   782,   783,   783,   784,   784,   785,   785,
     786,   786,   786,   786,   786,   786,   786,   786,   786,   786,
     787,   787,   788,   788,   788,   789,   789,   790,   790,   791,
     791,   792,   792,   793,   793,   794,   795,   795,   796,   796,
     796,   796,   796,   796,   796,   796,   796,   796,   796,   797,
     797,   797,   797,   798,   798,   799,   799,   799,   799,   799,
     800,   800,   800,   800,   800,   800,   801,   801,   802,   802,
     803,   803,   803,   803,   804,   804,   805,   806,   806,   807,
     807,   808,   808,   809,   809,   810,   810,   811,   812,   812,
     813,   813,   814,   814,   815,   815,   816,   816,   816,   816,
     816,   816,   816,   816,   816,   816,   817,   817,   818,   818,
     818,   819,   819,   819,   819,   819,   819,   819,   820,   820,
     820,   820,   821,   822,   822,   823,   823,   823,   823,   823,
     823,   823,   823,   823,   823,   823,   824,   824,   825,   825,
     826,   826,   827,   828,   829,   829,   830,   830,   831,   832,
     833,   833,   833,   833,   833,   833,   834,   834,   835,   835,
     835,   835,   836,   837,   837,   837,   838,   838,   839,   839,
     840,   840,   841,   841,   842,   842,   843,   843,   844,   844,
     845,   845,   846,   846,   846,   846,   846,   846,   846,   846,
     846,   846,   846,   846,   846,   846,   846,   846,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   847,   847,
     847,   847,   847,   847,   847,   847,   847,   847,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   848,   848,   848,   848,   848,   848,   848,
     848,   848,   848,   849,   849,   849,   850,   850,   850,   850,
     850,   850,   850,   850,   850,   850,   850,   850,   850,   851,
     851,   851,   851,   851,   851,   852,   853,   853,   853,   853,
     853,   853,   854,   854,   855,   855,   856,   856,   856,   856,
     856,   856,   856,   856,   856,   856,   856,   856,   856,   856,
     857,   857,   858,   858,   859,   859,   859,   860,   860,   861,
     861,   862,   862,   863,   864,   864,   864,   865,   866,   866,
     867,   867,   868,   868,   868,   868,   869,   869,   870,   870,
     870,   870,   870,   871,   871,   871,   871,   871,   872,   872,
     873,   873,   874,   875,   875,   876,   876,   877,   878,   878,
     879,   879,   880,   880,   881,   881,   881,   882,   882,   883,
     883,   883,   883,   883,   883,   883,   883,   883,   883,   883,
     883,   883,   883,   884,   884,   885,   885,   886,   886,   886,
     886,   886,   886,   886,   886,   887,   887,   888,   888,   889,
     889,   890,   890,   891,   891,   892,   892,   893,   893,   894,
     894,   894,   895,   895,   896,   896,   897,   897,   897,   897,
     897,   897,   897,   897,   897,   897,   898,   898,   899,   900,
     900,   901,   901,   901,   901,   901,   901,   902,   903,   904,
     904,   904,   905,   905,   906,   907,   907,   908,   909,   909,
     910,   910,   911,   911,   553,   553,   553,   553,   912,   912,
     913,   913,   914,   914,   914,   915,   915,   915,   915,   915,
     916,   916,   917,   917,   918,   918,   919,   919,   920,   920,
     921,   921,   921,   922,   922,   923,   923,   924,   925,   925,
     926,   926,   927,   927,   927,   928,   928,   929,   929,   930,
     930,   931,   931,   932,   933,   933,   934,   934,   934,   934,
     934,   934,   934,   934,   934,   934,   934,   934,   934,   934,
     935,   936,   936,   936,   937,   937,   937,   938,   938,   938,
     939,   939,   940,   940,   941,   941,   942,   943,   943,   711,
     712,   712,   713,   713,   713,   713,   713,   635,   635,   635,
     636,   636,   637,   637,   637,   637,   679,   679,   680,   681,
     681,   682,   682,   683,   683,   684,   684,   685,   685,   521,
     521,   521,   521,   521,   521,   546,   546,   547,   547,   677,
     677,   678,   666,   666,   666,   666,   667,   667,   668,   668,
     668,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   670,   670,   670,   671,   671,   672,   672,   673,   673,
     674,   674,   674,   674,   675,   676,   676,   956,   956,   956,
     956,   957,   957,   957,   957,   958,   958,   959,   960,   960,
     960,   960,   960,   960,   960,   961,   961,   707,   707,   707,
     707,   707,   708,   708,   709,   709,   948,   948,   948,   948,
     948,   949,   949,   949,   949,   949,   950,   950,   951,   951,
     952,   952,   651,   651,   652,   652,   652,   653,   653,   654,
     654,   540,   540,   541,   541,   542,   542,   543,   543,   544,
     544,   953,   953,   953,   953,   954,   954,   955,   955,   955,
     962,   962,   962,   962,   962,   962,   962,   962,   963,   963,
     964,   964,   965,   965,   966,   966,   545,   967,   967,   967,
     967,   967,   968,   968,   968,   968,   622,   622,   622,   623,
     623,   623,   624,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   626,
     626,   626,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     627,   627,   627,   627,   627,   627,   627,   627,   627,   627,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   628,
     628,   628,   628,   628,   628,   628,   628,   628,   628,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     629,   629,   629,   629,   629,   629,   629,   629,   629,   629,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631,   631,   631,   631,   631,   631,   631,
     631,   631,   631,   631
};

/* YYR2[RULE-NUM] -- Number of symbols on the right-hand side of rule RULE-NUM.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     0,     4,     6,     4,     6,     4,
       6,     4,     6,     1,     2,     3,     2,     1,     3,     2,
       3,     1,     3,     2,     5,     3,     6,     4,     6,     6,
       6,     5,     5,     6,     9,     4,     5,     7,     6,     4,
       8,     4,     2,     4,     3,     6,     4,     2,     2,     2,
       2,     1,     2,     0,     1,     2,     2,     2,     1,     3,
       4,     2,     1,     0,     2,     3,     2,     3,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,     9,
       1,     4,     4,     7,     2,     1,     3,     2,     2,     0,
       4,     3,     0,     1,     0,     2,     3,     5,     2,     2,
       0,     8,     5,     0,     5,     5,     7,     2,     0,     1,
       1,     1,     3,     2,     0,     1,     0,     1,     3,     1,
       3,     1,     2,     1,     3,     2,     6,     8,     5,     1,
       0,     1,     3,     2,     4,     5,     5,     8,     7,     1,
       0,     7,    10,     9,     0,     1,     2,     2,     4,     1,
       3,     1,     1,     3,     0,     1,     1,     3,     9,    12,
       1,     3,     1,     3,     3,     0,     4,     6,     1,     2,
       1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
       2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
       3,     1,     0,     1,     2,     2,     3,     5,     2,     2,
       2,     2,     2,     2,     1,     1,     0,     2,     9,    12,
      11,     0,     2,     1,     1,     1,     1,     1,     1,     3,
       0,     1,     2,     1,     1,     2,     2,     3,     1,     1,
       2,     2,     1,     2,     3,     5,     3,     2,     5,     1,
       1,     1,     0,     5,     7,     5,     2,     3,     1,     1,
       2,     2,     0,     3,     4,     4,     0,     3,     2,     0,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     3,     1,     2,     2,     2,     2,     2,     2,
       0,     3,     3,     3,     0,     1,     2,     1,     2,     2,
       2,     2,     3,     4,     1,     3,     1,     1,     1,     1,
       3,     1,     2,     0,     1,     2,     0,     1,     3,     0,
       2,     0,     3,     3,     1,     5,     3,     1,     3,     1,
       2,     1,     4,     5,     5,     6,     3,     7,     4,    11,
       1,     3,     2,     2,     2,     0,     3,     1,     1,     2,
       2,     2,     2,     1,     0,     1,     2,     6,     4,     6,
       4,     6,     8,     1,     1,     1,     1,     2,     1,     2,
       1,     2,     1,     1,     1,     1,     3,     3,     3,     3,
       1,     2,     2,     1,     3,     1,     1,     1,     3,     1,
       1,     0,     1,     1,     1,     8,    11,    10,     7,    10,
       9,     1,     1,     2,     3,     8,    11,     9,     7,     0,
       3,     3,     1,     1,     3,     0,     1,     3,     1,     0,
       1,     0,     1,     0,     1,     3,     1,     1,     1,     3,
       1,     0,     2,     2,     0,     2,     0,     1,     0,     1,
       1,     1,     3,     3,     1,     1,     3,     3,     3,     3,
       3,     3,     4,     3,     2,     1,     1,     1,     1,     1,
       3,     1,     1,     3,     3,     1,     2,     4,     4,     2,
       3,     5,     5,     1,     1,     3,     0,    11,    11,    10,
      12,     1,     2,     5,     4,     4,     4,     4,     7,     5,
       4,     7,     6,     9,     9,     4,     1,     1,     1,     1,
       1,     1,     1,     5,     1,     1,     3,     1,     2,     2,
       2,     3,     1,     3,     7,     1,     2,     0,     2,     0,
       3,     3,     4,     4,     4,     4,     3,     2,     1,     1,
       0,     1,     1,     0,     2,     1,     5,     1,     0,     2,
       2,     0,     1,     0,     3,     5,     1,     3,     4,     3,
       1,     1,     0,     2,     2,     0,     2,     2,     1,     1,
       1,     0,     2,     4,     5,     4,     2,     3,     2,     2,
       2,     2,     1,     2,     3,     0,     1,     0,     5,     1,
       4,     6,     2,     1,     0,     4,     0,     1,     1,     2,
       2,     2,     1,     1,     2,     2,     1,     1,     1,     1,
       1,     1,     3,     3,     0,     1,     3,     1,     2,     1,
       1,     1,     1,     1,     2,     4,     4,     5,     1,     1,
       2,     0,     2,     0,     1,     3,     1,     0,     1,     2,
       3,     2,     4,     2,     3,     2,     0,     1,     2,     0,
       4,     5,     1,     2,     2,     0,     1,     3,     1,     2,
       3,     3,     3,     3,     3,     3,     1,     4,     9,     9,
       3,     0,     2,     2,     0,     5,     3,     1,     3,     5,
       3,     1,     2,     1,     3,     5,     1,     2,     3,     4,
       5,     4,     5,     4,     6,     5,     4,     5,     5,     5,
       2,     4,     1,     1,     0,     1,     4,     5,     4,     0,
       2,     2,     2,     1,     1,     1,     1,     0,     4,     2,
       1,     2,     2,     4,     2,     6,     2,     1,     3,     4,
       0,     2,     0,     2,     0,     1,     3,     3,     2,     0,
       2,     4,     1,     1,     1,     0,     2,     3,     5,     6,
       2,     3,     1,     5,     5,     5,     3,     3,     3,     4,
       0,     1,     1,     1,     1,     1,     2,     4,     1,     1,
       1,     1,     2,     3,     0,     1,     1,     1,     1,     1,
       2,     2,     2,     2,     2,     1,     3,     0,     1,     1,
       1,     1,     5,     2,     1,     1,     1,     1,     4,     1,
       2,     2,     1,     3,     3,     2,     1,     0,     5,     2,
       5,     2,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     0,     1,     3,
       3,     5,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
       2,     3,     3,     2,     2,     3,     3,     5,     4,     6,
       3,     5,     4,     6,     4,     6,     5,     7,     3,     2,
       4,     3,     2,     3,     3,     3,     3,     4,     3,     4,
       3,     4,     5,     6,     6,     7,     6,     7,     6,     7,
       3,     4,     4,     6,     1,     4,     3,     5,     1,     3,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     2,     2,     5,
       6,     6,     7,     1,     1,     2,     1,     1,     2,     2,
       3,     1,     2,     4,     1,     1,     2,     2,     4,     1,
       1,     3,     1,     4,     1,     3,     3,     6,     7,     9,
       7,     7,     5,     1,     1,     1,     5,     6,     6,     4,
       4,     4,     4,     6,     5,     5,     5,     4,     6,     4,
       7,     9,     5,     0,     5,     4,     0,     1,     0,     2,
       0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
       3,     0,     3,     3,     3,     0,     1,     4,     2,     2,
       2,     2,     2,     3,     2,     2,     3,     0,     4,     3,
       1,     5,     3,     1,     3,     1,     2,     3,     1,     3,
       1,     2,     1,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     4,     1,     4,     1,     4,     1,
       2,     1,     2,     1,     2,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     2,     1,     0,     1,     3,     1,
       3,     3,     1,     3,     3,     0,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     4,     3,     2,     3,
       0,     3,     3,     2,     2,     1,     0,     2,     2,     3,
       2,     1,     1,     3,     5,     1,     2,     4,     2,     0,
       1,     0,     1,     2,     3,     5,     7,     7,     1,     0,
       0,     2,     0,     2,     3,     3,     3,     5,     7,     7,
       0,     2,     1,     0,     1,     0,     1,     3,     1,     2,
       3,     2,     1,     4,     2,     1,     0,     3,     1,     3,
       1,     2,     4,     2,     0,     1,     3,     1,     3,     1,
       2,     1,     3,     1,     1,     2,     1,     1,     2,     1,
       1,     2,     7,     2,     5,     3,     3,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     3,     0,     1,     1,     1,     5,
       3,     0,     1,     1,     1,     1,     1,     4,     7,     6,
       2,     0,     1,     1,     1,     1,    13,    16,     1,     2,
       0,     1,     0,     1,     0,     2,     0,     1,     0,     6,
       8,     6,     8,     6,     8,     3,     2,     1,     0,     4,
       6,     3,     2,     4,     3,     5,     1,     0,     1,     1,
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     3,     1,     1,
       1,     1,     1,     1,     2,     1,     1,     2,     3,     3,
       3,     1,     3,     3,     2,     3,     3,     1,     1,     1,
       3,     5,     1,     1,     1,     1,     3,     2,     2,     3,
       4,     5,     1,     1,     1,     1,     4,     6,     5,     4,
       6,     1,     1,     1,     1,     1,     1,     0,     1,     3,
       1,     0,     7,     3,     1,     2,     3,     2,     0,     2,
       0,     2,     4,     5,     8,     3,     5,     1,     0,     2,
       0,     2,     3,     3,     3,     1,     1,     1,     2,     3,
       2,     2,     2,     2,     3,     4,     3,     1,     1,     1,
       1,     0,     1,     3,     1,     3,     2,     9,    12,    11,
      12,    14,     3,     4,     4,     0,     7,    10,     9,     2,
       3,     0,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1
};


enum { YYENOMEM = -2 };

#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab
#define YYNOMEM         goto yyexhaustedlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Backward compatibility with an undocumented macro.
   Use YYerror or YYUNDEF. */
#define YYERRCODE YYUNDEF

/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YYLOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

# ifndef YYLOCATION_PRINT

#  if defined YY_LOCATION_PRINT

   /* Temporary convenience wrapper in case some people defined the
      undocumented and private YY_LOCATION_PRINT macros.  */
#   define YYLOCATION_PRINT(File, Loc)  YY_LOCATION_PRINT(File, *(Loc))

#  elif defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static int
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  int res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
}

#   define YYLOCATION_PRINT  yy_location_print_

    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT(File, Loc)  YYLOCATION_PRINT(File, &(Loc))

#  else

#   define YYLOCATION_PRINT(File, Loc) ((void) 0)
    /* Temporary convenience wrapper in case some people defined the
       undocumented and private YY_LOCATION_PRINT macros.  */
#   define YY_LOCATION_PRINT  YYLOCATION_PRINT

#  endif
# endif /* !defined YYLOCATION_PRINT */


# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Kind, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo,
                       yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyoutput = yyo;
  YY_USE (yyoutput);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yyvaluep)
    return;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo,
                 yysymbol_kind_t yykind, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyo, "%s %s (",
             yykind < YYNTOKENS ? "token" : "nterm", yysymbol_name (yykind));

  YYLOCATION_PRINT (yyo, yylocationp);
  YYFPRINTF (yyo, ": ");
  yy_symbol_value_print (yyo, yykind, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp,
                 int yyrule, core_yyscan_t yyscanner)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       YY_ACCESSING_SYMBOL (+yyssp[yyi + 1 - yynrhs]),
                       &yyvsp[(yyi + 1) - (yynrhs)],
                       &(yylsp[(yyi + 1) - (yynrhs)]), yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args) ((void) 0)
# define YY_SYMBOL_PRINT(Title, Kind, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif






/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg,
            yysymbol_kind_t yykind, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YY_USE (yyvaluep);
  YY_USE (yylocationp);
  YY_USE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yykind, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YY_USE (yykind);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}






/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* Lookahead token kind.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs = 0; (void)yynerrs;

    yy_state_fast_t yystate = 0;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus = 0;

    /* Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* Their size.  */
    YYPTRDIFF_T yystacksize = YYINITDEPTH;

    /* The state stack: array, bottom, top.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss = yyssa;
    yy_state_t *yyssp = yyss;

    /* The semantic value stack: array, bottom, top.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs = yyvsa;
    YYSTYPE *yyvsp = yyvs;

    /* The location stack: array, bottom, top.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls = yylsa;
    YYLTYPE *yylsp = yyls;

  int yyn;
  /* The return value of yyparse.  */
  int yyresult;
  /* Lookahead symbol kind.  */
  yysymbol_kind_t yytoken = YYSYMBOL_YYEMPTY;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

  /* The locations where the error started and ended.  */
  YYLTYPE yyerror_range[3];



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yychar = YYEMPTY; /* Cause a token to be read.  */

  yylsp[0] = yylloc;
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END
  YY_STACK_PRINT (yyss, yyssp);

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    YYNOMEM;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yyls1, yysize * YYSIZEOF (*yylsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
        yyls = yyls1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        YYNOMEM;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          YYNOMEM;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */


  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either empty, or end-of-input, or a valid lookahead.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token\n"));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = YYEOF;
      yytoken = YYSYMBOL_YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else if (yychar == YYerror)
    {
      /* The scanner already issued an error message, process directly
         to error recovery.  But do not keep the error token as
         lookahead, it is too special and may lead us to an endless
         loop in error recovery. */
      yychar = YYUNDEF;
      yytoken = YYSYMBOL_YYerror;
      yyerror_range[1] = yylloc;
      goto yyerrlab1;
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location. */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  yyerror_range[1] = yyloc;
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2: /* stmtblock: stmtmulti  */
#line 500 "third_party/libpg_query/grammar/grammar.y"
                        {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 18193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 3: /* stmtmulti: stmtmulti ';' stmt  */
#line 516 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 18209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 4: /* stmtmulti: stmt  */
#line 528 "third_party/libpg_query/grammar/grammar.y"
                                {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 18220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 44: /* stmt: %empty  */
#line 576 "third_party/libpg_query/grammar/grammar.y"
        { (yyval.node) = NULL; }
#line 18226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 45: /* AlterTableStmt: ALTER TABLE relation_expr alter_table_cmds  */
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 46: /* AlterTableStmt: ALTER TABLE IF_P EXISTS relation_expr alter_table_cmds  */
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 47: /* AlterTableStmt: ALTER INDEX qualified_name alter_table_cmds  */
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 48: /* AlterTableStmt: ALTER INDEX IF_P EXISTS qualified_name alter_table_cmds  */
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 49: /* AlterTableStmt: ALTER SEQUENCE qualified_name alter_table_cmds  */
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18291 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 50: /* AlterTableStmt: ALTER SEQUENCE IF_P EXISTS qualified_name alter_table_cmds  */
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 51: /* AlterTableStmt: ALTER VIEW qualified_name alter_table_cmds  */
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18317 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 52: /* AlterTableStmt: ALTER VIEW IF_P EXISTS qualified_name alter_table_cmds  */
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 53: /* alter_identity_column_option_list: alter_identity_column_option  */
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 18336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 54: /* alter_identity_column_option_list: alter_identity_column_option_list alter_identity_column_option  */
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 18342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 55: /* alter_column_default: SET DEFAULT a_expr  */
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 56: /* alter_column_default: DROP DEFAULT  */
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 57: /* alter_identity_column_option: RESTART  */
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 18362 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 58: /* alter_identity_column_option: RESTART opt_with NumericOnly  */
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 18370 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 59: /* alter_identity_column_option: SET SeqOptElem  */
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 60: /* alter_identity_column_option: SET GENERATED generated_when  */
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 18393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 61: /* alter_generic_option_list: alter_generic_option_elem  */
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 18401 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 62: /* alter_generic_option_list: alter_generic_option_list ',' alter_generic_option_elem  */
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 18409 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 63: /* alter_table_cmd: ADD_P columnDef  */
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18421 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 64: /* alter_table_cmd: ADD_P IF_P NOT EXISTS columnDef  */
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 65: /* alter_table_cmd: ADD_P COLUMN columnDef  */
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 66: /* alter_table_cmd: ADD_P COLUMN IF_P NOT EXISTS columnDef  */
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 67: /* alter_table_cmd: ALTER opt_column ColId alter_column_default  */
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 68: /* alter_table_cmd: ALTER opt_column ColId DROP NOT NULL_P  */
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 69: /* alter_table_cmd: ALTER opt_column ColId SET NOT NULL_P  */
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 70: /* alter_table_cmd: ALTER opt_column ColId SET STATISTICS SignedIconst  */
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 18503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 71: /* alter_table_cmd: ALTER opt_column ColId SET reloptions  */
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 72: /* alter_table_cmd: ALTER opt_column ColId RESET reloptions  */
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 73: /* alter_table_cmd: ALTER opt_column ColId SET STORAGE ColId  */
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 18539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 74: /* alter_table_cmd: ALTER opt_column ColId ADD_P GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 18559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 75: /* alter_table_cmd: ALTER opt_column ColId alter_identity_column_option_list  */
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 76: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P  */
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 77: /* alter_table_cmd: ALTER opt_column ColId DROP IDENTITY_P IF_P EXISTS  */
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 78: /* alter_table_cmd: DROP opt_column IF_P EXISTS ColId opt_drop_behavior  */
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 79: /* alter_table_cmd: DROP opt_column ColId opt_drop_behavior  */
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 80: /* alter_table_cmd: ALTER opt_column ColId opt_set_data TYPE_P Typename opt_collate_clause alter_using  */
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 18639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 81: /* alter_table_cmd: ALTER opt_column ColId alter_generic_options  */
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 82: /* alter_table_cmd: ADD_P TableConstraint  */
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 18662 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 83: /* alter_table_cmd: ALTER CONSTRAINT name ConstraintAttributeSpec  */
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 18680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 84: /* alter_table_cmd: VALIDATE CONSTRAINT name  */
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 18691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 85: /* alter_table_cmd: DROP CONSTRAINT IF_P EXISTS name opt_drop_behavior  */
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 18704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 86: /* alter_table_cmd: DROP CONSTRAINT name opt_drop_behavior  */
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 18717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 87: /* alter_table_cmd: SET LOGGED  */
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 88: /* alter_table_cmd: SET UNLOGGED  */
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 18737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 89: /* alter_table_cmd: SET reloptions  */
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18748 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 90: /* alter_table_cmd: RESET reloptions  */
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 18759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 91: /* alter_table_cmd: alter_generic_options  */
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 18770 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 92: /* alter_using: USING a_expr  */
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 18776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 93: /* alter_using: %empty  */
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.node) = NULL; }
#line 18782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 94: /* alter_generic_option_elem: generic_option_elem  */
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 18790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 95: /* alter_generic_option_elem: SET generic_option_elem  */
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 18799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 96: /* alter_generic_option_elem: ADD_P generic_option_elem  */
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 18808 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 97: /* alter_generic_option_elem: DROP generic_option_name  */
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
                                {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 18816 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 98: /* alter_table_cmds: alter_table_cmd  */
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18822 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 99: /* alter_table_cmds: alter_table_cmds ',' alter_table_cmd  */
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18828 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 100: /* alter_generic_options: OPTIONS '(' alter_generic_option_list ')'  */
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 18834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 101: /* opt_set_data: SET DATA_P  */
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                { (yyval.ival) = 1; }
#line 18840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 102: /* opt_set_data: SET  */
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 103: /* opt_set_data: %empty  */
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
                                                                                                { (yyval.ival) = 0; }
#line 18852 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 104: /* DeallocateStmt: DEALLOCATE name  */
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 105: /* DeallocateStmt: DEALLOCATE PREPARE name  */
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 18872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 106: /* DeallocateStmt: DEALLOCATE ALL  */
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 107: /* DeallocateStmt: DEALLOCATE PREPARE ALL  */
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
                                        {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 18892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 108: /* qualified_name: ColIdOrString  */
#line 10 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 18900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 109: /* qualified_name: ColId indirection  */
#line 14 "third_party/libpg_query/grammar/statements/common.y"
                                {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						case 3:
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 18930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 110: /* ColId: IDENT  */
#line 44 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18936 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 111: /* ColId: unreserved_keyword  */
#line 45 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 18942 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 112: /* ColId: col_name_keyword  */
#line 46 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 18948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 113: /* ColIdOrString: ColId  */
#line 50 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18954 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 114: /* ColIdOrString: SCONST  */
#line 51 "third_party/libpg_query/grammar/statements/common.y"
                                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 115: /* Sconst: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18966 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 116: /* indirection: indirection_el  */
#line 59 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 117: /* indirection: indirection indirection_el  */
#line 60 "third_party/libpg_query/grammar/statements/common.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 118: /* indirection_el: '.' attr_name  */
#line 65 "third_party/libpg_query/grammar/statements/common.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 18986 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 119: /* attr_name: ColLabel  */
#line 70 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 120: /* ColLabel: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 18998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 121: /* ColLabel: other_keyword  */
#line 76 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 122: /* ColLabel: unreserved_keyword  */
#line 77 "third_party/libpg_query/grammar/statements/common.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 123: /* ColLabel: reserved_keyword  */
#line 78 "third_party/libpg_query/grammar/statements/common.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 124: /* RenameStmt: ALTER SCHEMA name RENAME TO name  */
#line 7 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 125: /* RenameStmt: ALTER TABLE relation_expr RENAME TO name  */
#line 16 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 126: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME TO name  */
#line 26 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19057 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 127: /* RenameStmt: ALTER SEQUENCE qualified_name RENAME TO name  */
#line 36 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 128: /* RenameStmt: ALTER SEQUENCE IF_P EXISTS qualified_name RENAME TO name  */
#line 46 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 129: /* RenameStmt: ALTER VIEW qualified_name RENAME TO name  */
#line 56 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 130: /* RenameStmt: ALTER VIEW IF_P EXISTS qualified_name RENAME TO name  */
#line 66 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 131: /* RenameStmt: ALTER INDEX qualified_name RENAME TO name  */
#line 76 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 132: /* RenameStmt: ALTER INDEX IF_P EXISTS qualified_name RENAME TO name  */
#line 86 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 133: /* RenameStmt: ALTER TABLE relation_expr RENAME opt_column name TO name  */
#line 96 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 134: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME opt_column name TO name  */
#line 107 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 135: /* RenameStmt: ALTER TABLE relation_expr RENAME CONSTRAINT name TO name  */
#line 118 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 136: /* RenameStmt: ALTER TABLE IF_P EXISTS relation_expr RENAME CONSTRAINT name TO name  */
#line 128 "third_party/libpg_query/grammar/statements/rename.y"
                                {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 137: /* opt_column: COLUMN  */
#line 140 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                        { (yyval.ival) = COLUMN; }
#line 19205 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 138: /* opt_column: %empty  */
#line 141 "third_party/libpg_query/grammar/statements/rename.y"
                                                                                                { (yyval.ival) = 0; }
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 139: /* InsertStmt: opt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest opt_on_conflict returning_clause  */
#line 11 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].istmt)->relation = (yyvsp[-4].range);
					(yyvsp[-2].istmt)->onConflictAlias = (yyvsp[-6].onconflictshorthand);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-8].with);
					(yyvsp[-2].istmt)->insert_column_order = (yyvsp[-3].bynameorposition);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 19225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 140: /* insert_rest: SelectStmt  */
#line 24 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 141: /* insert_rest: OVERRIDING override_kind VALUE_P SelectStmt  */
#line 30 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 142: /* insert_rest: '(' insert_column_list ')' SelectStmt  */
#line 37 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19256 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 143: /* insert_rest: '(' insert_column_list ')' OVERRIDING override_kind VALUE_P SelectStmt  */
#line 43 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 19267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 144: /* insert_rest: DEFAULT VALUES  */
#line 50 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 19277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 145: /* insert_target: qualified_name  */
#line 60 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 19285 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 146: /* insert_target: qualified_name AS ColId  */
#line 64 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 19294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 147: /* opt_by_name_or_position: BY NAME_P  */
#line 71 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.bynameorposition) = PG_INSERT_BY_NAME; }
#line 19300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 148: /* opt_by_name_or_position: BY POSITION  */
#line 72 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 149: /* opt_by_name_or_position: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/insert.y"
                                                { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; }
#line 19312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 150: /* opt_conf_expr: '(' index_params ')' where_clause  */
#line 78 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 19324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 151: /* opt_conf_expr: ON CONSTRAINT name  */
#line 87 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 19336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 152: /* opt_conf_expr: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.infer) = NULL;
				}
#line 19344 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 153: /* opt_with_clause: with_clause  */
#line 102 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = (yyvsp[0].with); }
#line 19350 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 154: /* opt_with_clause: %empty  */
#line 103 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.with) = NULL; }
#line 19356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 155: /* insert_column_item: ColId opt_indirection  */
#line 109 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 156: /* set_clause: set_target '=' a_expr  */
#line 121 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 19377 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 157: /* set_clause: '(' set_target_list ')' '=' a_expr  */
#line 126 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 19402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 158: /* opt_or_action: OR REPLACE  */
#line 151 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;
				}
#line 19410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 159: /* opt_or_action: OR IGNORE_P  */
#line 156 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;
				}
#line 19418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 160: /* opt_or_action: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;
				}
#line 19426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 161: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO UPDATE SET set_clause_list_opt_comma where_clause  */
#line 167 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 19439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 162: /* opt_on_conflict: ON CONFLICT opt_conf_expr DO NOTHING  */
#line 177 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 19452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 163: /* opt_on_conflict: %empty  */
#line 186 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.onconflict) = NULL;
				}
#line 19460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 164: /* index_elem: ColId opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 193 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 165: /* index_elem: func_expr_windowless opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 204 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 166: /* index_elem: '(' a_expr ')' opt_collate opt_class opt_asc_desc opt_nulls_order  */
#line 215 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 19505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 167: /* returning_clause: RETURNING target_list  */
#line 229 "third_party/libpg_query/grammar/statements/insert.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 168: /* returning_clause: %empty  */
#line 230 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = NIL; }
#line 19517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 169: /* override_kind: USER  */
#line 236 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 19523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 170: /* override_kind: SYSTEM_P  */
#line 237 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 19529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 171: /* set_target_list: set_target  */
#line 242 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 172: /* set_target_list: set_target_list ',' set_target  */
#line 243 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 19541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 173: /* opt_collate: COLLATE any_name  */
#line 249 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 174: /* opt_collate: %empty  */
#line 250 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 175: /* opt_class: any_name  */
#line 254 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19559 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 176: /* opt_class: %empty  */
#line 255 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = NIL; }
#line 19565 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 177: /* insert_column_list: insert_column_item  */
#line 261 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 178: /* insert_column_list: insert_column_list ',' insert_column_item  */
#line 263 "third_party/libpg_query/grammar/statements/insert.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 179: /* set_clause_list: set_clause  */
#line 268 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 19583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 180: /* set_clause_list: set_clause_list ',' set_clause  */
#line 269 "third_party/libpg_query/grammar/statements/insert.y"
                                                                { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 181: /* set_clause_list_opt_comma: set_clause_list  */
#line 273 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 182: /* set_clause_list_opt_comma: set_clause_list ','  */
#line 274 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 183: /* index_params: index_elem  */
#line 277 "third_party/libpg_query/grammar/statements/insert.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 19607 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 184: /* index_params: index_params ',' index_elem  */
#line 278 "third_party/libpg_query/grammar/statements/insert.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 19613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 185: /* set_target: ColId opt_indirection  */
#line 284 "third_party/libpg_query/grammar/statements/insert.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 186: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P select_with_parens  */
#line 8 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-3].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->query = (yyvsp[0].node);
					n->vals = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 187: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS ENUM_P '(' opt_enum_val_list ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-5].range);
					n->kind = PG_NEWTYPE_ENUM;
					n->vals = (yyvsp[-1].list);
					n->query = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 188: /* CreateTypeStmt: CREATE_P TYPE_P qualified_name AS Typename  */
#line 26 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					PGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);
					n->typeName = (yyvsp[-2].range);
					n->query = NULL;
					auto name = std::string(reinterpret_cast<PGValue *>((yyvsp[0].typnam)->names->tail->data.ptr_value)->val.str);
					if (name == "enum") {
						n->kind = PG_NEWTYPE_ENUM;
						n->vals = (yyvsp[0].typnam)->typmods;
					} else {
						n->kind = PG_NEWTYPE_ALIAS;
						n->ofType = (yyvsp[0].typnam);
					}
					(yyval.node) = (PGNode *)n;
				}
#line 19670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 189: /* opt_enum_val_list: enum_val_list  */
#line 46 "third_party/libpg_query/grammar/statements/create_type.y"
                                      { (yyval.list) = (yyvsp[0].list);}
#line 19676 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 190: /* opt_enum_val_list: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/create_type.y"
                                                        {(yyval.list) = NIL;}
#line 19682 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 191: /* enum_val_list: Sconst  */
#line 51 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19690 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 192: /* enum_val_list: enum_val_list ',' Sconst  */
#line 55 "third_party/libpg_query/grammar/statements/create_type.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), makeStringConst((yyvsp[0].str), (yylsp[0])));
				}
#line 19698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 193: /* PragmaStmt: PRAGMA_P ColId  */
#line 8 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 19709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 194: /* PragmaStmt: PRAGMA_P ColId '=' var_list  */
#line 15 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 195: /* PragmaStmt: PRAGMA_P ColId '(' func_arg_list ')'  */
#line 23 "third_party/libpg_query/grammar/statements/pragma.y"
                                {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 19733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 196: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 197: /* CreateSeqStmt: CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList  */
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 198: /* CreateSeqStmt: CREATE_P OR REPLACE OptTemp SEQUENCE qualified_name OptSeqOptList  */
#line 30 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 199: /* OptSeqOptList: SeqOptList  */
#line 42 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 19781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 200: /* OptSeqOptList: %empty  */
#line 43 "third_party/libpg_query/grammar/statements/create_sequence.y"
                                                                                                { (yyval.list) = NIL; }
#line 19787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 201: /* CreateSecretStmt: CREATE_P opt_persist SECRET opt_secret_name '(' secret_key_val ')'  */
#line 8 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 202: /* CreateSecretStmt: CREATE_P opt_persist SECRET IF_P NOT EXISTS opt_secret_name '(' secret_key_val ')'  */
#line 17 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-8].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 203: /* CreateSecretStmt: CREATE_P OR REPLACE opt_persist SECRET opt_secret_name '(' secret_key_val ')'  */
#line 26 "third_party/libpg_query/grammar/statements/create_secret.y"
                                {
					PGCreateSecretStmt *n = makeNode(PGCreateSecretStmt);
					n->persist_option = (yyvsp[-5].str);
					n->secret_name = (yyvsp[-3].str);
					n->options = (yyvsp[-1].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 19826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 204: /* opt_secret_name: %empty  */
#line 37 "third_party/libpg_query/grammar/statements/create_secret.y"
                    { (yyval.str) = NULL; }
#line 19832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 205: /* opt_secret_name: ColId  */
#line 38 "third_party/libpg_query/grammar/statements/create_secret.y"
                { (yyval.str) = (yyvsp[0].str); }
#line 19838 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 206: /* secret_key: ColId SCONST  */
#line 43 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 19844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 207: /* secret_key: ColId ColId  */
#line 44 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                { (yyval.list) = list_make2((yyvsp[-1].str), makeString((yyvsp[0].str))); }
#line 19850 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 208: /* secret_key: ColId '[' scope_list_val ']'  */
#line 45 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = list_make2((yyvsp[-3].str), (yyvsp[-1].list)); }
#line 19856 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 209: /* secret_key_val: secret_key  */
#line 49 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 210: /* secret_key_val: secret_key_val ',' secret_key  */
#line 50 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].list)); }
#line 19868 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 211: /* scope_list_val_item: SCONST  */
#line 55 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                            { (yyval.value) = makeString((yyvsp[0].str)); }
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 212: /* scope_list_val: scope_list_val_item  */
#line 59 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                                    { (yyval.list) = list_make1((yyvsp[0].value)); }
#line 19880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 213: /* scope_list_val: scope_list_val ',' scope_list_val_item  */
#line 60 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].value)); }
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 214: /* opt_persist: %empty  */
#line 65 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("default"); }
#line 19892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 215: /* opt_persist: TEMPORARY  */
#line 66 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("temporary"); }
#line 19898 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 216: /* opt_persist: PERMANENT  */
#line 67 "third_party/libpg_query/grammar/statements/create_secret.y"
                                                    { (yyval.str) = pstrdup("permanent"); }
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 217: /* ExecuteStmt: EXECUTE name execute_param_clause  */
#line 8 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 19915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 218: /* ExecuteStmt: CREATE_P OptTemp TABLE create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 16 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 219: /* ExecuteStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS EXECUTE name execute_param_clause opt_with_data  */
#line 33 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 19955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 220: /* execute_param_expr: a_expr  */
#line 52 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 19963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 221: /* execute_param_expr: param_name COLON_EQUALS a_expr  */
#line 56 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 19976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 222: /* execute_param_list: execute_param_expr  */
#line 66 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 19984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 223: /* execute_param_list: execute_param_list ',' execute_param_expr  */
#line 70 "third_party/libpg_query/grammar/statements/execute.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 19992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 224: /* execute_param_clause: '(' execute_param_list ')'  */
#line 75 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 19998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 225: /* execute_param_clause: %empty  */
#line 76 "third_party/libpg_query/grammar/statements/execute.y"
                                                                                        { (yyval.list) = NIL; }
#line 20004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 226: /* AlterSeqStmt: ALTER SEQUENCE qualified_name SeqOptList  */
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 227: /* AlterSeqStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SeqOptList  */
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 228: /* SeqOptList: SeqOptElem  */
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20034 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 229: /* SeqOptList: SeqOptList SeqOptElem  */
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 20040 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 230: /* opt_with: WITH  */
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        {}
#line 20046 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 231: /* opt_with: WITH_LA  */
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20052 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 232: /* opt_with: %empty  */
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                                {}
#line 20058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 233: /* NumericOnly: FCONST  */
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20064 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 234: /* NumericOnly: '+' FCONST  */
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 20070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 235: /* NumericOnly: '-' FCONST  */
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 20079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 236: /* NumericOnly: SignedIconst  */
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 237: /* SeqOptElem: AS SimpleTypename  */
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 20093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 238: /* SeqOptElem: CACHE NumericOnly  */
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 239: /* SeqOptElem: CYCLE  */
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 20109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 240: /* SeqOptElem: NO CYCLE  */
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 20117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 241: /* SeqOptElem: INCREMENT opt_by NumericOnly  */
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 242: /* SeqOptElem: MAXVALUE NumericOnly  */
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 243: /* SeqOptElem: MINVALUE NumericOnly  */
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 20141 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 244: /* SeqOptElem: NO MAXVALUE  */
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 20149 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 245: /* SeqOptElem: NO MINVALUE  */
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 20157 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 246: /* SeqOptElem: OWNED BY any_name  */
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 247: /* SeqOptElem: SEQUENCE NAME_P any_name  */
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 20174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 248: /* SeqOptElem: START opt_with NumericOnly  */
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20182 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 249: /* SeqOptElem: RESTART  */
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 20190 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 250: /* SeqOptElem: RESTART opt_with NumericOnly  */
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 20198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 251: /* opt_by: BY  */
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                {}
#line 20204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 252: /* opt_by: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                        {}
#line 20210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 253: /* SignedIconst: Iconst  */
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 254: /* SignedIconst: '+' Iconst  */
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = + (yyvsp[0].ival); }
#line 20222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 255: /* SignedIconst: '-' Iconst  */
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
                                                                                        { (yyval.ival) = - (yyvsp[0].ival); }
#line 20228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 256: /* DropSecretStmt: DROP SECRET ColId  */
#line 8 "third_party/libpg_query/grammar/statements/drop_secret.y"
                                {
					PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
					n->secret_name = (yyvsp[0].str);
					n->missing_ok  = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 257: /* DropSecretStmt: DROP SECRET ColId IF_P EXISTS  */
#line 15 "third_party/libpg_query/grammar/statements/drop_secret.y"
                {
                    PGDropSecretStmt *n = makeNode(PGDropSecretStmt);
                    n->secret_name = (yyvsp[-2].str);
                    n->missing_ok  = true;
                    (yyval.node) = (PGNode *)n;
                }
#line 20250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 258: /* TransactionStmt: ABORT_P opt_transaction  */
#line 3 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 259: /* TransactionStmt: BEGIN_P opt_transaction  */
#line 10 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 20271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 260: /* TransactionStmt: START opt_transaction  */
#line 16 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 20281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 261: /* TransactionStmt: COMMIT opt_transaction  */
#line 22 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 262: /* TransactionStmt: END_P opt_transaction  */
#line 29 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 263: /* TransactionStmt: ROLLBACK opt_transaction  */
#line 36 "third_party/libpg_query/grammar/statements/transaction.y"
                                {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 20314 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 264: /* opt_transaction: WORK  */
#line 45 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                {}
#line 20320 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 265: /* opt_transaction: TRANSACTION  */
#line 46 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                        {}
#line 20326 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 266: /* opt_transaction: %empty  */
#line 47 "third_party/libpg_query/grammar/statements/transaction.y"
                                                                                                {}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 267: /* UseStmt: USE_P qualified_name  */
#line 3 "third_party/libpg_query/grammar/statements/use.y"
                                {
					PGUseStmt *n = makeNode(PGUseStmt);
					n->name = (yyvsp[0].range);
					(yyval.node) = (PGNode *) n;
				}
#line 20342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 268: /* CreateStmt: CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 9 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 269: /* CreateStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 24 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 270: /* CreateStmt: CREATE_P OR REPLACE OptTemp TABLE qualified_name '(' OptTableElementList ')' OptWith OnCommitOption  */
#line 39 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 20393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 271: /* ConstraintAttributeSpec: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = 0; }
#line 20399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 272: /* ConstraintAttributeSpec: ConstraintAttributeSpec ConstraintAttributeElem  */
#line 58 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 20427 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 273: /* def_arg: func_type  */
#line 84 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 20433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 274: /* def_arg: reserved_keyword  */
#line 85 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 275: /* def_arg: qual_all_Op  */
#line 86 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 20445 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 276: /* def_arg: NumericOnly  */
#line 87 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 20451 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 277: /* def_arg: Sconst  */
#line 88 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 278: /* def_arg: NONE  */
#line 89 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 20463 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 279: /* OptParenthesizedSeqOptList: '(' SeqOptList ')'  */
#line 93 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20469 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 280: /* OptParenthesizedSeqOptList: %empty  */
#line 94 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 281: /* generic_option_arg: Sconst  */
#line 99 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 20481 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 282: /* key_action: NO ACTION  */
#line 104 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 20487 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 283: /* key_action: RESTRICT  */
#line 105 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 20493 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 284: /* key_action: CASCADE  */
#line 106 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 20499 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 285: /* key_action: SET NULL_P  */
#line 107 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 286: /* key_action: SET DEFAULT  */
#line 108 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 20511 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 287: /* ColConstraint: CONSTRAINT name ColConstraintElem  */
#line 114 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20522 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 288: /* ColConstraint: ColConstraintElem  */
#line 120 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20528 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 289: /* ColConstraint: ConstraintAttr  */
#line 121 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 290: /* ColConstraint: COLLATE any_name  */
#line 123 "third_party/libpg_query/grammar/statements/create.y"
                                {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 20551 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 291: /* ColConstraintElem: NOT NULL_P  */
#line 140 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 292: /* ColConstraintElem: NULL_P  */
#line 147 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 293: /* ColConstraintElem: UNIQUE opt_definition  */
#line 154 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20587 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 294: /* ColConstraintElem: PRIMARY KEY opt_definition  */
#line 164 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20601 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 295: /* ColConstraintElem: CHECK_P '(' a_expr ')' opt_no_inherit  */
#line 174 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 296: /* ColConstraintElem: USING COMPRESSION name  */
#line 186 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_COMPRESSION;
					n->location = (yylsp[-2]);
					n->compression_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 20629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 297: /* ColConstraintElem: DEFAULT b_expr  */
#line 194 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 20642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 298: /* ColConstraintElem: REFERENCES qualified_name opt_column_list key_match key_actions  */
#line 203 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 299: /* GeneratedColumnType: VIRTUAL  */
#line 220 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 300: /* GeneratedColumnType: STORED  */
#line 221 "third_party/libpg_query/grammar/statements/create.y"
                                 { (yyval.constr) = PG_CONSTR_GENERATED_STORED; }
#line 20673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 301: /* opt_GeneratedColumnType: GeneratedColumnType  */
#line 225 "third_party/libpg_query/grammar/statements/create.y"
                                            { (yyval.constr) = (yyvsp[0].constr); }
#line 20679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 302: /* opt_GeneratedColumnType: %empty  */
#line 226 "third_party/libpg_query/grammar/statements/create.y"
                                      { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; }
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 303: /* GeneratedConstraintElem: GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList  */
#line 231 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 304: /* GeneratedConstraintElem: GENERATED generated_when AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 240 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = (yyvsp[-5].ival);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-6]);

					/*
					 * Can't do this in the grammar because of shift/reduce
					 * conflicts.  (IDENTITY allows both ALWAYS and BY
					 * DEFAULT, but generated columns only allow ALWAYS.)  We
					 * can also give a more useful error message and location.
					 */
					if ((yyvsp[-5].ival) != PG_ATTRIBUTE_IDENTITY_ALWAYS)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("for a generated column, GENERATED ALWAYS must be specified"),
								 parser_errposition((yylsp[-5]))));

					(yyval.node) = (PGNode *)n;
				}
#line 20725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 305: /* GeneratedConstraintElem: AS '(' a_expr ')' opt_GeneratedColumnType  */
#line 263 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = (yyvsp[0].constr);
					n->generated_when = PG_ATTRIBUTE_IDENTITY_ALWAYS;
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 20739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 306: /* generic_option_elem: generic_option_name generic_option_arg  */
#line 277 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 20747 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 307: /* key_update: ON UPDATE key_action  */
#line 283 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 20753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 308: /* key_actions: key_update  */
#line 289 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20759 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 309: /* key_actions: key_delete  */
#line 291 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 310: /* key_actions: key_update key_delete  */
#line 293 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 20771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 311: /* key_actions: key_delete key_update  */
#line 295 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 20777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 312: /* key_actions: %empty  */
#line 297 "third_party/libpg_query/grammar/statements/create.y"
                                { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 20783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 313: /* OnCommitOption: ON COMMIT DROP  */
#line 300 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 20789 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 314: /* OnCommitOption: ON COMMIT DELETE_P ROWS  */
#line 301 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 20795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 315: /* OnCommitOption: ON COMMIT PRESERVE ROWS  */
#line 302 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 20801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 316: /* OnCommitOption: %empty  */
#line 303 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 20807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 317: /* reloptions: '(' reloption_list ')'  */
#line 308 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 20813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 318: /* opt_no_inherit: NO INHERIT  */
#line 312 "third_party/libpg_query/grammar/statements/create.y"
                                                                                {  (yyval.boolean) = true; }
#line 20819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 319: /* opt_no_inherit: %empty  */
#line 313 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        {  (yyval.boolean) = false; }
#line 20825 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 320: /* TableConstraint: CONSTRAINT name ConstraintElem  */
#line 319 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 20836 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 321: /* TableConstraint: ConstraintElem  */
#line 325 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 20842 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 322: /* TableLikeOption: COMMENTS  */
#line 330 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 20848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 323: /* TableLikeOption: CONSTRAINTS  */
#line 331 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 20854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 324: /* TableLikeOption: DEFAULTS  */
#line 332 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 20860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 325: /* TableLikeOption: IDENTITY_P  */
#line 333 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 20866 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 326: /* TableLikeOption: INDEXES  */
#line 334 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 20872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 327: /* TableLikeOption: STATISTICS  */
#line 335 "third_party/libpg_query/grammar/statements/create.y"
                                                        { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 20878 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 328: /* TableLikeOption: STORAGE  */
#line 336 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 20884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 329: /* TableLikeOption: ALL  */
#line 337 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 20890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 330: /* reloption_list: reloption_elem  */
#line 343 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 331: /* reloption_list: reloption_list ',' reloption_elem  */
#line 344 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 332: /* ExistingIndex: USING INDEX index_name  */
#line 348 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 20908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 333: /* ConstraintAttr: DEFERRABLE  */
#line 354 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 334: /* ConstraintAttr: NOT DEFERRABLE  */
#line 361 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 335: /* ConstraintAttr: INITIALLY DEFERRED  */
#line 368 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 336: /* ConstraintAttr: INITIALLY IMMEDIATE  */
#line 375 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 337: /* OptWith: WITH reloptions  */
#line 386 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = (yyvsp[0].list); }
#line 20958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 338: /* OptWith: WITH OIDS  */
#line 387 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 339: /* OptWith: WITHOUT OIDS  */
#line 388 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 20970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 340: /* OptWith: %empty  */
#line 389 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = NIL; }
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 341: /* definition: '(' def_list ')'  */
#line 393 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 20982 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 342: /* TableLikeOptionList: TableLikeOptionList INCLUDING TableLikeOption  */
#line 398 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 343: /* TableLikeOptionList: TableLikeOptionList EXCLUDING TableLikeOption  */
#line 399 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 344: /* TableLikeOptionList: %empty  */
#line 400 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.ival) = 0; }
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 345: /* generic_option_name: ColLabel  */
#line 405 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 21006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 346: /* ConstraintAttributeElem: NOT DEFERRABLE  */
#line 410 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 21012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 347: /* ConstraintAttributeElem: DEFERRABLE  */
#line 411 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_DEFERRABLE; }
#line 21018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 348: /* ConstraintAttributeElem: INITIALLY IMMEDIATE  */
#line 412 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 21024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 349: /* ConstraintAttributeElem: INITIALLY DEFERRED  */
#line 413 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 21030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 350: /* ConstraintAttributeElem: NOT VALID  */
#line 414 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.ival) = CAS_NOT_VALID; }
#line 21036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 351: /* ConstraintAttributeElem: NO INHERIT  */
#line 415 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = CAS_NO_INHERIT; }
#line 21042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 352: /* columnDef: ColId Typename ColQualList  */
#line 421 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_STANDARD;
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
			}
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 353: /* columnDef: ColId opt_Typename GeneratedConstraintElem ColQualList  */
#line 441 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->category = COL_GENERATED;
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					// merge the constraints with the generated column constraint
					auto constraints = (yyvsp[0].list);
					if (constraints) {
					    constraints = lappend(constraints, (yyvsp[-1].node));
					} else {
					    constraints = list_make1((yyvsp[-1].node));
					}
					SplitColQualList(constraints, &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
			}
#line 21095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 354: /* def_list: def_elem  */
#line 469 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21101 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 355: /* def_list: def_list ',' def_elem  */
#line 470 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 356: /* index_name: ColId  */
#line 474 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 21113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 357: /* TableElement: columnDef  */
#line 478 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 21119 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 358: /* TableElement: TableLikeClause  */
#line 479 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21125 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 359: /* TableElement: TableConstraint  */
#line 480 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 21131 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 360: /* def_elem: ColLabel '=' def_arg  */
#line 485 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 361: /* def_elem: ColLabel  */
#line 489 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21147 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 362: /* opt_definition: WITH definition  */
#line 496 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 21153 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 363: /* opt_definition: %empty  */
#line 497 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 364: /* OptTableElementList: TableElementList  */
#line 502 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 365: /* OptTableElementList: TableElementList ','  */
#line 503 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 366: /* OptTableElementList: %empty  */
#line 504 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = NIL; }
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 367: /* columnElem: ColId  */
#line 509 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 368: /* opt_column_list: '(' columnList ')'  */
#line 516 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21191 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 369: /* opt_column_list: %empty  */
#line 517 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 370: /* ColQualList: ColQualList ColConstraint  */
#line 522 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 21203 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 371: /* ColQualList: %empty  */
#line 523 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = NIL; }
#line 21209 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 372: /* key_delete: ON DELETE_P key_action  */
#line 527 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = (yyvsp[0].ival); }
#line 21215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 373: /* reloption_elem: ColLabel '=' def_arg  */
#line 533 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 374: /* reloption_elem: ColLabel  */
#line 537 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 21231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 375: /* reloption_elem: ColLabel '.' ColLabel '=' def_arg  */
#line 541 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 21240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 376: /* reloption_elem: ColLabel '.' ColLabel  */
#line 546 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 21248 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 377: /* columnList: columnElem  */
#line 553 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21254 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 378: /* columnList: columnList ',' columnElem  */
#line 554 "third_party/libpg_query/grammar/statements/create.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21260 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 379: /* columnList_opt_comma: columnList  */
#line 558 "third_party/libpg_query/grammar/statements/create.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 380: /* columnList_opt_comma: columnList ','  */
#line 559 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 21272 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 381: /* func_type: Typename  */
#line 563 "third_party/libpg_query/grammar/statements/create.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 21278 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 382: /* func_type: type_function_name attrs '%' TYPE_P  */
#line 565 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 383: /* func_type: SETOF type_function_name attrs '%' TYPE_P  */
#line 571 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 21299 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 384: /* ConstraintElem: CHECK_P '(' a_expr ')' ConstraintAttributeSpec  */
#line 582 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 385: /* ConstraintElem: UNIQUE '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 596 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 386: /* ConstraintElem: UNIQUE ExistingIndex ConstraintAttributeSpec  */
#line 609 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 387: /* ConstraintElem: PRIMARY KEY '(' columnList_opt_comma ')' opt_definition ConstraintAttributeSpec  */
#line 624 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21368 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 388: /* ConstraintElem: PRIMARY KEY ExistingIndex ConstraintAttributeSpec  */
#line 637 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 21386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 389: /* ConstraintElem: FOREIGN KEY '(' columnList_opt_comma ')' REFERENCES qualified_name opt_column_list key_match key_actions ConstraintAttributeSpec  */
#line 652 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 21408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 390: /* TableElementList: TableElement  */
#line 674 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 21416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 391: /* TableElementList: TableElementList ',' TableElement  */
#line 678 "third_party/libpg_query/grammar/statements/create.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 21424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 392: /* key_match: MATCH FULL  */
#line 685 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 21432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 393: /* key_match: MATCH PARTIAL  */
#line 689 "third_party/libpg_query/grammar/statements/create.y"
                        {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 21444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 394: /* key_match: MATCH SIMPLE  */
#line 697 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 395: /* key_match: %empty  */
#line 701 "third_party/libpg_query/grammar/statements/create.y"
                        {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 21460 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 396: /* TableLikeClause: LIKE qualified_name TableLikeOptionList  */
#line 709 "third_party/libpg_query/grammar/statements/create.y"
                                {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 21471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 397: /* OptTemp: TEMPORARY  */
#line 718 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 398: /* OptTemp: TEMP  */
#line 719 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 399: /* OptTemp: LOCAL TEMPORARY  */
#line 720 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21489 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 400: /* OptTemp: LOCAL TEMP  */
#line 721 "third_party/libpg_query/grammar/statements/create.y"
                                                                { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 21495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 401: /* OptTemp: GLOBAL TEMPORARY  */
#line 723 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 402: /* OptTemp: GLOBAL TEMP  */
#line 730 "third_party/libpg_query/grammar/statements/create.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 21517 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 403: /* OptTemp: UNLOGGED  */
#line 736 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 21523 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 404: /* OptTemp: %empty  */
#line 737 "third_party/libpg_query/grammar/statements/create.y"
                                                                        { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 21529 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 405: /* generated_when: ALWAYS  */
#line 742 "third_party/libpg_query/grammar/statements/create.y"
                                                { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 21535 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 406: /* generated_when: BY DEFAULT  */
#line 743 "third_party/libpg_query/grammar/statements/create.y"
                                        { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 21541 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 407: /* DropStmt: DROP drop_type_any_name IF_P EXISTS any_name_list opt_drop_behavior  */
#line 10 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 408: /* DropStmt: DROP drop_type_any_name any_name_list opt_drop_behavior  */
#line 20 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21569 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 409: /* DropStmt: DROP drop_type_name IF_P EXISTS name_list opt_drop_behavior  */
#line 30 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21583 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 410: /* DropStmt: DROP drop_type_name name_list opt_drop_behavior  */
#line 40 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 411: /* DropStmt: DROP drop_type_name_on_any_name name ON any_name opt_drop_behavior  */
#line 50 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 412: /* DropStmt: DROP drop_type_name_on_any_name IF_P EXISTS name ON any_name opt_drop_behavior  */
#line 60 "third_party/libpg_query/grammar/statements/drop.y"
                                {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 413: /* drop_type_any_name: TABLE  */
#line 73 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 21631 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 414: /* drop_type_any_name: SEQUENCE  */
#line 74 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 21637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 415: /* drop_type_any_name: FUNCTION  */
#line 75 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21643 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 416: /* drop_type_any_name: MACRO  */
#line 76 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 21649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 417: /* drop_type_any_name: MACRO TABLE  */
#line 77 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; }
#line 21655 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 418: /* drop_type_any_name: VIEW  */
#line 78 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 21661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 419: /* drop_type_any_name: MATERIALIZED VIEW  */
#line 79 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 21667 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 420: /* drop_type_any_name: INDEX  */
#line 80 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 21673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 421: /* drop_type_any_name: FOREIGN TABLE  */
#line 81 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 21679 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 422: /* drop_type_any_name: COLLATION  */
#line 82 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 21685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 423: /* drop_type_any_name: CONVERSION_P  */
#line 83 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 21691 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 424: /* drop_type_any_name: SCHEMA  */
#line 84 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 425: /* drop_type_any_name: STATISTICS  */
#line 85 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 21703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 426: /* drop_type_any_name: TEXT_P SEARCH PARSER  */
#line 86 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 21709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 427: /* drop_type_any_name: TEXT_P SEARCH DICTIONARY  */
#line 87 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 21715 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 428: /* drop_type_any_name: TEXT_P SEARCH TEMPLATE  */
#line 88 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 21721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 429: /* drop_type_any_name: TEXT_P SEARCH CONFIGURATION  */
#line 89 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 21727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 430: /* drop_type_any_name: TYPE_P  */
#line 90 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TYPE; }
#line 21733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 431: /* drop_type_name: ACCESS METHOD  */
#line 95 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 21739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 432: /* drop_type_name: EVENT TRIGGER  */
#line 96 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 21745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 433: /* drop_type_name: EXTENSION  */
#line 97 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 21751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 434: /* drop_type_name: FOREIGN DATA_P WRAPPER  */
#line 98 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                { (yyval.objtype) = PG_OBJECT_FDW; }
#line 21757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 435: /* drop_type_name: PUBLICATION  */
#line 99 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                        { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 21763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 436: /* drop_type_name: SERVER  */
#line 100 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 21769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 437: /* any_name_list: any_name  */
#line 105 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 21775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 438: /* any_name_list: any_name_list ',' any_name  */
#line 106 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 21781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 439: /* opt_drop_behavior: CASCADE  */
#line 111 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 21787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 440: /* opt_drop_behavior: RESTRICT  */
#line 112 "third_party/libpg_query/grammar/statements/drop.y"
                                                                        { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 21793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 441: /* opt_drop_behavior: %empty  */
#line 113 "third_party/libpg_query/grammar/statements/drop.y"
                                                                { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 21799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 442: /* drop_type_name_on_any_name: POLICY  */
#line 118 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 21805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 443: /* drop_type_name_on_any_name: RULE  */
#line 119 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_RULE; }
#line 21811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 444: /* drop_type_name_on_any_name: TRIGGER  */
#line 120 "third_party/libpg_query/grammar/statements/drop.y"
                                                                                                { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 21817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 445: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 9 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			}
#line 21832 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 446: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS TABLE SelectStmt  */
#line 21 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-9].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 447: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS TABLE SelectStmt  */
#line 34 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-4].range)->relpersistence = (yyvsp[-6].ival);
				n->name = (yyvsp[-4].range);
				n->params = (yyvsp[-3].list);
				n->function = NULL;
				n->query = (yyvsp[0].node);
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;

			}
#line 21864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 448: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 47 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_ERROR_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
                         }
#line 21879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 449: /* CreateFunctionStmt: CREATE_P OptTemp macro_alias IF_P NOT EXISTS qualified_name param_list AS a_expr  */
#line 59 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-8].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_IGNORE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 450: /* CreateFunctionStmt: CREATE_P OR REPLACE OptTemp macro_alias qualified_name param_list AS a_expr  */
#line 71 "third_party/libpg_query/grammar/statements/create_function.y"
                         {
				PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
				(yyvsp[-3].range)->relpersistence = (yyvsp[-5].ival);
				n->name = (yyvsp[-3].range);
				n->params = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->query = NULL;
				n->onconflict = PG_REPLACE_ON_CONFLICT;
				(yyval.node) = (PGNode *)n;
			 }
#line 21909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 453: /* param_list: '(' ')'  */
#line 92 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = NIL;
			}
#line 21917 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 454: /* param_list: '(' func_arg_list ')'  */
#line 96 "third_party/libpg_query/grammar/statements/create_function.y"
                        {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 21925 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 455: /* UpdateStmt: opt_with_clause UPDATE relation_expr_opt_alias SET set_clause_list_opt_comma from_clause where_or_current_clause returning_clause  */
#line 12 "third_party/libpg_query/grammar/statements/update.y"
                                {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 21940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 456: /* CopyStmt: COPY opt_binary qualified_name opt_column_list opt_oids copy_from opt_program copy_file_name copy_delimiter opt_with copy_options  */
#line 3 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 21972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 457: /* CopyStmt: COPY '(' SelectStmt ')' TO opt_program copy_file_name opt_with copy_options  */
#line 31 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 21995 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 458: /* CopyStmt: COPY FROM DATABASE ColId TO ColId copy_database_flag  */
#line 50 "third_party/libpg_query/grammar/statements/copy.y"
                {
				PGCopyDatabaseStmt *n = makeNode(PGCopyDatabaseStmt);
				n->from_database = (yyvsp[-3].str);
				n->to_database = (yyvsp[-1].str);
				n->copy_database_flag = (yyvsp[0].conststr);
				(yyval.node) = (PGNode *)n;
			}
#line 22007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 459: /* copy_database_flag: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                        { (yyval.conststr) = NULL; }
#line 22013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 460: /* copy_database_flag: '(' SCHEMA ')'  */
#line 62 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "schema"; }
#line 22019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 461: /* copy_database_flag: '(' DATA_P ')'  */
#line 63 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.conststr) = "data"; }
#line 22025 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 462: /* copy_from: FROM  */
#line 67 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 463: /* copy_from: TO  */
#line 68 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = false; }
#line 22037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 464: /* copy_delimiter: opt_using DELIMITERS Sconst  */
#line 74 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 465: /* copy_delimiter: %empty  */
#line 77 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22051 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 466: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list_item  */
#line 83 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 22059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 467: /* copy_generic_opt_arg_list: copy_generic_opt_arg_list ',' copy_generic_opt_arg_list_item  */
#line 87 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 22067 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 468: /* opt_using: USING  */
#line 94 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 469: /* opt_using: %empty  */
#line 95 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22079 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 470: /* opt_as: AS  */
#line 99 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                {}
#line 22085 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 471: /* opt_as: %empty  */
#line 100 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        {}
#line 22091 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 472: /* opt_program: PROGRAM  */
#line 105 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.boolean) = true; }
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 473: /* opt_program: %empty  */
#line 106 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.boolean) = false; }
#line 22103 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 474: /* copy_options: copy_opt_list  */
#line 110 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22109 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 475: /* copy_options: '(' copy_generic_opt_list ')'  */
#line 111 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22115 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 476: /* copy_generic_opt_arg: opt_boolean_or_string  */
#line 116 "third_party/libpg_query/grammar/statements/copy.y"
                                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22121 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 477: /* copy_generic_opt_arg: NumericOnly  */
#line 117 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22127 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 478: /* copy_generic_opt_arg: '*'  */
#line 118 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 22133 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 479: /* copy_generic_opt_arg: '(' copy_generic_opt_arg_list ')'  */
#line 119 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 22139 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 480: /* copy_generic_opt_arg: struct_expr  */
#line 120 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = (PGNode *) (yyvsp[0].node); }
#line 22145 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 481: /* copy_generic_opt_arg: %empty  */
#line 121 "third_party/libpg_query/grammar/statements/copy.y"
                                                                        { (yyval.node) = NULL; }
#line 22151 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 482: /* copy_generic_opt_elem: ColLabel copy_generic_opt_arg  */
#line 127 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22159 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 483: /* opt_oids: WITH OIDS  */
#line 135 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 22167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 484: /* opt_oids: %empty  */
#line 138 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22173 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 485: /* copy_opt_list: copy_opt_list copy_opt_item  */
#line 143 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 22179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 486: /* copy_opt_list: %empty  */
#line 144 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                        { (yyval.list) = NIL; }
#line 22185 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 487: /* opt_binary: BINARY  */
#line 150 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22193 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 488: /* opt_binary: %empty  */
#line 153 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.defelt) = NULL; }
#line 22199 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 489: /* copy_opt_item: BINARY  */
#line 159 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 22207 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 490: /* copy_opt_item: OIDS  */
#line 163 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 491: /* copy_opt_item: FREEZE  */
#line 167 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22223 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 492: /* copy_opt_item: DELIMITER opt_as Sconst  */
#line 171 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 493: /* copy_opt_item: NULL_P opt_as Sconst  */
#line 175 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 494: /* copy_opt_item: CSV  */
#line 179 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 22247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 495: /* copy_opt_item: HEADER_P  */
#line 183 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 22255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 496: /* copy_opt_item: QUOTE opt_as Sconst  */
#line 187 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22263 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 497: /* copy_opt_item: ESCAPE opt_as Sconst  */
#line 191 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 22271 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 498: /* copy_opt_item: FORCE QUOTE columnList  */
#line 195 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 499: /* copy_opt_item: FORCE QUOTE '*'  */
#line 199 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22287 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 500: /* copy_opt_item: PARTITION BY columnList  */
#line 203 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 501: /* copy_opt_item: PARTITION BY '*'  */
#line 207 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("partition_by", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 22303 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 502: /* copy_opt_item: FORCE NOT NULL_P columnList  */
#line 211 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 22311 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 503: /* copy_opt_item: FORCE NULL_P columnList  */
#line 215 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 22319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 504: /* copy_opt_item: ENCODING Sconst  */
#line 219 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 22327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 505: /* copy_generic_opt_arg_list_item: opt_boolean_or_string  */
#line 226 "third_party/libpg_query/grammar/statements/copy.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 506: /* copy_file_name: Sconst  */
#line 231 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 22339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 507: /* copy_file_name: STDIN  */
#line 232 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22345 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 508: /* copy_file_name: STDOUT  */
#line 233 "third_party/libpg_query/grammar/statements/copy.y"
                                                                                                { (yyval.str) = NULL; }
#line 22351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 509: /* copy_generic_opt_list: copy_generic_opt_elem  */
#line 239 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 510: /* copy_generic_opt_list: copy_generic_opt_list ',' copy_generic_opt_elem  */
#line 243 "third_party/libpg_query/grammar/statements/copy.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 513: /* select_with_parens: '(' select_no_parens ')'  */
#line 52 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 22373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 514: /* select_with_parens: '(' select_with_parens ')'  */
#line 53 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = (yyvsp[-1].node); }
#line 22379 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 515: /* select_no_parens: simple_select  */
#line 68 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22385 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 516: /* select_no_parens: select_clause sort_clause  */
#line 70 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 517: /* select_no_parens: select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 77 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22408 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 518: /* select_no_parens: select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 85 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 519: /* select_no_parens: with_clause select_clause  */
#line 93 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 22432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 520: /* select_no_parens: with_clause select_clause sort_clause  */
#line 101 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 22444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 521: /* select_no_parens: with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit  */
#line 109 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 522: /* select_no_parens: with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause  */
#line 117 "third_party/libpg_query/grammar/statements/select.y"
                                {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 22468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 523: /* select_clause: simple_select  */
#line 127 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 524: /* select_clause: select_with_parens  */
#line 128 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 525: /* opt_select: SELECT opt_all_clause opt_target_list_opt_comma  */
#line 156 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = (yyvsp[0].list);
			}
#line 22488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 526: /* opt_select: %empty  */
#line 160 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGAStar *star = makeNode(PGAStar);
				(yyval.list) = list_make1(star);
			}
#line 22497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 527: /* simple_select: SELECT opt_all_clause opt_target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 528: /* simple_select: SELECT distinct_clause target_list_opt_comma into_clause from_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 187 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-9].list);
					n->targetList = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-7].into);
					n->fromClause = (yyvsp[-6].list);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22534 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 529: /* simple_select: FROM from_list opt_select into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 204 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->fromClause = (yyvsp[-8].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 530: /* simple_select: FROM from_list SELECT distinct_clause target_list_opt_comma into_clause where_clause group_clause having_clause window_clause qualify_clause sample_clause  */
#line 221 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->distinctClause = (yyvsp[-8].list);
					n->fromClause = (yyvsp[-10].list);
					n->intoClause = (yyvsp[-6].into);
					n->whereClause = (yyvsp[-5].node);
					n->groupClause = (yyvsp[-4].list);
					n->havingClause = (yyvsp[-3].node);
					n->windowClause = (yyvsp[-2].list);
					n->qualifyClause = (yyvsp[-1].node);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22571 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 531: /* simple_select: values_clause_opt_comma  */
#line 235 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 22577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 532: /* simple_select: TABLE relation_expr  */
#line 237 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 22600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 533: /* simple_select: select_clause UNION all_or_distinct by_name select_clause  */
#line 256 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[-2].boolean), (yyvsp[-4].node), (yyvsp[0].node));
				}
#line 22608 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 534: /* simple_select: select_clause UNION all_or_distinct select_clause  */
#line 260 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22616 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 535: /* simple_select: select_clause INTERSECT all_or_distinct select_clause  */
#line 264 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 536: /* simple_select: select_clause EXCEPT all_or_distinct select_clause  */
#line 268 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 22632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 537: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma  */
#line 272 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22645 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 538: /* simple_select: pivot_keyword table_ref USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 281 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 539: /* simple_select: pivot_keyword table_ref GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 291 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-3].node);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22672 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 540: /* simple_select: pivot_keyword table_ref ON pivot_column_list  */
#line 300 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->columns = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 541: /* simple_select: pivot_keyword table_ref ON pivot_column_list GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-5].node);
					n->columns = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 542: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma  */
#line 319 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-4].node);
					n->columns = (yyvsp[-2].list);
					n->aggrs = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 543: /* simple_select: pivot_keyword table_ref ON pivot_column_list USING target_list_opt_comma GROUP_P BY name_list_opt_comma_opt_bracket  */
#line 329 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->columns = (yyvsp[-5].list);
					n->aggrs = (yyvsp[-3].list);
					n->groups = (yyvsp[0].list);
					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 544: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma INTO NAME_P name value_or_values name_list_opt_comma_opt_bracket  */
#line 340 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-7].node);
					n->unpivots = (yyvsp[0].list);
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString((yyvsp[-2].str)));
					piv->pivot_value = (yyvsp[-5].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22746 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 545: /* simple_select: unpivot_keyword table_ref ON target_list_opt_comma  */
#line 354 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *res = makeNode(PGSelectStmt);
					PGPivotStmt *n = makeNode(PGPivotStmt);
					n->source = (yyvsp[-2].node);
					n->unpivots = list_make1(makeString("value"));
					PGPivot *piv = makeNode(PGPivot);
					piv->unpivot_columns = list_make1(makeString("name"));
					piv->pivot_value = (yyvsp[0].list);
					n->columns = list_make1(piv);

					res->pivot = n;
					(yyval.node) = (PGNode *)res;
				}
#line 22764 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 552: /* pivot_column_entry: b_expr  */
#line 383 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[0].node));
				(yyval.node) = (PGNode *) n;
			}
#line 22774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 553: /* pivot_column_entry: b_expr IN_P '(' select_no_parens ')'  */
#line 389 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGPivot *n = makeNode(PGPivot);
				n->pivot_columns = list_make1((yyvsp[-4].node));
				n->subquery = (yyvsp[-1].node);
				(yyval.node) = (PGNode *) n;
			}
#line 22785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 554: /* pivot_column_entry: single_pivot_value  */
#line 395 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 22791 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 555: /* pivot_column_list_internal: pivot_column_entry  */
#line 399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 556: /* pivot_column_list_internal: pivot_column_list_internal ',' pivot_column_entry  */
#line 400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22803 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 557: /* pivot_column_list: pivot_column_list_internal  */
#line 404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 22809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 558: /* pivot_column_list: pivot_column_list_internal ','  */
#line 405 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 22815 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 559: /* with_clause: WITH cte_list  */
#line 420 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 560: /* with_clause: WITH_LA cte_list  */
#line 427 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 22837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 561: /* with_clause: WITH RECURSIVE cte_list  */
#line 434 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 22848 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 562: /* cte_list: common_table_expr  */
#line 443 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22854 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 563: /* cte_list: cte_list ',' common_table_expr  */
#line 444 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22860 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 564: /* common_table_expr: name opt_name_list AS opt_materialized '(' PreparableStmt ')'  */
#line 448 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-6].str);
				n->aliascolnames = (yyvsp[-5].list);
				n->ctematerialized = (yyvsp[-3].ctematerialize);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-6]);
				(yyval.node) = (PGNode *) n;
			}
#line 22874 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 565: /* opt_materialized: MATERIALIZED  */
#line 460 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeAlways; }
#line 22880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 566: /* opt_materialized: NOT MATERIALIZED  */
#line 461 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ctematerialize) = PGCTEMaterializeNever; }
#line 22886 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 567: /* opt_materialized: %empty  */
#line 462 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ctematerialize) = PGCTEMaterializeDefault; }
#line 22892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 568: /* into_clause: INTO OptTempTableName  */
#line 467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 22906 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 569: /* into_clause: %empty  */
#line 477 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.into) = NULL; }
#line 22912 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 570: /* OptTempTableName: TEMPORARY opt_table qualified_name  */
#line 486 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22921 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 571: /* OptTempTableName: TEMP opt_table qualified_name  */
#line 491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22930 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 572: /* OptTempTableName: LOCAL TEMPORARY opt_table qualified_name  */
#line 496 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 573: /* OptTempTableName: LOCAL TEMP opt_table qualified_name  */
#line 501 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 574: /* OptTempTableName: GLOBAL TEMPORARY opt_table qualified_name  */
#line 506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22960 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 575: /* OptTempTableName: GLOBAL TEMP opt_table qualified_name  */
#line 514 "third_party/libpg_query/grammar/statements/select.y"
                                {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 22972 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 576: /* OptTempTableName: UNLOGGED opt_table qualified_name  */
#line 522 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 22981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 577: /* OptTempTableName: TABLE qualified_name  */
#line 527 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 22990 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 578: /* OptTempTableName: qualified_name  */
#line 532 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 22999 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 579: /* opt_table: TABLE  */
#line 538 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        {}
#line 23005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 580: /* opt_table: %empty  */
#line 539 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                {}
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 581: /* all_or_distinct: ALL  */
#line 543 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.boolean) = true; }
#line 23017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 582: /* all_or_distinct: DISTINCT  */
#line 544 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 583: /* all_or_distinct: %empty  */
#line 545 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23029 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 584: /* by_name: BY NAME_P  */
#line 549 "third_party/libpg_query/grammar/statements/select.y"
                                                          { }
#line 23035 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 585: /* distinct_clause: DISTINCT  */
#line 556 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(NIL); }
#line 23041 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 586: /* distinct_clause: DISTINCT ON '(' expr_list_opt_comma ')'  */
#line 557 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23047 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 587: /* opt_all_clause: ALL  */
#line 561 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = NIL;}
#line 23053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 588: /* opt_all_clause: %empty  */
#line 562 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23059 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 589: /* opt_ignore_nulls: IGNORE_P NULLS_P  */
#line 566 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true;}
#line 23065 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 590: /* opt_ignore_nulls: RESPECT_P NULLS_P  */
#line 567 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false;}
#line 23071 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 591: /* opt_ignore_nulls: %empty  */
#line 568 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 23077 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 592: /* opt_sort_clause: sort_clause  */
#line 572 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 23083 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 593: /* opt_sort_clause: %empty  */
#line 573 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23089 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 594: /* sort_clause: ORDER BY sortby_list  */
#line 577 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 595: /* sort_clause: ORDER BY ALL opt_asc_desc opt_nulls_order  */
#line 579 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSortBy *sort = makeNode(PGSortBy);
					PGAStar *star = makeNode(PGAStar);
					star->columns = true;
					star->location = (yylsp[-2]);
					sort->node = (PGNode *) star;
					sort->sortby_dir = (yyvsp[-1].sortorder);
					sort->sortby_nulls = (yyvsp[0].nullorder);
					sort->useOp = NIL;
					sort->location = -1;		/* no operator */
					(yyval.list) = list_make1(sort);
				}
#line 23112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 596: /* sortby_list: sortby  */
#line 594 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 23118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 597: /* sortby_list: sortby_list ',' sortby  */
#line 595 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 23124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 598: /* sortby: a_expr USING qual_all_Op opt_nulls_order  */
#line 599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 23137 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 599: /* sortby: a_expr opt_asc_desc opt_nulls_order  */
#line 608 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 23150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 600: /* opt_asc_desc: ASC_P  */
#line 618 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 23156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 601: /* opt_asc_desc: DESC_P  */
#line 619 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 23162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 602: /* opt_asc_desc: %empty  */
#line 620 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 23168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 603: /* opt_nulls_order: NULLS_LA FIRST_P  */
#line 623 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 23174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 604: /* opt_nulls_order: NULLS_LA LAST_P  */
#line 624 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 23180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 605: /* opt_nulls_order: %empty  */
#line 625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 23186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 606: /* select_limit: limit_clause offset_clause  */
#line 629 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 23192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 607: /* select_limit: offset_clause limit_clause  */
#line 630 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 23198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 608: /* select_limit: limit_clause  */
#line 631 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 23204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 609: /* select_limit: offset_clause  */
#line 632 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 23210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 610: /* opt_select_limit: select_limit  */
#line 636 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 611: /* opt_select_limit: %empty  */
#line 637 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make2(NULL,NULL); }
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 612: /* limit_clause: LIMIT select_limit_value  */
#line 642 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 613: /* limit_clause: LIMIT select_limit_value ',' select_offset_value  */
#line 644 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 23241 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 614: /* limit_clause: FETCH first_or_next select_fetch_first_value row_or_rows ONLY  */
#line 660 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-2].node); }
#line 23247 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 615: /* limit_clause: FETCH first_or_next row_or_rows ONLY  */
#line 662 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeIntConst(1, -1); }
#line 23253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 616: /* offset_clause: OFFSET select_offset_value  */
#line 667 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 23259 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 617: /* offset_clause: OFFSET select_fetch_first_value row_or_rows  */
#line 670 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[-1].node); }
#line 23265 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 618: /* sample_count: FCONST '%'  */
#line 678 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 619: /* sample_count: ICONST '%'  */
#line 682 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23281 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 620: /* sample_count: FCONST PERCENT  */
#line 686 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 23289 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 621: /* sample_count: ICONST PERCENT  */
#line 690 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 23297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 622: /* sample_count: ICONST  */
#line 694 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 23305 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 623: /* sample_count: ICONST ROWS  */
#line 698 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 23313 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 624: /* sample_clause: USING SAMPLE tablesample_entry  */
#line 705 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 625: /* sample_clause: %empty  */
#line 709 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = NULL; }
#line 23327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 626: /* opt_sample_func: ColId  */
#line 716 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = (yyvsp[0].str); }
#line 23333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 627: /* opt_sample_func: %empty  */
#line 717 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.str) = NULL; }
#line 23339 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 628: /* tablesample_entry: opt_sample_func '(' sample_count ')' opt_repeatable_clause  */
#line 722 "third_party/libpg_query/grammar/statements/select.y"
                                {
					int seed = (yyvsp[0].ival);
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), &seed, (yylsp[-4]));
				}
#line 23348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 629: /* tablesample_entry: sample_count  */
#line 727 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, NULL, (yylsp[0]));
		}
#line 23356 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 630: /* tablesample_entry: sample_count '(' ColId ')'  */
#line 731 "third_party/libpg_query/grammar/statements/select.y"
                {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), NULL, (yylsp[-3]));
		}
#line 23364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 631: /* tablesample_entry: sample_count '(' ColId ',' ICONST ')'  */
#line 735 "third_party/libpg_query/grammar/statements/select.y"
                {
			int seed = (yyvsp[-1].ival);
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), &seed, (yylsp[-5]));
		}
#line 23373 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 632: /* tablesample_clause: TABLESAMPLE tablesample_entry  */
#line 743 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 23381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 633: /* opt_tablesample_clause: tablesample_clause  */
#line 749 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 634: /* opt_tablesample_clause: %empty  */
#line 750 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.node) = NULL; }
#line 23393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 635: /* opt_repeatable_clause: REPEATABLE '(' ICONST ')'  */
#line 755 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = (yyvsp[-1].ival); }
#line 23399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 636: /* opt_repeatable_clause: %empty  */
#line 756 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.ival) = -1; }
#line 23405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 637: /* select_limit_value: a_expr  */
#line 760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 638: /* select_limit_value: ALL  */
#line 762 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 23420 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 639: /* select_limit_value: a_expr '%'  */
#line 767 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent((yyvsp[-1].node)); }
#line 23426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 640: /* select_limit_value: FCONST PERCENT  */
#line 769 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[-1].str),(yylsp[-1]))); }
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 641: /* select_limit_value: ICONST PERCENT  */
#line 771 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[-1].ival),(yylsp[-1]))); }
#line 23438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 642: /* select_offset_value: a_expr  */
#line 775 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 643: /* select_fetch_first_value: c_expr  */
#line 795 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 644: /* select_fetch_first_value: '+' I_or_F_const  */
#line 797 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 23456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 645: /* select_fetch_first_value: '-' I_or_F_const  */
#line 799 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 23462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 646: /* I_or_F_const: Iconst  */
#line 803 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 23468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 647: /* I_or_F_const: FCONST  */
#line 804 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 648: /* row_or_rows: ROW  */
#line 808 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = 0; }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 649: /* row_or_rows: ROWS  */
#line 809 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 650: /* first_or_next: FIRST_P  */
#line 812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.ival) = 0; }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 651: /* first_or_next: NEXT  */
#line 813 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.ival) = 0; }
#line 23498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 652: /* group_clause: GROUP_P BY group_by_list_opt_comma  */
#line 838 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23504 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 653: /* group_clause: GROUP_P BY ALL  */
#line 840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[0]));
					(yyval.list) = list_make1(node);
				}
#line 23513 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 654: /* group_clause: %empty  */
#line 844 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 655: /* group_by_list: group_by_item  */
#line 848 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23525 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 656: /* group_by_list: group_by_list ',' group_by_item  */
#line 849 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 23531 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 657: /* group_by_list_opt_comma: group_by_list  */
#line 853 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23537 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 658: /* group_by_list_opt_comma: group_by_list ','  */
#line 854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 23543 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 659: /* group_by_item: a_expr  */
#line 858 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23549 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 660: /* group_by_item: empty_grouping_set  */
#line 859 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 661: /* group_by_item: cube_clause  */
#line 860 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23561 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 662: /* group_by_item: rollup_clause  */
#line 861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23567 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 663: /* group_by_item: grouping_sets_clause  */
#line 862 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 664: /* empty_grouping_set: '(' ')'  */
#line 867 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 23581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 665: /* rollup_clause: ROLLUP '(' expr_list_opt_comma ')'  */
#line 880 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 666: /* cube_clause: CUBE '(' expr_list_opt_comma ')'  */
#line 887 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[-1].list), (yylsp[-3]));
				}
#line 23597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 667: /* grouping_sets_clause: GROUPING SETS '(' group_by_list_opt_comma ')'  */
#line 894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[-1].list), (yylsp[-4]));
				}
#line 23605 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 668: /* grouping_or_grouping_id: GROUPING  */
#line 900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 23611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 669: /* grouping_or_grouping_id: GROUPING_ID  */
#line 901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = NULL; }
#line 23617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 670: /* having_clause: HAVING a_expr  */
#line 905 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 671: /* having_clause: %empty  */
#line 906 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23629 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 672: /* qualify_clause: QUALIFY a_expr  */
#line 910 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 23635 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 673: /* qualify_clause: %empty  */
#line 911 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 23641 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 674: /* for_locking_clause: for_locking_items  */
#line 915 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23647 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 675: /* for_locking_clause: FOR READ_P ONLY  */
#line 916 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23653 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 676: /* opt_for_locking_clause: for_locking_clause  */
#line 920 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23659 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 677: /* opt_for_locking_clause: %empty  */
#line 921 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 678: /* for_locking_items: for_locking_item  */
#line 925 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23671 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 679: /* for_locking_items: for_locking_items for_locking_item  */
#line 926 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 23677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 680: /* for_locking_item: for_locking_strength locked_rels_list opt_nowait_or_skip  */
#line 931 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 23689 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 681: /* for_locking_strength: FOR UPDATE  */
#line 941 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 23695 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 682: /* for_locking_strength: FOR NO KEY UPDATE  */
#line 942 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 23701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 683: /* for_locking_strength: FOR SHARE  */
#line 943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 23707 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 684: /* for_locking_strength: FOR KEY SHARE  */
#line 944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 23713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 685: /* locked_rels_list: OF qualified_name_list  */
#line 948 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 686: /* locked_rels_list: %empty  */
#line 949 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 23725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 687: /* opt_nowait_or_skip: NOWAIT  */
#line 954 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = LockWaitError; }
#line 23731 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 688: /* opt_nowait_or_skip: SKIP LOCKED  */
#line 955 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 23737 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 689: /* opt_nowait_or_skip: %empty  */
#line 956 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 23743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 690: /* values_clause: VALUES '(' expr_list_opt_comma ')'  */
#line 966 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 691: /* values_clause: values_clause ',' '(' expr_list_opt_comma ')'  */
#line 972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 692: /* values_clause_opt_comma: values_clause  */
#line 980 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[0].node); }
#line 23769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 693: /* values_clause_opt_comma: values_clause ','  */
#line 981 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 23775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 694: /* from_clause: FROM from_list_opt_comma  */
#line 994 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 23781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 695: /* from_clause: %empty  */
#line 995 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 23787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 696: /* from_list: table_ref  */
#line 999 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23793 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 697: /* from_list: from_list ',' table_ref  */
#line 1000 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 23799 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 698: /* from_list_opt_comma: from_list  */
#line 1004 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 23805 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 699: /* from_list_opt_comma: from_list ','  */
#line 1005 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23811 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 700: /* table_ref: relation_expr opt_alias_clause opt_tablesample_clause  */
#line 1012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 23821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 701: /* table_ref: func_table func_alias_clause opt_tablesample_clause  */
#line 1018 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 702: /* table_ref: values_clause_opt_comma alias_clause opt_tablesample_clause  */
#line 1026 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGRangeSubselect *n = makeNode(PGRangeSubselect);
				n->lateral = false;
				n->subquery = (yyvsp[-2].node);
				n->alias = (yyvsp[-1].alias);
				n->sample = (yyvsp[0].node);
				(yyval.node) = (PGNode *) n;
			}
#line 23846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 703: /* table_ref: LATERAL_P func_table func_alias_clause  */
#line 1035 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 23858 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 704: /* table_ref: select_with_parens opt_alias_clause opt_tablesample_clause  */
#line 1043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 23871 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 705: /* table_ref: LATERAL_P select_with_parens opt_alias_clause  */
#line 1052 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					(yyval.node) = (PGNode *) n;
				}
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 706: /* table_ref: joined_table  */
#line 1061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 23892 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 707: /* table_ref: '(' joined_table ')' alias_clause  */
#line 1065 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 23901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 708: /* table_ref: table_ref PIVOT '(' target_list_opt_comma FOR pivot_value_list opt_pivot_group_by ')' opt_alias_clause  */
#line 1070 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->aggrs = (yyvsp[-5].list);
					n->pivots = (yyvsp[-3].list);
					n->groups = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 23915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 709: /* table_ref: table_ref UNPIVOT opt_include_nulls '(' unpivot_header FOR unpivot_value_list ')' opt_alias_clause  */
#line 1080 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPivotExpr *n = makeNode(PGPivotExpr);
					n->source = (yyvsp[-8].node);
					n->include_nulls = (yyvsp[-6].boolean);
					n->unpivots = (yyvsp[-4].list);
					n->pivots = (yyvsp[-2].list);
					n->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) n;
				}
#line 23929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 710: /* opt_pivot_group_by: GROUP_P BY name_list_opt_comma  */
#line 1092 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = (yyvsp[0].list); }
#line 23935 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 711: /* opt_pivot_group_by: %empty  */
#line 1093 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = NULL; }
#line 23941 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 712: /* opt_include_nulls: INCLUDE_P NULLS_P  */
#line 1096 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = true; }
#line 23947 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 713: /* opt_include_nulls: EXCLUDE NULLS_P  */
#line 1097 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 23953 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 714: /* opt_include_nulls: %empty  */
#line 1098 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.boolean) = false; }
#line 23959 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 715: /* single_pivot_value: b_expr IN_P '(' target_list_opt_comma ')'  */
#line 1102 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-4].node));
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 23970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 716: /* single_pivot_value: b_expr IN_P ColIdOrString  */
#line 1110 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = list_make1((yyvsp[-2].node));
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 23981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 717: /* pivot_header: d_expr  */
#line 1119 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 23987 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 718: /* pivot_header: '(' c_expr_list_opt_comma ')'  */
#line 1120 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 23993 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 719: /* pivot_value: pivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1124 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 720: /* pivot_value: pivot_header IN_P ColIdOrString  */
#line 1132 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->pivot_columns = (yyvsp[-2].list);
			n->pivot_enum = (yyvsp[0].str);
			(yyval.node) = (PGNode *) n;
		}
#line 24015 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 721: /* pivot_value_list: pivot_value  */
#line 1141 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24023 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 722: /* pivot_value_list: pivot_value_list pivot_value  */
#line 1145 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 723: /* unpivot_header: ColIdOrString  */
#line 1151 "third_party/libpg_query/grammar/statements/select.y"
                                                          { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 24037 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 724: /* unpivot_header: '(' name_list_opt_comma ')'  */
#line 1152 "third_party/libpg_query/grammar/statements/select.y"
                                              { (yyval.list) = (yyvsp[-1].list); }
#line 24043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 725: /* unpivot_value: unpivot_header IN_P '(' target_list_opt_comma ')'  */
#line 1157 "third_party/libpg_query/grammar/statements/select.y"
                {
			PGPivot *n = makeNode(PGPivot);
			n->unpivot_columns = (yyvsp[-4].list);
			n->pivot_value = (yyvsp[-1].list);
			(yyval.node) = (PGNode *) n;
		}
#line 24054 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 726: /* unpivot_value_list: unpivot_value  */
#line 1166 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 727: /* unpivot_value_list: unpivot_value_list unpivot_value  */
#line 1170 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 24070 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 728: /* joined_table: '(' joined_table ')'  */
#line 1195 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 24078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 729: /* joined_table: table_ref CROSS JOIN table_ref  */
#line 1199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24095 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 730: /* joined_table: table_ref join_type JOIN table_ref join_qual  */
#line 1212 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24113 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 731: /* joined_table: table_ref JOIN table_ref join_qual  */
#line 1226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 732: /* joined_table: table_ref NATURAL join_type JOIN table_ref  */
#line 1241 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 733: /* joined_table: table_ref NATURAL JOIN table_ref  */
#line 1253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_NATURAL;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24165 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 734: /* joined_table: table_ref ASOF join_type JOIN table_ref join_qual  */
#line 1266 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-5].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-4]);
					(yyval.jexpr) = n;
				}
#line 24183 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 735: /* joined_table: table_ref ASOF JOIN table_ref join_qual  */
#line 1280 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->joinreftype = PG_JOIN_ASOF;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 24201 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 736: /* joined_table: table_ref POSITIONAL JOIN table_ref  */
#line 1294 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* POSITIONAL JOIN is a coordinated scan */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_POSITION;
					n->joinreftype = PG_JOIN_REGULAR;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 24218 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 737: /* joined_table: table_ref ANTI JOIN table_ref join_qual  */
#line 1307 "third_party/libpg_query/grammar/statements/select.y"
                {
                    /* ANTI JOIN is a filter */
                    PGJoinExpr *n = makeNode(PGJoinExpr);
                    n->jointype = PG_JOIN_ANTI;
                    n->joinreftype = PG_JOIN_REGULAR;
                    n->larg = (yyvsp[-4].node);
                    n->rarg = (yyvsp[-1].node);
                    if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                        n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                    else
                        n->quals = (yyvsp[0].node); /* ON clause */
                    n->location = (yylsp[-3]);
                    (yyval.jexpr) = n;
                }
#line 24237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 738: /* joined_table: table_ref SEMI JOIN table_ref join_qual  */
#line 1322 "third_party/libpg_query/grammar/statements/select.y"
               {
                   /* SEMI JOIN is also a filter */
                   PGJoinExpr *n = makeNode(PGJoinExpr);
                   n->jointype = PG_JOIN_SEMI;
                   n->joinreftype = PG_JOIN_REGULAR;
                   n->larg = (yyvsp[-4].node);
                   n->rarg = (yyvsp[-1].node);
                   if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
                       n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
                   else
                       n->quals = (yyvsp[0].node); /* ON clause */
                   n->location = (yylsp[-3]);
                   n->location = (yylsp[-3]);
                   (yyval.jexpr) = n;
               }
#line 24257 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 739: /* alias_clause: AS ColIdOrString '(' name_list_opt_comma ')'  */
#line 1341 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 740: /* alias_clause: AS ColIdOrString  */
#line 1347 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 741: /* alias_clause: ColId '(' name_list_opt_comma ')'  */
#line 1352 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 24286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 742: /* alias_clause: ColId  */
#line 1358 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 24295 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 743: /* opt_alias_clause: alias_clause  */
#line 1364 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.alias) = (yyvsp[0].alias); }
#line 24301 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 744: /* opt_alias_clause: %empty  */
#line 1365 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.alias) = NULL; }
#line 24307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 745: /* func_alias_clause: alias_clause  */
#line 1374 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 24315 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 746: /* func_alias_clause: AS '(' TableFuncElementList ')'  */
#line 1378 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 24323 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 747: /* func_alias_clause: AS ColIdOrString '(' TableFuncElementList ')'  */
#line 1382 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24333 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 748: /* func_alias_clause: ColId '(' TableFuncElementList ')'  */
#line 1388 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 24343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 749: /* func_alias_clause: %empty  */
#line 1394 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 24351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 750: /* join_type: FULL join_outer  */
#line 1399 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.jtype) = PG_JOIN_FULL; }
#line 24357 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 751: /* join_type: LEFT join_outer  */
#line 1400 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_LEFT; }
#line 24363 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 752: /* join_type: RIGHT join_outer  */
#line 1401 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 24369 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 753: /* join_type: SEMI  */
#line 1402 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_SEMI; }
#line 24375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 754: /* join_type: ANTI  */
#line 1403 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.jtype) = PG_JOIN_ANTI; }
#line 24381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 755: /* join_type: INNER_P  */
#line 1404 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.jtype) = PG_JOIN_INNER; }
#line 24387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 756: /* join_outer: OUTER_P  */
#line 1408 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = NULL; }
#line 24393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 757: /* join_outer: %empty  */
#line 1409 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 758: /* join_qual: USING '(' name_list_opt_comma ')'  */
#line 1421 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 24405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 759: /* join_qual: ON a_expr  */
#line 1422 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 24411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 760: /* relation_expr: qualified_name  */
#line 1428 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 761: /* relation_expr: qualified_name '*'  */
#line 1435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 24433 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 762: /* relation_expr: ONLY qualified_name  */
#line 1442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 763: /* relation_expr: ONLY '(' qualified_name ')'  */
#line 1449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 24455 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 764: /* func_table: func_expr_windowless opt_ordinality  */
#line 1481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 765: /* func_table: ROWS FROM '(' rowsfrom_list ')' opt_ordinality  */
#line 1492 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 24485 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 766: /* rowsfrom_item: func_expr_windowless opt_col_def_list  */
#line 1505 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 24491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 767: /* rowsfrom_list: rowsfrom_item  */
#line 1509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 24497 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 768: /* rowsfrom_list: rowsfrom_list ',' rowsfrom_item  */
#line 1510 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 24503 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 769: /* opt_col_def_list: AS '(' TableFuncElementList ')'  */
#line 1513 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 24509 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 770: /* opt_col_def_list: %empty  */
#line 1514 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 24515 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 771: /* opt_ordinality: WITH_LA ORDINALITY  */
#line 1517 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.boolean) = true; }
#line 24521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 772: /* opt_ordinality: %empty  */
#line 1518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 24527 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 773: /* where_clause: WHERE a_expr  */
#line 1523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 24533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 774: /* where_clause: %empty  */
#line 1524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 24539 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 775: /* TableFuncElementList: TableFuncElement  */
#line 1530 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 24547 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 776: /* TableFuncElementList: TableFuncElementList ',' TableFuncElement  */
#line 1534 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 24555 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 777: /* TableFuncElement: ColIdOrString Typename opt_collate_clause  */
#line 1540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 24577 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 778: /* opt_collate_clause: COLLATE any_name  */
#line 1561 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 24589 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 779: /* opt_collate_clause: %empty  */
#line 1568 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.node) = NULL; }
#line 24595 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 780: /* colid_type_list: ColId Typename  */
#line 1581 "third_party/libpg_query/grammar/statements/select.y"
                             {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24603 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 781: /* colid_type_list: colid_type_list ',' ColId Typename  */
#line 1584 "third_party/libpg_query/grammar/statements/select.y"
                                                 {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 24611 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 784: /* opt_Typename: Typename  */
#line 1591 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24617 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 785: /* opt_Typename: %empty  */
#line 1592 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.typnam) = NULL; }
#line 24623 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 786: /* Typename: SimpleTypename opt_array_bounds  */
#line 1595 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 24632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 787: /* Typename: SETOF SimpleTypename opt_array_bounds  */
#line 1600 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 24642 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 788: /* Typename: SimpleTypename ARRAY '[' Iconst ']'  */
#line 1607 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 24651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 789: /* Typename: SETOF SimpleTypename ARRAY '[' Iconst ']'  */
#line 1612 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 24661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 790: /* Typename: SimpleTypename ARRAY  */
#line 1618 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 24670 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 791: /* Typename: SETOF SimpleTypename ARRAY  */
#line 1623 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 24680 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 792: /* Typename: qualified_typename  */
#line 1629 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeNameFromNameList((yyvsp[0].list));
				}
#line 24688 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 793: /* Typename: RowOrStruct '(' colid_type_list ')' opt_array_bounds  */
#line 1633 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("struct");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
               }
#line 24699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 794: /* Typename: MAP '(' type_list ')' opt_array_bounds  */
#line 1640 "third_party/libpg_query/grammar/statements/select.y"
                {
				   (yyval.typnam) = SystemTypeName("map");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 24710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 795: /* Typename: UNION '(' colid_type_list ')' opt_array_bounds  */
#line 1647 "third_party/libpg_query/grammar/statements/select.y"
                                {
				   (yyval.typnam) = SystemTypeName("union");
				   (yyval.typnam)->arrayBounds = (yyvsp[0].list);
				   (yyval.typnam)->typmods = (yyvsp[-2].list);
				   (yyval.typnam)->location = (yylsp[-4]);
				}
#line 24721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 796: /* qualified_typename: IDENT '.' IDENT  */
#line 1656 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2(makeString((yyvsp[-2].str)), makeString((yyvsp[0].str))); }
#line 24727 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 797: /* qualified_typename: qualified_typename '.' IDENT  */
#line 1657 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 24733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 798: /* opt_array_bounds: opt_array_bounds '[' ']'  */
#line 1662 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 24739 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 799: /* opt_array_bounds: opt_array_bounds '[' Iconst ']'  */
#line 1664 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 24745 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 800: /* opt_array_bounds: %empty  */
#line 1666 "third_party/libpg_query/grammar/statements/select.y"
                                        {  (yyval.list) = NIL; }
#line 24751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 801: /* SimpleTypename: GenericType  */
#line 1670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 802: /* SimpleTypename: Numeric  */
#line 1671 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24763 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 803: /* SimpleTypename: Bit  */
#line 1672 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 804: /* SimpleTypename: Character  */
#line 1673 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24775 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 805: /* SimpleTypename: ConstDatetime  */
#line 1674 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24781 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 806: /* SimpleTypename: ConstInterval opt_interval  */
#line 1676 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 24790 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 807: /* SimpleTypename: ConstInterval '(' Iconst ')'  */
#line 1681 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 24800 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 808: /* ConstTypename: Numeric  */
#line 1700 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 809: /* ConstTypename: ConstBit  */
#line 1701 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24812 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 810: /* ConstTypename: ConstCharacter  */
#line 1702 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24818 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 811: /* ConstTypename: ConstDatetime  */
#line 1703 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.typnam) = (yyvsp[0].typnam); }
#line 24824 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 812: /* GenericType: type_name_token opt_type_modifiers  */
#line 1715 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24834 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 813: /* opt_type_modifiers: '(' opt_expr_list_opt_comma ')'  */
#line 1728 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 24840 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 814: /* opt_type_modifiers: %empty  */
#line 1729 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 24846 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 815: /* Numeric: INT_P  */
#line 1736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 816: /* Numeric: INTEGER  */
#line 1741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24864 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 817: /* Numeric: SMALLINT  */
#line 1746 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 818: /* Numeric: BIGINT  */
#line 1751 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24882 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 819: /* Numeric: REAL  */
#line 1756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 820: /* Numeric: FLOAT_P opt_float  */
#line 1761 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24900 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 821: /* Numeric: DOUBLE_P PRECISION  */
#line 1766 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24909 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 822: /* Numeric: DECIMAL_P opt_type_modifiers  */
#line 1771 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24919 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 823: /* Numeric: DEC opt_type_modifiers  */
#line 1777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24929 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 824: /* Numeric: NUMERIC opt_type_modifiers  */
#line 1783 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 24939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 825: /* Numeric: BOOLEAN_P  */
#line 1789 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 24948 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 826: /* opt_float: '(' Iconst ')'  */
#line 1796 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 24973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 827: /* opt_float: %empty  */
#line 1817 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 24981 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 828: /* Bit: BitWithLength  */
#line 1827 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 829: /* Bit: BitWithoutLength  */
#line 1831 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 24997 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 830: /* ConstBit: BitWithLength  */
#line 1839 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25005 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 831: /* ConstBit: BitWithoutLength  */
#line 1843 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25014 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 832: /* BitWithLength: BIT opt_varying '(' expr_list_opt_comma ')'  */
#line 1851 "third_party/libpg_query/grammar/statements/select.y"
                                {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25027 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 833: /* BitWithoutLength: BIT opt_varying  */
#line 1863 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25045 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 834: /* Character: CharacterWithLength  */
#line 1884 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25053 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 835: /* Character: CharacterWithoutLength  */
#line 1888 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25061 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 836: /* ConstCharacter: CharacterWithLength  */
#line 1894 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 25069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 837: /* ConstCharacter: CharacterWithoutLength  */
#line 1898 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 25084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 838: /* CharacterWithLength: character '(' Iconst ')'  */
#line 1911 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 25094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 839: /* CharacterWithoutLength: character  */
#line 1919 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25106 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 840: /* character: CHARACTER opt_varying  */
#line 1929 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25112 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 841: /* character: CHAR_P opt_varying  */
#line 1931 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25118 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 842: /* character: VARCHAR  */
#line 1933 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = "varchar"; }
#line 25124 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 843: /* character: NATIONAL CHARACTER opt_varying  */
#line 1935 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25130 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 844: /* character: NATIONAL CHAR_P opt_varying  */
#line 1937 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 845: /* character: NCHAR opt_varying  */
#line 1939 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 25142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 846: /* opt_varying: VARYING  */
#line 1943 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = true; }
#line 25148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 847: /* opt_varying: %empty  */
#line 1944 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 848: /* ConstDatetime: TIMESTAMP '(' Iconst ')' opt_timezone  */
#line 1952 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25167 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 849: /* ConstDatetime: TIMESTAMP opt_timezone  */
#line 1961 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25179 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 850: /* ConstDatetime: TIME '(' Iconst ')' opt_timezone  */
#line 1969 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 25192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 851: /* ConstDatetime: TIME opt_timezone  */
#line 1978 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 25204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 852: /* ConstInterval: INTERVAL  */
#line 1989 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 25213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 853: /* opt_timezone: WITH_LA TIME ZONE  */
#line 1996 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = true; }
#line 25219 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 854: /* opt_timezone: WITHOUT TIME ZONE  */
#line 1997 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.boolean) = false; }
#line 25225 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 855: /* opt_timezone: %empty  */
#line 1998 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 25231 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 872: /* opt_interval: year_keyword  */
#line 2027 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 25237 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 873: /* opt_interval: month_keyword  */
#line 2029 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 25243 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 874: /* opt_interval: day_keyword  */
#line 2031 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 25249 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 875: /* opt_interval: hour_keyword  */
#line 2033 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 25255 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 876: /* opt_interval: minute_keyword  */
#line 2035 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 25261 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 877: /* opt_interval: second_keyword  */
#line 2037 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 25267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 878: /* opt_interval: millisecond_keyword  */
#line 2039 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 25273 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 879: /* opt_interval: microsecond_keyword  */
#line 2041 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 25279 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 880: /* opt_interval: year_keyword TO month_keyword  */
#line 2043 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 25288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 881: /* opt_interval: day_keyword TO hour_keyword  */
#line 2048 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 25297 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 882: /* opt_interval: day_keyword TO minute_keyword  */
#line 2053 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25307 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 883: /* opt_interval: day_keyword TO second_keyword  */
#line 2059 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 884: /* opt_interval: hour_keyword TO minute_keyword  */
#line 2066 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 25327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 885: /* opt_interval: hour_keyword TO second_keyword  */
#line 2071 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25337 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 886: /* opt_interval: minute_keyword TO second_keyword  */
#line 2077 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 25346 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 887: /* opt_interval: %empty  */
#line 2082 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 25352 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 888: /* a_expr: c_expr  */
#line 2113 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 25358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 889: /* a_expr: a_expr TYPECAST Typename  */
#line 2116 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 25364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 890: /* a_expr: a_expr COLLATE any_name  */
#line 2118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 25376 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 891: /* a_expr: a_expr AT TIME ZONE a_expr  */
#line 2126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 25386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 892: /* a_expr: '+' a_expr  */
#line 2141 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25392 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 893: /* a_expr: '-' a_expr  */
#line 2143 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 25398 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 894: /* a_expr: a_expr '+' a_expr  */
#line 2145 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25404 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 895: /* a_expr: a_expr '-' a_expr  */
#line 2147 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 896: /* a_expr: a_expr '*' a_expr  */
#line 2149 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25416 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 897: /* a_expr: a_expr '/' a_expr  */
#line 2151 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25422 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 898: /* a_expr: a_expr INTEGER_DIVISION a_expr  */
#line 2153 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25428 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 899: /* a_expr: a_expr '%' a_expr  */
#line 2155 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 900: /* a_expr: a_expr '^' a_expr  */
#line 2157 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25440 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 901: /* a_expr: a_expr POWER_OF a_expr  */
#line 2159 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25446 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 902: /* a_expr: a_expr '<' a_expr  */
#line 2161 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25452 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 903: /* a_expr: a_expr '>' a_expr  */
#line 2163 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 904: /* a_expr: a_expr '=' a_expr  */
#line 2165 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25464 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 905: /* a_expr: a_expr LESS_EQUALS a_expr  */
#line 2167 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25470 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 906: /* a_expr: a_expr GREATER_EQUALS a_expr  */
#line 2169 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25476 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 907: /* a_expr: a_expr NOT_EQUALS a_expr  */
#line 2171 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 908: /* a_expr: a_expr qual_Op a_expr  */
#line 2174 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 909: /* a_expr: qual_Op a_expr  */
#line 2176 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 25494 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 910: /* a_expr: a_expr qual_Op  */
#line 2178 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 25500 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 911: /* a_expr: a_expr AND a_expr  */
#line 2181 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 912: /* a_expr: a_expr OR a_expr  */
#line 2183 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 25512 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 913: /* a_expr: NOT a_expr  */
#line 2185 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 914: /* a_expr: NOT_LA a_expr  */
#line 2187 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 25524 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 915: /* a_expr: a_expr GLOB a_expr  */
#line 2189 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25533 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 916: /* a_expr: a_expr LIKE a_expr  */
#line 2194 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25542 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 917: /* a_expr: a_expr LIKE a_expr ESCAPE a_expr  */
#line 2199 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25553 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 918: /* a_expr: a_expr NOT_LA LIKE a_expr  */
#line 2206 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25562 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 919: /* a_expr: a_expr NOT_LA LIKE a_expr ESCAPE a_expr  */
#line 2211 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25573 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 920: /* a_expr: a_expr ILIKE a_expr  */
#line 2218 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 25582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 921: /* a_expr: a_expr ILIKE a_expr ESCAPE a_expr  */
#line 2223 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 25593 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 922: /* a_expr: a_expr NOT_LA ILIKE a_expr  */
#line 2230 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 25602 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 923: /* a_expr: a_expr NOT_LA ILIKE a_expr ESCAPE a_expr  */
#line 2235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 25613 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 924: /* a_expr: a_expr SIMILAR TO a_expr  */
#line 2243 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 25625 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 925: /* a_expr: a_expr SIMILAR TO a_expr ESCAPE a_expr  */
#line 2251 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 25637 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 926: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr  */
#line 2259 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 25649 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 927: /* a_expr: a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr  */
#line 2267 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 25661 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 928: /* a_expr: a_expr IS NULL_P  */
#line 2285 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25673 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 929: /* a_expr: a_expr ISNULL  */
#line 2293 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 930: /* a_expr: a_expr IS NOT NULL_P  */
#line 2301 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25697 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 931: /* a_expr: a_expr NOT NULL_P  */
#line 2309 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 25709 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 932: /* a_expr: a_expr NOTNULL  */
#line 2317 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 25721 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 933: /* a_expr: a_expr LAMBDA_ARROW a_expr  */
#line 2325 "third_party/libpg_query/grammar/statements/select.y"
                        {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->lhs = (yyvsp[-2].node);
				n->rhs = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 25733 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 934: /* a_expr: a_expr DOUBLE_ARROW a_expr  */
#line 2333 "third_party/libpg_query/grammar/statements/select.y"
                        {
							(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "->>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
			}
#line 25741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 935: /* a_expr: row OVERLAPS row  */
#line 2337 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 25761 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 936: /* a_expr: a_expr IS TRUE_P  */
#line 2353 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25773 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 937: /* a_expr: a_expr IS NOT TRUE_P  */
#line 2361 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25785 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 938: /* a_expr: a_expr IS FALSE_P  */
#line 2369 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25797 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 939: /* a_expr: a_expr IS NOT FALSE_P  */
#line 2377 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 940: /* a_expr: a_expr IS UNKNOWN  */
#line 2385 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 25821 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 941: /* a_expr: a_expr IS NOT UNKNOWN  */
#line 2393 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 25833 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 942: /* a_expr: a_expr IS DISTINCT FROM a_expr  */
#line 2401 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 25841 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 943: /* a_expr: a_expr IS NOT DISTINCT FROM a_expr  */
#line 2405 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 25849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 944: /* a_expr: a_expr IS OF '(' type_list ')'  */
#line 2409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 25857 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 945: /* a_expr: a_expr IS NOT OF '(' type_list ')'  */
#line 2413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 25865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 946: /* a_expr: a_expr BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2417 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25877 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 947: /* a_expr: a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr  */
#line 2425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25889 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 948: /* a_expr: a_expr BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2433 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 25901 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 949: /* a_expr: a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr  */
#line 2441 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 25913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 950: /* a_expr: a_expr IN_P in_expr  */
#line 2449 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 25937 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 951: /* a_expr: a_expr NOT_LA IN_P in_expr  */
#line 2469 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 25963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 952: /* a_expr: a_expr subquery_Op sub_type select_with_parens  */
#line 2491 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 25978 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 953: /* a_expr: a_expr subquery_Op sub_type '(' a_expr ')'  */
#line 2502 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 25989 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 954: /* a_expr: DEFAULT  */
#line 2509 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26007 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 955: /* a_expr: COLUMNS '(' a_expr ')'  */
#line 2523 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->expr = (yyvsp[-1].node);
					star->columns = true;
					star->location = (yylsp[-3]);
					(yyval.node) = (PGNode *) star;
				}
#line 26019 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 956: /* a_expr: '*' opt_except_list opt_replace_list  */
#line 2531 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) star;
				}
#line 26031 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 957: /* a_expr: ColId '.' '*' opt_except_list opt_replace_list  */
#line 2539 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAStar *star = makeNode(PGAStar);
					star->relation = (yyvsp[-4].str);
					star->except_list = (yyvsp[-1].list);
					star->replace_list = (yyvsp[0].list);
					star->location = (yylsp[-4]);
					(yyval.node) = (PGNode *) star;
				}
#line 26044 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 958: /* b_expr: c_expr  */
#line 2559 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26050 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 959: /* b_expr: b_expr TYPECAST Typename  */
#line 2561 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 26056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 960: /* b_expr: '+' b_expr  */
#line 2563 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 961: /* b_expr: '-' b_expr  */
#line 2565 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 26068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 962: /* b_expr: b_expr '+' b_expr  */
#line 2567 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26074 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 963: /* b_expr: b_expr '-' b_expr  */
#line 2569 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26080 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 964: /* b_expr: b_expr '*' b_expr  */
#line 2571 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26086 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 965: /* b_expr: b_expr '/' b_expr  */
#line 2573 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26092 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 966: /* b_expr: b_expr INTEGER_DIVISION b_expr  */
#line 2575 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "//", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26098 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 967: /* b_expr: b_expr '%' b_expr  */
#line 2577 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26104 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 968: /* b_expr: b_expr '^' b_expr  */
#line 2579 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26110 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 969: /* b_expr: b_expr POWER_OF b_expr  */
#line 2581 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "**", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26116 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 970: /* b_expr: b_expr '<' b_expr  */
#line 2583 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26122 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 971: /* b_expr: b_expr '>' b_expr  */
#line 2585 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26128 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 972: /* b_expr: b_expr '=' b_expr  */
#line 2587 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26134 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 973: /* b_expr: b_expr LESS_EQUALS b_expr  */
#line 2589 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26140 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 974: /* b_expr: b_expr GREATER_EQUALS b_expr  */
#line 2591 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26146 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 975: /* b_expr: b_expr NOT_EQUALS b_expr  */
#line 2593 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26152 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 976: /* b_expr: b_expr qual_Op b_expr  */
#line 2595 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 26158 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 977: /* b_expr: qual_Op b_expr  */
#line 2597 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 26164 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 978: /* b_expr: b_expr qual_Op  */
#line 2599 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 26170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 979: /* b_expr: b_expr IS DISTINCT FROM b_expr  */
#line 2601 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 26178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 980: /* b_expr: b_expr IS NOT DISTINCT FROM b_expr  */
#line 2605 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 26186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 981: /* b_expr: b_expr IS OF '(' type_list ')'  */
#line 2609 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26194 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 982: /* b_expr: b_expr IS NOT OF '(' type_list ')'  */
#line 2613 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 26202 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 984: /* c_expr: row  */
#line 2627 "third_party/libpg_query/grammar/statements/select.y"
                              {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 26211 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 985: /* c_expr: indirection_expr opt_extended_indirection  */
#line 2632 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) (yyvsp[-1].node);
				}
#line 26227 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 986: /* d_expr: columnref  */
#line 2645 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26233 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 987: /* d_expr: AexprConst  */
#line 2646 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26239 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 988: /* d_expr: '#' ICONST  */
#line 2648 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 26250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 989: /* d_expr: '$' ColLabel  */
#line 2655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNamedParamRef((yyvsp[0].str), (yylsp[-1]));
				}
#line 26258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 990: /* d_expr: '[' opt_expr_list_opt_comma ']'  */
#line 2658 "third_party/libpg_query/grammar/statements/select.y"
                                                          {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 26267 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 991: /* d_expr: list_comprehension  */
#line 2662 "third_party/libpg_query/grammar/statements/select.y"
                                             {
				(yyval.node) = (yyvsp[0].node);
			}
#line 26275 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 992: /* d_expr: ARRAY select_with_parens  */
#line 2666 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_ARRAY_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NULL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26290 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 993: /* d_expr: ARRAY '[' opt_expr_list_opt_comma ']'  */
#line 2676 "third_party/libpg_query/grammar/statements/select.y"
                                                                {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 26300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 994: /* d_expr: case_expr  */
#line 2682 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 995: /* d_expr: select_with_parens  */
#line 2684 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 26321 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 996: /* d_expr: select_with_parens indirection  */
#line 2695 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 26349 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 997: /* d_expr: EXISTS select_with_parens  */
#line 2719 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 26364 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 998: /* d_expr: grouping_or_grouping_id '(' expr_list_opt_comma ')'  */
#line 2730 "third_party/libpg_query/grammar/statements/select.y"
                          {
				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
				  g->args = (yyvsp[-1].list);
				  g->location = (yylsp[-3]);
				  (yyval.node) = (PGNode *)g;
			  }
#line 26375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 999: /* indirection_expr: '?'  */
#line 2741 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeParamRef(0, (yylsp[0]));
				}
#line 26383 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1000: /* indirection_expr: PARAM  */
#line 2745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[0].ival);
					p->location = (yylsp[0]);
					(yyval.node) = (PGNode *) p;
				}
#line 26394 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1001: /* indirection_expr: '(' a_expr ')'  */
#line 2752 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[-1].node);
				}
#line 26402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1002: /* indirection_expr: struct_expr  */
#line 2756 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1003: /* indirection_expr: MAP '{' opt_map_arguments_opt_comma '}'  */
#line 2760 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGList *key_list = NULL;
					PGList *value_list = NULL;
					PGListCell *lc;
					PGList *entry_list = (yyvsp[-1].list);
					foreach(lc, entry_list)
					{
						PGList *l = (PGList *) lc->data.ptr_value;
						key_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);
						value_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);
					}
					PGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName("list_value"), key_list, (yylsp[-1]));
					PGNode *values = (PGNode *) makeFuncCall(SystemFuncName("list_value"), value_list, (yylsp[-1]));
					PGFuncCall *f = makeFuncCall(SystemFuncName("map"), list_make2(keys, values), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26431 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1004: /* indirection_expr: func_expr  */
#line 2777 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 26439 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1005: /* struct_expr: '{' dict_arguments_opt_comma '}'  */
#line 2785 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *f = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
					(yyval.node) = (PGNode *) f;
				}
#line 26448 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1006: /* func_application: func_name '(' ')'  */
#line 2794 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 26456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1007: /* func_application: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2798 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-3].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26467 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1008: /* func_application: func_name '(' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2805 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), list_make1((yyvsp[-3].node)), (yylsp[-6]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26479 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1009: /* func_application: func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause opt_ignore_nulls ')'  */
#line 2813 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-8].list), lappend((yyvsp[-6].list), (yyvsp[-3].node)), (yylsp[-8]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					(yyval.node) = (PGNode *)n;
				}
#line 26491 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1010: /* func_application: func_name '(' ALL func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2821 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 26506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1011: /* func_application: func_name '(' DISTINCT func_arg_list opt_sort_clause opt_ignore_nulls ')'  */
#line 2832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = makeFuncCall((yyvsp[-6].list), (yyvsp[-3].list), (yylsp[-6]));
					n->agg_order = (yyvsp[-2].list);
					n->agg_ignore_nulls = (yyvsp[-1].boolean);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 26518 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1012: /* func_expr: func_application within_group_clause filter_clause export_clause over_clause  */
#line 2852 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-4].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-3].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-3]))));
						n->agg_order = (yyvsp[-3].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-2].node);
					n->export_state = (yyvsp[-1].boolean);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 26558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1013: /* func_expr: func_expr_common_subexpr  */
#line 2888 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 26564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1014: /* func_expr_windowless: func_application  */
#line 2898 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 26570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1015: /* func_expr_windowless: func_expr_common_subexpr  */
#line 2899 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 26576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1016: /* func_expr_common_subexpr: COLLATION FOR '(' a_expr ')'  */
#line 2907 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 26586 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1017: /* func_expr_common_subexpr: CAST '(' a_expr AS Typename ')'  */
#line 2913 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 26592 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1018: /* func_expr_common_subexpr: TRY_CAST '(' a_expr AS Typename ')'  */
#line 2915 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 26598 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1019: /* func_expr_common_subexpr: EXTRACT '(' extract_list ')'  */
#line 2917 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1020: /* func_expr_common_subexpr: OVERLAY '(' overlay_list ')'  */
#line 2921 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26619 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1021: /* func_expr_common_subexpr: POSITION '(' position_list ')'  */
#line 2930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26628 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1022: /* func_expr_common_subexpr: SUBSTRING '(' substr_list ')'  */
#line 2935 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26639 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1023: /* func_expr_common_subexpr: TREAT '(' a_expr AS Typename ')'  */
#line 2942 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 26658 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1024: /* func_expr_common_subexpr: TRIM '(' BOTH trim_list ')'  */
#line 2957 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1025: /* func_expr_common_subexpr: TRIM '(' LEADING trim_list ')'  */
#line 2964 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1026: /* func_expr_common_subexpr: TRIM '(' TRAILING trim_list ')'  */
#line 2968 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 26685 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1027: /* func_expr_common_subexpr: TRIM '(' trim_list ')'  */
#line 2972 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 26693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1028: /* func_expr_common_subexpr: NULLIF '(' a_expr ',' a_expr ')'  */
#line 2976 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 26701 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1029: /* func_expr_common_subexpr: COALESCE '(' expr_list_opt_comma ')'  */
#line 2980 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 26712 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1030: /* list_comprehension: '[' a_expr FOR ColId IN_P a_expr ']'  */
#line 2990 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-3].str), NIL, (yylsp[-3]), yyscanner);
					lambda->rhs = (yyvsp[-5].node);
					lambda->location = (yylsp[-6]);
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2((yyvsp[-1].node), lambda), (yylsp[-6]));
					(yyval.node) = (PGNode *) n;
				}
#line 26725 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1031: /* list_comprehension: '[' a_expr FOR ColId IN_P c_expr IF_P a_expr ']'  */
#line 2999 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGLambdaFunction *lambda = makeNode(PGLambdaFunction);
					lambda->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda->rhs = (yyvsp[-7].node);
					lambda->location = (yylsp[-8]);

					PGLambdaFunction *lambda_filter = makeNode(PGLambdaFunction);
					lambda_filter->lhs = makeColumnRef((yyvsp[-5].str), NIL, (yylsp[-5]), yyscanner);
					lambda_filter->rhs = (yyvsp[-1].node);
					lambda_filter->location = (yylsp[-1]);
					PGFuncCall *filter = makeFuncCall(SystemFuncName("list_filter"), list_make2((yyvsp[-3].node), lambda_filter), (yylsp[-8]));
					PGFuncCall *n = makeFuncCall(SystemFuncName("list_apply"), list_make2(filter, lambda), (yylsp[-8]));
					(yyval.node) = (PGNode *) n;
				}
#line 26744 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1032: /* within_group_clause: WITHIN GROUP_P '(' sort_clause ')'  */
#line 3020 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 26750 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1033: /* within_group_clause: %empty  */
#line 3021 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1034: /* filter_clause: FILTER '(' WHERE a_expr ')'  */
#line 3025 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26762 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1035: /* filter_clause: FILTER '(' a_expr ')'  */
#line 3026 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[-1].node); }
#line 26768 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1036: /* filter_clause: %empty  */
#line 3027 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 26774 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1037: /* export_clause: EXPORT_STATE  */
#line 3031 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.boolean) = true; }
#line 26780 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1038: /* export_clause: %empty  */
#line 3032 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.boolean) = false; }
#line 26786 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1039: /* window_clause: WINDOW window_definition_list  */
#line 3039 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26792 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1040: /* window_clause: %empty  */
#line 3040 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1041: /* window_definition_list: window_definition  */
#line 3044 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 26804 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1042: /* window_definition_list: window_definition_list ',' window_definition  */
#line 3046 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 26810 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1043: /* window_definition: ColId AS window_specification  */
#line 3051 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 26820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1044: /* over_clause: OVER window_specification  */
#line 3059 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = (yyvsp[0].windef); }
#line 26826 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1045: /* over_clause: OVER ColId  */
#line 3061 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 26843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1046: /* over_clause: %empty  */
#line 3074 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.windef) = NULL; }
#line 26849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1047: /* window_specification: '(' opt_existing_window_name opt_partition_clause opt_sort_clause opt_frame_clause ')'  */
#line 3079 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 26867 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1048: /* opt_existing_window_name: ColId  */
#line 3104 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 26873 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1049: /* opt_existing_window_name: %empty  */
#line 3105 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = NULL; }
#line 26879 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1050: /* opt_partition_clause: PARTITION BY expr_list  */
#line 3108 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = (yyvsp[0].list); }
#line 26885 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1051: /* opt_partition_clause: %empty  */
#line 3109 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 26891 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1052: /* opt_frame_clause: RANGE frame_extent opt_window_exclusion_clause  */
#line 3118 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26903 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1053: /* opt_frame_clause: ROWS frame_extent opt_window_exclusion_clause  */
#line 3126 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26915 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1054: /* opt_frame_clause: GROUPS frame_extent opt_window_exclusion_clause  */
#line 3134 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[-1].windef);

					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_GROUPS;
					n->frameOptions |= (yyvsp[0].ival);
					(yyval.windef) = n;
				}
#line 26927 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1055: /* opt_frame_clause: %empty  */
#line 3142 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 26940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1056: /* frame_extent: frame_bound  */
#line 3153 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = (yyvsp[0].windef);

					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 26962 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1057: /* frame_extent: BETWEEN frame_bound AND frame_bound  */
#line 3171 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);

					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_OFFSET_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_OFFSET_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_OFFSET_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 27004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1058: /* frame_bound: UNBOUNDED PRECEDING  */
#line 3217 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27017 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1059: /* frame_bound: UNBOUNDED FOLLOWING  */
#line 3226 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1060: /* frame_bound: CURRENT_P ROW  */
#line 3235 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27043 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1061: /* frame_bound: a_expr PRECEDING  */
#line 3244 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27056 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1062: /* frame_bound: a_expr FOLLOWING  */
#line 3253 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGWindowDef *n = makeNode(PGWindowDef);

					n->frameOptions = FRAMEOPTION_START_OFFSET_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 27069 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1063: /* opt_window_exclusion_clause: EXCLUDE CURRENT_P ROW  */
#line 3264 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.ival) = FRAMEOPTION_EXCLUDE_CURRENT_ROW; }
#line 27075 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1064: /* opt_window_exclusion_clause: EXCLUDE GROUP_P  */
#line 3265 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_GROUP; }
#line 27081 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1065: /* opt_window_exclusion_clause: EXCLUDE TIES  */
#line 3266 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = FRAMEOPTION_EXCLUDE_TIES; }
#line 27087 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1066: /* opt_window_exclusion_clause: EXCLUDE NO OTHERS  */
#line 3267 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.ival) = 0; }
#line 27093 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1067: /* opt_window_exclusion_clause: %empty  */
#line 3268 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.ival) = 0; }
#line 27099 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1068: /* qualified_row: ROW '(' expr_list_opt_comma ')'  */
#line 3282 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1069: /* qualified_row: ROW '(' ')'  */
#line 3283 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 27111 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1070: /* row: qualified_row  */
#line 3286 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list);}
#line 27117 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1071: /* row: '(' expr_list ',' a_expr ')'  */
#line 3287 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 27123 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1072: /* dict_arg: ColIdOrString ':' a_expr  */
#line 3291 "third_party/libpg_query/grammar/statements/select.y"
                                                                                {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 27136 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1073: /* dict_arguments: dict_arg  */
#line 3301 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27142 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1074: /* dict_arguments: dict_arguments ',' dict_arg  */
#line 3302 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 27148 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1075: /* dict_arguments_opt_comma: dict_arguments  */
#line 3306 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27154 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1076: /* dict_arguments_opt_comma: dict_arguments ','  */
#line 3307 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 27160 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1077: /* map_arg: a_expr ':' a_expr  */
#line 3312 "third_party/libpg_query/grammar/statements/select.y"
                        {
				(yyval.list) = list_make2((yyvsp[-2].node), (yyvsp[0].node));
			}
#line 27168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1078: /* map_arguments: map_arg  */
#line 3318 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 27174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1079: /* map_arguments: map_arguments ',' map_arg  */
#line 3319 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 27180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1080: /* map_arguments_opt_comma: map_arguments  */
#line 3324 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1081: /* map_arguments_opt_comma: map_arguments ','  */
#line 3325 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1082: /* opt_map_arguments_opt_comma: map_arguments_opt_comma  */
#line 3330 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1083: /* opt_map_arguments_opt_comma: %empty  */
#line 3331 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NULL; }
#line 27204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1084: /* sub_type: ANY  */
#line 3334 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27210 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1085: /* sub_type: SOME  */
#line 3335 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 27216 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1086: /* sub_type: ALL  */
#line 3336 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 27222 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1087: /* all_Op: Op  */
#line 3339 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27228 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1088: /* all_Op: MathOp  */
#line 3340 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 27234 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1089: /* MathOp: '+'  */
#line 3343 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "+"; }
#line 27240 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1090: /* MathOp: '-'  */
#line 3344 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "-"; }
#line 27246 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1091: /* MathOp: '*'  */
#line 3345 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "*"; }
#line 27252 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1092: /* MathOp: '/'  */
#line 3346 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "/"; }
#line 27258 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1093: /* MathOp: INTEGER_DIVISION  */
#line 3347 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "//"; }
#line 27264 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1094: /* MathOp: '%'  */
#line 3348 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "%"; }
#line 27270 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1095: /* MathOp: '^'  */
#line 3349 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "^"; }
#line 27276 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1096: /* MathOp: POWER_OF  */
#line 3350 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "**"; }
#line 27282 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1097: /* MathOp: '<'  */
#line 3351 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "<"; }
#line 27288 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1098: /* MathOp: '>'  */
#line 3352 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = ">"; }
#line 27294 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1099: /* MathOp: '='  */
#line 3353 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.conststr) = "="; }
#line 27300 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1100: /* MathOp: LESS_EQUALS  */
#line 3354 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<="; }
#line 27306 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1101: /* MathOp: GREATER_EQUALS  */
#line 3355 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = ">="; }
#line 27312 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1102: /* MathOp: NOT_EQUALS  */
#line 3356 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.conststr) = "<>"; }
#line 27318 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1103: /* qual_Op: Op  */
#line 3360 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27324 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1104: /* qual_Op: OPERATOR '(' any_operator ')'  */
#line 3362 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27330 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1105: /* qual_all_Op: all_Op  */
#line 3367 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27336 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1106: /* qual_all_Op: OPERATOR '(' any_operator ')'  */
#line 3369 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27342 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1107: /* subquery_Op: all_Op  */
#line 3374 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27348 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1108: /* subquery_Op: OPERATOR '(' any_operator ')'  */
#line 3376 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27354 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1109: /* subquery_Op: LIKE  */
#line 3378 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~")); }
#line 27360 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1110: /* subquery_Op: NOT_LA LIKE  */
#line 3380 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~")); }
#line 27366 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1111: /* subquery_Op: GLOB  */
#line 3382 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~~")); }
#line 27372 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1112: /* subquery_Op: NOT_LA GLOB  */
#line 3384 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~~")); }
#line 27378 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1113: /* subquery_Op: ILIKE  */
#line 3386 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("~~*")); }
#line 27384 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1114: /* subquery_Op: NOT_LA ILIKE  */
#line 3388 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString("!~~*")); }
#line 27390 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1115: /* any_operator: all_Op  */
#line 3402 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 27396 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1116: /* any_operator: ColId '.' any_operator  */
#line 3404 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 27402 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1117: /* c_expr_list: c_expr  */
#line 3409 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27410 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1118: /* c_expr_list: c_expr_list ',' c_expr  */
#line 3413 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1119: /* c_expr_list_opt_comma: c_expr_list  */
#line 3420 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27426 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1120: /* c_expr_list_opt_comma: c_expr_list ','  */
#line 3425 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27434 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1121: /* expr_list: a_expr  */
#line 3431 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27442 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1122: /* expr_list: expr_list ',' a_expr  */
#line 3435 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1123: /* expr_list_opt_comma: expr_list  */
#line 3442 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27458 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1124: /* expr_list_opt_comma: expr_list ','  */
#line 3447 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[-1].list);
				}
#line 27466 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1125: /* opt_expr_list_opt_comma: expr_list_opt_comma  */
#line 3454 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1126: /* opt_expr_list_opt_comma: %empty  */
#line 3458 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = NULL;
				}
#line 27482 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1127: /* func_arg_list: func_arg_expr  */
#line 3467 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 27490 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1128: /* func_arg_list: func_arg_list ',' func_arg_expr  */
#line 3471 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 27498 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1129: /* func_arg_expr: a_expr  */
#line 3477 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = (yyvsp[0].node);
				}
#line 27506 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1130: /* func_arg_expr: param_name COLON_EQUALS a_expr  */
#line 3481 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27519 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1131: /* func_arg_expr: param_name EQUALS_GREATER a_expr  */
#line 3490 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 27532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1132: /* type_list: Typename  */
#line 3500 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 27538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1133: /* type_list: type_list ',' Typename  */
#line 3501 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 27544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1134: /* extract_list: extract_arg FROM a_expr  */
#line 3506 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 27552 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1135: /* extract_list: %empty  */
#line 3509 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1136: /* extract_arg: IDENT  */
#line 3516 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27564 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1137: /* extract_arg: year_keyword  */
#line 3517 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "year"; }
#line 27570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1138: /* extract_arg: month_keyword  */
#line 3518 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "month"; }
#line 27576 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1139: /* extract_arg: day_keyword  */
#line 3519 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "day"; }
#line 27582 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1140: /* extract_arg: hour_keyword  */
#line 3520 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "hour"; }
#line 27588 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1141: /* extract_arg: minute_keyword  */
#line 3521 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "minute"; }
#line 27594 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1142: /* extract_arg: second_keyword  */
#line 3522 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.str) = (char*) "second"; }
#line 27600 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1143: /* extract_arg: millisecond_keyword  */
#line 3523 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "millisecond"; }
#line 27606 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1144: /* extract_arg: microsecond_keyword  */
#line 3524 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (char*) "microsecond"; }
#line 27612 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1145: /* extract_arg: Sconst  */
#line 3525 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 27618 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1146: /* overlay_list: a_expr overlay_placing substr_from substr_for  */
#line 3536 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27626 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1147: /* overlay_list: a_expr overlay_placing substr_from  */
#line 3540 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27634 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1148: /* overlay_placing: PLACING a_expr  */
#line 3547 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 27640 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1149: /* position_list: b_expr IN_P b_expr  */
#line 3553 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 27646 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1150: /* position_list: %empty  */
#line 3554 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27652 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1151: /* substr_list: a_expr substr_from substr_for  */
#line 3571 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27660 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1152: /* substr_list: a_expr substr_for substr_from  */
#line 3575 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 27669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1153: /* substr_list: a_expr substr_from  */
#line 3580 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 27677 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1154: /* substr_list: a_expr substr_for  */
#line 3584 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 27696 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1155: /* substr_list: expr_list  */
#line 3599 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.list) = (yyvsp[0].list);
				}
#line 27704 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1156: /* substr_list: %empty  */
#line 3603 "third_party/libpg_query/grammar/statements/select.y"
                                { (yyval.list) = NIL; }
#line 27710 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1157: /* substr_from: FROM a_expr  */
#line 3607 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27716 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1158: /* substr_for: FOR a_expr  */
#line 3610 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27722 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1159: /* trim_list: a_expr FROM expr_list_opt_comma  */
#line 3613 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 27728 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1160: /* trim_list: FROM expr_list_opt_comma  */
#line 3614 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 27734 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1161: /* trim_list: expr_list_opt_comma  */
#line 3615 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 27740 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1162: /* in_expr: select_with_parens  */
#line 3619 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 27751 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1163: /* in_expr: '(' expr_list_opt_comma ')'  */
#line 3625 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 27757 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1164: /* case_expr: CASE case_arg when_clause_list case_default END_P  */
#line 3636 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 27771 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1165: /* when_clause_list: when_clause  */
#line 3649 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 27777 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1166: /* when_clause_list: when_clause_list when_clause  */
#line 3650 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27783 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1167: /* when_clause: WHEN a_expr THEN a_expr  */
#line 3655 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 27795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1168: /* case_default: ELSE a_expr  */
#line 3665 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27801 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1169: /* case_default: %empty  */
#line 3666 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27807 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1170: /* case_arg: a_expr  */
#line 3669 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 27813 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1171: /* case_arg: %empty  */
#line 3670 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27819 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1172: /* columnref: ColId  */
#line 3674 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 27827 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1173: /* columnref: ColId indirection  */
#line 3678 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 27835 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1174: /* indirection_el: '[' a_expr ']'  */
#line 3685 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27847 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1175: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3693 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1176: /* indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3700 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
				    	PGAIndices *ai = makeNode(PGAIndices);
				    	ai->is_slice = true;
				    	ai->lidx = (yyvsp[-5].node);
				    	ai->uidx = (yyvsp[-3].node);
				    	ai->step = (yyvsp[-1].node);
				    	(yyval.node) = (PGNode *) ai;
				}
#line 27872 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1177: /* indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3708 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27884 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1178: /* opt_slice_bound: a_expr  */
#line 3718 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = (yyvsp[0].node); }
#line 27890 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1179: /* opt_slice_bound: %empty  */
#line 3719 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.node) = NULL; }
#line 27896 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1180: /* opt_indirection: %empty  */
#line 3724 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 27902 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1181: /* opt_indirection: opt_indirection indirection_el  */
#line 3725 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 27908 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1182: /* opt_func_arguments: %empty  */
#line 3729 "third_party/libpg_query/grammar/statements/select.y"
                                                { (yyval.list) = NULL; }
#line 27914 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1183: /* opt_func_arguments: '(' ')'  */
#line 3730 "third_party/libpg_query/grammar/statements/select.y"
                                                        { (yyval.list) = list_make1(NULL); }
#line 27920 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1184: /* opt_func_arguments: '(' func_arg_list ')'  */
#line 3731 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = (yyvsp[-1].list); }
#line 27926 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1185: /* extended_indirection_el: '.' attr_name opt_func_arguments  */
#line 3736 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list)) {
						PGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[-1].str))), (yyvsp[0].list)->head->data.ptr_value ? (yyvsp[0].list) : NULL, (yylsp[-1]));
						(yyval.node) = (PGNode *) n;
					} else {
						(yyval.node) = (PGNode *) makeString((yyvsp[-1].str));
					}
				}
#line 27939 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1186: /* extended_indirection_el: '[' a_expr ']'  */
#line 3745 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27951 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1187: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3753 "third_party/libpg_query/grammar/statements/select.y"
                                {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27963 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1188: /* extended_indirection_el: '[' opt_slice_bound ':' opt_slice_bound ':' opt_slice_bound ']'  */
#line 3760 "third_party/libpg_query/grammar/statements/select.y"
                                                                                          {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->uidx = (yyvsp[-3].node);
					ai->step = (yyvsp[-1].node);
                 			(yyval.node) = (PGNode *) ai;
                		}
#line 27976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1189: /* extended_indirection_el: '[' opt_slice_bound ':' '-' ':' opt_slice_bound ']'  */
#line 3769 "third_party/libpg_query/grammar/statements/select.y"
                                                                              {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-5].node);
					ai->step = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 27988 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1190: /* opt_extended_indirection: %empty  */
#line 3784 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                                { (yyval.list) = NIL; }
#line 27994 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1191: /* opt_extended_indirection: opt_extended_indirection extended_indirection_el  */
#line 3785 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 28000 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1194: /* opt_target_list_opt_comma: target_list_opt_comma  */
#line 3801 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28006 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1195: /* opt_target_list_opt_comma: %empty  */
#line 3802 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = NIL; }
#line 28012 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1196: /* target_list: target_el  */
#line 3806 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 28018 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1197: /* target_list: target_list ',' target_el  */
#line 3807 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 28024 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1198: /* target_list_opt_comma: target_list  */
#line 3811 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1199: /* target_list_opt_comma: target_list ','  */
#line 3812 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1200: /* target_el: a_expr AS ColLabelOrString  */
#line 3816 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 28048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1201: /* target_el: a_expr IDENT  */
#line 3832 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 28060 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1202: /* target_el: a_expr  */
#line 3840 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 28072 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1203: /* except_list: EXCLUDE '(' name_list_opt_comma ')'  */
#line 3849 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1204: /* except_list: EXCLUDE ColId  */
#line 3850 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28084 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1205: /* opt_except_list: except_list  */
#line 3853 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28090 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1206: /* opt_except_list: %empty  */
#line 3854 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28096 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1207: /* replace_list_el: a_expr AS ColId  */
#line 3857 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = list_make2((yyvsp[-2].node), makeString((yyvsp[0].str))); }
#line 28102 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1208: /* replace_list: replace_list_el  */
#line 3861 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28108 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1209: /* replace_list: replace_list ',' replace_list_el  */
#line 3862 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 28114 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1210: /* replace_list_opt_comma: replace_list  */
#line 3866 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1211: /* replace_list_opt_comma: replace_list ','  */
#line 3867 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28126 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1212: /* opt_replace_list: REPLACE '(' replace_list_opt_comma ')'  */
#line 3870 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1213: /* opt_replace_list: REPLACE replace_list_el  */
#line 3871 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 28138 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1214: /* opt_replace_list: %empty  */
#line 3872 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NULL; }
#line 28144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1215: /* qualified_name_list: qualified_name  */
#line 3882 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 28150 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1216: /* qualified_name_list: qualified_name_list ',' qualified_name  */
#line 3883 "third_party/libpg_query/grammar/statements/select.y"
                                                                 { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 28156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1217: /* name_list: name  */
#line 3888 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1218: /* name_list: name_list ',' name  */
#line 3890 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28168 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1219: /* name_list_opt_comma: name_list  */
#line 3895 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[0].list); }
#line 28174 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1220: /* name_list_opt_comma: name_list ','  */
#line 3896 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28180 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1221: /* name_list_opt_comma_opt_bracket: name_list_opt_comma  */
#line 3900 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28186 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1222: /* name_list_opt_comma_opt_bracket: '(' name_list_opt_comma ')'  */
#line 3901 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28192 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1223: /* name: ColIdOrString  */
#line 3904 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28198 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1224: /* func_name: function_name_token  */
#line 3916 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28204 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1225: /* func_name: ColId indirection  */
#line 3919 "third_party/libpg_query/grammar/statements/select.y"
                                        {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 28213 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1226: /* AexprConst: Iconst  */
#line 3930 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 28221 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1227: /* AexprConst: FCONST  */
#line 3934 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28229 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1228: /* AexprConst: Sconst opt_indirection  */
#line 3938 "third_party/libpg_query/grammar/statements/select.y"
                                {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 28245 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1229: /* AexprConst: BCONST  */
#line 3950 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28253 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1230: /* AexprConst: XCONST  */
#line 3954 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 28266 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1231: /* AexprConst: func_name Sconst  */
#line 3963 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28277 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1232: /* AexprConst: func_name '(' func_arg_list opt_sort_clause opt_ignore_nulls ')' Sconst  */
#line 3970 "third_party/libpg_query/grammar/statements/select.y"
                                {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-6].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, ORDER BY, nor IGNORE NULLS.
					 */
					foreach(lc, (yyvsp[-4].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-3].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-3]))));
					if ((yyvsp[-2].boolean) != false)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have IGNORE NULLS"),
									 parser_errposition((yylsp[-2]))));


					t->typmods = (yyvsp[-4].list);
					t->location = (yylsp[-6]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 28319 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1233: /* AexprConst: ConstTypename Sconst  */
#line 4008 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 28327 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1234: /* AexprConst: ConstInterval '(' a_expr ')' opt_interval  */
#line 4012 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 28335 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1235: /* AexprConst: ConstInterval Iconst opt_interval  */
#line 4016 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28343 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1236: /* AexprConst: ConstInterval Sconst opt_interval  */
#line 4020 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 28351 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1237: /* AexprConst: TRUE_P  */
#line 4024 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 28359 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1238: /* AexprConst: FALSE_P  */
#line 4028 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 28367 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1239: /* AexprConst: NULL_P  */
#line 4032 "third_party/libpg_query/grammar/statements/select.y"
                                {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 28375 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1240: /* Iconst: ICONST  */
#line 4037 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 28381 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1241: /* type_function_name: IDENT  */
#line 4054 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28387 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1242: /* type_function_name: unreserved_keyword  */
#line 4055 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28393 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1243: /* type_function_name: type_func_name_keyword  */
#line 4056 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28399 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1244: /* function_name_token: IDENT  */
#line 4059 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28405 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1245: /* function_name_token: unreserved_keyword  */
#line 4060 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28411 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1246: /* function_name_token: func_name_keyword  */
#line 4061 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28417 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1247: /* type_name_token: IDENT  */
#line 4064 "third_party/libpg_query/grammar/statements/select.y"
                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28423 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1248: /* type_name_token: unreserved_keyword  */
#line 4065 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28429 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1249: /* type_name_token: type_name_keyword  */
#line 4066 "third_party/libpg_query/grammar/statements/select.y"
                                                                                        { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28435 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1250: /* any_name: ColId  */
#line 4069 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28441 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1251: /* any_name: ColId attrs  */
#line 4070 "third_party/libpg_query/grammar/statements/select.y"
                                                                { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 28447 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1252: /* attrs: '.' attr_name  */
#line 4074 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 28453 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1253: /* attrs: attrs '.' attr_name  */
#line 4076 "third_party/libpg_query/grammar/statements/select.y"
                                        { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 28459 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1254: /* opt_name_list: '(' name_list_opt_comma ')'  */
#line 4080 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = (yyvsp[-1].list); }
#line 28465 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1255: /* opt_name_list: %empty  */
#line 4081 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.list) = NIL; }
#line 28471 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1257: /* ColLabelOrString: ColLabel  */
#line 4088 "third_party/libpg_query/grammar/statements/select.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28477 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1258: /* ColLabelOrString: SCONST  */
#line 4089 "third_party/libpg_query/grammar/statements/select.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28483 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1259: /* PrepareStmt: PREPARE name prep_type_clause AS PreparableStmt  */
#line 8 "third_party/libpg_query/grammar/statements/prepare.y"
                                {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 28495 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1260: /* prep_type_clause: '(' type_list ')'  */
#line 18 "third_party/libpg_query/grammar/statements/prepare.y"
                                                        { (yyval.list) = (yyvsp[-1].list); }
#line 28501 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1261: /* prep_type_clause: %empty  */
#line 19 "third_party/libpg_query/grammar/statements/prepare.y"
                                                                        { (yyval.list) = NIL; }
#line 28507 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1267: /* CreateSchemaStmt: CREATE_P SCHEMA qualified_name OptSchemaEltList  */
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28530 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1268: /* CreateSchemaStmt: CREATE_P SCHEMA IF_P NOT EXISTS qualified_name OptSchemaEltList  */
#line 27 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28558 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1269: /* CreateSchemaStmt: CREATE_P OR REPLACE SCHEMA qualified_name OptSchemaEltList  */
#line 51 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					if ((yyvsp[-1].range)->catalogname) {
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA too many dots: expected \"catalog.schema\" or \"schema\""),
								 parser_errposition((yylsp[-1]))));
					}
					if ((yyvsp[-1].range)->schemaname) {
						n->catalogname = (yyvsp[-1].range)->schemaname;
						n->schemaname = (yyvsp[-1].range)->relname;
					} else {
						n->schemaname = (yyvsp[-1].range)->relname;
					}
					n->schemaElts = (yyvsp[0].list);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28581 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1270: /* OptSchemaEltList: OptSchemaEltList schema_stmt  */
#line 74 "third_party/libpg_query/grammar/statements/create_schema.y"
                                {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 28591 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1271: /* OptSchemaEltList: %empty  */
#line 80 "third_party/libpg_query/grammar/statements/create_schema.y"
                                { (yyval.list) = NIL; }
#line 28597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1276: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently opt_index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 11 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28624 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1277: /* IndexStmt: CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name ON qualified_name access_method_clause '(' index_params ')' opt_reloptions where_clause  */
#line 36 "third_party/libpg_query/grammar/statements/index.y"
                                {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 28651 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1278: /* access_method: ColId  */
#line 62 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28657 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1279: /* access_method_clause: USING access_method  */
#line 66 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28663 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1280: /* access_method_clause: %empty  */
#line 67 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 28669 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1281: /* opt_concurrently: CONCURRENTLY  */
#line 72 "third_party/libpg_query/grammar/statements/index.y"
                                                                                        { (yyval.boolean) = true; }
#line 28675 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1282: /* opt_concurrently: %empty  */
#line 73 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28681 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1283: /* opt_index_name: index_name  */
#line 78 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28687 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1284: /* opt_index_name: %empty  */
#line 79 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.str) = NULL; }
#line 28693 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1285: /* opt_reloptions: WITH reloptions  */
#line 83 "third_party/libpg_query/grammar/statements/index.y"
                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 28699 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1286: /* opt_reloptions: %empty  */
#line 84 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.list) = NIL; }
#line 28705 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1287: /* opt_unique: UNIQUE  */
#line 89 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = true; }
#line 28711 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1288: /* opt_unique: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/index.y"
                                                                                                { (yyval.boolean) = false; }
#line 28717 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1289: /* AlterObjectSchemaStmt: ALTER TABLE relation_expr SET SCHEMA name  */
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1290: /* AlterObjectSchemaStmt: ALTER TABLE IF_P EXISTS relation_expr SET SCHEMA name  */
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28743 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1291: /* AlterObjectSchemaStmt: ALTER SEQUENCE qualified_name SET SCHEMA name  */
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28756 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1292: /* AlterObjectSchemaStmt: ALTER SEQUENCE IF_P EXISTS qualified_name SET SCHEMA name  */
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28769 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1293: /* AlterObjectSchemaStmt: ALTER VIEW qualified_name SET SCHEMA name  */
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 28782 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1294: /* AlterObjectSchemaStmt: ALTER VIEW IF_P EXISTS qualified_name SET SCHEMA name  */
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
                                {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 28795 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1295: /* CheckPointStmt: FORCE CHECKPOINT opt_col_id  */
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28806 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1296: /* CheckPointStmt: CHECKPOINT opt_col_id  */
#line 13 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28817 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1297: /* opt_col_id: ColId  */
#line 22 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28823 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1298: /* opt_col_id: %empty  */
#line 23 "third_party/libpg_query/grammar/statements/checkpoint.y"
                                                { (yyval.str) = NULL; }
#line 28829 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1299: /* ExportStmt: EXPORT_P DATABASE Sconst copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = NULL;
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28844 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1300: /* ExportStmt: EXPORT_P DATABASE ColId TO Sconst copy_options  */
#line 20 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->database = (yyvsp[-3].str);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 28859 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1301: /* ImportStmt: IMPORT_P DATABASE Sconst  */
#line 34 "third_party/libpg_query/grammar/statements/export.y"
                                {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 28869 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1302: /* ExplainStmt: EXPLAIN ExplainableStmt  */
#line 10 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 28880 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1303: /* ExplainStmt: EXPLAIN analyze_keyword opt_verbose ExplainableStmt  */
#line 17 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 28894 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1304: /* ExplainStmt: EXPLAIN VERBOSE ExplainableStmt  */
#line 27 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 28905 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1305: /* ExplainStmt: EXPLAIN '(' explain_option_list ')' ExplainableStmt  */
#line 34 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 28916 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1306: /* opt_verbose: VERBOSE  */
#line 44 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = true; }
#line 28922 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1307: /* opt_verbose: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.boolean) = false; }
#line 28928 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1308: /* explain_option_arg: opt_boolean_or_string  */
#line 50 "third_party/libpg_query/grammar/statements/explain.y"
                                                { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 28934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1309: /* explain_option_arg: NumericOnly  */
#line 51 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 28940 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1310: /* explain_option_arg: %empty  */
#line 52 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.node) = NULL; }
#line 28946 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1341: /* NonReservedWord: IDENT  */
#line 90 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28952 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1342: /* NonReservedWord: unreserved_keyword  */
#line 91 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28958 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1343: /* NonReservedWord: other_keyword  */
#line 92 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 28964 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1344: /* NonReservedWord_or_Sconst: NonReservedWord  */
#line 97 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 28970 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1345: /* NonReservedWord_or_Sconst: Sconst  */
#line 98 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 28976 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1346: /* explain_option_list: explain_option_elem  */
#line 104 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 28984 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1347: /* explain_option_list: explain_option_list ',' explain_option_elem  */
#line 108 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 28992 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1348: /* analyze_keyword: ANALYZE  */
#line 115 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                {}
#line 28998 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1349: /* analyze_keyword: ANALYSE  */
#line 116 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                {}
#line 29004 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1350: /* opt_boolean_or_string: TRUE_P  */
#line 121 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "true"; }
#line 29010 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1351: /* opt_boolean_or_string: FALSE_P  */
#line 122 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "false"; }
#line 29016 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1352: /* opt_boolean_or_string: ON  */
#line 123 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                                { (yyval.str) = (char*) "on"; }
#line 29022 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1353: /* opt_boolean_or_string: NonReservedWord_or_Sconst  */
#line 129 "third_party/libpg_query/grammar/statements/explain.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29028 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1354: /* explain_option_elem: explain_option_name explain_option_arg  */
#line 135 "third_party/libpg_query/grammar/statements/explain.y"
                                {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 29036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1355: /* explain_option_name: NonReservedWord  */
#line 142 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1356: /* explain_option_name: analyze_keyword  */
#line 143 "third_party/libpg_query/grammar/statements/explain.y"
                                                        { (yyval.str) = (char*) "analyze"; }
#line 29048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1357: /* VariableSetStmt: SET set_rest  */
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_DEFAULT;
					(yyval.node) = (PGNode *) n;
				}
#line 29058 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1358: /* VariableSetStmt: SET LOCAL set_rest  */
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29068 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1359: /* VariableSetStmt: SET SESSION set_rest  */
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) n;
				}
#line 29078 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1360: /* VariableSetStmt: SET GLOBAL set_rest  */
#line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) n;
				}
#line 29088 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1361: /* set_rest: generic_set  */
#line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 29094 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1362: /* set_rest: var_name FROM CURRENT_P  */
#line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 29105 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1363: /* set_rest: TIME ZONE zone_value  */
#line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 29120 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1364: /* set_rest: SCHEMA Sconst  */
#line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 29132 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1365: /* generic_set: var_name TO var_list  */
#line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29144 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1366: /* generic_set: var_name '=' var_list  */
#line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 29156 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1367: /* var_value: a_expr  */
#line 90 "third_party/libpg_query/grammar/statements/variable_set.y"
                                { (yyval.node) = (yyvsp[0].node); }
#line 29162 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1368: /* zone_value: Sconst  */
#line 96 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29170 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1369: /* zone_value: IDENT  */
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 29178 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1370: /* zone_value: ConstInterval Sconst opt_interval  */
#line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 29197 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1371: /* zone_value: ConstInterval '(' Iconst ')' Sconst  */
#line 119 "third_party/libpg_query/grammar/statements/variable_set.y"
                                {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 29208 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1372: /* zone_value: NumericOnly  */
#line 125 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 29214 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1373: /* zone_value: DEFAULT  */
#line 126 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29220 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1374: /* zone_value: LOCAL  */
#line 127 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                                { (yyval.node) = NULL; }
#line 29226 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1375: /* var_list: var_value  */
#line 131 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                        { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 29232 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1376: /* var_list: var_list ',' var_value  */
#line 132 "third_party/libpg_query/grammar/statements/variable_set.y"
                                                                                { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 29238 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1377: /* LoadStmt: LOAD file_name  */
#line 8 "third_party/libpg_query/grammar/statements/load.y"
                                {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					n->repository = "";
					n->load_type = PG_LOAD_TYPE_LOAD;
					(yyval.node) = (PGNode *)n;
				}
#line 29250 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1378: /* LoadStmt: INSTALL file_name  */
#line 15 "third_party/libpg_query/grammar/statements/load.y"
                                                  {
                    PGLoadStmt *n = makeNode(PGLoadStmt);
                    n->filename = (yyvsp[0].str);
                    n->repository = "";
                    n->load_type = PG_LOAD_TYPE_INSTALL;
                    (yyval.node) = (PGNode *)n;
				}
#line 29262 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1379: /* LoadStmt: FORCE INSTALL file_name  */
#line 22 "third_party/libpg_query/grammar/statements/load.y"
                                                        {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[0].str);
                      n->repository = "";
                      n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29274 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1380: /* LoadStmt: INSTALL file_name FROM repo_path  */
#line 29 "third_party/libpg_query/grammar/statements/load.y"
                                                {
                      PGLoadStmt *n = makeNode(PGLoadStmt);
                      n->filename = (yyvsp[-2].str);
                      n->repository = (yyvsp[0].str);
                      n->load_type = PG_LOAD_TYPE_INSTALL;
                      (yyval.node) = (PGNode *)n;
                }
#line 29286 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1381: /* LoadStmt: FORCE INSTALL file_name FROM repo_path  */
#line 36 "third_party/libpg_query/grammar/statements/load.y"
                                                       {
                        PGLoadStmt *n = makeNode(PGLoadStmt);
                        n->filename = (yyvsp[-2].str);
                        n->repository = (yyvsp[0].str);
                        n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
                        (yyval.node) = (PGNode *)n;
                  }
#line 29298 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1382: /* file_name: Sconst  */
#line 45 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29304 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1383: /* file_name: ColId  */
#line 46 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29310 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1384: /* repo_path: Sconst  */
#line 48 "third_party/libpg_query/grammar/statements/load.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29316 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1385: /* repo_path: ColId  */
#line 49 "third_party/libpg_query/grammar/statements/load.y"
                                                { (yyval.str) = (yyvsp[0].str); }
#line 29322 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1386: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose  */
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29340 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1387: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose qualified_name opt_name_list  */
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-4].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29358 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1388: /* VacuumStmt: VACUUM opt_full opt_freeze opt_verbose AnalyzeStmt  */
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 29374 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1389: /* VacuumStmt: VACUUM '(' vacuum_option_list ')'  */
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 29386 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1390: /* VacuumStmt: VACUUM '(' vacuum_option_list ')' qualified_name opt_name_list  */
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 29400 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1391: /* vacuum_option_elem: analyze_keyword  */
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 29406 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1392: /* vacuum_option_elem: VERBOSE  */
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 29412 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1393: /* vacuum_option_elem: FREEZE  */
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 29418 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1394: /* vacuum_option_elem: FULL  */
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                        { (yyval.ival) = PG_VACOPT_FULL; }
#line 29424 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1395: /* vacuum_option_elem: IDENT  */
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
                                {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 29438 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1396: /* opt_full: FULL  */
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29444 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1397: /* opt_full: %empty  */
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29450 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1398: /* vacuum_option_list: vacuum_option_elem  */
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                        { (yyval.ival) = (yyvsp[0].ival); }
#line 29456 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1399: /* vacuum_option_list: vacuum_option_list ',' vacuum_option_elem  */
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 29462 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1400: /* opt_freeze: FREEZE  */
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                        { (yyval.boolean) = true; }
#line 29468 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1401: /* opt_freeze: %empty  */
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
                                                                                                { (yyval.boolean) = false; }
#line 29474 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1402: /* DeleteStmt: opt_with_clause DELETE_P FROM relation_expr_opt_alias using_clause where_or_current_clause returning_clause  */
#line 9 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 29488 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1403: /* DeleteStmt: TRUNCATE opt_table relation_expr_opt_alias  */
#line 19 "third_party/libpg_query/grammar/statements/delete.y"
                            {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[0].range);
					n->usingClause = NULL;
					n->whereClause = NULL;
					n->returningList = NULL;
					n->withClause = NULL;
					(yyval.node) = (PGNode *)n;
			    }
#line 29502 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1404: /* relation_expr_opt_alias: relation_expr  */
#line 32 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					(yyval.range) = (yyvsp[0].range);
				}
#line 29510 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1405: /* relation_expr_opt_alias: relation_expr ColId  */
#line 36 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 29521 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1406: /* relation_expr_opt_alias: relation_expr AS ColId  */
#line 43 "third_party/libpg_query/grammar/statements/delete.y"
                                {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 29532 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1407: /* where_or_current_clause: WHERE a_expr  */
#line 53 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                        { (yyval.node) = (yyvsp[0].node); }
#line 29538 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1408: /* where_or_current_clause: %empty  */
#line 54 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.node) = NULL; }
#line 29544 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1409: /* using_clause: USING from_list_opt_comma  */
#line 60 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                        { (yyval.list) = (yyvsp[0].list); }
#line 29550 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1410: /* using_clause: %empty  */
#line 61 "third_party/libpg_query/grammar/statements/delete.y"
                                                                                                { (yyval.list) = NIL; }
#line 29556 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1411: /* AnalyzeStmt: analyze_keyword opt_verbose  */
#line 10 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 29570 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1412: /* AnalyzeStmt: analyze_keyword opt_verbose qualified_name opt_name_list  */
#line 20 "third_party/libpg_query/grammar/statements/analyze.y"
                                {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 29584 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1413: /* AttachStmt: ATTACH opt_database Sconst opt_database_alias copy_options  */
#line 8 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29597 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1414: /* AttachStmt: ATTACH IF_P NOT EXISTS opt_database Sconst opt_database_alias copy_options  */
#line 17 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGAttachStmt *n = makeNode(PGAttachStmt);
					n->path = (yyvsp[-2].str);
					n->name = (yyvsp[-1].str);
					n->options = (yyvsp[0].list);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					(yyval.node) = (PGNode *)n;
				}
#line 29610 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1415: /* DetachStmt: DETACH opt_database IDENT  */
#line 29 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = false;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29621 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1416: /* DetachStmt: DETACH DATABASE IF_P EXISTS IDENT  */
#line 36 "third_party/libpg_query/grammar/statements/attach.y"
                                {
					PGDetachStmt *n = makeNode(PGDetachStmt);
					n->missing_ok = true;
					n->db_name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 29632 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1417: /* opt_database: DATABASE  */
#line 44 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                {}
#line 29638 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1418: /* opt_database: %empty  */
#line 45 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                {}
#line 29644 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1419: /* opt_database_alias: AS ColId  */
#line 49 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = (yyvsp[0].str); }
#line 29650 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1420: /* opt_database_alias: %empty  */
#line 50 "third_party/libpg_query/grammar/statements/attach.y"
                                                                                                        { (yyval.str) = NULL; }
#line 29656 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1421: /* VariableResetStmt: RESET reset_rest  */
#line 3 "third_party/libpg_query/grammar/statements/variable_reset.y"
                        {
				(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_DEFAULT;
				(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
			}
#line 29665 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1422: /* VariableResetStmt: RESET LOCAL reset_rest  */
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_LOCAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29674 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1423: /* VariableResetStmt: RESET SESSION reset_rest  */
#line 13 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_SESSION;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29683 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1424: /* VariableResetStmt: RESET GLOBAL reset_rest  */
#line 18 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					(yyvsp[0].vsetstmt)->scope = VAR_SET_SCOPE_GLOBAL;
					(yyval.node) = (PGNode *) (yyvsp[0].vsetstmt);
				}
#line 29692 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1425: /* generic_reset: var_name  */
#line 27 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 29703 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1426: /* generic_reset: ALL  */
#line 34 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 29713 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1427: /* reset_rest: generic_reset  */
#line 43 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                                                                        { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 29719 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1428: /* reset_rest: TIME ZONE  */
#line 45 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 29730 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1429: /* reset_rest: TRANSACTION ISOLATION LEVEL  */
#line 52 "third_party/libpg_query/grammar/statements/variable_reset.y"
                                {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 29741 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1430: /* VariableShowStmt: show_or_describe SelectStmt  */
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29753 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1431: /* VariableShowStmt: SUMMARIZE SelectStmt  */
#line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
                                        {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29765 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1432: /* VariableShowStmt: SUMMARIZE table_id  */
#line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 1;
				(yyval.node) = (PGNode *) n;
			}
#line 29776 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1433: /* VariableShowStmt: show_or_describe table_id  */
#line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (yyvsp[0].str);
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29787 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1434: /* VariableShowStmt: show_or_describe TIME ZONE  */
#line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "timezone";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29798 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1435: /* VariableShowStmt: show_or_describe TRANSACTION ISOLATION LEVEL  */
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "transaction_isolation";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29809 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1436: /* VariableShowStmt: show_or_describe ALL opt_tables  */
#line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29820 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1437: /* VariableShowStmt: show_or_describe  */
#line 53 "third_party/libpg_query/grammar/statements/variable_show.y"
                        {
				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
				n->name = (char*) "__show_tables_expanded";
				n->is_summary = 0;
				(yyval.node) = (PGNode *) n;
			}
#line 29831 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1442: /* var_name: ColId  */
#line 65 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = (yyvsp[0].str); }
#line 29837 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1443: /* var_name: var_name '.' ColId  */
#line 67 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29843 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1444: /* table_id: ColId  */
#line 70 "third_party/libpg_query/grammar/statements/variable_show.y"
                                                                                { (yyval.str) = psprintf("\"%s\"", (yyvsp[0].str)); }
#line 29849 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1445: /* table_id: table_id '.' ColId  */
#line 72 "third_party/libpg_query/grammar/statements/variable_show.y"
                                { (yyval.str) = psprintf("%s.\"%s\"", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 29855 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1446: /* CallStmt: CALL_P func_application  */
#line 7 "third_party/libpg_query/grammar/statements/call.y"
                                {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 29865 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1447: /* ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 10 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29881 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1448: /* ViewStmt: CREATE_P OptTemp VIEW IF_P NOT EXISTS qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 23 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_IGNORE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29897 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1449: /* ViewStmt: CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions AS SelectStmt opt_check_option  */
#line 36 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 29913 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1450: /* ViewStmt: CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 49 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_ERROR_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29934 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1451: /* ViewStmt: CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions AS SelectStmt opt_check_option  */
#line 67 "third_party/libpg_query/grammar/statements/view.y"
                                {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->onconflict = PG_REPLACE_ON_CONFLICT;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 29955 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1452: /* opt_check_option: WITH CHECK_P OPTION  */
#line 87 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29961 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1453: /* opt_check_option: WITH CASCADED CHECK_P OPTION  */
#line 88 "third_party/libpg_query/grammar/statements/view.y"
                                                { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 29967 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1454: /* opt_check_option: WITH LOCAL CHECK_P OPTION  */
#line 89 "third_party/libpg_query/grammar/statements/view.y"
                                                        { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 29973 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1455: /* opt_check_option: %empty  */
#line 90 "third_party/libpg_query/grammar/statements/view.y"
                                                                { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 29979 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1456: /* CreateAsStmt: CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 12 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_ERROR_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 29996 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1457: /* CreateAsStmt: CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data  */
#line 25 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30013 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1458: /* CreateAsStmt: CREATE_P OR REPLACE OptTemp TABLE create_as_target AS SelectStmt opt_with_data  */
#line 38 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 30030 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1459: /* opt_with_data: WITH DATA_P  */
#line 54 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30036 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1460: /* opt_with_data: WITH NO DATA_P  */
#line 55 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                        { (yyval.boolean) = false; }
#line 30042 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1461: /* opt_with_data: %empty  */
#line 56 "third_party/libpg_query/grammar/statements/create_as.y"
                                                                                                { (yyval.boolean) = true; }
#line 30048 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;

  case 1462: /* create_as_target: qualified_name opt_column_list OptWith OnCommitOption  */
#line 62 "third_party/libpg_query/grammar/statements/create_as.y"
                                {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 30062 "third_party/libpg_query/grammar/grammar_out.cpp"
    break;


#line 30066 "third_party/libpg_query/grammar/grammar_out.cpp"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", YY_CAST (yysymbol_kind_t, yyr1[yyn]), &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYSYMBOL_YYEMPTY : YYTRANSLATE (yychar);
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
    }

  yyerror_range[1] = yylloc;
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;
  ++yynerrs;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  /* Pop stack until we find a state that shifts the error token.  */
  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYSYMBOL_YYerror;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYSYMBOL_YYerror)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  YY_ACCESSING_SYMBOL (yystate), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  ++yylsp;
  YYLLOC_DEFAULT (*yylsp, yyerror_range, 2);

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", YY_ACCESSING_SYMBOL (yyn), yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturnlab;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturnlab;


/*-----------------------------------------------------------.
| yyexhaustedlab -- YYNOMEM (memory exhaustion) comes here.  |
`-----------------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  goto yyreturnlab;


/*----------------------------------------------------------.
| yyreturnlab -- parsing is finished, clean up and return.  |
`----------------------------------------------------------*/
yyreturnlab:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  YY_ACCESSING_SYMBOL (+*yyssp), yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif

  return yyresult;
}

#line 83 "third_party/libpg_query/grammar/statements/create_as.y"


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int *seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	if (seed) {
		n->has_seed = true;
		n->seed = *seed;
	}
	n->location = location;

	return (PGNode *)n;
}

/* makeLimitPercent()
 * Make limit percent node
 */
static PGNode *
makeLimitPercent(PGNode *limit_percent) {
	PGLimitPercent *n = makeNode(PGLimitPercent);

	n->limit_percent = limit_percent;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	p->name = NULL;
	return (PGNode *) p;
}

/* makeNamedParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeNamedParamRef(char *name, int location)
{
	PGParamRef *p = (PGParamRef *)makeParamRef(0, location);
	p->name = name;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make1(makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
